/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:49:08 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<Properties, LinkedList<SQLTransientException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) mapIterator0, (Class<Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      IteratorUtils.get((Iterator<Properties>) singletonListIterator0, 0);
      IteratorUtils.toListIterator((Iterator<? extends Properties>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      IteratorUtils.getIterator(iterator0);
      Vector<ClientInfoStatus> vector0 = new Vector<ClientInfoStatus>(2815, (-1691));
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      vector0.add(clientInfoStatus0);
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(vector0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[3];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      Transformer<ClientInfoStatus, String> transformer0 = InvokerTransformer.invokerTransformer("KK'7NJ0Gg");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) resettableIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, "KK'7NJ0Gg", "KK'7NJ0Gg", "KK'7NJ0Gg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'KK'7NJ0Gg' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      String string0 = "";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLClientInfoException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      int int0 = 475;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("", "", 475, sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("[", (String) null, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      String string1 = "Equator must not be null.";
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("Equator must not be null.", "", 475);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLNonTransientConnectionException, String> factoryTransformer0 = new FactoryTransformer<SQLNonTransientConnectionException, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JX[BK';j$34B", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractSortedMapDecorator", ":$#iX#x0$J6vmni<XT", 2420, hashtable0);
      sQLClientInfoException1.addSuppressed(sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) objectArrayListIterator0, (Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      EmptyListIterator.resettableEmptyListIterator();
      int int0 = 1203;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1203, (-3931));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(iterator0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "k:2a";
      stringArray0[1] = "";
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("k:2a");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) iterator0, (Transformer<? super ServiceLoader<TreeSet>, String>) transformer0, ">R-rGj@!}", (String) null, "Y#XV]`c2mg_W\" Ukik");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 567);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>((Properties) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate1, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) singletonListIterator0, (Transformer<? super ServiceLoader<TreeSet>, String>) ifTransformer0, "Y#XV]`c2mg_W\" Ukik", "W6z?U0:YfSJ~)aDI", "Estimated size must be greater than 0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>((Properties) null);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) singletonListIterator0, (Predicate<? super Properties>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 845;
      intArray0[1] = 1671;
      intArray0[2] = (-2988);
      intArray0[3] = 32;
      intArray0[4] = (-279);
      intArray0[5] = 46;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("B lEkvY1y1V8j[Zq>=", "B lEkvY1y1V8j[Zq>=", intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientException) sQLTransientConnectionException0);
      IteratorUtils.contains((Iterator<SQLTransientException>) listIterator0, (Object) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      int int0 = 0;
      Properties properties0 = new Properties();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Gpv:0n'E");
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) closure0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("Closures must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=closures must not be null
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Properties properties0 = new Properties();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(stack0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) loopingListIterator0);
      loopingListIterator0.add((SQLNonTransientConnectionException) null);
      // Undeclared exception!
      IteratorUtils.toString(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 125);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 9);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[5] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[6] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[7] = class7;
      Class<SQLDataException> class8 = SQLDataException.class;
      classArray0[8] = class8;
      InvokerTransformer<SQLDataException, SQLDataException> invokerTransformer0 = new InvokerTransformer<SQLDataException, SQLDataException>((String) null, classArray0, classArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) invokerTransformer0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator1, (Predicate<? super DataTruncation>) identityPredicate0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 781);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(list0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      arrayList0.toArray(sQLClientInfoExceptionArray0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) arrayList0);
      arrayList0.add((DataTruncation) null);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) mapIterator1);
      IteratorUtils.getIterator(sQLClientInfoExceptionArray0[3]);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(resettableListIterator0);
      Closure<Boolean> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Boolean>) listIteratorWrapper0, (Closure<? super Boolean>) closure0);
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Closure<Boolean> closure0 = ExceptionClosure.exceptionClosure();
      Boolean[] booleanArray0 = new Boolean[1];
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      PredicateTransformer<Stack<SQLClientInfoException>> predicateTransformer0 = new PredicateTransformer<Stack<SQLClientInfoException>>(predicate1);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      Boolean boolean0 = predicateTransformer0.transform(stack0);
      booleanArray0[0] = boolean0;
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Boolean>) objectArrayIterator0, (Closure<? super Boolean>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      IdentityPredicate<Object> identityPredicate1 = new IdentityPredicate<Object>(clientInfoStatusArray0[0]);
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) identityPredicate1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(resettableListIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      ResettableIterator<ClientInfoStatus> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      IteratorUtils.arrayIterator(clientInfoStatusArray0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super BatchUpdateException>) identityPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("(0Jg>,bH=|jN!h[Xt");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("(0Jg>,bH=|jN!h[Xt");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("YD");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("(0Jg>,bH=|jN!h[Xt");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("NodeList must not be null");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Properties properties0 = new Properties();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(".X7[");
      IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) null, (Transformer<? super ServiceLoader<TreeSet>, String>) constantTransformer0, "Estimated size must be greater than 0", "j%\"t", "U%/F0uS51H#5");
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      closureArray0[0] = closure0;
      Closure<Object> closure1 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      closureArray0[1] = closure1;
      SwitchClosure<InstanceofPredicate> switchClosure0 = new SwitchClosure<InstanceofPredicate>(predicateArray0, closureArray0, closure0);
      IteratorUtils.apply((Iterator<InstanceofPredicate>) singletonListIterator0, (Closure<? super InstanceofPredicate>) switchClosure0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[4];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.get((Iterator<Properties>) listIterator0, 0);
      String string0 = ".Q8*1;W^0w+S?M M";
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(".Q8*1;W^0w+S?M M");
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.fillInStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "|%w1$;(xNXH\"._1z10", 523);
      sQLTransientConnectionException0.addSuppressed(sQLRecoverableException0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, (Iterator<? extends BatchUpdateException>) orderedIterator0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator1, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      EmptyListIterator.resettableEmptyListIterator();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<Object, String> transformer0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) resettableListIterator0, (Transformer<? super ServiceLoader<TreeSet>, String>) null, "", "", "Y#XV]`c2mg_W\" Ukik");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.emptyListIterator();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(identityPredicate0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[6];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(resettableListIterator0);
      Closure<Boolean> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Boolean>) listIteratorWrapper0, (Closure<? super Boolean>) closure0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(":!Ba??^dMPt.T");
      Iterator<ClientInfoStatus> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super ClientInfoStatus>) equalPredicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.fillInStackTrace();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.emptyListIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[9];
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      clientInfoStatusArray0[3] = clientInfoStatus1;
      clientInfoStatusArray0[4] = clientInfoStatus2;
      clientInfoStatusArray0[5] = clientInfoStatus1;
      clientInfoStatusArray0[6] = clientInfoStatus2;
      clientInfoStatusArray0[7] = clientInfoStatus1;
      clientInfoStatusArray0[8] = clientInfoStatus1;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) resettableIterator0, (Transformer<? super ServiceLoader<TreeSet>, String>) transformer0, (String) null, "P1Q2O+hn0!V`H'R/x4", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayList0);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) iterator0, (Transformer<? super ServiceLoader<TreeSet>, String>) constantTransformer0, "s before the start of the array. ", "Estimated size must be greater than 0", "Y#XV]`c2mg_W\" Ukik");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      Properties properties0 = new Properties();
      EmptyListIterator.resettableEmptyListIterator();
      OrderedMapIterator<DataTruncation, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLTimeoutException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      stack0.removeAllElements();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) resettableIterator0, (Transformer<? super ServiceLoader<TreeSet>, String>) constantTransformer0, "", "M?(t\"k7", "");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) anyPredicate0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTimeoutException0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[2]);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) notPredicate0);
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[4] = predicate2;
      NotPredicate<Object> notPredicate1 = new NotPredicate<Object>(predicateArray0[1]);
      predicateArray0[5] = (Predicate<Object>) notPredicate1;
      Predicate<Object> predicate3 = NullPredicate.nullPredicate();
      predicateArray0[6] = predicate3;
      IteratorUtils.arrayIterator(predicateArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLNonTransientConnectionException0);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLTimeoutException>(mapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) abstractMapIteratorDecorator0, (Predicate<? super DataTruncation>) identityPredicate0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-962));
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) listIterator1);
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) listIterator1, (long) (-962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      Properties properties0 = new Properties();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableListIterator0, (Object) iterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0);
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>((Properties) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) singletonListIterator0);
      int int0 = 0;
      IteratorUtils.get((Iterator<Properties>) listIterator0, 0);
      String string0 = "org.apache.commons.collections4.iterators.UnmodifiableIterator";
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.iterators.UnmodifiableIterator");
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      IteratorUtils.apply((Iterator<Properties>) listIterator0, (Closure<? super Properties>) closure0);
      Locale.LanguageRange[] locale_LanguageRangeArray0 = new Locale.LanguageRange[7];
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("q:01NL:0[y|h8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=q:01nl:0[y|h8
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      NOPClosure.nopClosure();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation((-5611), true, true, (-5611), 523);
      linkedList0.add(dataTruncation0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      stack0.removeAllElements();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) resettableIterator0, (Transformer<? super ServiceLoader<TreeSet>, String>) constantTransformer0, "(8K,+VoRf,", "org.apache.commons.collections4.functors.SwitchClosure", "org.apache.commons.collections4.functors.SwitchClosure");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "$f  a0,`n9";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("$f  a0,`n9");
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      NOPClosure.nopClosure();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      stack0.removeAllElements();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate1 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator1 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator1, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      NOPClosure.nopClosure();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      linkedList0.poll();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      stack0.removeAllElements();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("[/WBwV[y!Qu");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) resettableIterator0, (Transformer<? super ServiceLoader<TreeSet>, String>) constantTransformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0, defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      predicateArray0[5] = (Predicate<Object>) equalPredicate0;
      predicateArray0[6] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<TreeSet<Object>>) null, (Predicate<? super TreeSet<Object>>) predicate0);
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Transformer<Object, Locale.Category> transformer0 = ConstantTransformer.constantTransformer(locale_Category0);
      IteratorUtils.transformedIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Transformer<? super InstanceofPredicate, ? extends Locale.Category>) transformer0);
      PredicateTransformer<Stack<SQLClientInfoException>> predicateTransformer0 = new PredicateTransformer<Stack<SQLClientInfoException>>(predicateArray0[1]);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      Stack<SQLClientInfoException> stack1 = new Stack<SQLClientInfoException>();
      predicateTransformer0.transform(stack1);
      IteratorUtils.getIterator((Object) null);
      Stack<String> stack2 = new Stack<String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.isSupported("", "");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("MapIterator must not be null");
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{wL_");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("{wL_", ":>TRAq77'\"", "org.apache.commons.collections4.IteratorUtils", 46);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("{wL_", "'G<1[8%Oj5,Y: _D8", "org.apache.commons.collections4.IteratorUtils", 587);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "", "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", 46);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "{wL_", "{wL_", 587);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", "'G<1[8%Oj5,Y: _D8", "&Ka", 587);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement(":>TRAq77'\"", ":>TRAq77'\"", "H5jG7[x1HN+s", 46);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement(":>TRAq77'\"", "", "", 16);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      sQLTimeoutException0.addSuppressed(sQLNonTransientConnectionException0);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      NOPClosure.nopClosure();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      linkedList0.poll();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      stack0.removeAllElements();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<ServiceLoader<TreeSet>>) orderedIterator0, (Transformer<? super ServiceLoader<TreeSet>, String>) constantTransformer0, "", "", "");
      IteratorUtils.singletonIterator((Object) hashMap0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)26;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      NOPClosure.nopClosure();
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      iIOMetadataNode0.getNextSibling();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.singletonIterator(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1752, (int) 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NOPClosure.nopClosure();
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      iIOMetadataNode0.getNextSibling();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.singletonIterator(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation(935, false, false, 935, 46);
      IteratorUtils.singletonListIterator(dataTruncation0);
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-117), false, false, (-117), (-117));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator1 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator1);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      Class<Properties> class0 = Properties.class;
      IteratorUtils.toArray((Iterator<? extends Properties>) singletonIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableListIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ConstantTransformer<InstanceofPredicate, Locale.Category> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, Locale.Category>(locale_Category0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      int int0 = 10;
      ResettableIterator<Properties> resettableIterator0 = new SingletonListIterator<Properties>(properties2);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) resettableIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-112), false, false, (-112), (-112));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator1);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>(100);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      arrayList1.toArray(sQLClientInfoExceptionArray0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) arrayList1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      IteratorUtils.emptyIterator();
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLClientInfoException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super BatchUpdateException, ? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator1 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("r", "r", (-699), hashtable0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashtable0.put("", clientInfoStatus0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      sQLClientInfoException2.fillInStackTrace();
      iteratorArray0[0] = iterator0;
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      iteratorArray0[1] = iterator1;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) iterator1, (Predicate<? super SQLClientInfoException>) equalPredicate0);
      iteratorArray0[2] = iterator2;
      IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      IteratorUtils.getIterator(iterator1);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-112), false, false, (-112), (-112));
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      arrayList0.add(iIOMetadataNode0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Integer integer0 = new Integer((-112));
      StringTokenizer stringTokenizer0 = new StringTokenizer("prefix may not be null");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLException sQLException0 = new SQLException("");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLException0, defaultEquator0);
      IteratorUtils.find((Iterator<TreeSet<Object>>) resettableIterator0, (Predicate<? super TreeSet<Object>>) equalPredicate0);
      EmptyIterator.emptyIterator();
      PredicateTransformer<Stack<SQLClientInfoException>> predicateTransformer0 = new PredicateTransformer<Stack<SQLClientInfoException>>(equalPredicate0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(")`%_");
      LinkedHashSet<SQLTransientException>[] linkedHashSetArray0 = (LinkedHashSet<SQLTransientException>[]) Array.newInstance(LinkedHashSet.class, 1);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedHashSetArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayList0);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) singletonListIterator0);
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      arrayList0.containsAll(hashSet0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) listIterator0);
      arrayList0.add(iIOMetadataNode0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("HR");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("PrototypeCloneFactory: Clone method must be public");
      String string0 = "org.apache.commons.collections4.IteratorUtils";
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<Locale.Category, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.Category, StringTokenizer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends StringTokenizer>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<Locale.Category>) orderedMapIterator1;
      Iterator<Locale.Category> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Locale.Category>) orderedMapIterator1);
      iteratorArray0[2] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IteratorUtils.size((Iterator<?>) null);
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-112), false, false, (-112), (-112));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator1);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      arrayList0.toArray(sQLClientInfoExceptionArray0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) arrayList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Boolean> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Boolean>) orderedIterator0, (Closure<? super Boolean>) closure0);
      OrderedMapIterator<Properties, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, StringTokenizer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends StringTokenizer>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) orderedMapIterator1, (-3023));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -3023
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NOPClosure.nopClosure();
      String string0 = "suffix may not be null";
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "suffix may not be null", 4, intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]", "B", batchUpdateException0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLInvalidAuthorizationSpecException0);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) identityPredicate0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", 1, sQLRecoverableException0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) identityPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("$f  a0,`n9");
      iIOMetadataNode0.isSupported("$f  a0,`n9", "$f  a0,`n9");
      int int0 = (-1844);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4Y", "$f  a0,`n9", (-1844), (int[]) null, sQLTransientConnectionException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      batchUpdateException0.setNextException(sQLTransientConnectionException0);
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) identityPredicate0);
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>("$f  a0,`n9", (-2539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<SQLInvalidAuthorizationSpecException, SQLDataException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLDataException>();
      Enumeration<SQLDataException> enumeration0 = hashtable0.elements();
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTimeoutException0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("$f  a0,`n9");
      iIOMetadataNode0.isSupported("$f  a0,`n9", "$f  a0,`n9");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("$f  a0,`n9");
      IteratorUtils.nodeListIterator(nodeList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(identityPredicate0);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) equalPredicate0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("o");
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      arrayList0.add(iIOMetadataNode0);
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      ArrayList<IIOMetadataNode> arrayList1 = new ArrayList<IIOMetadataNode>();
      arrayList1.add(iIOMetadataNode0);
      Stack<SQLException> stack1 = new Stack<SQLException>();
      OrderedMapIterator<SQLNonTransientConnectionException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-112), false, false, (-112), (-112));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) enumeration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(identityPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nonePredicate0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IdentityPredicate<Object> identityPredicate1 = new IdentityPredicate<Object>(identityPredicate0);
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(notPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[W+t", sQLTransientConnectionException0);
      EqualPredicate<Object> equalPredicate2 = new EqualPredicate<Object>(onePredicate0);
      NotNullPredicate.notNullPredicate();
      ExceptionPredicate.exceptionPredicate();
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 202;
      intArray0[1] = 202;
      intArray0[2] = 202;
      intArray0[3] = 202;
      intArray0[4] = 202;
      intArray0[5] = 202;
      intArray0[6] = 202;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" +jkD", "_]x_Xcr\"B(%@|zV{.", 202, intArray0, sQLTransientConnectionException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      IteratorUtils.contains((Iterator<Properties>) null, (Object) equalPredicate0);
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(predicate0, 202);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("o");
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      arrayList0.add(iIOMetadataNode0);
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      ArrayList<IIOMetadataNode> arrayList1 = new ArrayList<IIOMetadataNode>();
      arrayList1.add(iIOMetadataNode0);
      Stack<SQLException> stack1 = new Stack<SQLException>();
      OrderedMapIterator<SQLNonTransientConnectionException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) identityPredicate0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0);
      Properties properties0 = new Properties();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformerPredicate0, defaultEquator0);
      Transformer<Object, Properties> transformer1 = InvokerTransformer.invokerTransformer("[]");
      Transformer<Object, Properties> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends Properties>) transformer1, (Transformer<? super Object, ? extends Properties>) transformer1);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer2);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Properties>) equalPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[]' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 0, 0);
      IteratorUtils.emptyListIterator();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, ";5[1o4ogs=p(^t`", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(";5[1o4ogs=p(^t`", ";5[1o4ogs=p(^t`", map0, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("Estimated size must be greater than 0", "Estimated size must be greater than 0", 0, map0, sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException1);
      sQLClientInfoException0.addSuppressed(sQLClientInfoException2);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException3;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException1;
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableListIterator1);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Vector<Boolean>[] vectorArray0 = (Vector<Boolean>[]) Array.newInstance(Vector.class, 4);
      Vector<Boolean> vector0 = new Vector<Boolean>();
      vectorArray0[0] = vector0;
      Stack<Boolean> stack0 = new Stack<Boolean>();
      vectorArray0[1] = (Vector<Boolean>) stack0;
      Stack<Boolean> stack1 = new Stack<Boolean>();
      vectorArray0[2] = (Vector<Boolean>) stack1;
      Vector<Boolean> vector1 = new Vector<Boolean>();
      vectorArray0[3] = vector1;
      IteratorUtils.arrayIterator(vectorArray0, 0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator1, (Predicate<? super DataTruncation>) identityPredicate0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 781);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(list0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      arrayList0.toArray(sQLClientInfoExceptionArray0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) arrayList0);
      IteratorUtils.getIterator(sQLClientInfoExceptionArray0[3]);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      Iterator<Boolean> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("T0@1nL<?mE}!j=%-t,'", "", (-2193));
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.size(resettableIterator0);
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedMapIterator1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      EmptyMapIterator.emptyMapIterator();
      IdentityPredicate<SQLException> identityPredicate1 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Predicate must not be null", sQLTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, "Predicate must not be null", (-2909), sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Predicate must not be null", "(,DC:(wOv.{%gIV,0");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Predicate must not be null");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLWarning0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "lO0JW", (-59), sQLNonTransientConnectionException2);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("7]#GLFI.S3xv`kUmj+", "y5", (-59), sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException((String) null);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("Predicate must not be null");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("y5", "7]#GLFI.S3xv`kUmj+", sQLNonTransientConnectionException1);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("y5", (String) null, (-59), sQLNonTransientException0);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("transformer may not be null", sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException((String) null, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-2909));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("N5wm7", ";5[1o4ogs=p(^t`", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", ";5[1o4ogs=p(^t`", 0, hashMap0, sQLClientInfoExceptionArray0[0]);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      sQLClientInfoException1.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException2;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (long) 0);
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException2.forEach(consumer0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = UniquePredicate.uniquePredicate();
      SQLClientInfoException sQLClientInfoException3 = IteratorUtils.find((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator((SQLIntegrityConstraintViolationException) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) null);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.getIterator(predicate0);
      IteratorUtils.getIterator(sQLClientInfoException3);
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, 0);
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator1);
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends IIOMetadataNode>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, IIOMetadataNode>(orderedMapIterator1);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) null, 1L, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-112), false, false, (-112), (-112));
      IteratorUtils.singletonListIterator(dataTruncation0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      DataTruncation dataTruncation0 = new DataTruncation((-112), false, false, (-112), (-112));
      dataTruncation0.getStackTrace();
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) singletonListIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLException sQLException0 = new SQLException("");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLException0, defaultEquator0);
      IteratorUtils.find((Iterator<TreeSet<Object>>) resettableIterator0, (Predicate<? super TreeSet<Object>>) equalPredicate0);
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Transformer<Object, Locale.Category> transformer0 = ConstantTransformer.constantTransformer(locale_Category0);
      IteratorUtils.transformedIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Transformer<? super InstanceofPredicate, ? extends Locale.Category>) transformer0);
      PredicateTransformer<Stack<SQLClientInfoException>> predicateTransformer0 = new PredicateTransformer<Stack<SQLClientInfoException>>(equalPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.isSupported("", "");
      iIOMetadataNode0.getElementsByTagName("");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Boolean> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Boolean>) orderedIterator0, (Closure<? super Boolean>) closure0);
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("");
      IteratorUtils.nodeListIterator(nodeList0);
      int int0 = 781;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) null, 781);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getUserObject();
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>(10);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(vector0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("org.apache.commons.collections4.functors.TruePredicate");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNode0.isSupported("o&h+iw)Vusr|3[jQh@", "o&h+iw)Vusr|3[jQh@");
      iIOMetadataNode1.getElementsByTagName("o&h+iw)Vusr|3[jQh@");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("t9!($V", intArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.functors.TruePredicate", batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(32, false, true, 2, (-1509), sQLTransientException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) resettableIterator0, 10);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) loopingListIterator0, (Iterator<? extends String>) loopingListIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ArrayList<SQLSyntaxErrorException> arrayList1 = new ArrayList<SQLSyntaxErrorException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLFeatureNotSupportedException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      UniquePredicate.uniquePredicate();
      Iterator<SQLClientInfoException> iterator0 = null;
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.objectGraphIterator((SQLIntegrityConstraintViolationException) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) null);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.getIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, (-279), 1573);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      arrayList0.add(iIOMetadataNode0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Integer integer0 = new Integer(781);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode1);
      IteratorUtils.emptyListIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLRecoverableException> abstractMapIteratorDecorator0 = null;
      try {
        abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLRecoverableException>((MapIterator<DataTruncation, SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.sort((Comparator<? super String>) null);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      arrayList0.add("");
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) loopingListIterator0, (Iterator<? extends String>) loopingListIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      ArrayList<SQLSyntaxErrorException>[] arrayListArray0 = (ArrayList<SQLSyntaxErrorException>[]) Array.newInstance(ArrayList.class, 2);
      ArrayList<SQLSyntaxErrorException> arrayList1 = new ArrayList<SQLSyntaxErrorException>();
      arrayListArray0[0] = arrayList1;
      ArrayList<SQLSyntaxErrorException> arrayList2 = new ArrayList<SQLSyntaxErrorException>();
      arrayListArray0[1] = arrayList2;
      DataTruncation dataTruncation0 = new DataTruncation((-1258), true, false, (-1258), (-3036));
      DataTruncation dataTruncation1 = new DataTruncation(781, true, true, (-1258), (-1258));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) arrayList2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "PrototypeCloneFactory: Clone method must be public";
      OrderedMapIterator<Locale.Category, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends BatchUpdateException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Locale.Category, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, BatchUpdateException>(orderedMapIterator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      AbstractMapIteratorDecorator<Locale.Category, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.Category, BatchUpdateException>(abstractOrderedMapIteratorDecorator0);
      MapIterator<Locale.Category, SQLException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ? extends SQLException>) abstractMapIteratorDecorator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) orderedMapIterator0, (Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends Locale.Category>) mapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, String> abstractOrderedMapIteratorDecorator1 = null;
      try {
        abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, String>((OrderedMapIterator<SQLSyntaxErrorException, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("PrototypeCloneFactory: Clone method must be public");
      String string0 = "org.apache.commons.collections4.IteratorUtils";
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<Locale.Category, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.Category, StringTokenizer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends StringTokenizer>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<Locale.Category>) orderedMapIterator1;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) orderedMapIterator1, (Iterator<? extends Locale.Category>) resettableIterator0);
      iteratorArray0[1] = (Iterator<Locale.Category>) zippingIterator0;
      Iterator<Locale.Category> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Locale.Category>) orderedMapIterator1);
      iteratorArray0[2] = iterator0;
      ZippingIterator<Locale.Category> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Locale.Category>) zippingIterator1, (-520L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 781);
      SQLException sQLException0 = new SQLException("", sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0, sQLException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLRecoverableException0);
      sQLRecoverableException0.fillInStackTrace();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      String string0 = "A;Qs_:AaT[3:";
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("A;Qs_:AaT[3:", "", sQLException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException1);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "", sQLTransactionRollbackException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException3);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      arrayList0.add(iIOMetadataNode0);
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) loopingIterator0);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      arrayList0.removeAll(hashSet0);
      arrayList0.add(iIOMetadataNode0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null, (Collection<? super SQLNonTransientConnectionException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getUserObject();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<IIOMetadataNode, String> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends String>) mapIterator0);
      MapIterator<IIOMetadataNode, String> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) mapIterator2);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category0, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ek_:~?W%GkqlCqGrK", sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Ek_:~?W%GkqlCqGrK");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"%U!=nxhA!0~:D+F", sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("l=:B|V_@v69QztqZL");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("N5wm7", ";5[1o4ogs=p(^t`", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "_cU'r=My0hQ(M", 0, hashMap0, sQLClientInfoExceptionArray0[0]);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      sQLClientInfoException1.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException2;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (long) 0);
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException2.forEach(consumer0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = UniquePredicate.uniquePredicate();
      SQLClientInfoException sQLClientInfoException3 = IteratorUtils.find((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator((SQLIntegrityConstraintViolationException) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) null);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.getIterator(predicate0);
      IteratorUtils.getIterator(sQLClientInfoException3);
      IteratorUtils.emptyListIterator();
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, 0);
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("N5wm7", ";5[1o4ogs=p(^t`", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", ";5[1o4ogs=p(^t`", 0, hashMap0, sQLClientInfoExceptionArray0[0]);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      sQLClientInfoException1.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException2;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("PrototypeCloneFactory: Clone method must be public");
      iIOMetadataNode0.getAttributeNode("org.apache.commons.collections4.IteratorUtils");
      iIOMetadataNode0.isSupported("{& :+T]#RN(M!", "$f  a0,`n9");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("PrototypeCloneFactory: Clone method must be public");
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      IteratorUtils.arrayListIterator(locale_CategoryArray0, 0, 0);
      IteratorUtils.emptyListIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLWarning0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      int[] intArray1 = new int[0];
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, intArray1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException((String) null, (String) null, intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) batchUpdateException3);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 5);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      classArray0[3] = class2;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      classArray0[4] = class3;
      InvokerTransformer<Object, SQLNonTransientException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientException>("G", classArray0, classArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(batchUpdateException1);
      predicateArray1[4] = (Predicate<Object>) equalPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray1[5] = (Predicate<Object>) nonePredicate0;
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nullIsExceptionPredicate0);
      predicateArray1[3] = (Predicate<Object>) notPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray1);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicateArray1[4]);
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(batchUpdateException0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate1;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[3] = predicate1;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object> predicate2 = EqualPredicate.equalPredicate((Object) iIOMetadataNode0);
      predicateArray0[4] = predicate2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[W+t", batchUpdateException1);
      EqualPredicate<Object> equalPredicate2 = new EqualPredicate<Object>(sQLIntegrityConstraintViolationException0);
      predicateArray0[5] = (Predicate<Object>) equalPredicate2;
      Predicate<Object> predicate3 = NotNullPredicate.notNullPredicate();
      predicateArray0[6] = predicate3;
      Predicate<Object> predicate4 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[7] = predicate4;
      Predicate<Object> predicate5 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (Throwable) null);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLSyntaxErrorException0);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator1, (Predicate<? super DataTruncation>) identityPredicate0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) iterator0);
      IteratorUtils.getIterator(orderedIterator0);
      IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(predicateArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLException sQLException0 = new SQLException("");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLException0, defaultEquator0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLException0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(2376, false, false, 2376, 31);
      dataTruncation0.fillInStackTrace();
      IteratorUtils.singletonIterator(dataTruncation0);
      IteratorUtils.getIterator(sQLException0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<Locale.Category, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.Category, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends BatchUpdateException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Locale.Category, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, BatchUpdateException>(orderedMapIterator1);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends Locale.Category>) orderedMapIterator1, (Iterator<? extends Locale.Category>) orderedMapIterator1);
      int int0 = 483;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 483);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 0);
      IteratorUtils.arrayListIterator(enumSetArray0);
      HashMap<SQLTransientConnectionException, TreeSet<SQLSyntaxErrorException>> hashMap0 = new HashMap<SQLTransientConnectionException, TreeSet<SQLSyntaxErrorException>>();
      EntrySetMapIterator<SQLTransientConnectionException, TreeSet<SQLSyntaxErrorException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, TreeSet<SQLSyntaxErrorException>>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, TreeSet<SQLSyntaxErrorException>>) entrySetMapIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "N5wm7", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("N5wm7", ";5[1o4ogs=p(^t`", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      String string0 = "_cU'r=My0hQ(M";
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "_cU'r=My0hQ(M", 0, hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException2);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Transformer must not be null");
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      arrayList0.add(iIOMetadataNode0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Stack<SQLClientInfoException>> predicateTransformer0 = new PredicateTransformer<Stack<SQLClientInfoException>>(predicate0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Transformer must not be null");
      iIOMetadataNode1.getNodeValue();
      iIOMetadataNode1.isSupported(")`%_", (String) null);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Hashtable<Locale.Category, SQLTransientException> hashtable0 = new Hashtable<Locale.Category, SQLTransientException>();
      EntrySetMapIterator<Locale.Category, SQLTransientException> entrySetMapIterator0 = new EntrySetMapIterator<Locale.Category, SQLTransientException>(hashtable0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>) entrySetMapIterator0, (Iterator<? extends Locale.Category>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = 57;
      String string0 = "d2lGh";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("\"w]&N10VnL>=K", "\"w]&N10VnL>=K", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"D@kr", sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning("-[$[K:%*", (String) null, 57, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, "\"D@kr", 0, sQLWarning0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Factory<SQLNonTransientConnectionException> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      FactoryTransformer<Object, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLNonTransientConnectionException>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) null, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ListIterator<Object> listIterator0 = EmptyListIterator.emptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.contains((Iterator<Object>) listIterator0, (Object) locale_Category0);
      IteratorUtils.getIterator(locale_Category0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 194;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`UMh1+kuvIG0y3GZ", (String) null, 194, intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 0, 194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("\"w]&N10VnL>=K");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("[]", "HNz,AW]U!.Z");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties[] propertiesArray0 = new Properties[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[]", "\"w]&N10VnL>=K");
      properties2.put(sQLTransientConnectionException0, sQLClientInfoException0);
      propertiesArray0[0] = properties2;
      propertiesArray0[1] = properties1;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[5] = properties3;
      propertiesArray0[6] = properties0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator1, (Predicate<? super DataTruncation>) identityPredicate0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 781);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(list0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      arrayList0.toArray(sQLClientInfoExceptionArray0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) mapIterator1);
      IteratorUtils.getIterator(sQLClientInfoExceptionArray0[3]);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableListIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ConstantTransformer<InstanceofPredicate, Locale.Category> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, Locale.Category>(locale_Category0);
      IteratorUtils.transformedIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Transformer<? super InstanceofPredicate, ? extends Locale.Category>) constantTransformer0);
      IteratorUtils.getIterator(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "`h+/YOgy#?1zej";
      stringArray0[2] = "";
      IteratorUtils.arrayListIterator(stringArray0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      IteratorUtils.arrayListIterator(locale_CategoryArray0, 1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "", 1748, sQLTransientConnectionException0);
      IdentityPredicate.identityPredicate((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = null;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator((SQLIntegrityConstraintViolationException) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) null);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      SQLDataException sQLDataException0 = null;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator((SQLDataException) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) resettableIterator1, (Iterator<? extends SQLDataException>) resettableIterator0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 4);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      classArray0[2] = class0;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class2;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("1RT+0+6:8~UCLE", (Class<?>[]) classArray0, (Object[]) sQLTransientConnectionExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 781, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("sF'L;Vt3`y(42xZ+D", (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator1, (Predicate<? super DataTruncation>) identityPredicate0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 781);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(list0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException3;
      arrayList0.toArray(sQLClientInfoExceptionArray0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) mapIterator1);
      IteratorUtils.getIterator(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("*:%PJu~vD1j32QWgI", "*:%PJu~vD1j32QWgI", 0, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 0, 1169);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      IteratorUtils.isEmpty(zippingIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Transformer<Object, SQLSyntaxErrorException>>[] iteratorArray1 = (Iterator<Transformer<Object, SQLSyntaxErrorException>>[]) Array.newInstance(Iterator.class, 3);
      Transformer<Object, SQLSyntaxErrorException>[] transformerArray0 = (Transformer<Object, SQLSyntaxErrorException>[]) Array.newInstance(Transformer.class, 7);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) null, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformers must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 8);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, 0L, 5131L);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) boundedIterator0;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("Cannot store a duplicate key (\"");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 1475);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-4134));
      sQLFeatureNotSupportedException0.initCause(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "s.h|lNY\"7nj*S";
      stringArray0[1] = "`h+/YOgy#?1zej";
      stringArray0[2] = "lo7?x{=.r;k8) ;";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator0, 1260L);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) skippingIterator0, (Transformer<? super String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Boolean[]) null, 2494, 2494);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "i]-K<T";
      stringArray0[1] = "";
      stringArray0[2] = "xvFrF)}=g=f";
      stringArray0[3] = "";
      stringArray0[4] = "oma q%6";
      stringArray0[5] = "add() method is not supported";
      stringArray0[6] = "7NVbLkx&xn*%'K";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Object>[] linkedListArray0 = (LinkedList<Object>[]) Array.newInstance(LinkedList.class, 8);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedListArray0[0] = linkedList0;
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      linkedListArray0[1] = linkedList1;
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedListArray0[2] = linkedList2;
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      linkedListArray0[3] = linkedList3;
      LinkedList<Object> linkedList4 = new LinkedList<Object>();
      linkedListArray0[4] = linkedList4;
      LinkedList<Object> linkedList5 = new LinkedList<Object>();
      linkedListArray0[5] = linkedList5;
      LinkedList<Object> linkedList6 = new LinkedList<Object>();
      linkedListArray0[6] = linkedList6;
      LinkedList<Object> linkedList7 = new LinkedList<Object>();
      linkedListArray0[7] = linkedList7;
      ObjectArrayListIterator<LinkedList<Object>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedList<Object>>(linkedListArray0, 0);
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", batchUpdateException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransientConnectionException0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      IteratorUtils.find((Iterator<LinkedList<Object>>) objectArrayListIterator0, (Predicate<? super LinkedList<Object>>) transformedPredicate0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray0, sQLTransientConnectionException0);
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException0;
      batchUpdateExceptionArray0[3] = batchUpdateException0;
      batchUpdateExceptionArray0[4] = batchUpdateException0;
      batchUpdateExceptionArray0[5] = batchUpdateException0;
      batchUpdateExceptionArray0[6] = batchUpdateException0;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataTruncation dataTruncation0 = new DataTruncation((-117), false, false, (-117), (-117));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator1 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonListIterator1);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("HR");
      Iterator<SQLException>[] iteratorArray0 = (Iterator<SQLException>[]) Array.newInstance(Iterator.class, 9);
      OrderedMapIterator<SQLException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLException>) orderedMapIterator0;
      OrderedMapIterator<SQLException, String> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLException>) orderedMapIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableListIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ConstantTransformer<InstanceofPredicate, Locale.Category> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, Locale.Category>(locale_Category0);
      IteratorUtils.transformedIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Transformer<? super InstanceofPredicate, ? extends Locale.Category>) constantTransformer0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableListIterator0, (-130L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "N5wm7", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("N5wm7", ";5[1o4ogs=p(^t`", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "_cU'r=My0hQ(M", 0, hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException2);
      sQLClientInfoException3.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (long) 0);
      IteratorUtils.emptyOrderedMapIterator();
      sQLClientInfoException0.addSuppressed(sQLClientInfoException4);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator((SQLIntegrityConstraintViolationException) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) null);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.getIterator(predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(sQLInvalidAuthorizationSpecException0, 991);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(resettableListIterator0);
      ExceptionClosure.exceptionClosure();
      SQLException sQLException0 = new SQLException("!~KtLc", "", 2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("!~KtLc", "!~KtLc", 2, sQLException0);
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 575, 575, sQLTransientException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Closure<Boolean> closure0 = TransformerClosure.transformerClosure((Transformer<? super Boolean, ?>) transformer0);
      IteratorUtils.apply((Iterator<Boolean>) listIteratorWrapper0, (Closure<? super Boolean>) closure0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Stack<SQLNonTransientConnectionException> stack1 = new Stack<SQLNonTransientConnectionException>();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "!~KtLc");
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate1;
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[2] = predicate2;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate2);
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) nonePredicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(predicateArray0, 575);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "N5wm7", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("N5wm7", ";5[1o4ogs=p(^t`", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "_cU'r=My0hQ(M", 0, hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (long) 0);
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator((SQLIntegrityConstraintViolationException) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) null);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.singletonIterator((SQLDataException) null);
      Iterator<SQLDataException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) resettableIterator1, (Iterator<? extends SQLDataException>) resettableIterator1);
      iteratorArray0[0] = iterator1;
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 1);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("1RT+0+6:8~UCLE", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLDataException> iterator2 = IteratorUtils.objectGraphIterator((SQLDataException) null, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      iteratorArray0[1] = iterator2;
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      int int0 = 2427;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 2427, 2427);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = (-150);
      SQLWarning sQLWarning0 = new SQLWarning("Estimated size must be greater than 0", "ListIterator must not be null", (-150));
      IteratorUtils.singletonListIterator((SQLException) sQLWarning0);
      MapIterator<ArrayDeque<String>, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ArrayDeque<String>>) mapIterator0, (long) (-150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.sort((Comparator<? super String>) null);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) loopingListIterator0, (Iterator<? extends String>) loopingListIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      ArrayList<SQLSyntaxErrorException>[] arrayListArray0 = (ArrayList<SQLSyntaxErrorException>[]) Array.newInstance(ArrayList.class, 2);
      ArrayList<SQLSyntaxErrorException> arrayList1 = new ArrayList<SQLSyntaxErrorException>();
      arrayListArray0[0] = arrayList1;
      ArrayList<SQLSyntaxErrorException> arrayList2 = new ArrayList<SQLSyntaxErrorException>();
      arrayListArray0[1] = arrayList2;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null", ", ");
      arrayList2.add(sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((Throwable) null);
      arrayList2.add(sQLSyntaxErrorException1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayListArray0, (-3539), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLException sQLException0 = new SQLException("");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLException0, defaultEquator0);
      IteratorUtils.find((Iterator<TreeSet<Object>>) resettableIterator0, (Predicate<? super TreeSet<Object>>) equalPredicate0);
      IteratorUtils.singletonListIterator(sQLException0);
      IteratorUtils.emptyListIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) arrayList0);
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(arrayList0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("\"w]&N10VnL>=K");
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("[]", "HNz,AW]U!.Z");
      IteratorUtils.nodeListIterator(nodeList0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("HNz,AW]U!.Z", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 1, 1, sQLClientInfoException1);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, false, 1, 1);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-1), false, true, 100, 1284, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(12, true, false, 12, 12);
      dataTruncationArray0[3] = dataTruncation3;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 1284);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (-1909L), (-1909L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) listIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 3);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Iterator<Integer> iterator0 = treeSet0.iterator();
      iteratorArray0[0] = iterator0;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      iteratorArray0[1] = (Iterator<Integer>) reverseListIterator0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableListIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ConstantTransformer<InstanceofPredicate, Locale.Category> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, Locale.Category>(locale_Category0);
      Iterator<Locale.Category> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Transformer<? super InstanceofPredicate, ? extends Locale.Category>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator1, (Predicate<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Boolean> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Boolean>) orderedIterator0, (Closure<? super Boolean>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) iterator0);
      OrderedMapIterator<ArrayDeque<SQLTransientException>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<ArrayDeque<SQLTransientException>>) orderedMapIterator0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0, (-3984L), 830L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLWarning sQLWarning0 = new SQLWarning("o,e1Z8vTP+}I'g8&[]", "Mnmch%t'$5MI24/V%,");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLWarning0);
      MockThrowable mockThrowable0 = new MockThrowable("", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("No value can be removed at present", "Mnmch%t'$5MI24/V%,", mockThrowable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Mnmch%t'$5MI24/V%,", 1496, sQLTimeoutException1);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, (long) 1496);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      int int0 = (-112);
      DataTruncation dataTruncation0 = new DataTruncation((-112), false, false, (-112), (-112));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator1);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 0, (-1295));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 3029;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) null, 3029);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      DataTruncation dataTruncation0 = new DataTruncation((-112), false, false, (-112), (-112));
      IteratorUtils.singletonListIterator(dataTruncation0);
      EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator1, (Predicate<? super DataTruncation>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) mapIterator1, (-279));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      IteratorUtils.arrayListIterator(locale_CategoryArray0, 0, 0);
      IteratorUtils.emptyListIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLWarning0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray1 = new int[0];
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, intArray1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException((String) null, (String) null, intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) batchUpdateException3);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, nullIsExceptionPredicate0);
      predicateArray1[0] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) andPredicate0);
      predicateArray1[1] = predicate1;
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 5);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, SQLNonTransientException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientException>("G", classArray0, classArray0);
      Predicate<Object> predicate2 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) invokerTransformer0, (Predicate<? super Object>) predicate1);
      predicateArray1[2] = predicate2;
      Predicate<Object> predicate3 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) andPredicate0);
      predicateArray1[3] = predicate3;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(batchUpdateException0);
      predicateArray1[4] = (Predicate<Object>) equalPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray1[5] = (Predicate<Object>) nonePredicate0;
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray1[6] = predicate4;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate4);
      predicateArray1[7] = (Predicate<Object>) notPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray1);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicateArray1[4]);
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>((Object) null);
      predicateArray0[2] = (Predicate<Object>) equalPredicate1;
      Predicate<Object> predicate5 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[3] = predicate5;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object> predicate6 = EqualPredicate.equalPredicate((Object) iIOMetadataNode0);
      predicateArray0[4] = predicate6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[W+t", batchUpdateException1);
      EqualPredicate<Object> equalPredicate2 = new EqualPredicate<Object>(sQLIntegrityConstraintViolationException0);
      predicateArray0[5] = (Predicate<Object>) equalPredicate2;
      Predicate<Object> predicate7 = NotNullPredicate.notNullPredicate();
      predicateArray0[6] = predicate7;
      Predicate<Object> predicate8 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[7] = predicate8;
      Predicate<Object> predicate9 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'G' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }
}
