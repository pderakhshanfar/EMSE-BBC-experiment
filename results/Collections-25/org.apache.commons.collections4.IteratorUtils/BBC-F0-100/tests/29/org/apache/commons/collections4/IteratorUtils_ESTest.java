/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:45:59 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) orderedIterator0, (Iterator<? extends IIOMetadataNode>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) vector0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) orderedIterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Cannot use setValue() when the object being set is already in the map", "hZx");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iQo{.p(4~H#", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 3);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) resettableIterator0;
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) loopingListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Transformer<String, String> transformer0 = InvokerTransformer.invokerTransformer("KoRH`+5'$UsGZ}=Z");
      OrderedMapIterator<String, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLRecoverableException>(orderedMapIterator0);
      String string0 = IteratorUtils.toString((Iterator<String>) abstractOrderedMapIteratorDecorator0, (Transformer<? super String, String>) transformer0, "X%:n{|mfA| -=i/>", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Transformer<SQLNonTransientException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals("[null, null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = arrayList0.listIterator(0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) listIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":7Se-f#", "");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, class0);
      assertEquals(1, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ConstantTransformer<SQLTransientConnectionException, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLTransientConnectionException, SQLTransientConnectionException>(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) constantTransformer0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      SingletonListIterator<ArrayDeque<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<SQLSyntaxErrorException>>(arrayDeque0);
      SkippingIterator<ArrayDeque<SQLSyntaxErrorException>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<ArrayDeque<SQLSyntaxErrorException>>) singletonListIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator((DataTruncation) null);
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("H", "H", (-691), (Throwable) null);
      vector0.add(sQLNonTransientConnectionException0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) null);
      Object object0 = IteratorUtils.get((Iterator<Object>) listIterator0, 0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Boolean> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedMapIterator<Properties, Locale.FilteringMode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) orderedMapIterator0, (long) 1, 3367L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 4);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException>[] arrayListArray0 = (ArrayList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayList.class, 5);
      ResettableIterator<ArrayList<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0, 4, 4);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) null, (Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Transformer<String, String> transformer0 = InvokerTransformer.invokerTransformer("Iterator must not be null");
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("Iterator must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0, "R\n:crD1gCuTutaG}]", "C$\"!:yJ2", "R\n:crD1gCuTutaG}]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Iterator must not be null' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransactionRollbackException) null);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) andPredicate0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iterator0, 553);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-4605));
      treeSet0.add(integer0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends Integer>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Transformer<SQLTransientConnectionException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("3[ K{Vg5H");
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '3[ K{Vg5H' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, ".V:|;TC/AkHpD");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(";'rK(=BJd^b", "", hashtable0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0, (-192L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 0, (-645));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 5, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TreeSet<BatchUpdateException>[] treeSetArray0 = (TreeSet<BatchUpdateException>[]) Array.newInstance(TreeSet.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) treeSetArray0, (-1), 60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 32, (-1252));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 1802, intArray0, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]", "awdm|B~P6Ju", 9, intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((HashSet<SQLInvalidAuthorizationSpecException>[]) null, 12, (-1572));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashSet<SQLInvalidAuthorizationSpecException>[] hashSetArray0 = (HashSet<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(HashSet.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(hashSetArray0, (-4178), (-4178));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null, (-3972));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 46, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      Transformer<Object, SQLTransientException> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Transformer<StringTokenizer, Closure>>) iterator0, (Closure<? super Transformer<StringTokenizer, Closure>>) transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(uniquePredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) ifTransformer0, "P23<`", "CgkzHB`7exnQ", "Ll\"$u_Fj|c");
      assertEquals("CgkzHB`7exnQLl\"$u_Fj|c", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) orderedIterator0, (Transformer<? super String, String>) null, "NodeList must not be null", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TreeSet<BatchUpdateException>[] treeSetArray0 = (TreeSet<BatchUpdateException>[]) Array.newInstance(TreeSet.class, 9);
      ObjectArrayListIterator<TreeSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<TreeSet<BatchUpdateException>>(treeSetArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<TreeSet<BatchUpdateException>>) objectArrayListIterator0, (Predicate<? super TreeSet<BatchUpdateException>>) predicate0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      SingletonListIterator<TreeSet<BatchUpdateException>> singletonListIterator0 = new SingletonListIterator<TreeSet<BatchUpdateException>>(treeSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<TreeSet<BatchUpdateException>>) singletonListIterator0, (Predicate<? super TreeSet<BatchUpdateException>>) predicate0);
      assertFalse(singletonListIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C$\"!:yJ2", (String) null, 1, (Throwable) null);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) listIterator0, 125);
      assertTrue(list0.contains(sQLTimeoutException0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0, 1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator0, (-976L), 970L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("C$\"!:yJ2");
      String[] stringArray0 = new String[8];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      String string0 = IteratorUtils.toString((Iterator<String>) objectArrayIterator0, (Transformer<? super String, String>) constantTransformer0, "", "C$\"!:yJ2", "Yy1{2{CVt8Ob");
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals("C$\"!:yJ2C$\"!:yJ2C$\"!:yJ2C$\"!:yJ2C$\"!:yJ2C$\"!:yJ2C$\"!:yJ2C$\"!:yJ2C$\"!:yJ2Yy1{2{CVt8Ob", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("iterator", classArray0, classArray0);
      OrderedIterator<ArrayDeque<Object>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<Object>>) orderedIterator0, (Transformer<? super ArrayDeque<Object>, String>) invokerTransformer0, "CA%M>", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory((String) null);
      FactoryTransformer<String, String> factoryTransformer0 = new FactoryTransformer<String, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) factoryTransformer0, "R\n:crD1gCuTutaG}]", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("C$\"!:yJ2");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) resettableListIterator0, (Transformer<? super String, String>) constantTransformer0, (String) null, "`q<3CZFhrU", "`q<3CZFhrU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) null, (Transformer<? super Locale.FilteringMode, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLWarning0);
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) sQLRecoverableException0);
      Object object0 = IteratorUtils.get((Iterator<Object>) listIterator0, 0);
      assertSame(object0, sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) objectArrayListIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 98
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer(364);
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<ArrayList>>) iterator0, (Predicate<? super ArrayList<ArrayList>>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(364);
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<ArrayList>>) iterator0, (Predicate<? super ArrayList<ArrayList>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLIntegrityConstraintViolationException>>) hashSet0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<InstanceofPredicate, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<InstanceofPredicate, ? extends SQLTransientException>) orderedMapIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) orderedMapIterator1, (Predicate<? super InstanceofPredicate>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) objectArrayIterator0, (Object) batchUpdateException0);
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<TreeSet<BatchUpdateException>>) null, (Predicate<? super TreeSet<BatchUpdateException>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("}NK)F-QE", "", (-909));
      SQLWarning sQLWarning0 = new SQLWarning("Cm:|2:WaQ3\"KX", "", 2069, sQLRecoverableException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<SQLWarning>) singletonListIterator0, (Predicate<? super SQLWarning>) nullIsFalsePredicate0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cm:|2:WaQ3\"KX", "List must not be null", (-909));
      SQLWarning sQLWarning0 = new SQLWarning("", "List must not be null", (-909), sQLRecoverableException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.find((Iterator<SQLWarning>) singletonListIterator0, (Predicate<? super SQLWarning>) predicate0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLException>>) vector0);
      SQLTransientConnectionException sQLTransientConnectionException0 = IteratorUtils.find((Iterator<SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1678), closure0);
      IteratorUtils.apply((Iterator<Transformer<StringTokenizer, Closure>>) null, (Closure<? super Transformer<StringTokenizer, Closure>>) forClosure0);
      assertEquals((-1678), forClosure0.getCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("c<av", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AYP>^3|Do1$9-Roxo3", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MapIterator<Integer, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MapIterator<Boolean, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<Integer, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) mapIterator0, class0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MapIterator<Integer, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) mapIterator0, (Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<InstanceofPredicate, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLRecoverableException>(orderedMapIterator0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException>(abstractOrderedMapIteratorDecorator0);
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<BatchUpdateException, StringTokenizer> hashMap0 = new HashMap<BatchUpdateException, StringTokenizer>();
      EntrySetMapIterator<BatchUpdateException, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, StringTokenizer>(hashMap0);
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) entrySetMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0, (Collection<? super EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) null, (Collection<? super EnumSet<Locale.FilteringMode>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MapIterator<Integer, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) mapIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) vector0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0);
      ListIterator<Closure<Object>> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Closure<Object>>) resettableListIterator0, (Predicate<? super Closure<Object>>) predicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>((Predicate<? super Integer>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) objectArrayListIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) orderedIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) null, (Predicate<? super SQLException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Iterator<SQLException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLException>) mapIterator0, (Predicate<? super SQLException>) predicate0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, ? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      Transformer<Object, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, SQLClientInfoException> ifTransformer0 = new IfTransformer<Object, SQLClientInfoException>(predicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends SQLClientInfoException>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "Transformer must not be null", sQLRecoverableException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) singletonListIterator0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("^0{C", "^0{C");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<InstanceofPredicate, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<InstanceofPredicate, ? extends SQLTransientException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator1, 4144, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-1867));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Iterator<? extends Locale.FilteringMode>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<IIOMetadataNode, SQLTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 1, (-865));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<PriorityQueue<SQLTransientConnectionException>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("S:");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, 0);
      IteratorUtils.zippingIterator(iterator0, (Iterator<?>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ConstantTransformer<SQLTransientConnectionException, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLTransientConnectionException, SQLTransientConnectionException>(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) constantTransformer0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer(526);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) listIterator0, 2611L);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(";'rK(=BJd^b", "", hashtable0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 100, 1482);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(predicateArray0, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) objectArrayIterator0, (Object) batchUpdateExceptionArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1539));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = new Integer(125);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      Iterator<Integer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Iterator must not be null", "Iterator must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, (-1157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<Object, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Transformer<? super DataTruncation, ? extends SQLClientInfoException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
