/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 03:27:03 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      IteratorUtils.isEmpty(loopingListIterator0);
      OrderedMapIterator<SQLClientInfoException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object>(orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Entry does not exist: ");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Hashtable<String, SQLSyntaxErrorException> hashtable0 = new Hashtable<String, SQLSyntaxErrorException>();
      EntrySetMapIterator<String, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLSyntaxErrorException>(hashtable0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      Predicate<SQLWarning> predicate1 = IdentityPredicate.identityPredicate(sQLWarning0);
      IteratorUtils.matchesAll((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate1);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) singletonListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Ymp";
      stringArray0[2] = "";
      stringArray0[3] = "u&YSbE Ek]Q(|~$B";
      stringArray0[5] = "org.apache.commons.collections4.IterableUtils$5";
      stringArray0[6] = "org.apache.commons.collections4.list.AbstractLinkedList";
      stringArray0[7] = "NodeList must not be null";
      IteratorUtils.arrayListIterator(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate0 = ComparatorPredicate.comparatorPredicate("Ymp", comparator0);
      IteratorUtils.find((Iterator<String>) null, (Predicate<? super String>) predicate0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Integer integer0 = new Integer(14);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Integer> comparatorPredicate0 = new ComparatorPredicate<Integer>(integer0, comparator2, comparatorPredicate_Criterion0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayList0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator1, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) loopingIterator0);
      ConstantFactory<Iterator<Integer>> constantFactory0 = new ConstantFactory<Iterator<Integer>>(loopingIterator0);
      FactoryTransformer<Object, Iterator<Integer>> factoryTransformer0 = new FactoryTransformer<Object, Iterator<Integer>>(constantFactory0);
      Iterator<Iterator<Integer>> iterator1 = IteratorUtils.objectGraphIterator(iterator0, (Transformer<? super Iterator<Integer>, ? extends Iterator<Integer>>) factoryTransformer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("5KAl)1wPd|nk%Y0\"n");
      IteratorUtils.toString(iterator1, (Transformer<? super Iterator<Integer>, String>) transformer0, "NodeList must not be null", "@k[t;", "org.apache.commons.collections4.IterableUtils$5");
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IteratorUtils.loopingListIterator((List<SQLException>) arrayList0);
      String[] stringArray0 = new String[0];
      IteratorUtils.arrayListIterator(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null, 526);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, (-145));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      Iterator<DataTruncation> iterator0 = priorityQueue0.iterator();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super DataTruncation>) onePredicate0);
      OrderedMapIterator<SQLClientInfoException, Class<SQLTimeoutException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      Class<ClientInfoStatus>[] classArray0 = (Class<ClientInfoStatus>[]) Array.newInstance(Class.class, 5);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      classArray0[0] = class0;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      classArray0[1] = class1;
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      classArray0[2] = class2;
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      classArray0[3] = class3;
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, SQLTimeoutException> invokerTransformer0 = new InvokerTransformer<Object, SQLTimeoutException>((String) null, classArray0, (Object[]) null);
      TransformerClosure<SQLClientInfoException> transformerClosure0 = new TransformerClosure<SQLClientInfoException>(invokerTransformer0);
      ForClosure<SQLClientInfoException> forClosure0 = new ForClosure<SQLClientInfoException>(384, transformerClosure0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) zippingIterator0, (Closure<? super SQLClientInfoException>) forClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Vector<Object>[]) null, 384);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = null;
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(priorityQueue0);
      iteratorArray0[1] = (Iterator<String>) loopingIterator0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "a]X2MYj9 ";
      stringArray0[1] = "";
      stringArray0[2] = "gxF`BmVe";
      stringArray0[3] = "!*B!W2EB";
      stringArray0[4] = "<*5`s";
      stringArray0[5] = "Transformer must not be null";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "R[hecsT%~";
      int int0 = 2131;
      ObjectArrayIterator<String> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0, (-3747), 2131);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-48TB)Zr4K@/48";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "T/.NY(mwO";
      stringArray0[4] = "Max parameter must not be negative.";
      stringArray0[5] = "org.apache.commons.collections4.map.Flat3Map$KeySet";
      stringArray0[6] = "?p:50 ";
      stringArray0[7] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Predicate<String> predicate0 = ComparatorPredicate.comparatorPredicate("2vbU}T_B_5MO<.b`-", comparator0);
      IteratorUtils.find((Iterator<String>) resettableListIterator0, (Predicate<? super String>) predicate0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      IteratorUtils.loopingListIterator((List<SQLException>) linkedList0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "iterator";
      stringArray0[1] = "Node must not be null";
      stringArray0[2] = "u+v$*J,";
      stringArray0[3] = "ListItenator mXpt not be nupl";
      stringArray0[4] = "";
      stringArray0[5] = "transformer may not be null";
      stringArray0[6] = "VQ_MA/h.G _6H]iFb";
      stringArray0[7] = "";
      stringArray0[8] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Predicate<String> predicate0 = ComparatorPredicate.comparatorPredicate("transformer may not be null", comparator0);
      IteratorUtils.find((Iterator<String>) resettableListIterator0, (Predicate<? super String>) predicate0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      IteratorUtils.isEmpty(loopingListIterator0);
      OrderedMapIterator<SQLClientInfoException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object>(orderedMapIterator0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m:F$ac)MqKG}p(wG";
      stringArray0[1] = "Ghh";
      stringArray0[2] = "Node must not be null";
      stringArray0[3] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate("Node must not be null", comparator0);
      EqualPredicate<String> equalPredicate0 = new EqualPredicate<String>("remove() method is not supported for an ObjectArrayIterator");
      IteratorUtils.find((Iterator<String>) resettableListIterator0, (Predicate<? super String>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      OrderedMapIterator<SQLClientInfoException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object>(orderedMapIterator0);
      String[] stringArray0 = new String[15];
      stringArray0[0] = "m:F$ac)MqKG}p(wG";
      stringArray0[1] = "Ghh";
      stringArray0[2] = "Node must not be null";
      stringArray0[3] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate("Node must not be null", comparator0);
      EqualPredicate<String> equalPredicate0 = new EqualPredicate<String>("remove() method is not supported for an ObjectArrayIterator");
      IteratorUtils.find((Iterator<String>) resettableListIterator0, (Predicate<? super String>) equalPredicate0);
      IteratorUtils.isEmpty(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("DGbr%OZw`ZN~P*", classArray0, classArray0);
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      IteratorUtils.loopingListIterator((List<SQLException>) arrayList1);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      IteratorUtils.isEmpty(loopingListIterator0);
      OrderedMapIterator<SQLClientInfoException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object>(orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Entry does not exist: ");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Hashtable<String, SQLSyntaxErrorException> hashtable0 = new Hashtable<String, SQLSyntaxErrorException>();
      EntrySetMapIterator<String, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLSyntaxErrorException>(hashtable0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      Predicate<SQLWarning> predicate1 = IdentityPredicate.identityPredicate(sQLWarning0);
      IteratorUtils.matchesAll((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate1);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) singletonListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IteratorUtils.loopingListIterator((List<SQLException>) arrayList0);
      OrderedMapIterator<SQLClientInfoException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLTransientConnectionException>(orderedMapIterator0);
      OrderedMapIterator<SQLClientInfoException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Entry does not exist: ");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>((Transformer<? super SQLException, ? extends SQLException>) null, predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) transformedPredicate0);
      Hashtable<String, SQLSyntaxErrorException> hashtable0 = new Hashtable<String, SQLSyntaxErrorException>();
      EntrySetMapIterator<String, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLSyntaxErrorException>(hashtable0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      SQLWarning sQLWarning0 = new SQLWarning("Transformer must not be null");
      IdentityPredicate.identityPredicate(sQLWarning0);
      IteratorUtils.matchesAll((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) singletonListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      String string0 = IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      assertEquals("[]", string0);
      
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(onePredicate0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      Iterator<DataTruncation> iterator0 = priorityQueue0.iterator();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super DataTruncation>) nullIsExceptionPredicate0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      int int0 = 1073741824;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<?>) loopingListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("DGbr%OZw`ZN~P*", classArray0, classArray0);
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      arrayList1.removeAll(arrayList0);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList1);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "DGbr%OZw`ZN~P*", "DGbr%OZw`ZN~P*", "DGbr%OZw`ZN~P*");
      ResettableListIterator<Object> resettableListIterator1 = IteratorUtils.arrayListIterator((Object[]) classArray0);
      int int0 = 1259;
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedList0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, 0L, (long) 1259);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableListIterator1, 1259);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1257
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      EmptyIterator.emptyIterator();
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      Iterator<DataTruncation> iterator0 = arrayList1.iterator();
      IteratorUtils.unmodifiableIterator(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<Boolean, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " Y>_6-tQ3rFc73PYY");
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Boolean, ? extends SQLNonTransientException>) mapIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) mapIterator0, class0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      Iterator<DataTruncation> iterator0 = arrayList0.iterator();
      Iterator<DataTruncation> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator1, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableListIterator0);
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      TreeSet<SQLException> treeSet1 = new TreeSet<SQLException>((SortedSet<SQLException>) treeSet0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) treeSet1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<SQLDataException> predicate1 = AllPredicate.allPredicate((Predicate<? super SQLDataException>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) iterator0, (Predicate<? super SQLDataException>) predicate1);
      TreeSet<SQLClientInfoException> treeSet2 = new TreeSet<SQLClientInfoException>();
      Iterator<BatchUpdateException> iterator1 = EmptyIterator.emptyIterator();
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 14);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("DGbr%OZw`ZN~P*", classArray0, classArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLDataException> arrayList1 = new ArrayList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList1);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) iterator0, (Predicate<? super SQLDataException>) predicate0);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      Iterator<BatchUpdateException> iterator1 = EmptyIterator.emptyIterator();
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      IteratorUtils.singletonIterator(enumSet0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "");
      arrayList0.add((SQLException) sQLDataException0);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "iterator", "iterator", "iterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("DGbr%OZw`ZN~P*", classArray0, classArray0);
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList1);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "DGbr%OZw`ZN~P*", "DGbr%OZw`ZN~P*", "DGbr%OZw`ZN~P*");
      IteratorUtils.arrayListIterator((Object[]) classArray0);
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 728);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 1244);
      IteratorUtils.emptyMapIterator();
      Iterator<?> iterator1 = IteratorUtils.getIterator("[]");
      assertNotNull(iterator1);
      
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      IteratorUtils.getIterator("[]");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{<8z7");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{<8z7", sQLNonTransientException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("el(xG=aOEHq*/4", (String) null, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator1, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("{<8z7", (String) null, 16, sQLNonTransientConnectionException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 1);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) zippingIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Pwn@k I^[_S1?i!(mw");
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("DGbr%OZw`ZN~P*", "9 _^12zy]vwAU)'i");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("s beyond the end of the array. ", "", 8, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("){Tl`m[hRd", "9 _^12zy]vwAU)'i");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("w,fD", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("s beyond the end of the array. ", "s beyond the end of the array. ", 1580, sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("]", (String) null, 2408);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 2);
      IteratorUtils.emptyMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientConnectionException2);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      Class<Object> class8 = Object.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList0);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "", "", "");
      IteratorUtils.arrayListIterator((Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) classArray0, 3894);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLException sQLException0 = new SQLException();
      Integer integer0 = new Integer((-1));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      ListIteratorWrapper<SQLNonTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientConnectionException>(iterator0);
      IteratorUtils.emptyMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.fillInStackTrace();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) singletonIterator0, (Transformer<? super SQLRecoverableException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, ServiceLoader<Properties>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Throwable throwable0 = sQLClientInfoException0.fillInStackTrace();
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(iterator0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "p.;rW", (-2873));
      EmptyIterator.emptyIterator();
      IteratorUtils.getIterator("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", throwable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      throwable0.addSuppressed(sQLSyntaxErrorException0);
      Transformer<Object, SQLTimeoutException> transformer1 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer1);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLWarning> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (long) 1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (Iterator<? extends SQLWarning>) boundedIterator0);
      EmptyIterator.emptyIterator();
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      EmptyIterator.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Transformer<SQLException, SQLTimeoutException> transformer0 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLTimeoutException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLTimeoutException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      EmptyIterator.emptyIterator();
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">z ~?{5X";
      stringArray0[1] = "";
      stringArray0[2] = ">z ~?{5X";
      String string0 = "Collection must not be null";
      stringArray0[3] = "Collection must not be null";
      stringArray0[4] = "org.apache.commons.collections4.functors.AnyPredicate";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<String>) resettableListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, intArray0, (Throwable) null);
      batchUpdateException0.printStackTrace();
      Throwable throwable0 = sQLClientInfoException0.fillInStackTrace();
      sQLClientInfoException0.addSuppressed(batchUpdateException0);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(iterator0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "p.;rW", (-2837));
      EmptyIterator.emptyIterator();
      IteratorUtils.getIterator("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", throwable0);
      Transformer<Object, SQLTimeoutException> transformer1 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer1);
      ArrayDeque<BatchUpdateException>[] arrayDequeArray0 = (ArrayDeque<BatchUpdateException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<BatchUpdateException> arrayDeque1 = new ArrayDeque<BatchUpdateException>();
      arrayDeque1.clone();
      ArrayDeque<BatchUpdateException> arrayDeque2 = new ArrayDeque<BatchUpdateException>();
      ArrayDeque<BatchUpdateException> arrayDeque3 = new ArrayDeque<BatchUpdateException>();
      ArrayDeque<BatchUpdateException> arrayDeque4 = new ArrayDeque<BatchUpdateException>();
      ObjectArrayIterator<ArrayDeque<BatchUpdateException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<BatchUpdateException>>(arrayDequeArray0);
      IteratorUtils.skippingIterator((Iterator<ArrayDeque<BatchUpdateException>>) objectArrayIterator0, 0L);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) iterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Entry does not exist: ");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Hashtable<String, SQLSyntaxErrorException> hashtable0 = new Hashtable<String, SQLSyntaxErrorException>();
      EntrySetMapIterator<String, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLSyntaxErrorException>(hashtable0);
      String string0 = IteratorUtils.find((Iterator<String>) entrySetMapIterator0, (Predicate<? super String>) predicate0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(onePredicate0);
      Hashtable<String, SQLSyntaxErrorException> hashtable0 = new Hashtable<String, SQLSyntaxErrorException>();
      EntrySetMapIterator<String, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLSyntaxErrorException>(hashtable0);
      String string0 = IteratorUtils.find((Iterator<String>) entrySetMapIterator0, (Predicate<? super String>) nullIsExceptionPredicate0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      EnumSet.of(locale_FilteringMode2, locale_FilteringModeArray0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonListIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      int int0 = 2;
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 2);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null, (Collection<? super Locale.FilteringMode>) enumSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.fillInStackTrace();
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0, 1244);
      IteratorUtils.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode1;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonListIterator0);
      OrderedMapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedHashSet0);
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) mapIterator0, 1723L);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) mapIterator0;
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) skippingIterator0;
      MapIterator<SQLClientInfoException, Locale.FilteringMode> mapIterator1 = IteratorUtils.emptyMapIterator();
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) mapIterator1;
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) mapIterator0;
      iteratorArray0[4] = (Iterator<SQLClientInfoException>) skippingIterator0;
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) resettableIterator0;
      iteratorArray0[6] = (Iterator<SQLClientInfoException>) skippingIterator0;
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) resettableIterator0;
      iteratorArray0[8] = (Iterator<SQLClientInfoException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IteratorUtils.loopingIterator((Collection<? extends String>) linkedHashSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      int int0 = 2462;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 2462, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Class<Boolean> class0 = Boolean.class;
      Stack<Boolean> stack0 = new Stack<Boolean>();
      Stack<Boolean> stack1 = new Stack<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) stack1);
      Boolean[] booleanArray0 = IteratorUtils.toArray((Iterator<? extends Boolean>) resettableListIterator0, class0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("km+R^h71Kuua'q", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("E'", "yl", hashMap0);
      sQLClientInfoException0.getStackTrace();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2y}}", "E'", sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "km+R^h71Kuua'q");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Transformer<SQLException, SQLTimeoutException> transformer0 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLTimeoutException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLTimeoutException>) transformer0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode1;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonListIterator0);
      IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) singletonListIterator0, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (Throwable) null);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("g", (String) null);
      Transformer<SQLException, SQLTimeoutException> transformer0 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLTimeoutException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLException sQLException0 = new SQLException();
      Integer integer0 = new Integer((-1));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      ListIteratorWrapper<SQLNonTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientConnectionException>(iterator0);
      Iterator<BatchUpdateException> iterator1 = EmptyIterator.emptyIterator();
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      ListIteratorWrapper<SQLNonTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientConnectionException>(iterator0);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) listIteratorWrapper0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) linkedHashSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableIterator0, comparator0, comparatorPredicate_Criterion0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("S5X;C:2h]u,*3#:/&");
      Comparator<IIOMetadataNode> comparator1 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(iIOMetadataNode0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Comparator<IIOMetadataNode> comparator2 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate.comparatorPredicate(iIOMetadataNode0, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      IteratorUtils.matchesAny((Iterator<String>) resettableIterator0, (Predicate<? super String>) comparatorPredicate0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 5);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      int int0 = 1;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 3);
      HashMap<Integer, Iterator<Integer>> hashMap0 = new HashMap<Integer, Iterator<Integer>>();
      EntrySetMapIterator<Integer, Iterator<Integer>> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Iterator<Integer>>(hashMap0);
      iteratorArray0[0] = (Iterator<Integer>) entrySetMapIterator0;
      EntrySetMapIterator<Integer, Iterator<Integer>> entrySetMapIterator1 = new EntrySetMapIterator<Integer, Iterator<Integer>>(hashMap0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) entrySetMapIterator1);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(list0);
      iteratorArray0[1] = (Iterator<Integer>) loopingIterator0;
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1244);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1244);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1359);
      integerArray0[2] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      iteratorArray0[2] = (Iterator<Integer>) objectArrayListIterator0;
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) list0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.size(loopingIterator0);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<Integer, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 93;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 93, 2524);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLException sQLException0 = new SQLException();
      Integer integer0 = new Integer((-1));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      boolean boolean1 = IteratorUtils.isEmpty(listIterator0);
      assertTrue(boolean1);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(",f8", "", (-2006), hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", ",f8", (Map<String, ClientInfoStatus>) null);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("8h):;Yhl", ",f8", hashMap0, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashMap1);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("B9)K0K+4}13h>f", "", (-3741), (Throwable) null);
      priorityQueue0.add(sQLFeatureNotSupportedException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      Class<SQLTimeoutException>[] classArray0 = null;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("8_2!hc", (Class<?>[]) null, (Object[]) null);
      SQLException sQLException0 = new SQLException("elementsToSkip parameter must not be negative.");
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator(sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "c\fb.|+g<u(i>!)", "elementsToSkip parameter must not be negative.", "t8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '8_2!hc' on 'class java.sql.SQLException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) null);
      String string0 = "YG<0,ec8b>]Wkx~";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("YG<0,ec8b>]Wkx~", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("YG<0,ec8b>]Wkx~", "PKkb kL`WG6", hashMap0);
      sQLClientInfoException0.getStackTrace();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) null);
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, (Throwable) null);
      Stack<BatchUpdateException> stack1 = new Stack<BatchUpdateException>();
      stack1.add(batchUpdateException0);
      Stack<BatchUpdateException> stack2 = new Stack<BatchUpdateException>();
      Enumeration<BatchUpdateException> enumeration0 = stack2.elements();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack1);
      IteratorUtils.emptyOrderedIterator();
      Predicate<SQLDataException> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "No more elements in the iteration";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "No more elements in the iteration");
      Hashtable<Locale.FilteringMode, EnumSet<Locale.FilteringMode>> hashtable0 = new Hashtable<Locale.FilteringMode, EnumSet<Locale.FilteringMode>>(942);
      EntrySetMapIterator<Locale.FilteringMode, EnumSet<Locale.FilteringMode>> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, EnumSet<Locale.FilteringMode>>(hashtable0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      BiFunction<Object, Object, EnumSet<Locale.FilteringMode>> biFunction0 = (BiFunction<Object, Object, EnumSet<Locale.FilteringMode>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashtable0.compute(locale_FilteringMode0, biFunction0);
      entrySetMapIterator0.hasNext();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, EnumSet<Locale.FilteringMode>>) entrySetMapIterator0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)11;
      intArray0[1] = (int) (byte)11;
      intArray0[2] = (int) (byte)11;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      stack0.add(batchUpdateException0);
      Enumeration<BatchUpdateException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      IteratorUtils.emptyOrderedIterator();
      Predicate<SQLDataException> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, intArray0, (Throwable) null);
      batchUpdateException0.printStackTrace();
      Throwable throwable0 = sQLClientInfoException0.fillInStackTrace();
      sQLClientInfoException0.addSuppressed(batchUpdateException0);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(iterator0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "p.;rW", (-2837));
      EmptyIterator.emptyIterator();
      IteratorUtils.getIterator("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", throwable0);
      Transformer<Object, SQLTimeoutException> transformer1 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer1);
      ArrayDeque<BatchUpdateException>[] arrayDequeArray0 = (ArrayDeque<BatchUpdateException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<BatchUpdateException> arrayDeque1 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<BatchUpdateException> arrayDeque2 = arrayDeque1.clone();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<BatchUpdateException> arrayDeque3 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<BatchUpdateException> arrayDeque4 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<BatchUpdateException> arrayDeque5 = new ArrayDeque<BatchUpdateException>();
      arrayDequeArray0[5] = arrayDeque5;
      ObjectArrayIterator<ArrayDeque<BatchUpdateException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<BatchUpdateException>>(arrayDequeArray0);
      IteratorUtils.skippingIterator((Iterator<ArrayDeque<BatchUpdateException>>) objectArrayIterator0, 0L);
      Iterable<SQLClientInfoException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning("F");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("F", "F", sQLWarning0);
      OrderedMapIterator<SQLClientInfoException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object>(orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(">)QsDw`7");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Hashtable<String, SQLSyntaxErrorException> hashtable0 = new Hashtable<String, SQLSyntaxErrorException>();
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      DataTruncation dataTruncation0 = new DataTruncation(2179, false, true, 2179, 2179);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[1] = predicate0;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) zippingIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) iterator0, 1239);
      ReverseListIterator<Object> reverseListIterator0 = new ReverseListIterator<Object>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) reverseListIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      Iterator<DataTruncation> iterator0 = priorityQueue0.iterator();
      Iterator<SQLWarning> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) iterator1, (Iterator<? extends SQLWarning>) iterator0);
      Iterator<BatchUpdateException> iterator2 = EmptyIterator.emptyIterator();
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Throwable throwable0 = sQLClientInfoException0.fillInStackTrace();
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      String string0 = "m ";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("m ", "+m9", throwable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+m9", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("!F3NRm$hgC)yx", "!F3NRm$hgC)yx", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("rPO::<F>sJ8^U:2", "W|QiD@ ", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("", "", 3);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("cED;tg;", "");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLTransactionRollbackException3);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransactionRollbackException4);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rPO::<F>sJ8^U:2");
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 2);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) "c*(j<atC.>";
      objectArray0[3] = (Object) class1;
      objectArray0[4] = (Object) "c*(j<atC.>";
      objectArray0[5] = (Object) "c*(j<atC.>";
      objectArray0[6] = (Object) "c*(j<atC.>";
      objectArray0[1] = (Object) resettableIterator0;
      StackTraceElement stackTraceElement0 = new StackTraceElement("-6qG", "NodeList must not be null", "#NQ wYG:XX", (-3574));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2);
      IteratorUtils.singletonIterator((EnumSet<Locale.FilteringMode>) null);
      EmptyIterator.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      String string0 = "p.;rW";
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "p.;rW", intArray0, sQLClientInfoException0);
      batchUpdateException0.printStackTrace();
      sQLClientInfoException0.fillInStackTrace();
      sQLClientInfoException0.addSuppressed(batchUpdateException0);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(iterator0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, (Class<?>[]) null, (Object[]) null);
      Iterator<SQLException> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) invokerTransformer0, "", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 1244);
      MapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[1] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("DGbr%OZw`ZN~P*", classArray0, classArray0);
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "", (String) null, "GPf.1Oxn[M|Y~[ab");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("DGbr%OZw`ZN~P*", classArray0, classArray0);
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "DGbr%OZw`ZN~P*", "tDs!1P", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      DataTruncation dataTruncation0 = new DataTruncation(2179, false, true, 2179, 2179);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[1] = predicate0;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[2] = predicate1;
      Transformer<Object, DataTruncation>[] transformerArray0 = (Transformer<Object, DataTruncation>[]) Array.newInstance(Transformer.class, 6);
      Factory<DataTruncation> factory0 = ConstantFactory.constantFactory(dataTruncation0);
      Transformer<Object, DataTruncation> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends DataTruncation>) factory0);
      transformerArray0[0] = transformer0;
      Transformer<Object, DataTruncation> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends DataTruncation>) transformer0, (Transformer<? super Object, ? extends DataTruncation>) transformer0);
      transformerArray0[1] = transformer1;
      transformerArray0[2] = transformer0;
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 3);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class3;
      IfTransformer<Object, DataTruncation> ifTransformer0 = new IfTransformer<Object, DataTruncation>(predicate0, transformer0, transformer1);
      transformerArray0[4] = (Transformer<Object, DataTruncation>) ifTransformer0;
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>((String) null, classArray0, classArray0);
      transformerArray0[5] = (Transformer<Object, DataTruncation>) invokerTransformer0;
      SwitchTransformer<Object, DataTruncation> switchTransformer0 = new SwitchTransformer<Object, DataTruncation>(predicateArray0, transformerArray0, transformer1);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) switchTransformer0);
      Iterator<SQLWarning> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator1, (long) 2179);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("DGbr%OZw`ZN~P*", classArray0, classArray0);
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList1);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "DGbr%OZw`ZN~P*", "DGbr%OZw`ZN~P*", "DGbr%OZw`ZN~P*");
      IteratorUtils.arrayListIterator((Object[]) classArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(arrayList1);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Hashtable<String, SQLSyntaxErrorException> hashtable0 = new Hashtable<String, SQLSyntaxErrorException>();
      EntrySetMapIterator<String, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLSyntaxErrorException>(hashtable0);
      IteratorUtils.find((Iterator<String>) entrySetMapIterator0, (Predicate<? super String>) allPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      EnumSet<Locale.FilteringMode> enumSet1 = IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) resettableIterator0, 0);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<BatchUpdateException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<BatchUpdateException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLTransientConnectionException>(mapIterator0);
      MapIterator<BatchUpdateException, SQLTransientConnectionException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLTransientConnectionException>) abstractMapIteratorDecorator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator1);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      iteratorArray0[0] = iterator0;
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) abstractMapIteratorDecorator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iterator0);
      iteratorArray0[1] = (Iterator<BatchUpdateException>) zippingIterator0;
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "p.;rW", intArray0, sQLClientInfoException0);
      batchUpdateException0.printStackTrace();
      sQLClientInfoException0.fillInStackTrace();
      sQLClientInfoException0.addSuppressed(batchUpdateException0);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(iterator0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "p.;rW", (-2837));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      IteratorUtils.singletonIterator(enumSet0);
      EmptyIterator.emptyIterator();
      Iterator<?> iterator1 = IteratorUtils.getIterator("");
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.isEmpty(resettableListIterator0);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException>(orderedMapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 3);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Sa", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) invokerTransformer0, "", "Sa", "");
      int int0 = 1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot remove element at index {0}.", "", 1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(batchUpdateException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableIterator0, 1244);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1244
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      EnumSet<Locale.FilteringMode> enumSet1 = IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) resettableIterator0, 0);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("iterator");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", "iterator", sQLNonTransientException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("C*s6q!&6r0]1AKNG`S8", "", 0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("C*s6q!&6r0]1AKNG`S8", sQLNonTransientException0);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("xesy> uC%", "C*s6q!&6r0]1AKNG`S8", 16, sQLNonTransientException0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("C*s6q!&6r0]1AKNG`S8", "C*s6q!&6r0]1AKNG`S8", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", "", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0, 3);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator1);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) iterator0, 1244);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NodeList nodeList0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "Iterator[]";
      String string1 = "w";
      String string2 = "";
      SQLDataException sQLDataException0 = new SQLDataException("Transformer must not be null", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) iterator0, 1244);
      MapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", sQLException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Iterator[]", "Iterator[]", 586, sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Iterator[]", "Iterator[]", (int[]) null, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("Iterator[]", "Iterator[]", sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("'4#7k)6Ngb^YmO0C,");
      iIOMetadataNode0.item(12);
      iIOMetadataNode0.setNodeValue("Iterator[]");
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("'4#7k)6Ngb^YmO0C,", "", sQLException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("17+IG}cF=zvdI=C", "^{W20L!&&Z 2_>-P", 12, sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = 12;
      intArray0[3] = 12;
      intArray0[4] = (-3850);
      intArray0[6] = 12;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("List must not be null", "'4#7k)6Ngb^YmO0C,", intArray0, sQLIntegrityConstraintViolationException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Enumeration must not be null", hashMap0, batchUpdateException0);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<DataTruncation, SQLRecoverableException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLRecoverableException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) mapIterator0, (Iterator<? extends SQLWarning>) mapIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("N>edJ?");
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) boundedIterator0);
      ResettableIterator<StringTokenizer> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator1, 10);
      Comparator<StringTokenizer> comparator1 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "p.;rW", intArray0, sQLClientInfoException0);
      batchUpdateException0.printStackTrace();
      sQLClientInfoException0.addSuppressed(batchUpdateException0);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(iterator0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "p.;rW", (-2837));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0, 0);
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLExceptionArray0[0] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[2] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[3] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[4] = (SQLException) sQLClientInfoException0;
      sQLExceptionArray0[5] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[6] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[7] = (SQLException) sQLClientInfoException0;
      sQLExceptionArray0[8] = (SQLException) sQLClientInfoException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 1, (-2837));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 2);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) "c*(j<atC.>";
      objectArray0[3] = (Object) class1;
      objectArray0[5] = (Object) "c*(j<atC.>";
      objectArray0[6] = (Object) "c*(j<atC.>";
      objectArray0[7] = (Object) resettableIterator0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("c*(j<atC.>", classArray0, objectArray0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "", "c*(j<atC.>", "");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "]", 1);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "n1M5!A8q", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException1);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableIterator1);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("DGbr%OZw`ZN~P*", classArray0, classArray0);
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      arrayList1.add((SQLException) sQLFeatureNotSupportedException0);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "O{{K,.3-+9d>Rso$", "", "DGbr%OZw`ZN~P*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'DGbr%OZw`ZN~P*' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode2);
      IteratorUtils.singletonIterator(enumSet0);
      enumSet0.add(locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      enumSet0.add(locale_FilteringMode3);
      int int0 = 0;
      enumSet0.clone();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode2);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      enumSet0.add(locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      enumSet0.add(locale_FilteringMode3);
      int int0 = 0;
      IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) resettableIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 235;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation(235, true, true, 235, 235, sQLNonTransientConnectionException0);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>();
      Transformer<Object, DataTruncation> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashtable0);
      Spliterator<Throwable> spliterator0 = dataTruncation0.spliterator();
      sQLNonTransientConnectionException0.addSuppressed(dataTruncation0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) iterator0);
      hashtable0.put(dataTruncation0, dataTruncation0);
      dataTruncation0.printStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No next() entry in the iteration");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) spliterator0;
      // Undeclared exception!
      try { 
        hashtable0.put((Object) null, dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", sQLException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Iterator[]", "Iterator[]", 586, sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Iterator[]", "Iterator[]", (int[]) null, sQLIntegrityConstraintViolationException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(batchUpdateException0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException>(orderedMapIterator0);
      MapIterator<Integer, SQLTimeoutException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) mapIterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "Iterator[]";
      SQLException sQLException0 = new SQLException();
      int int0 = 1073741824;
      DataTruncation dataTruncation0 = new DataTruncation((-4145), true, true, 586, 1073741824);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableIterator0, 0L, (-3467L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 11, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 2);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) "c*(j<atC.>";
      objectArray0[3] = (Object) class1;
      objectArray0[4] = (Object) "c*(j<atC.>";
      objectArray0[5] = (Object) "c*(j<atC.>";
      objectArray0[6] = (Object) "c*(j<atC.>";
      objectArray0[5] = (Object) resettableIterator0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("c*(j<atC.>", classArray0, objectArray0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "", "c*(j<atC.>", "");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "]", 1);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "n1M5!A8q", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("n1M5!A8q");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      MapIterator<IIOMetadataNode, LinkedList<SQLIntegrityConstraintViolationException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<IIOMetadataNode, LinkedList<SQLIntegrityConstraintViolationException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "p.;rW", intArray0, sQLClientInfoException0);
      batchUpdateException0.printStackTrace();
      sQLClientInfoException0.fillInStackTrace();
      sQLClientInfoException0.addSuppressed(batchUpdateException0);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(iterator0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "p.;rW", (-2837));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      EnumSet<Locale.FilteringMode> enumSet1 = IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0, 0);
      assertSame(enumSet0, enumSet1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) orderedIterator0);
      MapIterator<SQLIntegrityConstraintViolationException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-2746), sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2746);
      intArray0[1] = (-2746);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, sQLDataException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.getIterator(resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stack0;
      objectArray0[1] = (Object) stack0;
      objectArray0[2] = (Object) reverseListIterator0;
      objectArray0[3] = (Object) reverseListIterator0;
      String string0 = "d8,7WaM@~P*Wo";
      String string1 = "org.apache.commons.collections4.IteratorUtils";
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLException sQLException0 = new SQLException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("B&8NR!K#*V", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "B&8NR!K#*V", hashMap0);
      sQLClientInfoException0.getStackTrace();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "2y}}", sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("E'", "l~D_fMEu[,.~<7=c");
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      Class<Boolean> class0 = Boolean.class;
      Stack<Boolean> stack0 = new Stack<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) resettableListIterator0, (-2266L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) null, 2287L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector<Integer> vector0 = new Stack<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.size((Iterator<?>) null);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<Boolean, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "p.;rW", intArray0, sQLClientInfoException0);
      batchUpdateException0.printStackTrace();
      sQLClientInfoException0.fillInStackTrace();
      sQLClientInfoException0.addSuppressed(batchUpdateException0);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(iterator0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      int int0 = (-2837);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "p.;rW", (-2837));
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = " a@$j\\_5";
      StackTraceElement stackTraceElement1 = new StackTraceElement("Jxz`zOUEA}5]IpJ", " a@$j_5", "p.;rW", 1);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      IteratorUtils.size(iterator0);
      MapIterator<SQLTransientConnectionException, Class<SQLTransientException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) mapIterator0, 2);
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) loopingListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TreeSet<BatchUpdateException>[] treeSetArray0 = (TreeSet<BatchUpdateException>[]) Array.newInstance(TreeSet.class, 7);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      treeSetArray0[0] = treeSet0;
      TreeSet<BatchUpdateException> treeSet1 = new TreeSet<BatchUpdateException>();
      treeSetArray0[1] = treeSet1;
      TreeSet<BatchUpdateException> treeSet2 = new TreeSet<BatchUpdateException>();
      treeSetArray0[2] = treeSet2;
      TreeSet<BatchUpdateException> treeSet3 = new TreeSet<BatchUpdateException>();
      treeSetArray0[3] = treeSet3;
      TreeSet<BatchUpdateException> treeSet4 = new TreeSet<BatchUpdateException>();
      treeSetArray0[4] = treeSet4;
      TreeSet<BatchUpdateException> treeSet5 = new TreeSet<BatchUpdateException>((Collection<? extends BatchUpdateException>) treeSet2);
      treeSetArray0[5] = treeSet5;
      TreeSet<BatchUpdateException> treeSet6 = new TreeSet<BatchUpdateException>();
      treeSetArray0[6] = treeSet6;
      int int0 = 0;
      IteratorUtils.arrayListIterator(treeSetArray0, 0, 0);
      IteratorUtils.emptyIterator();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(16);
      integerArray0[0] = integer0;
      ObjectArrayIterator<Integer> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      Properties properties0 = new Properties();
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLDataException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) stack0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, (-4916));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cursor closed", (String) null);
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.singletonIterator(sQLWarning0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLException sQLException0 = new SQLException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "+", 2006, sQLException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, "Cursor closed", (-761));
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, (-761));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      IteratorUtils.isEmpty(loopingListIterator0);
      OrderedMapIterator<SQLClientInfoException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object>(orderedMapIterator0);
      abstractOrderedMapIteratorDecorator0.hasNext();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Entry does not exist: ");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Hashtable<String, SQLSyntaxErrorException> hashtable0 = new Hashtable<String, SQLSyntaxErrorException>();
      EntrySetMapIterator<String, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLSyntaxErrorException>(hashtable0);
      IteratorUtils.find((Iterator<String>) entrySetMapIterator0, (Predicate<? super String>) predicate0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLTimeoutException, SQLDataException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fh<^oO+a", "fh<^oO+a", (-2651));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutException1.printStackTrace();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("fh<^oO+a", "");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) objectArrayListIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iteratorArray0[1]);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 7);
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ListIterator<LinkedList<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator((LinkedList<SQLFeatureNotSupportedException>) null);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      DataTruncation dataTruncation0 = new DataTruncation(2179, false, true, 2179, 2179);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[1] = predicate0;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[2] = predicate1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      Transformer<Object, DataTruncation>[] transformerArray0 = (Transformer<Object, DataTruncation>[]) Array.newInstance(Transformer.class, 6);
      Factory<DataTruncation> factory0 = ConstantFactory.constantFactory(dataTruncation0);
      Transformer<Object, DataTruncation> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends DataTruncation>) factory0);
      transformerArray0[0] = transformer0;
      Transformer<Object, DataTruncation> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends DataTruncation>) transformer0, (Transformer<? super Object, ? extends DataTruncation>) transformer0);
      transformerArray0[1] = transformer1;
      transformerArray0[2] = transformer0;
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 3);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class3;
      InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<Object, DataTruncation> ifTransformer0 = new IfTransformer<Object, DataTruncation>(predicate0, transformer0, transformer1);
      transformerArray0[4] = (Transformer<Object, DataTruncation>) ifTransformer0;
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>("", classArray0, classArray0);
      SwitchTransformer<Object, DataTruncation> switchTransformer0 = new SwitchTransformer<Object, DataTruncation>(predicateArray0, transformerArray0, transformer0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) invokerTransformer0);
      Iterator<SQLWarning> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator1, (long) 2179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "", (-2545));
      DataTruncation dataTruncation0 = new DataTruncation(2179, false, false, 2179, 2179, sQLRecoverableException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[1] = predicate0;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[2] = predicate1;
      Transformer<Object, DataTruncation>[] transformerArray0 = (Transformer<Object, DataTruncation>[]) Array.newInstance(Transformer.class, 6);
      Factory<DataTruncation> factory0 = ConstantFactory.constantFactory(dataTruncation0);
      Transformer<Object, DataTruncation> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends DataTruncation>) factory0);
      transformerArray0[0] = transformer0;
      Transformer<Object, DataTruncation> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends DataTruncation>) transformer0, (Transformer<? super Object, ? extends DataTruncation>) transformer0);
      transformerArray0[1] = transformer1;
      Transformer<Object, DataTruncation> transformer2 = InvokerTransformer.invokerTransformer("");
      transformerArray0[2] = transformer2;
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 3);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class3;
      Transformer<Object, DataTruncation> transformer3 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      transformerArray0[3] = transformer3;
      IfTransformer<Object, DataTruncation> ifTransformer0 = new IfTransformer<Object, DataTruncation>(predicate0, transformer0, transformer2);
      transformerArray0[4] = (Transformer<Object, DataTruncation>) ifTransformer0;
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>((String) null, classArray0, classArray0);
      transformerArray0[5] = (Transformer<Object, DataTruncation>) invokerTransformer0;
      SwitchTransformer<Object, DataTruncation> switchTransformer0 = new SwitchTransformer<Object, DataTruncation>(predicateArray0, transformerArray0, transformer3);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) switchTransformer0);
      Iterator<SQLWarning> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator1, (long) 2179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 8);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[1] = class0;
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList1);
      IteratorUtils.size(resettableListIterator0);
      EmptyIterator.emptyIterator();
      IteratorUtils.size(resettableListIterator0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.fillInStackTrace();
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(iterator0);
      Iterator<BatchUpdateException> iterator1 = EmptyIterator.emptyIterator();
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = arrayDeque0.descendingIterator();
      iteratorArray0[0] = iterator0;
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) skippingIterator0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("/;r F C &(YZ;oW_xs");
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) constantTransformer0);
      iteratorArray0[2] = iterator1;
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLNonTransientException>) orderedMapIterator0);
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) orderedMapIterator1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, 0);
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(sQLInvalidAuthorizationSpecException0, 446);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(61);
      int int0 = (-2369);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 0, (-2369));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<SQLDataException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 1713);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) resettableIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) null);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("YG<0,ec8b>]Wkx~", "Pb kL`WG6", hashMap0);
      sQLClientInfoException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("YG<0,ec8b>]Wkx~", "YG<0,ec8b>]Wkx~", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) loopingListIterator0, (-942));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -942
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) resettableIterator0, 2688);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2687
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0, 1240);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1239
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      String string0 = "Hv7";
      ConstantTransformer.nullTransformer();
      Iterator<SQLException> iterator0 = null;
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, (String) null, "Hv7", "}\"fEsv&cU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 2);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) "c*(j<atC.>";
      objectArray0[3] = (Object) class1;
      objectArray0[4] = (Object) "c*(j<atC.>";
      objectArray0[5] = (Object) "c*(j<atC.>";
      objectArray0[6] = (Object) "c*(j<atC.>";
      objectArray0[5] = (Object) resettableIterator0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("c*(j<atC.>", classArray0, objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "c*(j<atC.>", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 2);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) "c*(j<atC.>";
      objectArray0[3] = (Object) class1;
      objectArray0[4] = (Object) "c*(j<atC.>";
      objectArray0[5] = (Object) "c*(j<atC.>";
      objectArray0[6] = (Object) "c*(j<atC.>";
      objectArray0[7] = (Object) resettableIterator0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("c*(j<atC.>", classArray0, objectArray0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "", "c*(j<atC.>", "");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "]", 1);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "n1M5!A8q", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("n1M5!A8q");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      ResettableIterator<SQLRecoverableException> resettableIterator1 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      OrderedMapIterator<ArrayDeque<BatchUpdateException>, HashSet<Boolean>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ArrayDeque<BatchUpdateException>>) orderedMapIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      OrderedMapIterator<Iterator<Integer>, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Comparator<SQLIntegrityConstraintViolationException> comparator0 = (Comparator<SQLIntegrityConstraintViolationException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0, (-109L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) listIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iteratorArray0[0], (-534), (-534));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, 62, (-1668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties1;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      properties7.entrySet();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 100, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 100, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) loopingListIterator0);
      arrayList0.addAll((Collection<? extends Integer>) list0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      IteratorUtils.size(loopingListIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 0, (-1728));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      IteratorUtils.isEmpty(loopingListIterator0);
      IteratorUtils.size(loopingListIterator0);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(resettableListIterator0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.isEmpty(loopingListIterator0);
      IteratorUtils.size(loopingListIterator0);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`wIzdIXCdia^@{8");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 1255, 3808);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 407, 407);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"$N\"C~&7FX}", "q=Xg", 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Index ", "q=Xg", "Index ", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Index ", "Fx&a:", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("q=Xg", "Fx&a:", "Index ", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("q=Xg", "", "f", 5);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "q=Xg", "o-?k;^\"Q:ao9X]/#7Eo", (-378));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "Index ", "akx|X]_>L<", 5);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("akx|X]_>L<", "Fx&a:", "\"$N\"C~&7FX}", 128);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("\"$N\"C~&7FX}", "f", "org.apache.commons.collections4.functors.StringValueTransformer", 1);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("prefix may not be null", "f", "org.apache.commons.collections4.functors.StringValueTransformer", (-2003));
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      sQLRecoverableException0.setNextException(sQLNonTransientException0);
      sQLRecoverableException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 0, (-1790));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      ResettableListIterator<Class<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Class<Integer>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "";
      String string1 = ";tNh";
      iIOMetadataNode0.getAttributeNodeNS("wz_Mj##E.Xdv.G6q}Y", "");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNodeNS((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Stack<Boolean> stack0 = new Stack<Boolean>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("gwAP9", "gwAP9", 3786, sQLDataException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableListIterator0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) resettableListIterator0, 1L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) orderedIterator0);
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("!\"kclxc@|k:k", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, (-1142));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(10);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2821));
      integerArray0[4] = integer4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 2, (-3860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, Stack<Class<Integer>>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      IteratorUtils.loopingListIterator(list0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      int int0 = (-259);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, (-259), (-259));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) resettableIterator0, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("LiKB(r9uC3y@HXBb@)");
      iIOMetadataNode0.hasAttribute("transformer may not be null");
      iIOMetadataNode0.getPreviousSibling();
      iIOMetadataNode0.hasAttributeNS("m!Lz]", "u`K1k},#");
      iIOMetadataNode0.item((-2269));
      iIOMetadataNode0.setNodeValue("LiKB(r9uC3y@HXBb@)");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'Sd{ol?o,2}#Roq7_!C", sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("m!Lz]", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("['Z*3M!(eSo`");
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("'Sd{ol?o,2}#Roq7_!C", "", (-2269));
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("LiKB(r9uC3y@HXBb@)", "wP", (-2269), sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("Y=$8W", "", 569);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException("", "m!Lz]");
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, (-2269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLException sQLException0 = new SQLException();
      Integer integer0 = new Integer((-1));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      EmptyIterator.emptyIterator();
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      enumSet0.stream();
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterable<SQLDataException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      IteratorUtils.emptyIterator();
      MapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      MapIterator<IIOMetadataNode, LinkedList<SQLIntegrityConstraintViolationException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<IIOMetadataNode, LinkedList<SQLIntegrityConstraintViolationException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", sQLException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "", (-877), sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, (int[]) null, sQLException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.put("", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("vQ4` g 9%<?d}Y", hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "0i", map0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLClientInfoException1);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      int int0 = 32;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      ListIteratorWrapper<SQLNonTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientConnectionException>(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) listIteratorWrapper0, (-2651));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableIterator0);
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) loopingListIterator0, (-942));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -942
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (Iterator<? extends SQLWarning>) orderedMapIterator0);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0, 0L);
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException>(orderedMapIterator0);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      long long0 = 0L;
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<DataTruncation, SQLRecoverableException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLRecoverableException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) mapIterator0, (Iterator<? extends SQLWarning>) mapIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 9);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }
}
