/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:25:08 GMT 2020
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, (Throwable) null);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      sQLClientInfoException1.setNextException(sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException1);
      sQLClientInfoException0.setNextException(sQLClientInfoException1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("", clientInfoStatus0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      sQLTransientConnectionException0.getLocalizedMessage();
      IteratorUtils.contains((Iterator<Stack<Predicate<Object>>>) null, (Object) sQLTransientConnectionException0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("6c<LQk)MeP}>");
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-1184), 2982, sQLIntegrityConstraintViolationException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2982, true, true, 2982, 2982);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(93, true, false, 93, (-1));
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1959, true, false, 338, 338, dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(1959, true, true, (-1), 100, dataTruncation0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(100, true, true, 23, 100, dataTruncation3);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(1959, false, false, (-266), 308, dataTruncation0);
      dataTruncationArray0[6] = dataTruncation6;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> hashMap0 = new HashMap<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>(hashMap0);
      IteratorUtils.isEmpty(entrySetMapIterator0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) arrayList0);
      predicateArray0[0] = predicate0;
      Integer integer0 = new Integer((-4154));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(transformedPredicate0);
      predicateArray0[2] = (Predicate<Object>) nullIsTruePredicate0;
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLIntegrityConstraintViolationException, BatchUpdateException> mapIterator0 = null;
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLIntegrityConstraintViolationException, ? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SingletonIterator<HashSet<Object>> singletonIterator0 = new SingletonIterator<HashSet<Object>>(hashSet0);
      Predicate<SQLNonTransientException>[] predicateArray0 = (Predicate<SQLNonTransientException>[]) Array.newInstance(Predicate.class, 3);
      Transformer<SQLException, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<SQLNonTransientException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLNonTransientException, Boolean>) transformer0);
      predicateArray0[0] = predicate0;
      AnyPredicate<SQLNonTransientException> anyPredicate0 = new AnyPredicate<SQLNonTransientException>(predicateArray0);
      predicateArray0[1] = (Predicate<SQLNonTransientException>) anyPredicate0;
      Predicate<SQLNonTransientException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLNonTransientException>) anyPredicate0);
      predicateArray0[2] = predicate1;
      Predicate<SQLNonTransientException> predicate2 = AllPredicate.allPredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLIntegrityConstraintViolationException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLIntegrityConstraintViolationException, ? extends BatchUpdateException>) mapIterator0);
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0);
      assertEquals("[]", string0);
      
      Stack<SQLException> stack0 = new Stack<SQLException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]");
      stack0.add((SQLException) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.loopingListIterator((List<LinkedList<HashSet>>) stack0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<?>) priorityQueue0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      OrderedMapIterator<SQLException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException2.forEach(consumer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, (-954), 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator((SQLSyntaxErrorException) null);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      UniquePredicate<SQLSyntaxErrorException> uniquePredicate0 = new UniquePredicate<SQLSyntaxErrorException>();
      ListIterator<SQLSyntaxErrorException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) listIterator1;
      Hashtable<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>();
      DataTruncation dataTruncation0 = new DataTruncation(1435, false, false, 0, 2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("oTjpB", (Throwable) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLSyntaxErrorException0, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(comparatorPredicate0);
      IteratorUtils.matchesAll((Iterator<ServiceLoader<HashSet>>) iteratorArray0[0], (Predicate<? super ServiceLoader<HashSet>>) comparatorPredicate0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) null;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) null;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) null;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) singletonIterator0, (Transformer<? super Object, ? extends String>) transformer0);
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) iterator0);
      Iterator<String> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator1);
      iteratorArray0[0] = iterator2;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("[");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Integer integer0 = new Integer(345);
      Integer integer1 = new Integer(768);
      Integer integer2 = new Integer(768);
      Integer integer3 = new Integer(345);
      Integer integer4 = new Integer(23);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 1);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) resettableIterator0, 943L);
      Iterator<Integer> iterator3 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) skippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) iterator3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyIterator();
      OrderedMapIterator<Properties, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(orderedMapIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) listIteratorWrapper0, (Iterator<? extends Properties>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) listIteratorWrapper0, (-2041));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2041
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<String, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(abstractOrderedMapIteratorDecorator0);
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 0);
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      Stack<Properties> stack0 = new Stack<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(stack0);
      ResettableListIterator<Closure<SQLClientInfoException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableListIterator0, comparator0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      WhileClosure.whileClosure((Predicate<? super Properties>) predicate0, (Closure<? super Properties>) closure0, true);
      IteratorUtils.apply((Iterator<Properties>) reverseListIterator0, (Closure<? super Properties>) closure0);
      assertFalse(reverseListIterator0.hasNext());
      
      IteratorUtils.size(abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) priorityQueue0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      Properties[] propertiesArray0 = new Properties[7];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties0;
      propertiesArray0[6] = properties0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 1);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) resettableListIterator0, (long) 1);
      IteratorUtils.apply((Iterator<Properties>) skippingIterator0, (Closure<? super Properties>) closure0);
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#[aU");
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Gr7[hIMtp<sZ", "Gr7[hIMtp<sZ", sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedException0.getStackTrace();
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0);
      IteratorUtils.singletonIterator((SQLException) sQLTransactionRollbackException0);
      boolean boolean0 = false;
      DataTruncation dataTruncation0 = new DataTruncation((-2122), false, false, (-2122), (-2122), sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 2217);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(".", ".", 32, sQLInvalidAuthorizationSpecException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", "", 32, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", "clone", 0, sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("IJx ", "Array class must not be null", 32);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("{}", "Array class must not be null");
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("x!@cZjP04", "0");
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLIntegrityConstraintViolationException6, comparator0, comparatorPredicate_Criterion0);
      MapIterator<Integer, Iterator<Class<SQLClientInfoException>>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      sQLIntegrityConstraintViolationException2.getStackTrace();
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) mapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.IteratorChain");
      comparatorPredicate0.evaluate(sQLTransientConnectionException0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      IteratorUtils.find((Iterator<Integer>) loopingListIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) transformer0, 2651, (-621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[0] = arrayDeque0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("T", "", 1379, sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Dt')J");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationException0.getStackTrace();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException3;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException1;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1379);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1379);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-990));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(14);
      integerArray0[4] = integer4;
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.arrayIterator(integerArray0, 1);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator1, (Iterator<? extends Integer>) resettableIterator1, (Iterator<? extends Integer>) resettableIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) zippingIterator0, (long) integerArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      StringValueTransformer.stringValueTransformer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("[");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(345);
      Integer integer1 = new Integer(768);
      Integer integer2 = new Integer(768);
      Integer integer3 = new Integer(345);
      Integer integer4 = new Integer(23);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 1);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) resettableIterator0, 943L);
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) skippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Closure<Object>> arrayDeque1 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[1] = arrayDeque1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("T", "", 1379, sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Dt')J");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationException0.getStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException2);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException4;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException4;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException3;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException4;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException1;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1379);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1379);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-990));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(14);
      integerArray0[4] = integer4;
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.arrayIterator(integerArray0, 1);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator1, (Iterator<? extends Integer>) resettableIterator1, (Iterator<? extends Integer>) resettableIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) zippingIterator0, (long) integerArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!@WiQ");
      IteratorUtils.emptyIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      StringValueTransformer.stringValueTransformer();
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      ArrayDeque<Closure<Object>> arrayDeque1 = new ArrayDeque<Closure<Object>>();
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 5);
      arrayDequeArray0[0] = arrayDeque1;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque1;
      arrayDequeArray0[3] = arrayDeque1;
      arrayDequeArray0[4] = arrayDeque1;
      ResettableListIterator<ArrayDeque<Closure<Object>>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Stack<Properties> stack0 = new Stack<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) arrayDeque1, comparator0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      WhileClosure.whileClosure((Predicate<? super Properties>) predicate0, (Closure<? super Properties>) closure0, true);
      IteratorUtils.apply((Iterator<Properties>) reverseListIterator0, (Closure<? super Properties>) closure0);
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) priorityQueue0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      DataTruncation dataTruncation0 = new DataTruncation(397, false, false, 1475, 0);
      dataTruncation0.getNextWarning();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", dataTruncation0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(stringTokenizer0, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(comparatorPredicate0);
      IteratorUtils.matchesAll((Iterator<ServiceLoader<HashSet>>) resettableIterator0, (Predicate<? super ServiceLoader<HashSet>>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyIterator();
      Iterator<String> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("Sa]g6");
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      DataTruncation dataTruncation0 = new DataTruncation((-1686), true, true, (-1686), (-1686));
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(dataTruncation0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(identityPredicate0, uniquePredicate0);
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      LinkedList<SQLNonTransientException> linkedList2 = new LinkedList<SQLNonTransientException>(linkedList1);
      LinkedList<SQLNonTransientException> linkedList3 = new LinkedList<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 3196);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      IteratorUtils.getIterator(sQLTransientException0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) orPredicate0);
      LinkedList<SQLNonTransientException>[] linkedListArray0 = (LinkedList<SQLNonTransientException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[0] = linkedList1;
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      LinkedList<SQLNonTransientException> linkedList2 = new LinkedList<SQLNonTransientException>(treeSet0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      linkedListArray0[1] = linkedList2;
      LinkedList<SQLNonTransientException> linkedList3 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[2] = linkedList3;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", 1220, sQLTransientException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException1.getStackTrace();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Iterator<SQLWarning>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Closure<Object>> arrayDeque1 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<Closure<Object>> arrayDeque2 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[2] = arrayDeque2;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      Stack<Properties> stack0 = new Stack<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(stack0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      String string0 = null;
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) singletonIterator0, (Transformer<? super Object, ? extends String>) transformer0);
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) iterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("~OsB[rk~", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLRecoverableException0);
      Predicate<SQLSyntaxErrorException> predicate0 = EqualPredicate.equalPredicate(sQLSyntaxErrorException0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(arrayList0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) loopingListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Hashtable<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>();
      EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>(hashtable0);
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      hashtable0.put(sQLSyntaxErrorException0, hashSet0);
      ListIterator<SQLSyntaxErrorException> listIterator1 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray1 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray1[0] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      iteratorArray1[1] = (Iterator<SQLSyntaxErrorException>) objectArrayListIterator0;
      iteratorArray1[2] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      iteratorArray1[3] = (Iterator<SQLSyntaxErrorException>) listIterator1;
      iteratorArray1[4] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      iteratorArray1[5] = (Iterator<SQLSyntaxErrorException>) listIterator1;
      iteratorArray1[6] = (Iterator<SQLSyntaxErrorException>) loopingListIterator0;
      iteratorArray1[7] = (Iterator<SQLSyntaxErrorException>) objectArrayListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray1);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLRecoverableException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = 254;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 651, 1205);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "", (-824));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, sQLTransientException0);
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyIterator();
      OrderedIterator<HashMap<SQLDataException, BatchUpdateException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("R@", (String) null, 0);
      OrderedMapIterator<Properties, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<EnumSet>, Vector<StringTokenizer>>) orderedMapIterator0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      String string0 = "";
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      int int1 = 10;
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement((String) null, (String) null, "", 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> hashMap0 = new HashMap<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>(hashMap0);
      IteratorUtils.isEmpty(entrySetMapIterator0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) arrayList0);
      predicateArray0[0] = predicate0;
      Integer integer0 = new Integer((-4154));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(transformedPredicate0);
      predicateArray0[2] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) reverseListIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(9);
      ResettableListIterator<Class<SQLDataException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Class<SQLDataException>>) resettableListIterator0);
      MapIterator<SQLIntegrityConstraintViolationException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLIntegrityConstraintViolationException, ? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = int0;
      intArray0[2] = (-1);
      intArray0[3] = int0;
      intArray0[4] = 0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = 0;
      intArray0[8] = int0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "List must not be null", 0, intArray0);
      batchUpdateException0.getNextException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0, (Throwable) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("[]", "List must not be null", hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("List must not be null", "", 21, hashtable0, (Throwable) null);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) mapIterator0);
      IteratorUtils.contains((Iterator<SQLTimeoutException>) listIterator0, (Object) listIterator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) null, (Predicate<? super Integer>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      IteratorUtils.getIterator(sQLTransientException0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) orPredicate0);
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Class<SQLDataException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException(".fRfGhNU/@SS84xO-={");
      IteratorUtils.getIterator(sQLTransientException0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) orPredicate0);
      LinkedList<SQLNonTransientException>[] linkedListArray0 = (LinkedList<SQLNonTransientException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[0] = linkedList1;
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      LinkedList<SQLNonTransientException> linkedList2 = new LinkedList<SQLNonTransientException>(treeSet0);
      linkedListArray0[1] = linkedList2;
      LinkedList<SQLNonTransientException> linkedList3 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[2] = linkedList3;
      LinkedList<SQLNonTransientException> linkedList4 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[3] = linkedList4;
      ResettableIterator<LinkedList<SQLNonTransientException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 254);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = new Integer((-3674));
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("IJx ", "Array class must not be null", 32);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("{}", "Array class must not be null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("x!@cZjP04", "0");
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException4;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedList0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, 1435);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      Iterator<String>[] iteratorArray1 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<String, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(abstractOrderedMapIteratorDecorator0);
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) abstractMapIteratorDecorator0);
      iteratorArray1[0] = iterator0;
      IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray1);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      DataTruncation dataTruncation0 = new DataTruncation((-935), false, true, (-935), (-935));
      dataTruncation0.getNextWarning();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (Throwable) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLSyntaxErrorException0, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(comparatorPredicate0);
      IteratorUtils.matchesAll((Iterator<ServiceLoader<HashSet>>) iterator0, (Predicate<? super ServiceLoader<HashSet>>) comparatorPredicate0);
      Object[] objectArray0 = IteratorUtils.toArray(iteratorArray0[0]);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (-3329L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) singletonIterator0, (Transformer<? super Object, ? extends String>) transformer0);
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) iterator0);
      Iterator<String> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator1);
      iteratorArray0[0] = iterator2;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("[");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Integer integer0 = new Integer(345);
      Integer integer1 = new Integer(768);
      Integer integer2 = new Integer(768);
      Integer integer3 = new Integer(345);
      Integer integer4 = new Integer(23);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      Integer integer5 = new Integer((-1716));
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integer5);
      Hashtable<HashSet<Object>, Class<SQLException>> hashtable0 = new Hashtable<HashSet<Object>, Class<SQLException>>();
      EntrySetMapIterator<HashSet<Object>, Class<SQLException>> entrySetMapIterator0 = new EntrySetMapIterator<HashSet<Object>, Class<SQLException>>(hashtable0);
      AbstractMapIteratorDecorator<HashSet<Object>, Class<SQLException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<HashSet<Object>, Class<SQLException>>(entrySetMapIterator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<HashSet<Object>>) abstractMapIteratorDecorator0, (Predicate<? super HashSet<Object>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) singletonIterator0, (Transformer<? super Object, ? extends String>) transformer0);
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) iterator0);
      Iterator<String> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator1);
      iteratorArray0[0] = iterator2;
      Iterator<String> iterator3 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      assertFalse(iterator3.equals((Object)iterator1));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(singletonIterator0, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(comparatorPredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ServiceLoader<HashSet>>) iterator3, (Predicate<? super ServiceLoader<HashSet>>) nullIsTruePredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) singletonIterator0, (Transformer<? super Object, ? extends String>) transformer0);
      OrderedMapIterator<SQLException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLException, SQLTimeoutException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertSame(orderedMapIterator1, orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SingletonIterator<HashSet<Object>> singletonIterator0 = new SingletonIterator<HashSet<Object>>(hashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonIterator0, defaultEquator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      EqualPredicate.equalPredicate((Object) sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<HashSet<Object>>) singletonIterator0, (Predicate<? super HashSet<Object>>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = null;
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator((SQLSyntaxErrorException) null);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      Predicate<SQLSyntaxErrorException> predicate0 = EqualPredicate.equalPredicate((SQLSyntaxErrorException) null);
      ListIterator<SQLSyntaxErrorException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) listIterator1;
      Hashtable<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>();
      EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>(hashtable0);
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      // Undeclared exception!
      try { 
        hashtable0.put((SQLSyntaxErrorException) null, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator((SQLSyntaxErrorException) null);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      UniquePredicate<SQLSyntaxErrorException> uniquePredicate0 = new UniquePredicate<SQLSyntaxErrorException>();
      ListIterator<SQLSyntaxErrorException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) listIterator1;
      Hashtable<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>();
      EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, HashSet<SQLClientInfoException>>(hashtable0);
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      // Undeclared exception!
      try { 
        hashtable0.put((SQLSyntaxErrorException) null, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Closure<Object>> arrayDeque1 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<Closure<Object>> arrayDeque2 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[2] = arrayDeque2;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      Stack<Properties> stack0 = new Stack<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) reverseListIterator0, comparator0);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      Closure<Properties> closure1 = WhileClosure.whileClosure((Predicate<? super Properties>) predicate0, (Closure<? super Properties>) closure0, false);
      IteratorUtils.apply((Iterator<Properties>) reverseListIterator0, (Closure<? super Properties>) closure1);
      assertFalse(reverseListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "setValue() is not supported";
      SQLDataException sQLDataException0 = new SQLDataException("setValue() is not supported", "setValue() is not supported");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) mapIterator0);
      IteratorUtils.contains((Iterator<SQLTimeoutException>) listIterator0, (Object) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<String, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(abstractOrderedMapIteratorDecorator0);
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 0);
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      Stack<Properties> stack0 = new Stack<Properties>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.emptyIterator();
      int int0 = IteratorUtils.size(abstractMapIteratorDecorator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", "'O,f", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", (Map<String, ClientInfoStatus>) null, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("#In(XgB]+:[d65", "", 125, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(iIOMetadataNode0, (-1423), (-1423));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.toString((Iterator<Properties>) objectArrayListIterator0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedList<SQLNonTransientException>[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      propertiesArray0[3] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[4] = properties3;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.toString((Iterator<Properties>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) transformer0);
      Iterable<EnumSet<Locale.Category>> iterable0 = IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.Category>>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) linkedList0);
      IteratorUtils.emptyOrderedMapIterator();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      int int0 = 0;
      linkedList0.retainAll(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[1] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[4] = properties2;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.toString((Iterator<Properties>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = (-1423);
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(iIOMetadataNode0, (-1423), (-1423));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.toString((Iterator<Properties>) objectArrayListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableIterator0, 491L);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) skippingIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      predicateArray0[0] = (Predicate<Object>) andPredicate0;
      IteratorUtils.arrayListIterator(predicateArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 302);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Collection must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 1507, 1507);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = (-88);
      int int1 = (-1454);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, (-88), (-1454));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 1760, (-529));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1667);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<String, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.peekingIterator((Iterator<? extends String>) abstractOrderedMapIteratorDecorator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      LinkedList<LinkedHashSet<SQLRecoverableException>> linkedList0 = new LinkedList<LinkedHashSet<SQLRecoverableException>>();
      ResettableListIterator<LinkedHashSet<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) linkedList0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-458));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-458));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(991);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(".", ".", 32, sQLInvalidAuthorizationSpecException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", "", 32, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", "clone", 0, sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("IJx ", "Array class must not be null", 32);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("{}", "Array class must not be null");
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("x!@cZjP04", "0");
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<?>) priorityQueue0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.emptyOrderedMapIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("list (", "list (");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Invalid index:", "org.apache.commons.collections4.set.ListOrderedSet", 100, hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLFeatureNotSupportedException0);
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      sQLExceptionArray0[1] = (SQLException) sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 847);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 8);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.FORMAT;
      locale_CategoryArray0[8] = locale_Category8;
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(locale_CategoryArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.singletonIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Estimated size must be greater than 0");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<?>) priorityQueue0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      OrderedMapIterator<SQLException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<?>) priorityQueue0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 7);
      Class<StringTokenizer> class2 = StringTokenizer.class;
      classArray0[0] = class2;
      Class<StringTokenizer> class3 = StringTokenizer.class;
      classArray0[1] = class3;
      Class<StringTokenizer> class4 = StringTokenizer.class;
      classArray0[2] = class4;
      Class<StringTokenizer> class5 = StringTokenizer.class;
      classArray0[3] = class5;
      Class<StringTokenizer> class6 = StringTokenizer.class;
      classArray0[4] = class6;
      Class<StringTokenizer> class7 = StringTokenizer.class;
      classArray0[5] = class7;
      Class<StringTokenizer> class8 = StringTokenizer.class;
      classArray0[6] = class8;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class1, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "", (-824));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientConnectionException0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) orderedMapIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      OrderedMapIterator<SQLException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 0, 2606);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<String, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(orderedMapIterator1);
      AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLInvalidAuthorizationSpecException>(abstractOrderedMapIteratorDecorator0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "Ea20|AY+Tj7yh";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("SG9-YvqC~/", "Ea20|AY+Tj7yh", (-1874));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!@WiQ");
      IteratorUtils.size(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "t1)r2vv";
      stringArray0[1] = "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "qi";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("qi");
      sQLNonTransientException0.getSuppressed();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.getIterator(sQLDataException0);
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException(".fRfGhNU/@SS84xO-={");
      IteratorUtils.getIterator(sQLTransientException0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyIterator();
      OrderedIterator<HashMap<SQLDataException, BatchUpdateException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) mapIterator0);
      IteratorUtils.contains((Iterator<SQLTimeoutException>) listIterator0, (Object) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyIterator();
      OrderedIterator<HashMap<SQLDataException, BatchUpdateException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<?>) iterator0);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer integer0 = new Integer((-3674));
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<?>) priorityQueue0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Integer integer0 = new Integer(3202);
      Integer integer1 = new Integer(1535);
      Integer integer2 = new Integer(1535);
      Integer integer3 = new Integer(21);
      Integer integer4 = new Integer(1535);
      Integer[] integerArray0 = new Integer[19];
      integerArray0[0] = integer4;
      integerArray0[1] = integer4;
      integerArray0[2] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(integerArray0[1], comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      assertEquals(18, objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      int int1 = 9;
      Integer integer4 = new Integer(9);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1256);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(920);
      integerArray0[7] = integer7;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(int1, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer(30);
      Integer integer2 = new Integer(1535);
      Integer integer3 = new Integer(1535);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer4;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Iterator<Closure<SQLClientInfoException>> iterator0 = EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.previousIndex());
  }
}
