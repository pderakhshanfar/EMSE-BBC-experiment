/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 03:13:14 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) resettableIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 98
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(218);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0;
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(arrayList0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) loopingListIterator0, 100);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("9Bvy,c:$,|*Y5Br?", "9Bvy,c:$,|*Y5Br?", 10);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator(sQLWarning0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) listIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, class0);
      assertEquals(0, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      SingletonListIterator<Transformer<Object, Integer>> singletonListIterator0 = new SingletonListIterator<Transformer<Object, Integer>>(transformer0);
      SkippingIterator<Transformer<Object, Integer>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Transformer<Object, Integer>>) singletonListIterator0, 763L);
      ZippingIterator<Transformer<Object, Integer>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Transformer<Object, Integer>>) skippingIterator0, (Iterator<? extends Transformer<Object, Integer>>) skippingIterator0, (Iterator<? extends Transformer<Object, Integer>>) singletonListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Stack<HashSet<StringTokenizer>> stack0 = new Stack<HashSet<StringTokenizer>>();
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>(2202);
      stack0.add(hashSet0);
      ResettableListIterator<HashSet<StringTokenizer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<HashSet<StringTokenizer>>) stack0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{", "{", 4);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableExceptionArray0[1];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      SQLRecoverableException sQLRecoverableException1 = IteratorUtils.get((Iterator<SQLRecoverableException>) resettableIterator0, 4);
      assertEquals("{", sQLRecoverableException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Zlcg[iWI Tfe$8r", "Zlcg[iWI Tfe$8r", hashMap0);
      sQLExceptionArray0[0] = (SQLException) sQLClientInfoException0;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      SQLException sQLException0 = IteratorUtils.find((Iterator<SQLException>) objectArrayIterator0, (Predicate<? super SQLException>) predicate0);
      assertSame(sQLException0, sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<ClientInfoStatus>) orderedIterator0;
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[4];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PriorityQueue<SQLTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 2);
      ResettableListIterator<PriorityQueue<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Stack<Class<SQLTimeoutException>>[] stackArray0 = (Stack<Class<SQLTimeoutException>>[]) Array.newInstance(Stack.class, 8);
      ResettableIterator<Stack<Class<SQLTimeoutException>>> resettableIterator0 = IteratorUtils.arrayIterator(stackArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String[] stringArray0 = new String[4];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends PriorityQueue<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, (int) integerArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>) null, (Iterator<?>) orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<SQLClientInfoException>[] vectorArray0 = (Vector<SQLClientInfoException>[]) Array.newInstance(Vector.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(vectorArray0, 0, (-1588));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((PriorityQueue<SQLTransientConnectionException>[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ArrayDeque<BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10, (-3113));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashSet<SQLRecoverableException>[] hashSetArray0 = (HashSet<SQLRecoverableException>[]) Array.newInstance(HashSet.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(hashSetArray0, 8, (-1830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashSet<SQLRecoverableException>[] hashSetArray0 = (HashSet<SQLRecoverableException>[]) Array.newInstance(HashSet.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(hashSetArray0, 8, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 1404);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, (-1), 400);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) batchUpdateException0, comparator0);
      Transformer<Object, BatchUpdateException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, BatchUpdateException> ifTransformer0 = new IfTransformer<Object, BatchUpdateException>(predicate0, transformer0, transformer0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) ifTransformer0);
      DataTruncation dataTruncation0 = new DataTruncation(3, false, true, 3, (-1852));
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) singletonListIterator0, (Closure<? super Object>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.iterators.EmptyMapIterator");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "1Omn){6rN0>$");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("#v", "1Omn){6rN0>$", hashtable0, sQLTransientException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) factoryTransformer0, "org.apache.commons.collections4.iterators.EmptyMapIterator", "org.apache.commons.collections4.iterators.EmptyMapIterator", "org.apache.commons.collections4.iterators.EmptyMapIterator");
      assertEquals("org.apache.commons.collections4.iterators.EmptyMapIteratororg.apache.commons.collections4.iterators.EmptyMapIteratororg.apache.commons.collections4.iterators.EmptyMapIterator", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = linkedList0.descendingIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super SQLClientInfoException, String>) factoryTransformer0, "transformer ]ay not be null", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) factoryTransformer0, "=:/CnTw52!u})k{", "transformer may not be null", "m)! sC6/D|");
      assertEquals("transformer may not be nullm)! sC6/D|", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, LinkedList<SQLFeatureNotSupportedException>>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) entrySetMapIterator0, (Transformer<? super SQLClientInfoException, String>) null, "transformer may not be null", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) listIterator0, 3471);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = linkedList0.descendingIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLClientInfoException, String>) factoryTransformer0, "transformer ]ay not be null", "Iterator must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedIterator<Stack<Properties>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) orderedIterator0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.get((Iterator<SQLRecoverableException>) resettableIterator0, 4);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedMapIterator<Object, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 12, 10, sQLSyntaxErrorException0);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      sQLWarningArray0[1] = sQLWarning0;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) objectArrayListIterator0, (Predicate<? super SQLWarning>) uniquePredicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) objectArrayListIterator0, (Predicate<? super SQLWarning>) uniquePredicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLWarning>) resettableIterator0, (Predicate<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) null);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) listIterator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) listIterator0, (Predicate<? super Object>) nullIsFalsePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) nullIsFalsePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLWarning>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0;
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLException>) iteratorArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<Integer, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) orderedMapIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Integer>) singletonIterator0, (Predicate<? super Integer>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) closure0);
      assertFalse(linkedHashSet0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<Object> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) resettableListIterator0, (Closure<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<Object> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      IteratorUtils.apply((Iterator<Object>) resettableListIterator0, (Closure<? super Object>) closure0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("$}(znO63");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedMapIterator<Locale.Category, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Iterator<Locale.Category>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null, 354);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "1Omn){6rN0>$");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("#v", "1Omn){6rN0>$", hashtable0, sQLTransientException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) singletonIterator0, class0);
      assertEquals(1, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(vector0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      Iterable<String> iterable0 = IteratorUtils.asIterable((Iterator<? extends String>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<Locale.Category, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) null, (Collection<? super Locale.Category>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      OrderedMapIterator<Locale.Category, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) orderedMapIterator0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableIterator0, 0L, 2602L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Predicate<Locale.Category> predicate0 = EqualPredicate.equalPredicate(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) null, (Predicate<? super Locale.Category>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate((SQLNonTransientException) sQLSyntaxErrorException0, (Equator<SQLNonTransientException>) null);
      NotPredicate<SQLNonTransientException> notPredicate0 = new NotPredicate<SQLNonTransientException>(predicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) notPredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = linkedList0.descendingIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Transformer<Object, SQLRecoverableException>[] transformerArray0 = (Transformer<Object, SQLRecoverableException>[]) Array.newInstance(Transformer.class, 1);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, ? extends SQLRecoverableException>) transformerArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Hashtable<Object, BatchUpdateException> hashtable0 = new Hashtable<Object, BatchUpdateException>();
      Transformer<Object, BatchUpdateException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends BatchUpdateException>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) null, (Transformer<? super Locale.Category, ? extends BatchUpdateException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Factory<Locale.Category> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Locale.Category> factoryTransformer0 = new FactoryTransformer<Object, Locale.Category>(factory0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends Locale.Category>) factoryTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Hashtable<Properties, HashSet<SQLTransactionRollbackException>> hashtable0 = new Hashtable<Properties, HashSet<SQLTransactionRollbackException>>();
      EntrySetMapIterator<Properties, HashSet<SQLTransactionRollbackException>> entrySetMapIterator0 = new EntrySetMapIterator<Properties, HashSet<SQLTransactionRollbackException>>(hashtable0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) entrySetMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-651), 2518);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<Predicate<Object>>[] iteratorArray0 = (Iterator<Predicate<Object>>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Hashtable<PriorityQueue<SQLException>, SQLRecoverableException> hashtable0 = new Hashtable<PriorityQueue<SQLException>, SQLRecoverableException>();
      EntrySetMapIterator<PriorityQueue<SQLException>, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<PriorityQueue<SQLException>, SQLRecoverableException>(hashtable0);
      MapIterator<PriorityQueue<SQLException>, SQLRecoverableException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<PriorityQueue<SQLException>, SQLRecoverableException>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, (-435), (-435));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayList<Properties>[]) null, 10, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertEquals("[null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("1eY", (Transformer<? super String, ? extends String>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) orderedIterator0, 1610L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<String, Transformer<Object, Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0, 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedMapIterator<Properties, Vector<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<Properties>) orderedMapIterator0, (Object) orderedMapIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) null);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      IteratorUtils.apply((Iterator<Object>) listIterator0, (Closure<? super Object>) closure0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OrderedMapIterator<SQLException, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">1)aHW]d6d&9s");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 1820);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<ArrayDeque<HashMap>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
