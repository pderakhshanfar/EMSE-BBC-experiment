/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 03:21:15 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(stack0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) reverseListIterator0, (Iterator<? extends SQLTimeoutException>) reverseListIterator0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) reverseListIterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, 100, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MapIterator<Integer, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<Integer>) mapIterator0;
      MapIterator<Integer, PriorityQueue<String>> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[1] = (Iterator<Integer>) mapIterator1;
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLSyntaxErrorException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) orderedMapIterator0;
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) iteratorArray0[0]);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      SQLRecoverableException[] sQLRecoverableExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) objectArrayIterator0, class0);
      assertEquals(7, sQLRecoverableExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      Properties properties1 = IteratorUtils.find((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) predicate0);
      assertTrue(properties1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) singletonIterator0;
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) singletonIterator0;
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) singletonIterator0;
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.TransformerClosure", "", hashtable0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) singletonIterator0;
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) singletonIterator0;
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) singletonIterator0;
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) singletonIterator0;
      iteratorArray0[4] = (Iterator<SQLClientInfoException>) singletonIterator0;
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) singletonIterator0;
      iteratorArray0[6] = (Iterator<SQLClientInfoException>) singletonIterator0;
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef");
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      BoundedIterator<SQLTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<SQLException>[] arrayListArray0 = (ArrayList<SQLException>[]) Array.newInstance(ArrayList.class, 4);
      ResettableIterator<ArrayList<SQLException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, Stack<LinkedHashSet>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      ResettableIterator<LinkedHashSet<DataTruncation>> resettableIterator0 = IteratorUtils.singletonIterator(linkedHashSet0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) resettableIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "o", "o", "o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Boolean>) resettableIterator0, (Transformer<? super Boolean, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 1031, longArray0, sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, batchUpdateException0);
      arrayList0.add(sQLRecoverableException0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) linkedList0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", batchUpdateException0);
      linkedList0.add(sQLRecoverableException0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) resettableListIterator0, (-1753L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) (-1));
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>((Transformer<? super Integer, Boolean>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, 312);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) objectArrayIterator0, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, (-2030L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ArrayList<SQLException>[]) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ArrayDeque<IIOMetadataNode>[]) null, (-3928), (-3928));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<ArrayList<SQLException>>[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-5199), (-5199));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, 3934);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer(922);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 922, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Od?I?Z;");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("remove() can only be called once after next()");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) resettableIterator0, (Closure<? super IIOMetadataNode>) transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'remove() can only be called once after next()' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) null, (Transformer<? super LinkedHashSet<DataTruncation>, String>) invokerTransformer0, "P:35lJ ozage4", "", "P:35lJ ozage4");
      assertEquals("P:35lJ ozage4", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<EnumSet<ClientInfoStatus>>) null, (Predicate<? super EnumSet<ClientInfoStatus>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, 15);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) orderedIterator0, 12);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) singletonIterator0, 0L, (-2591L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      ListIterator<LinkedHashSet<DataTruncation>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Array class must not be null");
      String string0 = IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) listIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) constantTransformer0, "Array class must not be null", "Array class must not be null", "");
      assertTrue(listIterator0.hasPrevious());
      assertEquals("Array class must not be nullArray class must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      ListIterator<LinkedHashSet<DataTruncation>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) listIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) constantTransformer0, "", "", "");
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      OrderedMapIterator<LinkedHashSet<DataTruncation>, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) orderedMapIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) constantTransformer0, "{HVO0R;cP", "cBS`)#n\"~\u0004", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) resettableListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) constantTransformer0, "kCwPaseUQ", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) null, (Transformer<? super LinkedHashSet<DataTruncation>, String>) null, "", "NeUV>2", "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) singletonIterator0, 1201);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1200
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = IteratorUtils.get((Iterator<SQLTimeoutException>) singletonIterator0, 0);
      assertNull(sQLTimeoutException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 312);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 312
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("remove() can only be called once after next()");
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedList0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("remove() can only be called once after next()");
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<String>) listIterator0, (Predicate<? super String>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("remove() can only be called once after next()");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<String>) listIterator0, (Predicate<? super String>) uniquePredicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<String>) null, (Predicate<? super String>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) (-1));
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Iterator<ServiceLoader>> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicate0, (Equator<Object>) defaultEquator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) defaultEquator0.HASHCODE_NULL);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) predicate1);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<EnumSet<ClientInfoStatus>>) null, (Predicate<? super EnumSet<ClientInfoStatus>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("D", "=|~P[}w&rL0SQi!l z");
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) sQLSyntaxErrorException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "D");
      IteratorUtils.find((Iterator<Object>) listIterator0, (Predicate<? super Object>) predicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      Properties properties0 = IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) transformedPredicate0);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer((-841));
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) null, (Closure<? super SQLNonTransientConnectionException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Iterator<ServiceLoader>> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicate0, (Equator<Object>) defaultEquator0);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("remove() can only be called once after next()");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate1, transformerClosure0, false);
      IteratorUtils.apply((Iterator<IIOMetadataNode>) resettableIterator0, (Closure<? super IIOMetadataNode>) whileClosure0);
      assertFalse(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientConnectionException0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0, (-1844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null, 777);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MapIterator<Locale.Category, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) mapIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) arrayDeque0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends LinkedList<IIOMetadataNode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("#}]0?.hi");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<TreeSet<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) stack0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableListIterator0, class0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) reverseListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<Properties> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) uniquePredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<SQLTransientConnectionException, IIOMetadataNode> hashMap0 = new HashMap<SQLTransientConnectionException, IIOMetadataNode>();
      EntrySetMapIterator<SQLTransientConnectionException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, IIOMetadataNode>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator0, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("xf&.6S:-", "]", (Throwable) null);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "#}]0?.hi", sQLDataException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLIntegrityConstraintViolationException0, defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) null, (Predicate<? super SQLException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<SQLClientInfoException> transformerPredicate0 = new TransformerPredicate<SQLClientInfoException>(transformer0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) transformerPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedList0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertTrue(list0.contains(iIOMetadataNode0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Integer, IIOMetadataNode> hashMap0 = new HashMap<Integer, IIOMetadataNode>();
      EntrySetMapIterator<Integer, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<Integer, IIOMetadataNode>(hashMap0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) entrySetMapIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<PriorityQueue<SQLNonTransientException>>) null, (Transformer<? super PriorityQueue<SQLNonTransientException>, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) resettableListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException>[] arrayDequeArray0 = (ArrayDeque<SQLTransactionRollbackException>[]) Array.newInstance(ArrayDeque.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(arrayDequeArray0, 1, (-1034));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector<SQLRecoverableException>[] vectorArray0 = (Vector<SQLRecoverableException>[]) Array.newInstance(Vector.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(vectorArray0, (-2491), 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<Properties>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) resettableIterator0, (Iterator<? extends Locale.Category>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Collection must not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Collection must not be null", "org.apache.commons.collections4.iterators.ArrayIterator", 2233, sQLTimeoutException0);
      HashMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>();
      Transformer<SQLNonTransientConnectionException, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) hashMap0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ResettableIterator<Transformer<Object, ArrayList<SQLException>>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      BoundedIterator<Transformer<Object, ArrayList<SQLException>>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Transformer<Object, ArrayList<SQLException>>>) resettableIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 864);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = IteratorUtils.contains((Iterator<Boolean>) null, (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("j@i1p:Nmy4@jS", "j@i1p:Nmy4@jS");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("j@i1p:Nmy4@jS", "GdUx0b_63oCLed2&", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 2891);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      ListIterator<LinkedHashSet<DataTruncation>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) listIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) constantTransformer0, (String) null, "bDT}NiT8&^),W1,@aM", "bDT}NiT8&^),W1,@aM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, Integer> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, Integer>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, Integer>(hashMap0);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Integer>(entrySetMapIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }
}
