/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 18:55:08 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Node must not be null", "Node must not be null");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) singletonListIterator0, 88);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 87
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<Integer, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) mapIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      OrderedMapIterator<SQLClientInfoException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedMapIterator<String, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) orderedMapIterator1, (Iterator<?>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 783, (-891));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedIterator<HashMap<SQLTransientException, String>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<HashMap<SQLTransientException, String>>) orderedIterator0, (Transformer<? super HashMap<SQLTransientException, String>, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableListIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("J-YE;>g'iqkf{O\"/", "J-YE;>g'iqkf{O\"/", 10, hashMap0, sQLTransactionRollbackException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) singletonIterator0, class0);
      assertEquals(1, sQLClientInfoExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) singletonIterator0, 1L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      DataTruncation dataTruncation0 = new DataTruncation(14, true, true, 1, 1813);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableListIterator0;
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      iteratorArray0[2] = (Iterator<DataTruncation>) singletonIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayList<SQLTransientConnectionException>[] arrayListArray0 = (ArrayList<SQLTransientConnectionException>[]) Array.newInstance(ArrayList.class, 4);
      ResettableListIterator<ArrayList<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayListArray0, 1, 2);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.LanguageRange>) null, (Iterator<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Class<SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PriorityQueue<SQLTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 6);
      ObjectArrayListIterator<PriorityQueue<SQLTransientConnectionException>> objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<SQLTransientConnectionException>>(priorityQueueArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLTransientConnectionException>>) objectArrayListIterator0, (Transformer<? super PriorityQueue<SQLTransientConnectionException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g(8rq3z}[K=A+.3I.e%", "YPGxr+y4c2N!FFJ7bT");
      stack0.add(sQLTransactionRollbackException0);
      loopingIterator0.reset();
      // Undeclared exception!
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@N\"", "", (-924));
      stack0.add(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(loopingIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 9);
      classArray0[0] = class0;
      ResettableIterator<Class<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(locale_Category0);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("");
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) identityPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Class<Properties>>) resettableIterator0, (Predicate<? super Class<Properties>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Class' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (-1L), 3512L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, (-72L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLWarning[]) null, 389, (-717));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode>[] linkedHashSetArray0 = (LinkedHashSet<IIOMetadataNode>[]) Array.newInstance(LinkedHashSet.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(linkedHashSetArray0, 3806);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 593);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 1218, 1218);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, (-19));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Class<SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 361, 361);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (int) 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<HashMap<SQLTransientException, String>>) null, (Transformer<? super HashMap<SQLTransientException, String>, String>) transformer0, "O='Saz6s2", "SV0Yd1lvQGp}kTU", "org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      assertEquals("SV0Yd1lvQGp}kTUorg.apache.commons.collections4.iterators.EmptyOrderedIterator", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g(8rq3z}[K=A+.3I.e%", "YPGxr+y4c2N!FFJ7bT");
      stack0.add(sQLTransactionRollbackException0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<SQLTransactionRollbackException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLTransactionRollbackException>>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) loopingIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) transformedPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(stack0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<SQLTransactionRollbackException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLTransactionRollbackException>>) arrayDeque0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) loopingIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0, 10);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MapIterator<SQLTimeoutException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (long) 0, 0L);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) boundedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ResettableIterator<HashMap<SQLTransientException, String>> resettableIterator0 = IteratorUtils.singletonIterator((HashMap<SQLTransientException, String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashMap<SQLTransientException, String>>) resettableIterator0, (Transformer<? super HashMap<SQLTransientException, String>, String>) transformer0, "org.apache.commons.collections4.IteratorUtils", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<HashMap<SQLTransientException, String>> stack0 = new Stack<HashMap<SQLTransientException, String>>();
      ResettableListIterator<HashMap<SQLTransientException, String>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<HashMap<SQLTransientException, String>>) stack0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("prefix may not be null", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashMap<SQLTransientException, String>>) resettableListIterator0, (Transformer<? super HashMap<SQLTransientException, String>, String>) invokerTransformer0, "_Wc^2u", (String) null, "g(8rq3z}[K=A+.3I.e%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedIterator<HashMap<SQLTransientException, String>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashMap<SQLTransientException, String>>) orderedIterator0, (Transformer<? super HashMap<SQLTransientException, String>, String>) transformer0, (String) null, "", "org.apache.commons.collections4.IteratorUtils");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashMap<SQLTransientException, String>>) null, (Transformer<? super HashMap<SQLTransientException, String>, String>) null, "", "org.apache.commons.collections4.IteratorUtils", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g(8rq3z}[K=A+.3I.e%", "YPGxr+y4c2N!FFJ7bT");
      stack0.add(sQLTransactionRollbackException0);
      loopingIterator0.reset();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = IteratorUtils.get((Iterator<SQLTransactionRollbackException>) loopingIterator0, 86);
      assertEquals("java.sql.SQLTransactionRollbackException: g(8rq3z}[K=A+.3I.e%", sQLTransactionRollbackException1.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g(8rq3z}[K=A+.3I.e%", "YPGxr+y4c2N!FFJ7bT");
      stack0.add(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) loopingIterator0, 86);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      SingletonListIterator<Class<Properties>> singletonListIterator0 = new SingletonListIterator<Class<Properties>>(class0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableListIterator<Class<SQLFeatureNotSupportedException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer(47);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      NotPredicate<ClientInfoStatus> notPredicate0 = new NotPredicate<ClientInfoStatus>(identityPredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) notPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) reverseListIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(arrayList0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) reverseListIterator0, (Predicate<? super ClientInfoStatus>) nullIsExceptionPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("1", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Object) sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("q>.)I%.KKi`;5AR61?", "q>.)I%.KKi`;5AR61?");
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Predicate must not be null", sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLTransactionRollbackException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Object) resettableIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate1 = IteratorUtils.find((Iterator<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) predicate0);
      assertNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      SingletonListIterator<Class<Properties>> singletonListIterator0 = new SingletonListIterator<Class<Properties>>(class0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(singletonListIterator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(identityPredicate0);
      IteratorUtils.find((Iterator<Class<Properties>>) singletonListIterator0, (Predicate<? super Class<Properties>>) nullIsFalsePredicate0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator((Boolean) null);
      IteratorUtils.apply((Iterator<Boolean>) listIterator0, (Closure<? super Boolean>) closure0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Boolean>) null, (Closure<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("z>+X$x1^qa\"Z", hashMap0, (Throwable) null);
      Transformer<Object, SQLClientInfoException> transformer0 = ConstantTransformer.constantTransformer(sQLClientInfoException0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Boolean>) null, (Closure<? super Boolean>) closure0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("j<iRcmtr1,Y1,lM!", "]", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("mT@Ih|_4");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(stack0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(loopingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableIterator0, (-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, (-1599));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, class0);
      assertEquals(0, sQLClientInfoExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MapIterator<SQLDataException, Closure<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException>(mapIterator0);
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      Iterable<Integer> iterable0 = IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null, (Collection<? super SQLDataException>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedMapIterator0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedHashSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>>(hashMap0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) entrySetMapIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<HashSet<SQLNonTransientException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("l&$A#'dw", "3+z", 512);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AnyPredicate<ClientInfoStatus> anyPredicate0 = new AnyPredicate<ClientInfoStatus>((Predicate<? super ClientInfoStatus>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(nullIsFalsePredicate0, predicate0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) andPredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends ClientInfoStatus>) reverseListIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>((Predicate<? super IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>((Predicate<? super IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>>(hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Node must not be null", "", 39);
      ConstantTransformer<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> constantTransformer0 = new ConstantTransformer<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLNonTransientException>) constantTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) null, (Transformer<? super SQLDataException, ? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, ? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, (-2667), (-2274));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) listIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) resettableListIterator0, (-587L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      OrderedMapIterator<HashMap<SQLSyntaxErrorException, BatchUpdateException>, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<HashMap<SQLSyntaxErrorException, BatchUpdateException>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<HashMap<SQLSyntaxErrorException, BatchUpdateException>, BatchUpdateException>(orderedMapIterator0);
      String string0 = IteratorUtils.toString((Iterator<HashMap<SQLSyntaxErrorException, BatchUpdateException>>) abstractOrderedMapIteratorDecorator0, (Transformer<? super HashMap<SQLSyntaxErrorException, BatchUpdateException>, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayList0, 0, (-2662));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) orderedMapIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<Properties, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, ServiceLoader<Integer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ServiceLoader<Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ServiceLoader<Integer>>(orderedMapIterator0);
      MapIterator<SQLFeatureNotSupportedException, ServiceLoader<Integer>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, ServiceLoader<Integer>>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 709, 2704);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ArrayList<SQLTimeoutException>[] arrayListArray0 = (ArrayList<SQLTimeoutException>[]) Array.newInstance(ArrayList.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 1163, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Transformer<Object, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) null, (Transformer<? super Object, ?>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, TreeSet<SQLNonTransientConnectionException>>(hashtable0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) entrySetMapIterator0, 2311L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0, 26);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      Predicate<SQLWarning> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLWarning>) predicate0, (Predicate<? super SQLWarning>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Locale.LanguageRange> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) arrayList0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, (-55));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MapIterator<EnumSet<ClientInfoStatus>, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 3157);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableListIterator<Class<SQLFeatureNotSupportedException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Class<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Class<SQLFeatureNotSupportedException>>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
