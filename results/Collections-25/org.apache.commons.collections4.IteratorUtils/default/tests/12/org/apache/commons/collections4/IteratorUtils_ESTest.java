/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:24:57 GMT 2020
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<SQLSyntaxErrorException, BatchUpdateException> hashMap0 = new HashMap<SQLSyntaxErrorException, BatchUpdateException>();
      EntrySetMapIterator<SQLSyntaxErrorException, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, BatchUpdateException>(hashMap0);
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, BatchUpdateException>(entrySetMapIterator0);
      MapIterator<SQLSyntaxErrorException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, BatchUpdateException>) abstractMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", 1493, (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "org.apache.commons.collections4.iterators.IteratorChain", sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 100, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MapIterator<SQLDataException, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrderedMapIterator<Stack<SQLRecoverableException>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<Stack<SQLRecoverableException>>) orderedMapIterator0, (Transformer<? super Stack<SQLRecoverableException>, String>) transformer0, "org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator", "zG|", "");
      assertEquals("zG|", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("0ro4f6Fe~>T`");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("wN6xO^Q7", (Transformer<? super String, ? extends String>) constantTransformer0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer may not be null");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Integer>(orderedMapIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<Integer>) abstractOrderedMapIteratorDecorator0;
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MapIterator<SQLDataException, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<SQLClientInfoException>[] arrayListArray0 = (ArrayList<SQLClientInfoException>[]) Array.newInstance(ArrayList.class, 6);
      ResettableListIterator<ArrayList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayListArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Closure<Object>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 14);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, (-982));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0, (-740));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLWarning0);
      AndPredicate<BatchUpdateException> andPredicate0 = new AndPredicate<BatchUpdateException>(equalPredicate0, equalPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) andPredicate0);
      assertFalse(listIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) arrayList0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0, 999);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLWarning> hashMap0 = new HashMap<SQLTimeoutException, SQLWarning>();
      EntrySetMapIterator<SQLTimeoutException, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLWarning>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0, (long) (-852), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OrderedMapIterator<Stack<SQLRecoverableException>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Stack<SQLRecoverableException>, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Stack<SQLRecoverableException>, DataTruncation>(orderedMapIterator0);
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<SQLRecoverableException>>) abstractOrderedMapIteratorDecorator0, (Transformer<? super Stack<SQLRecoverableException>, String>) transformer0, "No next() entry in the iteration", "?](zy',-+Vb1Z0", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OrderedMapIterator<Stack<SQLRecoverableException>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<Stack<SQLRecoverableException>>) orderedMapIterator0, (Transformer<? super Stack<SQLRecoverableException>, String>) transformer0, "5", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OrderedMapIterator<Stack<SQLRecoverableException>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<SQLRecoverableException>>) orderedMapIterator0, (Transformer<? super Stack<SQLRecoverableException>, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hashtable<Iterator<SQLDataException>, SQLRecoverableException> hashtable0 = new Hashtable<Iterator<SQLDataException>, SQLRecoverableException>();
      EntrySetMapIterator<Iterator<SQLDataException>, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<SQLDataException>, SQLRecoverableException>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Iterator<SQLDataException>>) entrySetMapIterator0, 1655);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1655
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) arrayList0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, Hashtable<DataTruncation, Closure>> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AndPredicate<BatchUpdateException> andPredicate0 = new AndPredicate<BatchUpdateException>((Predicate<? super BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) null);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) andPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OrderedMapIterator<Predicate<Object>, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Predicate<Object>>) orderedMapIterator0, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("j3>oNMpvFs", "", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "0ro4f6Fe~>T`");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException1);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("j3>oNMpvFs", "", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, closure0, false);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(uniquePredicate0, whileClosure0);
      IteratorUtils.apply((Iterator<String>) resettableIterator0, (Closure<? super String>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "Already at start of list.", 71);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLDataException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(">0-z)WZcCbW%xt");
      Iterator<?> iterator0 = IteratorUtils.getIterator(equalPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(14, false, true, 0, 14);
      hashSet0.add(dataTruncation0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) hashSet0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, class0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) hashSet0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, Hashtable<DataTruncation, Closure>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) resettableIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) linkedHashSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("transformer may not be null", "", 2648);
      DataTruncation dataTruncation0 = new DataTruncation(61, false, false, 0, 1, sQLDataException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer may not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer may not be null");
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<IIOMetadataNode> predicate0 = EqualPredicate.equalPredicate(iIOMetadataNode0, (Equator<IIOMetadataNode>) defaultEquator0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("MtHZjE");
      Predicate<IIOMetadataNode> predicate0 = EqualPredicate.equalPredicate(iIOMetadataNode0, (Equator<IIOMetadataNode>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(vector0);
      Predicate<IIOMetadataNode> predicate0 = NotNullPredicate.notNullPredicate();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) reverseListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("j3>0NMpv{s", "", 0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, sQLDataException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) hashSet0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) listIterator0, (Iterator<? extends DataTruncation>) listIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 12);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      SkippingIterator<SQLIntegrityConstraintViolationException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, 185L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator((SQLDataException) null);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) vector0);
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 1, (-3866));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      OrderedMapIterator<Locale.Category, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, IIOMetadataNode>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0, (-499L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-895), true, false, (-895), (-895));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "transformer may not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ResettableListIterator<Closure<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Closure<Object>> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Closure<Object>>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null, (-1593));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      assertNotNull(iterator0);
  }
}
