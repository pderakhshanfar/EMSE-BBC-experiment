/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 07:50:42 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      ObjectArrayListIterator<Locale.Category> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.Category>(locale_CategoryArray0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) objectArrayListIterator0, (Iterator<? extends Locale.Category>) objectArrayListIterator0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) iterator0, (Iterator<? extends Locale.Category>) iterator0, (Iterator<? extends Locale.Category>) objectArrayListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
      iteratorArray0[0] = (Iterator<Locale.Category>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) iteratorArray0[0], (Iterator<? extends Locale.Category>) iteratorArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>((SQLClientInfoException) null, false);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(singletonIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) listIteratorWrapper0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIteratorWrapper0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
      iteratorArray0[0] = (Iterator<Locale.Category>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<Locale.Category>) resettableListIterator0;
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) iteratorArray0[0], (Iterator<? extends Locale.Category>) iteratorArray0[1]);
      iteratorArray0[2] = (Iterator<Locale.Category>) zippingIterator0;
      ZippingIterator<Locale.Category> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      assertFalse(zippingIterator1.equals((Object)zippingIterator0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("setValue() is not supported", "K<:zAekO'tD", 1716);
      linkedList0.add(sQLNonTransientConnectionException0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("M)q>ZX");
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ConstantFactory<Locale.Category> constantFactory0 = new ConstantFactory<Locale.Category>(locale_Category0);
      Transformer<Object, Locale.Category> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Locale.Category>) constantFactory0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) iterator0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) iterator0, (Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Iterator<Iterator<EnumSet<Locale.Category>>> iterator0 = EmptyIterator.emptyIterator();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(instanceofPredicate0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OrderedMapIterator<LinkedHashSet<SQLNonTransientConnectionException>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      sQLTransientExceptionArray0[3] = sQLTransientExceptionArray0[0];
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0, 3);
      SQLTransientException sQLTransientException1 = IteratorUtils.get((Iterator<SQLTransientException>) objectArrayIterator0, 0);
      assertNull(sQLTransientException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("]an;AMfp");
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLClientInfoException>) null, (Object) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Stack<EnumSet<Locale.Category>> stack0 = new Stack<EnumSet<Locale.Category>>();
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<EnumSet<Locale.Category>>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<EnumSet<Locale.Category>>) resettableListIterator0;
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.Category>>) comparator0, (Iterator<? extends EnumSet<Locale.Category>>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ServiceLoader<SQLRecoverableException> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      Iterator<SQLRecoverableException> iterator0 = serviceLoader0.iterator();
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Transformer<Object, SQLTransactionRollbackException>[] transformerArray0 = (Transformer<Object, SQLTransactionRollbackException>[]) Array.newInstance(Transformer.class, 2);
      ResettableIterator<Transformer<Object, SQLTransactionRollbackException>> resettableIterator0 = IteratorUtils.arrayIterator(transformerArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) null, (Iterator<? extends EnumSet<Locale.Category>>) null, (Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Vector<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("node must not be null!", "Cannot set to list until next() or previous() called");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "]{[[z_{5}\"", "Enumeration must not be null", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Stack<EnumSet<Locale.Category>> stack0 = new Stack<EnumSet<Locale.Category>>();
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      stack0.add(enumSet0);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<EnumSet<Locale.Category>> stack0 = new Stack<EnumSet<Locale.Category>>();
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) stack0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      stack0.addElement(enumSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<EnumSet<Locale.Category>> stack0 = new Stack<EnumSet<Locale.Category>>();
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<EnumSet<Locale.Category>>) resettableListIterator0, (-2543L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Stack<EnumSet<Locale.Category>> stack0 = new Stack<EnumSet<Locale.Category>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) stack0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      Enumeration<String> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration1, (Collection<? super String>) arrayList0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) iterator1);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) uniquePredicate0);
      int int0 = IteratorUtils.size(iterator1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("DPtm", "DPtm", 290);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0);
      ArrayList<PriorityQueue<Locale.Category>> arrayList0 = new ArrayList<PriorityQueue<Locale.Category>>(3370);
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      arrayList0.add(priorityQueue0);
      ResettableListIterator<PriorityQueue<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<PriorityQueue<Locale.Category>>) arrayList0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<PriorityQueue<Locale.Category>>) resettableListIterator0, (Predicate<? super PriorityQueue<Locale.Category>>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("%wm1DhW'9r{u:", "%wm1DhW'9r{u:", (-951));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("G}Mfa\"]#y{c", sQLTransientConnectionException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", sQLTransientConnectionException0);
      Transformer<SQLTransientException, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTimeoutException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1326);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null, 0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null, 285);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, 3115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, 1729, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) propertiesArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null, 1, 1209);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 3463, (-1047));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, 1291);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 176, 290);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1609));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("toIndex = ", "Node must not be null", (Map<String, ClientInfoStatus>) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("");
      IfTransformer<Object, SQLIntegrityConstraintViolationException> ifTransformer0 = new IfTransformer<Object, SQLIntegrityConstraintViolationException>(equalPredicate0, transformer0, transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(ifTransformer0);
      HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>) singletonListIterator0, (Closure<? super HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>) transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.HashMap' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      SingletonIterator<Vector<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Vector<SQLClientInfoException>>(stack0, true);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, true);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<Vector<SQLClientInfoException>>) singletonIterator0, (Closure<? super Vector<SQLClientInfoException>>) closure1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) vector0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "}");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", sQLTimeoutException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      vector0.add(sQLDataException0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) resettableIterator0, (Closure<? super SQLException>) switchClosure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>) singletonListIterator0, (Closure<? super HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Transformer<SQLTransientConnectionException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>((SQLTransientException) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (Throwable) null);
      ConstantTransformer<SQLException, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLException, SQLTransientConnectionException>(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) singletonListIterator0, (Transformer<? super SQLException, ? extends SQLTransientConnectionException>) constantTransformer0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", "Enumeration must not be null");
      assertEquals("java.sql.SQLTransientConnectionException: Enumeration must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Iterator<Iterator<EnumSet<Locale.Category>>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Iterator<EnumSet<Locale.Category>>, String>) null, "t[ -tU$Ua7*7rE%i", "ZhQC4@\"rTzz|rz;", "prefix may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.TransformerPredicate", "org.apache.commons.collections4.functors.TransformerPredicate", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", sQLNonTransientConnectionException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator((SQLInvalidAuthorizationSpecException) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLRecoverableException0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, 10);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) null, 673);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
      iteratorArray0[0] = (Iterator<Locale.Category>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<Locale.Category>) resettableListIterator0;
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) iteratorArray0[0], (Iterator<? extends Locale.Category>) iteratorArray0[1]);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) zippingIterator0, (long) 1729, (-2555L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Transformer<SQLTransientConnectionException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Transformer<SQLTransientConnectionException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Transformer<Object, SQLTransactionRollbackException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<SQLTransientConnectionException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) mapIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Transformer<Object, SQLTransactionRollbackException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<SQLTransientConnectionException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) mapIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator0, (Transformer<? super SQLRecoverableException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>((SQLTransientException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) singletonListIterator0, 357);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 356
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0, 3);
      SQLTransientException sQLTransientException0 = IteratorUtils.get((Iterator<SQLTransientException>) objectArrayIterator0, 0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Vector<Integer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<String>) singletonListIterator0, (Predicate<? super String>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0);
      String[] stringArray0 = new String[1];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[5] = (Predicate<Object>) equalPredicate0;
      predicateArray0[6] = (Predicate<Object>) equalPredicate0;
      predicateArray0[7] = (Predicate<Object>) equalPredicate0;
      predicateArray0[8] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<String>) objectArrayListIterator0, (Predicate<? super String>) predicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<String>) null, (Predicate<? super String>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<String>) singletonListIterator0, (Predicate<? super String>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(comparator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("&u`^/b8Y=gE>jU", "%wm1DhW'9r{u:", (-951));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Iterator must not be null", sQLTransientConnectionException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayList<PriorityQueue<Locale.Category>> arrayList0 = new ArrayList<PriorityQueue<Locale.Category>>(3370);
      ResettableListIterator<PriorityQueue<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<PriorityQueue<Locale.Category>>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<PriorityQueue<Locale.Category>>) resettableListIterator0, (Predicate<? super PriorityQueue<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      SingletonIterator<LinkedHashSet<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLNonTransientConnectionException>>(linkedHashSet0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet1 = IteratorUtils.find((Iterator<LinkedHashSet<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super LinkedHashSet<SQLNonTransientConnectionException>>) predicate0);
      assertNotNull(linkedHashSet1);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Iterator<SQLWarning> iterator0 = EmptyIterator.emptyIterator();
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) iterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      SingletonIterator<LinkedHashSet<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLNonTransientConnectionException>>(linkedHashSet0);
      IteratorUtils.find((Iterator<LinkedHashSet<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super LinkedHashSet<SQLNonTransientConnectionException>>) equalPredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<LinkedHashSet<SQLNonTransientConnectionException>>) null, (Predicate<? super LinkedHashSet<SQLNonTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = IteratorUtils.find((Iterator<LinkedHashSet<SQLNonTransientConnectionException>>) null, (Predicate<? super LinkedHashSet<SQLNonTransientConnectionException>>) equalPredicate0);
      assertNull(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("Transformer must not be null", classArray0, classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      IteratorUtils.apply((Iterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>) null, (Closure<? super HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>) singletonListIterator0, (Closure<? super HashMap<SQLRecoverableException, SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      SingletonIterator<Vector<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Vector<SQLClientInfoException>>(stack0, true);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0, closure0);
      IteratorUtils.apply((Iterator<Vector<SQLClientInfoException>>) singletonIterator0, (Closure<? super Vector<SQLClientInfoException>>) ifClosure0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Transformer must not be null");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("NodeList must not be null", "yZQ", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientExceptionArray0[4]);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<Iterator<EnumSet<Locale.Category>>> iterator0 = EmptyIterator.emptyIterator();
      Iterator<?> iterator1 = IteratorUtils.getIterator(iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
      assertEquals(1, batchUpdateExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (-1364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("&NI~qX',");
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      iteratorArray0[1] = iterator0;
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) iteratorArray0[1], class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '&NI~qX',' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Properties properties0 = new Properties();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, Properties> transformer0 = InvokerTransformer.invokerTransformer("=", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '=' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(linkedList0);
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) reverseListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0, 0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MapIterator<String, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) mapIterator0, 91);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null, (Collection<? super String>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>((SQLClientInfoException) null, false);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(singletonIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) listIteratorWrapper0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<SQLNonTransientException> nonePredicate0 = new NonePredicate<SQLNonTransientException>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<EnumSet<Locale.Category>> stack0 = new Stack<EnumSet<Locale.Category>>();
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) stack0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(instanceofPredicate0, uniquePredicate0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0, (Predicate<? super EnumSet<Locale.Category>>) orPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) null, (Predicate<? super EnumSet<Locale.Category>>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<EnumSet<Locale.Category>, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<EnumSet<Locale.Category>, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<EnumSet<Locale.Category>, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<EnumSet<Locale.Category>, SQLInvalidAuthorizationSpecException>(hashMap0);
      AbstractMapIteratorDecorator<EnumSet<Locale.Category>, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<EnumSet<Locale.Category>, SQLInvalidAuthorizationSpecException>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) abstractMapIteratorDecorator0, (Predicate<? super EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hashtable<SQLException, StringTokenizer> hashtable0 = new Hashtable<SQLException, StringTokenizer>();
      Transformer<SQLWarning, StringTokenizer> transformer0 = MapTransformer.mapTransformer((Map<? super SQLWarning, ? extends StringTokenizer>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) null, (Transformer<? super SQLWarning, ? extends StringTokenizer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) resettableIterator0, (Transformer<? super StringTokenizer, ? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.Category>, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<EnumSet<Locale.Category>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) orderedMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      SkippingIterator<SQLInvalidAuthorizationSpecException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (long) 1);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Entry does not exist: ", "<1y)Me~m}t[UIv/*");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 31, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLSyntaxErrorException, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, DataTruncation>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, 3, (-1148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 1, (-907));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0);
      assertEquals("[null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("&NI~qX',");
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (-3819), hashtable0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0, (-12L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Closure must not be null", (String) null, 2234);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" cannot be null", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1, (-1383));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[1];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) resettableListIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>((SQLClientInfoException) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLClientInfoException>) singletonIterator0, (Object) null);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1718);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      ListIterator<Vector<Locale.Category>> listIterator0 = IteratorUtils.singletonListIterator((Vector<Locale.Category>) stack0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("pBi/0/S-.gO_u{Q");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<Locale.Category>>) listIterator0, (Transformer<? super Vector<Locale.Category>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'pBi/0/S-.gO_u{Q' on 'class java.util.Stack' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Vector<Integer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(orderedMapIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) listIteratorWrapper0, (Iterator<? extends SQLException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<String>) resettableListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
