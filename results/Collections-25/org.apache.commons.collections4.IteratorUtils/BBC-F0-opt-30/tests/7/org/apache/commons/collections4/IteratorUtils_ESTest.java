/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 09 14:44:54 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) objectArrayIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 99
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (long) 1404, (long) 1404);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) boundedIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) orderedIterator0);
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Hashtable<IIOMetadataNode, IIOMetadataNode> hashtable0 = new Hashtable<IIOMetadataNode, IIOMetadataNode>();
      EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode>(hashtable0);
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, IIOMetadataNode>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ReverseListIterator<SQLWarning> reverseListIterator0 = new ReverseListIterator<SQLWarning>(vector0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) reverseListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) orderedMapIterator0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Iterator<?> iterator0 = IteratorUtils.getIterator(closure0);
      List<Object> list0 = IteratorUtils.toList(iterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      Class<Properties> class0 = Properties.class;
      Properties[] propertiesArray0 = IteratorUtils.toArray((Iterator<? extends Properties>) listIterator0, class0);
      assertEquals(1, propertiesArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("\":TI83;`M#v,n");
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", ", "JtvfJu?xvt");
      stack0.add((SQLTransientException) sQLTimeoutException0);
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientException>) stack0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) null);
      Integer integer0 = IteratorUtils.get((Iterator<Integer>) listIterator0, 0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("da", "", 34, sQLFeatureNotSupportedException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorExceptionArray0[0];
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 1);
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) objectArrayListIterator0, 1);
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertEquals(1, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ExceptionPredicate invoked";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<String>) resettableListIterator0, (Object) "ExceptionPredicate invoked");
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator0;
      ListIteratorWrapper<SQLInvalidAuthorizationSpecException> listIteratorWrapper0 = new ListIteratorWrapper<SQLInvalidAuthorizationSpecException>(iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) listIteratorWrapper0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) resettableListIterator0, (Iterator<? extends SQLWarning>) resettableListIterator0, (Iterator<? extends SQLWarning>) resettableListIterator0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>) zippingIterator0, (Iterator<? extends SQLWarning>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0, 3673L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 1);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("JtvfJu?xvt", true);
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) listIteratorWrapper0, (Transformer<? super String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Properties properties0 = new Properties();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("QU", classArray0, classArray0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) invokerTransformer0);
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'QU' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>((String) null, classArray0, classArray0);
      Properties properties0 = new Properties();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) invokerTransformer0);
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Factory<SQLFeatureNotSupportedException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLFeatureNotSupportedException>) factory0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLFeatureNotSupportedException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",'n6OqX", ",'n6OqX");
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>(",'n6OqX", (Class<?>[]) null, iteratorArray0);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, ? extends Properties>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (long) 1608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ','n6OqX' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<String>) null, 1113L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Factory<SQLFeatureNotSupportedException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLFeatureNotSupportedException>) factory0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLFeatureNotSupportedException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) null, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iIOMetadataNode0, defaultEquator0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 6);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Entry does not exist: ", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate0, transformer0, transformer0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) ifTransformer0, (Predicate<? super Object>) equalPredicate0);
      Predicate<Properties> predicate1 = OrPredicate.orPredicate((Predicate<? super Properties>) predicate0, (Predicate<? super Properties>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Properties>) listIterator0, (Predicate<? super Properties>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Entry does not exist: ' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ListIterator<Stack<SQLTransientConnectionException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) onePredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsTruePredicate0, nullIsExceptionPredicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) andPredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<Stack<SQLTransientConnectionException>>) listIterator0, (Predicate<? super Stack<SQLTransientConnectionException>>) transformerPredicate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null, 0, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 0, (-293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, (-2367), (-2367));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLWarningArray0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterable<SQLTransactionRollbackException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 7, 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[7];
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1), intArray0, sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 446, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1648);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      String string0 = IteratorUtils.toString((Iterator<ServiceLoader<HashSet>>) null, (Transformer<? super ServiceLoader<HashSet>, String>) constantTransformer0, "", "8<z<n0c5", "");
      assertEquals("8<z<n0c5", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("AP");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, 128);
      assertTrue(list0.contains(sQLInvalidAuthorizationSpecException0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ReverseListIterator<InstanceofPredicate> reverseListIterator0 = new ReverseListIterator<InstanceofPredicate>(stack0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) reverseListIterator0, 31);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator0, (-1L), 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.FilterIterator", "", 10, intArray0);
      SQLWarning sQLWarning0 = new SQLWarning("", (String) null, batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 10, sQLWarning0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLSyntaxErrorException0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(identityPredicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableListIterator0, (Transformer<? super SQLRecoverableException, String>) ifTransformer0, (String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, String>) null, "-2`^/", "-2`^/", "-2`^/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) singletonIterator0, (Iterator<?>) singletonIterator0);
      int int0 = IteratorUtils.size(iterator0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(arrayList0);
      Properties properties0 = new Properties();
      arrayList0.add(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) loopingListIterator0, 1390);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.get((Iterator<Integer>) listIterator0, 0);
      ListIterator<Object> listIterator1 = IteratorUtils.toListIterator((Iterator<?>) listIterator0);
      assertTrue(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 8);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MapIterator<Object, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) singletonIterator0, (Predicate<? super Properties>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Predicate<Properties> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) singletonIterator0, (Predicate<? super Properties>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) orderedIterator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[] longArray0 = new long[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("R{_.F", "Zg", 674, longArray0, (Throwable) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLWarning0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(batchUpdateException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(10, false, true, (-2911), (-2750), (Throwable) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<String>) null, (Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) resettableListIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0, true);
      Predicate<Object> predicate1 = IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      assertNotNull(predicate1);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      SingletonListIterator<LinkedList<Properties>> singletonListIterator0 = new SingletonListIterator<LinkedList<Properties>>(linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "wW=>fL,J9<eXzf VH{F", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<LinkedList<Properties>>) singletonListIterator0, (Predicate<? super LinkedList<Properties>>) predicate0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(", size=");
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<IIOMetadataNode> comparatorPredicate0 = new ComparatorPredicate<IIOMetadataNode>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      IIOMetadataNode iIOMetadataNode1 = IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) comparatorPredicate0);
      assertNull(iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ListIterator<Stack<SQLTransientConnectionException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicateArray0[3]);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsTruePredicate0, nullIsExceptionPredicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) andPredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Stack<SQLTransientConnectionException>>) listIterator0, (Predicate<? super Stack<SQLTransientConnectionException>>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) objectArrayIterator0, (Closure<? super SQLWarning>) closure0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<SQLTransientConnectionException>>) null, (Closure<? super PriorityQueue<SQLTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) closure0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLWarning sQLWarning0 = new SQLWarning("<'T9Y", sQLFeatureNotSupportedException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLWarning0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedHashSet0.add(iIOMetadataNode0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, (-128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Properties properties0 = new Properties();
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>((Factory<? extends Properties>) null);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) iterator0, (Class<Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(linkedHashSet0);
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray0 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) loopingIterator0, class0);
      assertEquals(0, dataTruncationArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      Iterable<Integer> iterable0 = IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) list0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("6N-k$}#XEx:i");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 3);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("Map.Entry.setValue is not supported", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, (Predicate<? super Object>) null);
      ListIterator<Properties> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) transformedPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) listIterator1, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Map.Entry.setValue is not supported' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0, 1, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicateArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      UniquePredicate<SQLWarning> uniquePredicate0 = new UniquePredicate<SQLWarning>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) null, (Predicate<? super SQLWarning>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[]");
      ConstantTransformer<SQLTransientException, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLTransientException, SQLTransientConnectionException>(sQLTransientConnectionException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      Predicate<SQLTransientException> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super SQLTransientException, ? extends SQLTransientException>) constantTransformer0, (Predicate<? super SQLTransientException>) comparatorPredicate0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) listIterator0, (Transformer<? super Integer, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>(",'n6OqX", (Class<?>[]) null, iteratorArray0);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, ? extends Properties>) invokerTransformer0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, (long) 1608);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2354), (-2354));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((HashSet<ComparatorPredicate.Criterion>[]) null, (-1358));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[5];
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0, 2);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<PriorityQueue<SQLTransactionRollbackException>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 146, 42);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 9);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("(`_$\"\"\rmITc3)Q&/|f", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("17T-Tu0}z*Hr Lm;o");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super DataTruncation, String>) constantTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '(`_$\"\"\rmITc3)Q&/|f' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 10, sQLClientInfoException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableIterator0, (long) 10);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 2997, 2287);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 4295);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayDeque0, (-2571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }
}
