/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 08:38:40 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyIterator();
      MapIterator<SQLClientInfoException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, SQLException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator1, (-7966L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableListIterator0, (Transformer<? super SQLTimeoutException, String>) null, "on9taT9>?2", (String) null, "rU@.y{-:iDd5;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Properties properties0 = new Properties();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<SQLTimeoutException, String> transformer0 = ConstantTransformer.constantTransformer("-?{(a2{;T;@pK=-~\u0003%");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      Transformer<SQLException, SQLTimeoutException> transformer1 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer1);
      UniquePredicate<SQLTimeoutException> uniquePredicate0 = new UniquePredicate<SQLTimeoutException>();
      Iterator<SQLTimeoutException> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) iterator1, (Predicate<? super SQLTimeoutException>) uniquePredicate0);
      IteratorUtils.toString(iterator2, (Transformer<? super SQLTimeoutException, String>) transformer0, "=,k=e*`QbLG4#x'", "", "-?{(a2{;T;@pK=-~\u0003%");
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, (-583L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 15, (-6164));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      SingletonIterator<LinkedHashSet<SQLException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLException>>(linkedHashSet0, true);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<LinkedHashSet<SQLException>>) singletonIterator0, (Predicate<? super LinkedHashSet<SQLException>>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("}h|G~b10-");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.FactoryTransformer", sQLIntegrityConstraintViolationException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.FactoryTransformer", "}h|G~b10-", 100, sQLTimeoutException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.FactoryTransformer", "}h|G~b10-");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.FactoryTransformer", "org.apache.commons.collections4.functors.FactoryTransformer", 100, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.FactoryTransformer", "}Zfw%HOY7KAXOBMQ&");
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("\"b_!Ln", "}Zfw%HOY7KAXOBMQ&", 100);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("}h|G~b10-", "transformer may not be null", 0, sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("transformer may not be null", sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("", "p{O&z3Xb]wMw", (-3033), sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, (-327));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FalsePredicate.falsePredicate();
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<PriorityQueue<SQLSyntaxErrorException>>) null, 1145);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) orderedIterator0, class0);
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<SQLInvalidAuthorizationSpecException, Locale.Category> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Locale.Category>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Locale.Category>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("!*@DP~CN|)$sM", "!*@DP~CN|)$sM", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("l,Y", "'U_etKEu>@dF|02");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("!*@DP~CN|)$sM", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("l,Y", "l,Y");
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("l,Y", "!*@DP~CN|)$sM");
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLTimeoutException, String> factoryTransformer0 = new FactoryTransformer<SQLTimeoutException, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) objectArrayIterator0, (Transformer<? super SQLTimeoutException, String>) factoryTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<SQLTimeoutException, Iterator<ServiceLoader<SQLIntegrityConstraintViolationException>>> mapIterator0 = IteratorUtils.emptyMapIterator();
      String string0 = "wH^m]\\u2-";
      Transformer<SQLTimeoutException, String> transformer0 = ConstantTransformer.constantTransformer(string0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) mapIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, "Attempt to make an ArrayIterator that ", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) orderedIterator0, class0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      Class<DataTruncation> class1 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class1);
      Iterator<DataTruncation> iterator0 = serviceLoader0.iterator();
      iteratorArray0[0] = iterator0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-1), (-1), sQLTimeoutException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      iteratorArray0[1] = (Iterator<DataTruncation>) singletonIterator0;
      OrderedIterator<DataTruncation> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<DataTruncation>) orderedIterator1;
      HashMap<DataTruncation, IIOMetadataNode> hashMap0 = new HashMap<DataTruncation, IIOMetadataNode>();
      EntrySetMapIterator<DataTruncation, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, IIOMetadataNode>(hashMap0);
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, IIOMetadataNode>) entrySetMapIterator0);
      iteratorArray0[3] = (Iterator<DataTruncation>) mapIterator0;
      Iterator<DataTruncation> iterator1 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.asIterable((Iterator<? extends DataTruncation>) iterator1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedHashSet<SQLFeatureNotSupportedException>[] linkedHashSetArray0 = (LinkedHashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(LinkedHashSet.class, 9);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[5] = linkedHashSet5;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[6] = linkedHashSet6;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet7 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[7] = linkedHashSet7;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet8 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[8] = linkedHashSet8;
      ObjectArrayListIterator<LinkedHashSet<SQLFeatureNotSupportedException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<SQLFeatureNotSupportedException>>(linkedHashSetArray0, 1);
      SkippingIterator<LinkedHashSet<SQLFeatureNotSupportedException>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<LinkedHashSet<SQLFeatureNotSupportedException>>) objectArrayListIterator0, (long) 1);
      uniquePredicate0.evaluate(skippingIterator0);
      IteratorUtils.getIterator(uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Properties> linkedList3 = new LinkedList<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList3);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) orderedIterator0;
      Properties properties0 = new Properties();
      linkedList3.add(properties0);
      SQLException sQLException0 = new SQLException("o)PEXir!su", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      Transformer<SQLTimeoutException, String> transformer0 = ConstantTransformer.constantTransformer("");
      ResettableIterator<SQLTimeoutException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableIterator1, (Transformer<? super SQLTimeoutException, String>) transformer0, "%", "getKey() can only be called after next() and before remove()", "");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) resettableIterator0, 0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Q");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Properties> linkedList3 = new LinkedList<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList3);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) orderedIterator0;
      SQLException sQLException0 = new SQLException("o)PEXir!su", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayDeque0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("o)PEXir!su");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, "p`~4 v{sg=u^A5l", "5*?u}Re814Nj{R", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "' cannot be accessed", (-3153), (Throwable) null);
      SQLException sQLException0 = new SQLException("", sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Transformer<SQLTimeoutException, String> transformer0 = ConstantTransformer.constantTransformer("A+iB|`l yg>");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) listIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, "f{k7i8,tj", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.emptyIterator();
      ExceptionTransformer.exceptionTransformer();
      SQLDataException sQLDataException0 = new SQLDataException("4$f", (String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLInvalidAuthorizationSpecException0);
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[3] = predicate0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      predicateArray0[4] = (Predicate<Object>) instanceofPredicate1;
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicateArray0[1]);
      predicateArray0[5] = predicate1;
      Transformer<Object, SQLInvalidAuthorizationSpecException>[] transformerArray0 = (Transformer<Object, SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Transformer.class, 0);
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class3 = String.class;
      classArray0[0] = class3;
      InstantiateFactory<SQLInvalidAuthorizationSpecException> instantiateFactory0 = new InstantiateFactory<SQLInvalidAuthorizationSpecException>(class2, classArray0, predicateArray0);
      FactoryTransformer<Object, SQLInvalidAuthorizationSpecException> factoryTransformer0 = new FactoryTransformer<Object, SQLInvalidAuthorizationSpecException>(instantiateFactory0);
      IfTransformer<Object, SQLInvalidAuthorizationSpecException> ifTransformer0 = new IfTransformer<Object, SQLInvalidAuthorizationSpecException>(predicateArray0[0], factoryTransformer0, factoryTransformer0);
      SwitchTransformer<Object, SQLInvalidAuthorizationSpecException> switchTransformer0 = new SwitchTransformer<Object, SQLInvalidAuthorizationSpecException>(predicateArray0, transformerArray0, ifTransformer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicateArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[");
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) listIterator0);
      Integer integer0 = new Integer(100);
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>((DataTruncation) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) singletonListIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      IteratorUtils.toArray(iterator1);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-992);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "s", intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", batchUpdateException0);
      IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FalsePredicate.falsePredicate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|Bxd");
      IteratorUtils.emptyMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("d _0t=5C}'T3");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) singletonIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FalsePredicate.falsePredicate();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("delimiter may not be nll");
      MockThrowable mockThrowable0 = new MockThrowable("gl>V]3CGes", sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, mockThrowable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "delimiter may not be nll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonListIterator(instanceofPredicate0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0, (String) null, "Collection must not be null", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 0L);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) boundedIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("NodeList vVst not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("toIndex = ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FalsePredicate.falsePredicate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|Bxd");
      MapIterator<LinkedList<Object>, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ServiceLoader<Vector>>) mapIterator0, (-3317));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -3317
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0, true);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.printStackTrace();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(mapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator(iterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ADb;L.ea,;/WbawsUy[");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("k|^1=2D&vnLYH{TU", "gxJp:{wM|r/#$v");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("->R0)t#Ah}Vjb ~g", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("->R0)t#Ah}Vjb ~g", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("k|^1=2D&vnLYH{TU", "&4enzatm8gEy=");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) objectArrayIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FalsePredicate.falsePredicate();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator(iterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      UniquePredicate<DataTruncation> uniquePredicate0 = new UniquePredicate<DataTruncation>();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) predicate0);
      ResettableListIterator<Stack<SQLSyntaxErrorException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Stack<SQLSyntaxErrorException>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException>(mapIterator0);
      ConstantTransformer.nullTransformer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) listIterator0, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) orderedIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, (-2546));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<Integer, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends StringTokenizer>) orderedMapIterator0);
      UniquePredicate<DataTruncation> uniquePredicate0 = new UniquePredicate<DataTruncation>();
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonListIterator((HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("next() must have been called for remove() to function", "next() must have been called for remove() to function");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) listIterator0, (Iterator<? extends StringTokenizer>) listIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<StringTokenizer> nonePredicate0 = new NonePredicate<StringTokenizer>(predicateArray0);
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) nonePredicate0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 3179L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) boundedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) boundedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) boundedIterator0);
      String string0 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.matchesAny((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) predicate0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0, true);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList0.add(properties0);
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      Iterator<SQLTimeoutException> iterator0 = arrayList0.iterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 3179L);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) boundedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) boundedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) boundedIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      EqualPredicate.equalPredicate(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) listIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-710), sQLTransientConnectionException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "DwR27E*w7QM&xXDF", 207, sQLTransientConnectionException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("fromIndex = ", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("suffix may not be null", "The collections must not be null", 231);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", "The collections must not be null");
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("suffix may not be null", "", sQLTransientConnectionException0);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException("jp|2q;", sQLTimeoutException4);
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      ZippingIterator<SQLTimeoutException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) zippingIterator1);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Closure must not be null", "Closure must not be null", false);
      Transformer<StringTokenizer, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("Closure must not be null");
      Iterator<StringTokenizer> iterator1 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator1, (Predicate<? super StringTokenizer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Closure must not be null' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator1 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "n\"uo&@/xE_L6o\"ONQ", 44);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) sQLIntegrityConstraintViolationException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(44, 44);
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      IfTransformer<Object, Boolean> ifTransformer0 = new IfTransformer<Object, Boolean>(predicate2, transformer0, transformer0);
      Predicate<Object> predicate3 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) ifTransformer0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) singletonListIterator1, (Predicate<? super Predicate<Object>>) predicate3);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Integer>) null, (Closure<? super Integer>) closure0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonListIterator((HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "?m]");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      ListIterator<StringTokenizer> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) listIterator0, (Iterator<? extends StringTokenizer>) listIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) zippingIterator0, (Predicate<? super StringTokenizer>) predicate3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedMapIterator<LinkedHashSet<Integer>, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<LinkedHashSet<Integer>>) orderedMapIterator0, (Closure<? super LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.printStackTrace();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%");
      sQLRecoverableException0.getLocalizedMessage();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Properties> linkedList4 = new LinkedList<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList4);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) orderedIterator0;
      SQLException sQLException0 = new SQLException("o)PEXir!su", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      LinkedList<Properties> linkedList5 = new LinkedList<Properties>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NodeList must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Comparator<IIOMetadataNode> comparator0 = null;
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ListIterator<Predicate<Object>> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) listIterator0, (Predicate<? super Predicate<Object>>) instanceofPredicate0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertNotNull(listIterator1);
      
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      IteratorUtils.size(zippingIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(":", "2K", batchUpdateException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("|C", "Hxq$|IL<", 0, batchUpdateException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Hxq$|IL<", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("GREATER");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("GREATER");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("GREATER", "vYyf.I|n", sQLIntegrityConstraintViolationException1);
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException1);
      Transformer<IIOMetadataNode, Boolean> transformer0 = InvokerTransformer.invokerTransformer("Iterator getValue() can only be called after next() and before remove()", (Class<?>[]) null, (Object[]) null);
      TransformerPredicate<IIOMetadataNode> transformerPredicate0 = new TransformerPredicate<IIOMetadataNode>(transformer0);
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(priorityQueue0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      IfTransformer<IIOMetadataNode, IIOMetadataNode> ifTransformer0 = new IfTransformer<IIOMetadataNode, IIOMetadataNode>(transformerPredicate0, constantTransformer0, constantTransformer0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) ifTransformer0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Iterator getValue() can only be called after next() and before remove()' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) andPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("vYyf.I|n");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      Transformer<IIOMetadataNode, Boolean> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.PrototypeFactory", (Class<?>[]) null, (Object[]) null);
      TransformerPredicate<IIOMetadataNode> transformerPredicate0 = new TransformerPredicate<IIOMetadataNode>(transformer0);
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(priorityQueue0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) loopingIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyIterator.emptyIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MapItera@tor[");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator1 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate1);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) singletonListIterator1, (Predicate<? super Predicate<Object>>) instanceofPredicate1);
      IteratorUtils.size(singletonListIterator0);
      IteratorUtils.toListIterator((Iterator<?>) resettableIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("delimiter may not be null", sQLSyntaxErrorException0);
      IteratorUtils.contains((Iterator<Object>) null, (Object) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException>(mapIterator0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends SQLTransientException>) transformer0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(":3");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLTransientException0);
      IteratorUtils.getIterator(iterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("'zgiNnM1Ao.rdv/");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("=2Dh:<Z_JQw6eKs[", ":3");
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) andPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("vYyf.I|n");
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Transformer<IIOMetadataNode, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<IIOMetadataNode> transformerPredicate0 = new TransformerPredicate<IIOMetadataNode>(transformer0);
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) null, (-1051L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Integer integer0 = new Integer(660);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(integer0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>(660);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) comparatorPredicate0, (Equator<Object>) null);
      predicateArray0[2] = predicate1;
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      Properties properties0 = new Properties();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(properties0);
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[5] = predicate2;
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate3);
      IteratorUtils.matchesAll((Iterator<HashMap<ArrayList, SQLTransientException>>) null, (Predicate<? super HashMap<ArrayList, SQLTransientException>>) notPredicate0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyIterator.emptyIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MapItera@tor[");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "MapItera@tor[", "delimiter may not be null", "");
      MapIterator<IIOMetadataNode, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ?>) mapIterator0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 6);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[0] = class0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[1] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[3] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[4] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[5] = class4;
      Transformer<IIOMetadataNode, Boolean> transformer1 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<IIOMetadataNode> transformerPredicate0 = new TransformerPredicate<IIOMetadataNode>(transformer1);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAll((Iterator<HashMap<ArrayList, SQLTransientException>>) resettableIterator0, (Predicate<? super HashMap<ArrayList, SQLTransientException>>) notPredicate0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLSyntaxErrorException0;
      int int0 = 2144;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 2144, 2144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0, true);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<String> class1 = String.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate1);
      SingletonListIterator<InstanceofPredicate> singletonListIterator1 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate1);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) singletonListIterator1, (Predicate<? super Predicate<Object>>) andPredicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Integer>) null, (Closure<? super Integer>) closure0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonListIterator((HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("23h%?GV'", "23h%?GV'");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) listIterator0, (Iterator<? extends StringTokenizer>) listIterator0);
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) zippingIterator0, (Predicate<? super StringTokenizer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0, true);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate1);
      ListIterator<Predicate<Object>> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) singletonListIterator0, (Predicate<? super Predicate<Object>>) andPredicate0);
      IteratorUtils.size(listIterator0);
      ListIterator<Object> listIterator1 = IteratorUtils.toListIterator((Iterator<?>) singletonIterator0);
      IteratorUtils.contains((Iterator<Object>) listIterator1, (Object) instanceofPredicate0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) singletonListIterator0);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]Q58lcDI!~E^\"", sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]Q58lcDI!~E^\"", "]Q58lcDI!~E^\"", 91, hashtable0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.removeElement(zippingIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) andPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      String string0 = "vYyf.I|n";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("vYyf.I|n");
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, (-336), (-182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLSyntaxErrorException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = EqualPredicate.equalPredicate(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) listIterator0, (Predicate<? super Predicate<Object>>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "]Q58lcDI!~E^\"", 219);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "");
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLNonTransientException1);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(stack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("05~", "05~");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 562, sQLTimeoutException0);
      stack0.add(sQLTransactionRollbackException0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashSet0.add(instanceofPredicate0);
      Predicate<SQLTransientException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLTransientException>>) hashSet0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) reverseListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", (String) null, true);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stringTokenizer0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) resettableListIterator0, (Predicate<? super Locale.Category>) predicate0);
      OrderedMapIterator<Integer, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, StringTokenizer>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends StringTokenizer>) orderedMapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) andPredicate0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(andPredicate0, true);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate1);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) singletonListIterator0, (Predicate<? super Predicate<Object>>) predicate1);
      IteratorUtils.size(singletonListIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) singletonListIterator0);
      IteratorUtils.contains((Iterator<Object>) listIterator0, (Object) class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MapItera@tor[");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "delimiter may not be null", "", "");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("47Odl =I'5Zp&S4kc");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("`):_xq^Fnv`X", "");
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kk*bQu");
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null);
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) singletonIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) singletonIterator0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator1 = new SingletonIterator<Properties>(properties0);
      Class<Properties> class1 = Properties.class;
      IteratorUtils.toArray((Iterator<? extends Properties>) singletonIterator1, class1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = new UniquePredicate<Object>();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate1, true);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate1);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) singletonListIterator0, (Predicate<? super Predicate<Object>>) andPredicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Integer>) null, (Closure<? super Integer>) closure0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonListIterator((HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.getStackTrace();
      EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmptyIterator.emptyIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MapItera@tor[");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "MapItera@tor[", "delimiter may not be null", "");
      MapIterator<IIOMetadataNode, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<IIOMetadataNode, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ?>) mapIterator0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 6);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[0] = class0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[1] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[2] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[3] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[4] = class4;
      Class<SQLTimeoutException> class5 = SQLTimeoutException.class;
      classArray0[5] = class5;
      Transformer<IIOMetadataNode, Boolean> transformer1 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<IIOMetadataNode> transformerPredicate0 = new TransformerPredicate<IIOMetadataNode>(transformer1);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) mapIterator1, (Predicate<? super IIOMetadataNode>) transformerPredicate0);
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      IteratorUtils.getIterator(sQLRecoverableException0);
      sQLRecoverableException0.fillInStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      sQLRecoverableException0.setNextException(sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLException, SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = null;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator((SQLClientInfoException) null);
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Stack<Closure>>) resettableIterator0, (Predicate<? super Stack<Closure>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MapItera@tor[");
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ResettableIterator<SQLRecoverableException> resettableIterator1 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator1, (Transformer<? super SQLRecoverableException, String>) transformer0, "MapItera@tor[", "delimiter may not be null", "");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) predicate0);
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      hashMap0.put("", clientInfoStatus0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends String>) orderedIterator0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      IteratorUtils.loopingListIterator((List<SQLTransientException>) stack0);
      Integer integer0 = new Integer((-233));
      Integer integer1 = new Integer((-233));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer1, false);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<Integer>) singletonIterator0, (Closure<? super Integer>) closure1);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonListIterator((HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.ChainedClosure");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedMapIterator<Properties, PriorityQueue<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      Class<SQLWarning> class1 = SQLWarning.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.contains((Iterator<InstanceofPredicate>) singletonListIterator0, (Object) locale_Category0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      String string0 = "suffix may not be null";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "suffix may not be null");
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      Iterable<SQLRecoverableException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) orderedIterator0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Class<Properties> class2 = Properties.class;
      IteratorUtils.toArray((Iterator<? extends Properties>) orderedMapIterator0, class2);
      int int0 = 860;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterable0, 860, 860);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedMapIterator<Integer, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) orderedMapIterator0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) mapIterator0, (Object) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) orderedMapIterator0, (long)  (-95), (long) 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(true);
      IteratorUtils.nodeListIterator(node0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%");
      sQLRecoverableException0.getLocalizedMessage();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends String>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) predicate0);
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[3] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[7] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[8] = (SQLException) sQLNonTransientConnectionException0;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      IteratorUtils.find((Iterator<SQLException>) objectArrayIterator0, (Predicate<? super SQLException>) predicate0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      stack0.listIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Stack<InstanceofPredicate> stack1 = new Stack<InstanceofPredicate>();
      Properties properties0 = new Properties();
      stack1.removeElement(properties0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.fillInStackTrace();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%");
      sQLRecoverableException0.getLocalizedMessage();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Properties> linkedList4 = new LinkedList<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList4);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) orderedIterator0;
      SQLException sQLException0 = new SQLException("o)PEXir!su", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("o)PEXir!su", "Transformer must not be null", sQLException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      Properties properties0 = new Properties();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList4);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Unph~T@)y]tGIodc'x");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/_Ea}C!/,B,`Dtu_/MU", "org.apache.commons.collections4.list.AbstractLinkedList$Node", sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("%", "Transformer must not be null", sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) iterator1);
      int[] intArray0 = new int[6];
      intArray0[0] = 31;
      intArray0[1] = 562;
      intArray0[2] = 189;
      intArray0[3] = 1;
      intArray0[4] = 3889;
      intArray0[5] = 1073741824;
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 562, 10);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("MapItera@tor[", "5r~gDN", intArray0, dataTruncation0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      IteratorUtils.contains((Iterator<Object>) listIterator0, (Object) sQLTimeoutException0);
      Factory<SQLNonTransientConnectionException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLNonTransientConnectionException>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) null, (Transformer<? super String, ? extends SQLNonTransientException>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLInvalidAuthorizationSpecException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException>(mapIterator0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends SQLTransientException>) transformer0);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.singletonListIterator(transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLInvalidAuthorizationSpecException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException>(mapIterator0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends SQLTransientException>) transformer0);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("");
      ListIterator<Transformer<Object, String>> listIterator0 = IteratorUtils.singletonListIterator(transformer1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLTimeoutException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      ListIterator<Transformer<Object, String>> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Transformer<Object, String>>) listIterator0, (Predicate<? super Transformer<Object, String>>) predicate1);
      int int0 = 860;
      IteratorUtils.toList((Iterator<? extends Transformer<Object, String>>) listIterator1, 860);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<Integer, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends StringTokenizer>) orderedMapIterator0);
      UniquePredicate<DataTruncation> uniquePredicate0 = new UniquePredicate<DataTruncation>();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FalsePredicate.falsePredicate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|Bxd");
      MapIterator<LinkedList<Object>, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ServiceLoader<Vector>>) mapIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 100
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "yrF~wZ7>=0hF+\"lhT,", (-2525));
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("'", "'", 128, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("'", "IteratorChain cannot be changed after the first use of a method from the Iterator interface", 128, sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("i/Pyo(u%Jy`I", "i/Pyo(u%Jy`I", 128, sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("nodeList must not be null!", "{}", (-597), sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException((String) null);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("[]", "", 4554, sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.get((Iterator<ServiceLoader<Vector>>) objectArrayIterator0, 0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) resettableIterator0, class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 4554);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, predicate0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ServiceLoader<Vector>>) singletonIterator0, 93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 92
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.printStackTrace();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%");
      sQLRecoverableException0.getLocalizedMessage();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Properties> linkedList4 = new LinkedList<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList4);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) orderedIterator0;
      SQLException sQLException0 = new SQLException("o)PEXir!su", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("o)PEXir!su", "Transformer must not be null", sQLException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("o)PEXir!su", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException1;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, 0);
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>[]) iteratorArray0);
      IteratorUtils.get(iterator0, 0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Enumeration<Locale.Category> enumeration0 = (Enumeration<Locale.Category>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0, true);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(singletonIterator0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      hashSet0.removeAll(linkedHashSet0);
      IteratorUtils.size(singletonIterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.emptyOrderedIterator();
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) objectArrayIterator0, 1);
      IteratorUtils.loopingIterator((Collection<? extends Properties>) list0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put(";$-O$", clientInfoStatus0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends String>) orderedIterator0);
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      IteratorUtils.loopingListIterator((List<SQLTransientException>) stack1);
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, true);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Integer>) singletonIterator0, (Closure<? super Integer>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("MapIterator[");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      Comparator<SQLRecoverableException> comparator0 = (Comparator<SQLRecoverableException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException[] sQLRecoverableExceptionArray1 = new SQLRecoverableException[6];
      sQLRecoverableExceptionArray1[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray1[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray1[2] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("]", sQLRecoverableException0);
      sQLRecoverableExceptionArray1[3] = sQLRecoverableException1;
      sQLRecoverableExceptionArray1[4] = sQLRecoverableException0;
      sQLRecoverableExceptionArray1[5] = sQLRecoverableException0;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray1);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) nullIsExceptionPredicate0);
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) listIterator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      UniquePredicate<DataTruncation> uniquePredicate0 = new UniquePredicate<DataTruncation>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Kj^6DU?E%3ZS]oZ", "Kj^6DU?E%3ZS]oZ", (-1359));
      InvokerTransformer<SQLException, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLNonTransientConnectionException>("Kj^6DU?E%3ZS]oZ", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) invokerTransformer0);
      DataTruncation dataTruncation0 = new DataTruncation((-1359), false, false, (-1), 2);
      uniquePredicate0.evaluate(dataTruncation0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<Integer, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, StringTokenizer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends StringTokenizer>) orderedMapIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) orderedMapIterator1);
      IteratorUtils.toArray(iterator0);
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "WV", sQLFeatureNotSupportedException0);
      sQLExceptionArray0[0] = (SQLException) sQLFeatureNotSupportedException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLExceptionArray0[0]);
      sQLExceptionArray0[1] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLException sQLException0 = new SQLException("", sQLExceptionArray0[1]);
      sQLExceptionArray0[2] = sQLException0;
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLExceptionArray0[3] = (SQLException) sQLDataException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLExceptionArray0[4] = (SQLException) sQLSyntaxErrorException0;
      SQLWarning sQLWarning0 = new SQLWarning("", "suffix may not be null", 562);
      sQLExceptionArray0[5] = (SQLException) sQLWarning0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("uUsDFOj[jb@*(E", "suffix may not be null");
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("WV", "RVF$e=3q5>");
      sQLExceptionArray0[7] = (SQLException) sQLTransactionRollbackException0;
      SQLWarning sQLWarning1 = new SQLWarning(sQLExceptionArray0[5]);
      sQLExceptionArray0[8] = (SQLException) sQLWarning1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 562);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      hashMap0.put("", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (-2450), hashMap1);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      DataTruncation dataTruncation0 = new DataTruncation((-3376), false, true, (-448), (-1895));
      stack0.removeElement(sQLClientInfoException0);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<InstanceofPredicate>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Closure must not be null", "Closure must not be null");
      DataTruncation dataTruncation0 = new DataTruncation(512, true, true, 512, 512, sQLSyntaxErrorException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!e^0l");
      IteratorUtils.emptyOrderedIterator();
      HashMap<DataTruncation, IIOMetadataNode> hashMap0 = new HashMap<DataTruncation, IIOMetadataNode>();
      EntrySetMapIterator<DataTruncation, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, IIOMetadataNode>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, IIOMetadataNode>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Enumeration<Locale.Category> enumeration0 = (Enumeration<Locale.Category>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(enumeration0).hasMoreElements();
      doReturn(locale_Category0, locale_Category0, locale_Category0).when(enumeration0).nextElement();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      Enumeration<Locale.Category> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) iterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(iterator0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      hashSet0.removeAll(linkedHashSet0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration1, (Collection<? super Locale.Category>) hashSet0);
      IteratorUtils.size(iterator0);
      OrderedMapIterator<InstanceofPredicate, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) orderedMapIterator0;
      Iterator<InstanceofPredicate> iterator1 = EmptyIterator.emptyIterator();
      iteratorArray0[2] = iterator1;
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) orderedMapIterator0;
      iteratorArray0[4] = (Iterator<InstanceofPredicate>) orderedMapIterator0;
      Iterator<Predicate<Object>> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>[]) iteratorArray0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator2, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      properties0.put(linkedList0, linkedList0);
      linkedList0.add(properties0);
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("k,vR:");
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`):_xq^Fnv`X", "vL`V/H3A(R?7");
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "vL`V/H3A(R?7");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "vL`V/H3A(R?7", sQLInvalidAuthorizationSpecException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("`):_xq^Fnv`X");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException(sQLRecoverableException3);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4dsN6bkd", "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("List must not be null", "R:>5f#Ob", 125);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("");
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("4dsN6bkd", "suffix may not be null", sQLRecoverableException3);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("R:>5f#Ob");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException5;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      int int0 = (-1);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]Q58lcDI!~E^\"", sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = EqualPredicate.equalPredicate(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) listIterator0, (Predicate<? super Predicate<Object>>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) listIterator0, (Predicate<? super Predicate<Object>>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`):_xq^FnvX", "`):_xq^FnvX");
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("org.apache.commons.collections4.functors.ClosureTransformer");
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) constantTransformer0, "[", "QNSKo]+{&%|\"VCm)B", "[");
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Enumeration<Locale.Category> enumeration0 = (Enumeration<Locale.Category>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(enumeration0).nextElement();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      Enumeration<Locale.Category> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) iterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(iterator0);
      TreeSet<IIOMetadataNode> treeSet0 = new TreeSet<IIOMetadataNode>();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>(treeSet0);
      hashSet0.retainAll(linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      hashSet0.removeAll(linkedHashSet1);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration1, (Collection<? super Locale.Category>) hashSet0);
      IteratorUtils.size(iterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLDataException> class1 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      ExceptionFactory.exceptionFactory();
      Class<Integer> class2 = Integer.class;
      InstantiateFactory<Integer> instantiateFactory0 = new InstantiateFactory<Integer>(class2);
      FactoryTransformer.factoryTransformer((Factory<? extends Integer>) instantiateFactory0);
      ArrayIterator<SQLTransientException> arrayIterator0 = new ArrayIterator<SQLTransientException>(instanceofPredicate0);
      String string0 = "";
      Transformer<SQLTransientException, String> transformer0 = ConstantTransformer.constantTransformer(string0);
      IteratorUtils.toString((Iterator<SQLTransientException>) arrayIterator0, (Transformer<? super SQLTransientException, String>) transformer0);
      OrderedMapIterator<BatchUpdateException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0, true);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(singletonIterator0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      hashSet0.removeAll(linkedHashSet0);
      IteratorUtils.size(singletonIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends String>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", 3170, sQLIntegrityConstraintViolationException0);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException1);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FalsePredicate.falsePredicate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 5);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) resettableListIterator0, (Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      iteratorArray0[1] = iterator0;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) singletonIterator0;
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.unmodifiableIterator(iteratorArray0[0]);
      iteratorArray0[4] = iterator1;
      Iterator<InstanceofPredicate> iterator2 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iterator2, (-58));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Enumeration<Locale.Category> enumeration0 = (Enumeration<Locale.Category>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      Enumeration<Locale.Category> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) iterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(iterator0);
      TreeSet<IIOMetadataNode> treeSet0 = new TreeSet<IIOMetadataNode>();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>(treeSet0);
      hashSet0.retainAll(linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      hashSet0.removeAll(linkedHashSet1);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration1, (Collection<? super Locale.Category>) hashSet0);
      IteratorUtils.size(iterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLDataException> class1 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      int int0 = (-2645);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<EnumSet<ComparatorPredicate.Criterion>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      Class<SQLWarning> class1 = SQLWarning.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.contains((Iterator<InstanceofPredicate>) resettableIterator0, (Object) locale_Category0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends Integer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Integer>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      OrderedMapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>(orderedMapIterator2);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) abstractMapIteratorDecorator0;
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Integer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Integer>(abstractOrderedMapIteratorDecorator0);
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator1;
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(priorityQueue0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedList<Integer>[]) null, 0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put(";$-O$", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("k,vR:", ";$-O$", (-2450), hashMap0);
      stack0.removeElement(sQLClientInfoException0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<InstanceofPredicate, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = (-2525);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableListIterator0, (-2525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "\"{`N=J4ah3 8aJ", 100);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLRecoverableException0.setNextException(sQLClientInfoException0);
      IteratorUtils.singletonIterator(sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"{`N=J4ah3 8aJ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("\"{`N=J4ah3 8aJ", "\"{`N=J4ah3 8aJ", 100);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(";g /", "\"{`N=J4ah3 8aJ");
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException(mockThrowable0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("a_Ea&OH>Zh", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "x8.");
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("x8.");
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException(sQLTimeoutException0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ArrayList<SQLRecoverableException> arrayList1 = new ArrayList<SQLRecoverableException>();
      ArrayList<SQLRecoverableException> arrayList2 = new ArrayList<SQLRecoverableException>();
      ArrayList<SQLRecoverableException> arrayList3 = new ArrayList<SQLRecoverableException>();
      ArrayList<SQLRecoverableException> arrayList4 = new ArrayList<SQLRecoverableException>();
      ArrayList<SQLRecoverableException> arrayList5 = new ArrayList<SQLRecoverableException>();
      ArrayList<SQLRecoverableException>[] arrayListArray0 = (ArrayList<SQLRecoverableException>[]) Array.newInstance(ArrayList.class, 8);
      arrayListArray0[0] = arrayList5;
      ArrayList<SQLRecoverableException> arrayList6 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[1] = arrayList6;
      arrayListArray0[2] = arrayList4;
      arrayListArray0[3] = arrayList0;
      arrayListArray0[4] = arrayList0;
      arrayListArray0[5] = arrayList3;
      arrayListArray0[6] = arrayList1;
      arrayListArray0[7] = arrayList0;
      IteratorUtils.arrayIterator(arrayListArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "", (Throwable) null);
      IteratorUtils.getIterator((Object) null);
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException>(mapIterator1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("%=eC1xJe5lB.ug");
      IteratorUtils.singletonListIterator(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLTransientConnectionException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, String>(orderedMapIterator0);
      OrderedMapIterator<SQLTransientConnectionException, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends String>) abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLTransientConnectionException, String> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, String>) orderedMapIterator1);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedMapIterator1);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) iterator0);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyMapIterator();
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.contains((Iterator<Integer>) objectArrayListIterator0, (Object) locale_Category0);
      ArrayList<SQLRecoverableException>[] arrayListArray0 = (ArrayList<SQLRecoverableException>[]) Array.newInstance(ArrayList.class, 9);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLRecoverableException> arrayList1 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLRecoverableException> arrayList2 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[2] = arrayList2;
      ArrayList<SQLRecoverableException> arrayList3 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[3] = arrayList3;
      ArrayList<SQLRecoverableException> arrayList4 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[4] = arrayList4;
      ArrayList<SQLRecoverableException> arrayList5 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[5] = arrayList5;
      ArrayList<SQLRecoverableException> arrayList6 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[6] = arrayList6;
      ArrayList<SQLRecoverableException> arrayList7 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[7] = arrayList7;
      ArrayList<SQLRecoverableException> arrayList8 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[8] = arrayList8;
      IteratorUtils.arrayIterator(arrayListArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "`):_xq^FnvX");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "", 100, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.ChainedClosure");
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) iterator1);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Class<Properties> class1 = Properties.class;
      IteratorUtils.toArray((Iterator<? extends Properties>) singletonIterator0, class1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.add(instanceofPredicate0);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      String string0 = "kvR:";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put(";$-O$", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("kvR:", ";$-O$", (-2450), hashMap0);
      stack0.removeElement(sQLClientInfoException0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<InstanceofPredicate, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>[]) iteratorArray0);
      IteratorUtils.arrayIterator((Object[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 9);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedListArray0[0] = linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedListArray0[1] = linkedList1;
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedListArray0[2] = linkedList2;
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedListArray0[3] = linkedList3;
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedListArray0[4] = linkedList4;
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      linkedListArray0[5] = linkedList5;
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      linkedListArray0[6] = linkedList6;
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>(linkedList7);
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedListArray0, (-3040), (-230));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("a_Ea&OH>Zh", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "x8.");
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("x8.");
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("", "The predicate to call must not be null", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", "", sQLTimeoutException0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) objectArrayListIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[4] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[5] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[6] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[6] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("a_Ea&OH>Zh", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "x8.");
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("x8.");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("The predicate to call must not be null", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("N(IwX;:a", sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator1;
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("~f3G>`-|$?cm", "~f3G>`-|$?cm");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("k,vR:");
      sQLTimeoutException0.setNextException(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(";$-O$", "k,vR:", 3478, sQLTimeoutException0);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`):_xq^FnvX", "vL`V/H3A(R?7");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      linkedList0.add(properties0);
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("bwRY4,3W0/oHbBiW>");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLException> class1 = SQLException.class;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class1);
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("):_x7q^Fnvq", "");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "):_x7q^Fnvq", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("#l)+]DikKR5IBz", (String) null, sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException2;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException0;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) objectArrayListIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLException> class1 = SQLException.class;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class1);
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("):_x7q^Fnvq", "");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "suffix may not be null", 10);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("suffix may not be null", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("iterator", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) predicate0);
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[3] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[7] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[8] = (SQLException) sQLNonTransientConnectionException0;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      IteratorUtils.find((Iterator<SQLException>) objectArrayIterator0, (Predicate<? super SQLException>) predicate0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      ListIterator<SQLTransientException> listIterator0 = stack0.listIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      IteratorUtils.find((Iterator<SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) predicate1);
      Class<String> class1 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class1);
      instantiateFactory0.create();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>(linkedList0);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 5);
      linkedListArray0[0] = linkedList3;
      linkedListArray0[1] = linkedList2;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedListArray0, 243, 608);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[1] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[2] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[3] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[4] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[5] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[6] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[7] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[8] = (SQLException) sQLTransientConnectionException0;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLExceptionArray0[7]);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<SQLException>) objectArrayIterator0, (Predicate<? super SQLException>) notPredicate0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      stack0.listIterator();
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLException> class1 = SQLException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate1);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) listIterator0, (Predicate<? super Predicate<Object>>) notPredicate0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]Q58lcDI!~E^\"", sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = EqualPredicate.equalPredicate(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Factory<String> factory0 = ConstantFactory.constantFactory("]Q58lcDI!~E^\"");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.singletonIterator((Transformer<Object, String>) factoryTransformer0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Array class must not be null");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 915, 1794);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 5);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 2769, intArray0, sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 2769, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>(linkedList2);
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 14);
      linkedListArray0[0] = linkedList3;
      linkedListArray0[1] = linkedList3;
      linkedListArray0[2] = linkedList2;
      linkedListArray0[3] = linkedList5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedListArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Enumeration<Locale.Category> enumeration0 = (Enumeration<Locale.Category>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      assertNotNull(iterator0);
      
      Enumeration<Locale.Category> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) iterator0);
      assertNotNull(enumeration1);
      assertFalse(enumeration1.equals((Object)enumeration0));
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(false));
      
      boolean boolean0 = hashSet0.add(iterator0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      assertFalse(hashSet0.contains(false));
      
      TreeSet<IIOMetadataNode> treeSet0 = new TreeSet<IIOMetadataNode>();
      assertNotNull(treeSet0);
      
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>(treeSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean1 = hashSet0.retainAll(linkedHashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hashSet0.contains(false));
      
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertNotNull(linkedHashSet1);
      
      boolean boolean2 = hashSet0.removeAll(linkedHashSet1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(hashSet0.contains(false));
      
      Iterator<Locale.Category> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration1, (Collection<? super Locale.Category>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotSame(iterator0, iterator1);
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(hashSet0.contains(false));
      
      int int0 = IteratorUtils.size(iterator0);
      assertNotSame(iterator0, iterator1);
      assertEquals(0, int0);
      assertFalse(iterator0.equals((Object)iterator1));
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLDataException> class1 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 0, (-2645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(enumeration0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      assertNotNull(iterator1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MapIterator[");
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: MapIterator[", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("MapIterator[", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: MapIterator[", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("MapIterator[", sQLSyntaxErrorException0.getMessage());
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      String string0 = "kvR:";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put(";$-O$", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("kvR:", ";$-O$", (-2450), hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: kvR:", sQLClientInfoException0.toString());
      assertEquals(";$-O$", sQLClientInfoException0.getSQLState());
      assertEquals((-2450), sQLClientInfoException0.getErrorCode());
      assertEquals("kvR:", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = stack0.removeElement(sQLClientInfoException0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: kvR:", sQLClientInfoException0.toString());
      assertEquals(";$-O$", sQLClientInfoException0.getSQLState());
      assertEquals((-2450), sQLClientInfoException0.getErrorCode());
      assertEquals("kvR:", sQLClientInfoException0.getMessage());
      assertFalse(boolean0);
      
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<InstanceofPredicate, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(3, iteratorArray0.length);
      
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) iteratorArray0);
      assertNotNull(resettableIterator0);
      assertEquals(3, iteratorArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      MapIterator<SQLFeatureNotSupportedException, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      HashSet<Predicate<Object>>[] hashSetArray0 = (HashSet<Predicate<Object>>[]) Array.newInstance(HashSet.class, 4);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      hashSetArray0[0] = (HashSet<Predicate<Object>>) linkedHashSet0;
      LinkedHashSet<Predicate<Object>> linkedHashSet1 = new LinkedHashSet<Predicate<Object>>();
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      hashSetArray0[1] = (HashSet<Predicate<Object>>) linkedHashSet1;
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      hashSetArray0[2] = hashSet0;
      LinkedHashSet<Predicate<Object>> linkedHashSet2 = new LinkedHashSet<Predicate<Object>>();
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertNotNull(linkedHashSet2);
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      
      hashSetArray0[3] = (HashSet<Predicate<Object>>) linkedHashSet2;
      ResettableListIterator<HashSet<Predicate<Object>>> resettableListIterator1 = IteratorUtils.arrayListIterator(hashSetArray0, 2, 2);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      assertEquals(4, hashSetArray0.length);
      
      SQLWarning sQLWarning0 = new SQLWarning("", "", 2);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(2, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Predicate<DataTruncation> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 9);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedListArray0[0] = linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      linkedListArray0[1] = linkedList1;
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      linkedListArray0[2] = linkedList2;
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      assertEquals(0, linkedList3.size());
      assertNotNull(linkedList3);
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList0));
      
      linkedListArray0[3] = linkedList3;
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      assertEquals(0, linkedList4.size());
      assertNotNull(linkedList4);
      assertTrue(linkedList4.equals((Object)linkedList1));
      assertTrue(linkedList4.equals((Object)linkedList3));
      assertTrue(linkedList4.equals((Object)linkedList2));
      assertTrue(linkedList4.equals((Object)linkedList0));
      
      linkedListArray0[4] = linkedList4;
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      assertEquals(0, linkedList5.size());
      assertNotNull(linkedList5);
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList3));
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList1));
      
      linkedListArray0[5] = linkedList5;
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      assertEquals(0, linkedList6.size());
      assertNotNull(linkedList6);
      assertTrue(linkedList6.equals((Object)linkedList3));
      assertTrue(linkedList6.equals((Object)linkedList4));
      assertTrue(linkedList6.equals((Object)linkedList1));
      assertTrue(linkedList6.equals((Object)linkedList0));
      assertTrue(linkedList6.equals((Object)linkedList5));
      assertTrue(linkedList6.equals((Object)linkedList2));
      
      linkedListArray0[6] = linkedList6;
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      assertEquals(0, linkedList7.size());
      assertNotNull(linkedList7);
      assertTrue(linkedList7.equals((Object)linkedList1));
      assertTrue(linkedList7.equals((Object)linkedList2));
      assertTrue(linkedList7.equals((Object)linkedList6));
      assertTrue(linkedList7.equals((Object)linkedList3));
      assertTrue(linkedList7.equals((Object)linkedList4));
      assertTrue(linkedList7.equals((Object)linkedList5));
      assertTrue(linkedList7.equals((Object)linkedList0));
      
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>(linkedList7);
      assertEquals(0, linkedList8.size());
      assertEquals(0, linkedList7.size());
      assertNotNull(linkedList8);
      assertTrue(linkedList8.equals((Object)linkedList5));
      assertTrue(linkedList8.equals((Object)linkedList7));
      assertTrue(linkedList8.equals((Object)linkedList0));
      assertTrue(linkedList8.equals((Object)linkedList3));
      assertTrue(linkedList8.equals((Object)linkedList4));
      assertTrue(linkedList8.equals((Object)linkedList2));
      assertTrue(linkedList8.equals((Object)linkedList6));
      assertTrue(linkedList8.equals((Object)linkedList1));
      assertTrue(linkedList7.equals((Object)linkedList1));
      assertTrue(linkedList7.equals((Object)linkedList2));
      assertTrue(linkedList7.equals((Object)linkedList6));
      assertTrue(linkedList7.equals((Object)linkedList3));
      assertTrue(linkedList7.equals((Object)linkedList4));
      assertTrue(linkedList7.equals((Object)linkedList5));
      assertTrue(linkedList7.equals((Object)linkedList0));
      
      linkedListArray0[7] = linkedList8;
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      assertEquals(0, linkedList9.size());
      assertNotNull(linkedList9);
      assertTrue(linkedList9.equals((Object)linkedList2));
      assertTrue(linkedList9.equals((Object)linkedList0));
      assertTrue(linkedList9.equals((Object)linkedList4));
      assertTrue(linkedList9.equals((Object)linkedList6));
      assertTrue(linkedList9.equals((Object)linkedList3));
      assertTrue(linkedList9.equals((Object)linkedList7));
      assertTrue(linkedList9.equals((Object)linkedList1));
      assertTrue(linkedList9.equals((Object)linkedList8));
      assertTrue(linkedList9.equals((Object)linkedList5));
      
      linkedListArray0[8] = linkedList9;
      ResettableIterator<LinkedList<Integer>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0, 0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(9, linkedListArray0.length);
      
      ListIterator<LinkedList<Integer>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends LinkedList<Integer>>) resettableIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertEquals(9, linkedListArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ListIterator<Integer> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("a_Ea&OH>Zh", sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("a_Ea&OH>Zh", sQLTimeoutException1.getMessage());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: a_Ea&OH>Zh", sQLTimeoutException1.toString());
      assertNotNull(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("a_Ea&OH>Zh", "x8.");
      assertEquals("java.sql.SQLTimeoutException: a_Ea&OH>Zh", sQLTimeoutException2.toString());
      assertEquals("a_Ea&OH>Zh", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("x8.", sQLTimeoutException2.getSQLState());
      assertNotNull(sQLTimeoutException2);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null);
      assertNull(sQLTimeoutException3.getMessage());
      assertNull(sQLTimeoutException3.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException3.toString());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertNotNull(sQLTimeoutException3);
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException(sQLTimeoutException2);
      assertEquals("java.sql.SQLTimeoutException: a_Ea&OH>Zh", sQLTimeoutException2.toString());
      assertEquals("a_Ea&OH>Zh", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("x8.", sQLTimeoutException2.getSQLState());
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: a_Ea&OH>Zh", sQLTimeoutException4.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: a_Ea&OH>Zh", sQLTimeoutException4.toString());
      assertNull(sQLTimeoutException4.getSQLState());
      assertNotNull(sQLTimeoutException4);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException((String) null, "The predicate to call must not be null", sQLTimeoutException4);
      assertEquals("java.sql.SQLTimeoutException: a_Ea&OH>Zh", sQLTimeoutException2.toString());
      assertEquals("a_Ea&OH>Zh", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("x8.", sQLTimeoutException2.getSQLState());
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: a_Ea&OH>Zh", sQLTimeoutException4.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: a_Ea&OH>Zh", sQLTimeoutException4.toString());
      assertNull(sQLTimeoutException4.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException5.toString());
      assertEquals(0, sQLTimeoutException5.getErrorCode());
      assertNull(sQLTimeoutException5.getMessage());
      assertEquals("The predicate to call must not be null", sQLTimeoutException5.getSQLState());
      assertNotNull(sQLTimeoutException5);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", (String) null, sQLTimeoutException2);
      assertEquals("java.sql.SQLTimeoutException: a_Ea&OH>Zh", sQLTimeoutException2.toString());
      assertEquals("a_Ea&OH>Zh", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("x8.", sQLTimeoutException2.getSQLState());
      assertNull(sQLTimeoutException6.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException6.toString());
      assertEquals(0, sQLTimeoutException6.getErrorCode());
      assertEquals("", sQLTimeoutException6.getMessage());
      assertNotNull(sQLTimeoutException6);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException1));
      
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException6;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(6, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(6, sQLTimeoutExceptionArray0.length);
      
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) objectArrayListIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(6, objectArrayListIterator0.getEndIndex());
      assertEquals(5, objectArrayListIterator0.previousIndex());
      assertEquals(6, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals("[java.sql.SQLTimeoutException, java.sql.SQLTimeoutException: a_Ea&OH>Zh, java.sql.SQLTimeoutException: a_Ea&OH>Zh, java.sql.SQLTimeoutException, java.sql.SQLTimeoutException, java.sql.SQLTimeoutException: ]", string0);
      assertNotNull(string0);
      assertEquals(6, sQLTimeoutExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "";
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLTransientException0);
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)sQLTransientException0.initCause(sQLRecoverableException0);
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("", sQLTransientException1.getMessage());
      assertEquals("", sQLTransientException1.getSQLState());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException1.toString());
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertNotNull(sQLTransientException1);
      
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0, sQLRecoverableException0);
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertSame(sQLTransientException0, sQLTransientException1);
      assertNotNull(resettableIterator0);
      
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Class<String> class0 = String.class;
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 4);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[0] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[1] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[2] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[3] = class4;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class0, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MapIterator<Locale.Category, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) predicate0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertFalse(boolean0);
      
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[3] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[4] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[7] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[8] = (SQLException) sQLNonTransientConnectionException0;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(9, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertNotNull(objectArrayIterator0);
      assertEquals(9, sQLExceptionArray0.length);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)objectArrayIterator0.next();
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(9, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(9, sQLExceptionArray0.length);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = (SQLNonTransientConnectionException)IteratorUtils.find((Iterator<SQLException>) objectArrayIterator0, (Predicate<? super SQLException>) predicate0);
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(9, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException0);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException2);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotNull(sQLNonTransientConnectionException2);
      assertEquals(9, sQLExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, (-1197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<Properties, PriorityQueue<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      
      Class<SQLWarning> class1 = SQLWarning.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      assertNotNull(predicate0);
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0);
      assertNotNull(resettableIterator0);
      assertEquals(2, instanceofPredicateArray0.length);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<InstanceofPredicate>) resettableIterator0, (Object) locale_Category0);
      assertFalse(boolean0);
      assertEquals(2, instanceofPredicateArray0.length);
      
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends Integer>) orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Integer>(orderedMapIterator2);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      OrderedMapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> orderedMapIterator3 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator3.hasPrevious());
      assertNotNull(orderedMapIterator3);
      
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>(orderedMapIterator3);
      assertFalse(orderedMapIterator3.hasPrevious());
      assertNotNull(abstractMapIteratorDecorator0);
      
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) abstractMapIteratorDecorator0;
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Integer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Integer>(abstractOrderedMapIteratorDecorator0);
      assertFalse(abstractOrderedMapIteratorDecorator1.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator1);
      assertFalse(abstractOrderedMapIteratorDecorator1.equals((Object)abstractOrderedMapIteratorDecorator0));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator1;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Array class must not be null", sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: Array class must not be null", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Array class must not be null", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]'h6I}-6B*Z_", "Array class must not be null", 1, sQLSyntaxErrorException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: Array class must not be null", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Array class must not be null", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ]'h6I}-6B*Z_", sQLNonTransientConnectionException0.toString());
      assertEquals("]'h6I}-6B*Z_", sQLNonTransientConnectionException0.getMessage());
      assertEquals("Array class must not be null", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("]'h6I}-6B*Z_");
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ]'h6I}-6B*Z_", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("]'h6I}-6B*Z_", sQLNonTransientConnectionException1.getMessage());
      assertNotNull(sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("");
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("", sQLNonTransientConnectionException2.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException2.toString());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException2);
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(", ", "", 10);
      assertEquals(", ", sQLNonTransientConnectionException3.getMessage());
      assertEquals(10, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: , ", sQLNonTransientConnectionException3.toString());
      assertNotNull(sQLNonTransientConnectionException3);
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertNotNull(objectArrayIterator0);
      assertEquals(4, sQLNonTransientConnectionExceptionArray0.length);
      
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) objectArrayIterator0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", ", ", 0, intArray0, sQLNonTransientConnectionException3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(", ", batchUpdateException0.getSQLState());
      assertEquals(", ", sQLNonTransientConnectionException3.getMessage());
      assertEquals(10, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: , ", sQLNonTransientConnectionException3.toString());
      assertNotNull(batchUpdateException0);
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertEquals(1, intArray0.length);
      
      ArrayListIterator<SQLNonTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientConnectionException>(batchUpdateException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode((String) null);
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      String string0 = "<~~F\\";
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("<~~F");
      assertNotNull(iIOMetadataNode5);
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode((String) null);
      assertNotNull(iIOMetadataNode6);
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode5));
      
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      int int0 = 0;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(7, iIOMetadataNodeArray0.length);
      
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, 0L, (long) 0);
      assertNotNull(boundedIterator0);
      assertEquals(7, iIOMetadataNodeArray0.length);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) boundedIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(iterator0);
      assertEquals(7, iIOMetadataNodeArray0.length);
      
      HashMap<Object, IIOMetadataNode> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Object, IIOMetadataNode>(0, (-1276.3467F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1276.3467
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MapIterator<SQLRecoverableException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      assertNotNull(iterator0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "@[eFcP>wHs^EUB");
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      stringTokenizerArray0[0] = stringTokenizer0;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      assertNotNull(resettableIterator0);
      assertEquals(1, stringTokenizerArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("FcdLr{\"]9I_.j9", "Transformer must not be null", 0);
      assertEquals("Transformer must not be null", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: FcdLr{\"]9I_.j9", sQLNonTransientException0.toString());
      assertEquals("FcdLr{\"]9I_.j9", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("S2;{?O&gUVg[32.Qp", "Transformer must not be null", 0, sQLNonTransientException0);
      assertEquals("Transformer must not be null", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: FcdLr{\"]9I_.j9", sQLNonTransientException0.toString());
      assertEquals("FcdLr{\"]9I_.j9", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLTimeoutException0.getSQLState());
      assertEquals("S2;{?O&gUVg[32.Qp", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: S2;{?O&gUVg[32.Qp", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertEquals("Transformer must not be null", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: FcdLr{\"]9I_.j9", sQLNonTransientException0.toString());
      assertEquals("FcdLr{\"]9I_.j9", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLTimeoutException0.getSQLState());
      assertEquals("S2;{?O&gUVg[32.Qp", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: S2;{?O&gUVg[32.Qp", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: S2;{?O&gUVg[32.Qp", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: S2;{?O&gUVg[32.Qp", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      assertNotNull(andPredicate0);
      
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) treeSet0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.singletonIterator(predicate0);
      assertNotNull(resettableIterator0);
      
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      BoundedIterator<SQLWarning> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) resettableListIterator0, 1L);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(boundedIterator0);
      
      int int0 = IteratorUtils.size(boundedIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, int0);
      
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("QJj|lj|L]m", "QJj|lj|L]m", 1458);
      assertEquals("QJj|lj|L]m", sQLTransactionRollbackException1.getSQLState());
      assertEquals(1458, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: QJj|lj|L]m", sQLTransactionRollbackException1.toString());
      assertEquals("QJj|lj|L]m", sQLTransactionRollbackException1.getMessage());
      assertNotNull(sQLTransactionRollbackException1);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("a%mcM3/52rssC:~", "a%mcM3/52rssC:~", 3464, sQLTransactionRollbackException1);
      assertEquals("QJj|lj|L]m", sQLTransactionRollbackException1.getSQLState());
      assertEquals(1458, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: QJj|lj|L]m", sQLTransactionRollbackException1.toString());
      assertEquals("QJj|lj|L]m", sQLTransactionRollbackException1.getMessage());
      assertEquals("a%mcM3/52rssC:~", sQLTransactionRollbackException2.getMessage());
      assertEquals("a%mcM3/52rssC:~", sQLTransactionRollbackException2.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: a%mcM3/52rssC:~", sQLTransactionRollbackException2.toString());
      assertEquals(3464, sQLTransactionRollbackException2.getErrorCode());
      assertNotNull(sQLTransactionRollbackException2);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("a%mcM3/52rssC:~", "", 3464, sQLTransactionRollbackException2);
      assertEquals("QJj|lj|L]m", sQLTransactionRollbackException1.getSQLState());
      assertEquals(1458, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: QJj|lj|L]m", sQLTransactionRollbackException1.toString());
      assertEquals("QJj|lj|L]m", sQLTransactionRollbackException1.getMessage());
      assertEquals("a%mcM3/52rssC:~", sQLTransactionRollbackException2.getMessage());
      assertEquals("a%mcM3/52rssC:~", sQLTransactionRollbackException2.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: a%mcM3/52rssC:~", sQLTransactionRollbackException2.toString());
      assertEquals(3464, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: a%mcM3/52rssC:~", sQLTransactionRollbackException3.toString());
      assertEquals(3464, sQLTransactionRollbackException3.getErrorCode());
      assertEquals("", sQLTransactionRollbackException3.getSQLState());
      assertEquals("a%mcM3/52rssC:~", sQLTransactionRollbackException3.getMessage());
      assertNotNull(sQLTransactionRollbackException3);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException3);
      assertEquals("QJj|lj|L]m", sQLTransactionRollbackException1.getSQLState());
      assertEquals(1458, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: QJj|lj|L]m", sQLTransactionRollbackException1.toString());
      assertEquals("QJj|lj|L]m", sQLTransactionRollbackException1.getMessage());
      assertEquals("a%mcM3/52rssC:~", sQLTransactionRollbackException2.getMessage());
      assertEquals("a%mcM3/52rssC:~", sQLTransactionRollbackException2.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: a%mcM3/52rssC:~", sQLTransactionRollbackException2.toString());
      assertEquals(3464, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: a%mcM3/52rssC:~", sQLTransactionRollbackException3.toString());
      assertEquals(3464, sQLTransactionRollbackException3.getErrorCode());
      assertEquals("", sQLTransactionRollbackException3.getSQLState());
      assertEquals("a%mcM3/52rssC:~", sQLTransactionRollbackException3.getMessage());
      assertEquals(0, sQLTransactionRollbackException4.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException: a%mcM3/52rssC:~", sQLTransactionRollbackException4.toString());
      assertNull(sQLTransactionRollbackException4.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: a%mcM3/52rssC:~", sQLTransactionRollbackException4.getMessage());
      assertNotNull(sQLTransactionRollbackException4);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException1));
      
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.UniquePredicate", "QJj|lj|L]m");
      assertEquals("QJj|lj|L]m", sQLTransactionRollbackException5.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.UniquePredicate", sQLTransactionRollbackException5.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.UniquePredicate", sQLTransactionRollbackException5.toString());
      assertEquals(0, sQLTransactionRollbackException5.getErrorCode());
      assertNotNull(sQLTransactionRollbackException5);
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException2));
      
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(6, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(objectArrayListIterator0);
      assertEquals(6, sQLTransactionRollbackExceptionArray0.length);
      
      Enumeration<SQLTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(6, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(enumeration0);
      assertEquals(6, sQLTransactionRollbackExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offerFirst("ListIterator must not be null");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("ListIterator must not be null"));
      
      boolean boolean1 = linkedList0.add(">r93([)R|zBe");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("ListIterator must not be null"));
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("ListIterator must not be null"));
      
      boolean boolean2 = priorityQueue0.retainAll(linkedList0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedList0.contains("ListIterator must not be null"));
      
      ListIterator<PriorityQueue<SQLClientInfoException>> listIterator0 = IteratorUtils.singletonListIterator(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(0, int0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("]@om1[nXtKl6%", "]@om1[nXtKl6%", sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("]@om1[nXtKl6%", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("]@om1[nXtKl6%", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ]@om1[nXtKl6%", sQLIntegrityConstraintViolationException1.toString());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException2.getMessage());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException2.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "Enumeration must not be null", 0, sQLIntegrityConstraintViolationException2);
      assertNull(sQLIntegrityConstraintViolationException2.getMessage());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException2.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Enumeration must not be null", sQLIntegrityConstraintViolationException3.toString());
      assertEquals("Enumeration must not be null", sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("Enumeration must not be null", sQLIntegrityConstraintViolationException3.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException3);
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "", 1);
      assertEquals("", sQLIntegrityConstraintViolationException4.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException4.getSQLState());
      assertEquals(1, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException4.toString());
      assertNotNull(sQLIntegrityConstraintViolationException4);
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException4;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-63), (-88));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = ">r93([)R|zBe";
      String string1 = "ListIterator must not be null";
      boolean boolean0 = linkedList0.offerFirst("ListIterator must not be null");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("ListIterator must not be null"));
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean1 = linkedList0.add(">r93([)R|zBe");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(">r93([)R|zBe"));
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(">r93([)R|zBe"));
      
      boolean boolean2 = priorityQueue0.retainAll(linkedList0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedList0.contains(">r93([)R|zBe"));
      
      ListIterator<PriorityQueue<SQLClientInfoException>> listIterator0 = IteratorUtils.singletonListIterator(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, int0);
      
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(enumSetArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      String string0 = "org.apache.commons.collections4.IteratorUtils";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils");
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      int int0 = 0;
      int int1 = 0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 0, 0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(enumeration0);
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(iterator0);
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Bzlc.");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableIterator0);
      assertEquals(3, iIOMetadataNodeArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNode0.setAttributeNS("", "", "");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      OrderedMapIterator<Vector<SQLFeatureNotSupportedException>, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<Vector<SQLFeatureNotSupportedException>, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Vector<SQLFeatureNotSupportedException>, DataTruncation>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      OrderedMapIterator<Vector<SQLFeatureNotSupportedException>, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Vector<SQLFeatureNotSupportedException>, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Vector<SQLTransientConnectionException>[] vectorArray0 = (Vector<SQLTransientConnectionException>[]) Array.newInstance(Vector.class, 1);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = vector0.containsAll(arrayList0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      vectorArray0[0] = vector0;
      ResettableListIterator<Vector<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(1, vectorArray0.length);
      
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 1810;
      Integer integer0 = new Integer(1810);
      assertEquals(1810, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 1289);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = " h9X=}c&H!P?w";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" h9X=}c&H!P?w");
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(" h9X=}c&H!P?w", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException:  h9X=}c&H!P?w", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "Node must not be null", (Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Node must not be null");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("]@om1[nXtKl6%", "yxDJ", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", "", 106, sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-2734), 809);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 3848;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 3848, 3848);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = 0;
      int int1 = 61;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, 0, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
