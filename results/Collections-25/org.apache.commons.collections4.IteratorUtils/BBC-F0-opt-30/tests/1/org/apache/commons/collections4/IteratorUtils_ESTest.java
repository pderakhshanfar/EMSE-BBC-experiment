/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 21:55:41 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("LFg-Snj");
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientConnectionException) null, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MapIterator<BatchUpdateException, ArrayDeque<Properties>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<BatchUpdateException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<BatchUpdateException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, SQLFeatureNotSupportedException>(hashMap0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) entrySetMapIterator0, (Iterator<? extends BatchUpdateException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 1);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLSyntaxErrorException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      int[] intArray0 = new int[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "`(|rOSkH0G`", 46, sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 46, intArray0, sQLDataException0);
      linkedList0.add(batchUpdateException0);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MapIterator<SQLDataException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(mapIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) abstractMapIteratorDecorator0, 100);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Max parameter must not be negative.");
      Transformer<SQLTransientException, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
      assertFalse(list0.contains(sQLTimeoutException0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      assertNotSame(sQLIntegrityConstraintViolationExceptionArray1, sQLIntegrityConstraintViolationExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long[] longArray0 = new long[4];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, 152);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 91, longArray0, sQLSyntaxErrorException0);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) batchUpdateException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<SQLDataException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(mapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) abstractMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(stack0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SingletonIterator<ServiceLoader<SQLDataException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLDataException>>((ServiceLoader<SQLDataException>) null);
      ServiceLoader<SQLDataException> serviceLoader0 = IteratorUtils.get((Iterator<ServiceLoader<SQLDataException>>) singletonIterator0, 0);
      assertNull(serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) null, (Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      Iterator<Locale.Category> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, 0L);
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) boundedIterator0, 0L, 0L);
      assertNotSame(boundedIterator1, boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashSet<IIOMetadataNode>[] hashSetArray0 = (HashSet<IIOMetadataNode>[]) Array.newInstance(HashSet.class, 4);
      ResettableIterator<HashSet<IIOMetadataNode>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(defaultEquator0.HASHCODE_NULL, false);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("VtMAJypVJ<Z9l");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "FV", "VtMAJypVJ<Z9l", "BDt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'VtMAJypVJ<Z9l' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.getIterator("");
      Integer[] integerArray0 = new Integer[3];
      int int0 = 10;
      Integer integer0 = new Integer(10);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1071);
      integerArray0[2] = integer2;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[2] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) integer1, (Equator<Object>) defaultEquator0);
      predicateArray0[3] = predicate1;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[1], predicateArray0[1]);
      predicateArray0[4] = (Predicate<Object>) andPredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, factoryTransformer0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Integer>) objectArrayIterator0, (Transformer<? super Integer, String>) switchTransformer0, "?,K6*L&_nB|t", "?,K6*L&_nB|t", "org.apache.commons.collections4.functors.TransformedPredicate");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Properties properties0 = new Properties();
      Predicate<Properties>[] predicateArray0 = (Predicate<Properties>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", classArray0, classArray0);
      Transformer<Properties, Properties> transformer0 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicateArray0[1], (Transformer<? super Properties, ? extends Properties>) invokerTransformer0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      Transformer<Object, String> transformer1 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("Transformer must not be null");
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(linkedList0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends String>) loopingIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<Locale.Category>[] classArray0 = (Class<Locale.Category>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<SQLException, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransactionRollbackException>("Xfj$6k+f4V2*|iC'*", classArray0, classArray0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Xfj$6k+f4V2*|iC'*' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLDataException>) null, (long) 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/EhOcknG", hashtable0);
      stack0.add(sQLClientInfoException0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) stack0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ServiceLoader<SQLDataException>>) null, 152);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 1865, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-201));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 40, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("avjO&(NaU{pGDtF\"G", "avjO&(NaU{pGDtF\"G", 12);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null, 1674, (-670));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, (-1), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fd-w&MKmj=c<c");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 3, 166);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0, "VtMAJypVJ<Z9l", "VtMAJypVJ<Z9l", "VtMAJypVJ<Z9l");
      assertEquals("VtMAJypVJ<Z9lVtMAJypVJ<Z9l", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) null, "org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry", "org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry", "org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0);
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.Locale.Category.class) , any(java.util.Locale.Category.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Locale.Category> comparatorPredicate0 = new ComparatorPredicate<Locale.Category>(locale_Category0, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) comparatorPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 1);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0, 1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, 0L, (-24L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("m0JT4@,oS)@[<nyc^v", hashMap0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) resettableIterator0, (Iterator<?>) resettableIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("m0JT4@,oS)@[<nyc^v");
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) transformer0, "m0JT4@,oS)@[<nyc^v", "3(~5k", "VtMAJypVJ<Z9l");
      assertEquals("3(~5km0JT4@,oS)@[<nyc^vVtMAJypVJ<Z9l", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("m0JT4@,oS)@[<nyc^v");
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      String string0 = IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) objectArrayIterator0, (Transformer<? super Integer, String>) switchTransformer0, "?,K6*L&_nB|t", "?,K6*L&_nB|t", "org.apache.commons.collections4.functors.TransformedPredicate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0, "ECghoUE", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MapIterator<StringTokenizer, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) singletonIterator0, (Iterator<?>) mapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("6");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) transformer0, "3(~'5k", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(":#tS=/N4?hC");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) constantTransformer0, (String) null, (String) null, "OG(@+J+K02uYq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLWarning0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>((SortedSet<? extends Locale.Category>) treeSet0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      priorityQueue0.add(locale_Category0);
      LoopingIterator<Locale.Category> loopingIterator0 = new LoopingIterator<Locale.Category>(priorityQueue0);
      // Undeclared exception!
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>((SortedSet<? extends Locale.Category>) treeSet0);
      LoopingIterator<Locale.Category> loopingIterator0 = new LoopingIterator<Locale.Category>(priorityQueue0);
      int int0 = IteratorUtils.size(loopingIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      ServiceLoader<SQLDataException> serviceLoader0 = ServiceLoader.load(class0);
      SingletonIterator<ServiceLoader<SQLDataException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLDataException>>(serviceLoader0);
      ServiceLoader<SQLDataException> serviceLoader1 = IteratorUtils.get((Iterator<ServiceLoader<SQLDataException>>) singletonIterator0, 0);
      assertSame(serviceLoader1, serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLDataException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      ResettableIterator<ServiceLoader<SQLDataException>> resettableIterator0 = IteratorUtils.singletonIterator(serviceLoader0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ServiceLoader<SQLDataException>>) resettableIterator0, 128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 127
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("m0JT4@,oS)@[<nyc^v");
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) linkedList0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "");
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super Locale.Category>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Object) resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Transformer<SQLRecoverableException, SQLTransientConnectionException>>) null, (Predicate<? super Transformer<SQLRecoverableException, SQLTransientConnectionException>>) onePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<Boolean, Stack<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, Stack<SQLSyntaxErrorException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, Stack<SQLSyntaxErrorException>>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Boolean>) abstractOrderedMapIteratorDecorator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("9y^8X7v`MYEw", "9y^8X7v`MYEw", 867, sQLRecoverableException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("9y^8X7v`MYEw", sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("9y^8X7v`MYEw", "9y^8X7v`MYEw", 990, sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.find((Iterator<SQLNonTransientException>) singletonListIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Boolean[] booleanArray0 = new Boolean[4];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      IteratorUtils.find((Iterator<Boolean>) resettableListIterator0, (Predicate<? super Boolean>) predicate1);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("|C8nO#)c", "DvyM`WSJR>M axByF");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "e", 0, sQLTransientConnectionException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTimeoutException0);
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) equalPredicate0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("#8bIEc`67", "BTE7Gta@kINz", sQLClientInfoException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      NullIsTruePredicate<SQLDataException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLDataException>((Predicate<? super SQLDataException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Predicate<IIOMetadataNode>, Closure<IIOMetadataNode>> hashMap0 = new HashMap<Predicate<IIOMetadataNode>, Closure<IIOMetadataNode>>();
      Closure<IIOMetadataNode> closure0 = SwitchClosure.switchClosure((Map<Predicate<IIOMetadataNode>, Closure<IIOMetadataNode>>) hashMap0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.apply((Iterator<IIOMetadataNode>) singletonIterator0, (Closure<? super IIOMetadataNode>) closure0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Predicate<IIOMetadataNode>, Closure<IIOMetadataNode>> hashMap0 = new HashMap<Predicate<IIOMetadataNode>, Closure<IIOMetadataNode>>();
      Closure<IIOMetadataNode> closure0 = SwitchClosure.switchClosure((Map<Predicate<IIOMetadataNode>, Closure<IIOMetadataNode>>) hashMap0);
      IteratorUtils.apply((Iterator<IIOMetadataNode>) null, (Closure<? super IIOMetadataNode>) closure0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) orderedMapIterator0, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" is less than zero");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Cannot set to list until next() or previous() called", "3 *bar:^u\u0006hN u*M", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(vector0);
      vector0.add((BatchUpdateException) null);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) loopingListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Class<SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(vector0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray0 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) loopingListIterator0, class0);
      assertEquals(0, batchUpdateExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer(301);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) integer0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator((SQLTimeoutException) null);
      Iterable<SQLTimeoutException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      Iterable<SQLTransactionRollbackException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null, (Collection<? super SQLTransactionRollbackException>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) objectArrayListIterator0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) objectArrayListIterator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) list0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MapIterator<BatchUpdateException, ArrayDeque<Properties>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.Category>) vector0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLException sQLException0 = new SQLException("$t");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$t", sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLIntegrityConstraintViolationException0, defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      Transformer<SQLTransactionRollbackException, SQLTransactionRollbackException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsExceptionPredicate<SQLTransactionRollbackException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLTransactionRollbackException>(predicate0);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Predicate<? super SQLTransactionRollbackException>) nullIsExceptionPredicate0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends HashSet<DataTruncation>>) null, (Transformer<? super HashSet<DataTruncation>, ? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The transformer to call must not be null");
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      HashMap<SQLException, IIOMetadataNode> hashMap0 = new HashMap<SQLException, IIOMetadataNode>();
      Transformer<SQLException, IIOMetadataNode> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends IIOMetadataNode>) hashMap0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) singletonListIterator0, (Transformer<? super SQLRecoverableException, ? extends IIOMetadataNode>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<Locale.Category, HashSet<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, HashSet<IIOMetadataNode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, HashSet<IIOMetadataNode>>(orderedMapIterator0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends Locale.Category>) orderedMapIterator0, (Iterator<? extends Locale.Category>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 1);
      IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator0, (long) 1);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer(">XXqjsj");
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-542), 2185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 612);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTimeoutException, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLWarning> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ServiceLoader<SQLClientInfoException>[] serviceLoaderArray0 = (ServiceLoader<SQLClientInfoException>[]) Array.newInstance(ServiceLoader.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(serviceLoaderArray0, 0, (-1453));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, (-755));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Max parameter must not be negative.");
      Transformer<SQLTransientException, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) resettableIterator0, (Iterator<?>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(",BQ");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/G%-J", "", 2183, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 6, (-2054));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, (-1247));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      boolean boolean0 = IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) singletonListIterator0, (Object) enumSet0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2037));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "", (-4283), sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 8);
      Transformer<SQLRecoverableException, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<SQLRecoverableException> transformerPredicate0 = new TransformerPredicate<SQLRecoverableException>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<HashMap<Locale.LanguageRange, SQLException>, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) enumeration0, 2391);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
