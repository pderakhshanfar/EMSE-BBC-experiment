/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 16:50:37 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      IteratorUtils.get((Iterator<LinkedList<Iterator<Stack>>>) singletonListIterator0, 0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("list (", "(;$L@?,$jF-H;Rs7@e", (Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("6oYs0:Urpx[tn", (String) null, 0, (Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", (String) null, 0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "(;$L@?,$jF-H;Rs7@e", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException((String) null, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("", "#',.%~b", (-5357));
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException(">?vSP!BC7((UBH", "(@l&_tt\"9s~o", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("(@l&_tt\"9s~o");
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) iterator0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("Iterator setValue() can only be called after next() and before remove()");
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException1, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Iterator setValue() can only be called after next() and before remove()' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer[] integerArray0 = new Integer[1];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      ExceptionTransformer.exceptionTransformer();
      String string0 = "CQ~8uue$hv\"f`_s";
      Object object0 = new Object();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("CQ~8uue$hv\"f`_s");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("iterator");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode(":Qjr,h-7@S^spw}}2,O");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("iterator");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'iterator' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      Stack<Boolean> stack0 = new Stack<Boolean>();
      SingletonListIterator<Stack<Boolean>> singletonListIterator0 = new SingletonListIterator<Stack<Boolean>>(stack0);
      IteratorUtils.contains((Iterator<Stack<Boolean>>) singletonListIterator0, (Object) stack0);
      IteratorUtils.size(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashSet<SQLSyntaxErrorException> hashSet0 = new HashSet<SQLSyntaxErrorException>();
      hashSet0.parallelStream();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.NullIsFalsePredicate", "end", 899);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("PgJ5{9JSG", sQLTransactionRollbackException0);
      sQLSyntaxErrorException0.getLocalizedMessage();
      hashSet0.add(sQLSyntaxErrorException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) hashSet0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(10, true, false, 10, 10);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) singletonIterator0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(listIterator0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.find((Iterator<DataTruncation>) listIteratorWrapper0, (Predicate<? super DataTruncation>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[0];
      MockThrowable mockThrowable0 = new MockThrowable(": X`UI");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("gD", "gD", mockThrowable0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.functors.WhileClosure", sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.WhileClosure", "org.apache.commons.collections4.functors.WhileClosure", intArray0, sQLWarning0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 3);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("org.apache.commons.collections4.functors.WhileClosure", classArray0, classArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) invokerTransformer0);
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.WhileClosure' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLNonTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(44);
      Integer integer2 = new Integer(44);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      IteratorUtils.get((Iterator<LinkedList<Iterator<Stack>>>) singletonListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("x::k}#!7WPn:85;");
      SQLTransientException sQLTransientException0 = new SQLTransientException("ue<.", "ue<.", sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("x::k}#!7WPn:85;", "x::k}#!7WPn:85;", sQLTransientException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "ue<.", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("x::k}#!7WPn:85;", "Rc", 2480);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("x::k}#!7WPn:85;", "ue<.", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException4;
      SQLDataException sQLDataException0 = new SQLDataException("UCvb>^I})Om^+KS", "", 61, sQLIntegrityConstraintViolationException3);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("x::k}#!7WPn:85;", "", sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("8hKx RIY%n_AsF");
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException5);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("*o@?oo%R{", "UCvb>^I})Om^+KS", 61, sQLIntegrityConstraintViolationException7);
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException8;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException9 = new SQLIntegrityConstraintViolationException("@h3", sQLIntegrityConstraintViolationException6);
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException9;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>((Predicate<? super SQLException>) null, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      SingletonListIterator<LinkedHashSet<SQLException>> singletonListIterator1 = new SingletonListIterator<LinkedHashSet<SQLException>>(linkedHashSet0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "!F'j7ku?1", (-11));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null, 3, sQLTransientException0);
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLException>>) singletonListIterator1, (Transformer<? super LinkedHashSet<SQLException>, String>) transformer0, "!F'j7ku?1", "_MrnGhY7}", "!F'j7ku?1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Integer integer0 = new Integer(0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) orderedIterator0, class0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) resettableListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) null, "kD'n>", "kD'n>", "kD'n>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      linkedList0.iterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, ";<13* k\"M2IMS", (-1147));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$7cPu ");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(";<13* k\"M2IMS", ";<13* k\"M2IMS", (-1147), sQLTimeoutException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationException1.getLocalizedMessage();
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLIntegrityConstraintViolationException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException3;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      Transformer<SQLIntegrityConstraintViolationException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "Collection must not be null", "Collection must not be null", "Collection must not be null");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      IteratorUtils.apply((Iterator<PriorityQueue<Closure>>) null, (Closure<? super PriorityQueue<Closure>>) closure0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(linkedList0);
      int int0 = 1073741824;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) reverseListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = linkedList0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<HashSet<Hashtable>>) iterator0, (Predicate<? super HashSet<Hashtable>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(linkedHashSet0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integerArray0[1]);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(integerArray0[1], comparator0, comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[1] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[4] = (Predicate<Object>) comparatorPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[0] = (Closure<Object>) chainedClosure0;
      Closure<Object> closure0 = NOPClosure.nopClosure();
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) comparatorPredicate0, (Closure<? super Object>) switchClosure0, false);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(comparatorPredicate0, closure1, closureArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<Closure>>) singletonListIterator0, (Closure<? super PriorityQueue<Closure>>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<Locale.FilteringMode>[]) null, 0, 1984);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[6];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("*(u# cBjZ0P@L^", sQLWarning0);
      sQLWarningArray0[1] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning();
      sQLWarningArray0[2] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning();
      sQLWarningArray0[3] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning("*(u# cBjZ0P@L^", "*(u# cBjZ0P@L^", 0, sQLWarning0);
      sQLWarningArray0[4] = sQLWarning4;
      SQLWarning sQLWarning5 = new SQLWarning("*(u# cBjZ0P@L^");
      sQLWarningArray0[5] = sQLWarning5;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0, 0, 0);
      IteratorUtils.matchesAll((Iterator<HashSet<Hashtable>>) resettableIterator0, (Predicate<? super HashSet<Hashtable>>) predicate0);
      Stack<Object> stack0 = new Stack<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(stack0);
      IteratorUtils.skippingIterator((Iterator<Object>) loopingListIterator0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      SingletonIterator<ArrayList<Iterator<String>>> singletonIterator0 = new SingletonIterator<ArrayList<Iterator<String>>>(arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) singletonIterator0, (Predicate<? super ArrayList<Iterator<String>>>) instanceofPredicate0);
      ArrayList<SQLTransactionRollbackException> arrayList1 = new ArrayList<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator1 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      Iterator<SQLTransactionRollbackException> iterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList1);
      Enumeration<SQLTransactionRollbackException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) singletonIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UniquePredicate<HashMap<Locale.FilteringMode, Predicate<Object>>> uniquePredicate0 = new UniquePredicate<HashMap<Locale.FilteringMode, Predicate<Object>>>();
      IteratorUtils.getIterator(uniquePredicate0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("<Cmt%h", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      linkedList1.add(batchUpdateException0);
      linkedList1.iterator();
      ResettableListIterator<Stack<SQLNonTransientException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) nullIsTruePredicate0);
      ListIterator<Stack<SQLNonTransientException>> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Stack<SQLNonTransientException>>) resettableListIterator0, (Predicate<? super Stack<SQLNonTransientException>>) predicate1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.matchesAll((Iterator<HashSet<Hashtable>>) listIterator0, (Predicate<? super HashSet<Hashtable>>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      int int0 = 432;
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(432, 432);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      IteratorUtils.getIterator(stringTokenizer0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Properties properties0 = new Properties();
      ArrayListIterator<Predicate<Object>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Predicate<Object>>(properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("0*(5# cBjmf0PPLU");
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      EmptyOrderedIterator.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4153);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) null, "org.apache.commons.collections4.functors.SwitchTransformer", ";&<", ";&<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("8.$1`y.-15V&uy:ui]", sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.size(listIterator0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      MockFile mockFile0 = new MockFile((String) null, "v]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Yra8t,Lomge f+}", "8.$1`y.-15V&uy:ui]", sQLFeatureNotSupportedException0);
      sQLTimeoutException1.printStackTrace((PrintWriter) mockPrintWriter0);
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException1);
      IteratorUtils.emptyListIterator();
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends IIOMetadataNode>) orderedMapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory((String) null);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) factoryTransformer0, "Iterator must not be null", "Iterator must not be null", "H@@}RbTF1g!'As4x<`");
      Integer integer0 = new Integer(1);
      IteratorUtils.getIterator(factory0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (-4350L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      SingletonIterator<ArrayList<Iterator<String>>> singletonIterator0 = new SingletonIterator<ArrayList<Iterator<String>>>(arrayList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 3830);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator1 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray1[0] = (Predicate<Object>) anyPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray1);
      predicateArray0[1] = (Predicate<Object>) nonePredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray1[0]);
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<?>) singletonIterator0, (Predicate<? super Object>) predicateArray0[0]);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.isEmpty(singletonIterator1);
      ResettableListIterator<Stack<SQLNonTransientException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Stack<SQLNonTransientException>>) resettableListIterator0, (Predicate<? super Stack<SQLNonTransientException>>) nonePredicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator2 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) singletonIterator2, (Predicate<? super BatchUpdateException>) predicateArray0[1]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1287).when(comparator0).compare(any(java.sql.SQLSyntaxErrorException.class) , any(java.sql.SQLSyntaxErrorException.class));
      Predicate<SQLSyntaxErrorException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLSyntaxErrorException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      SingletonIterator<ArrayList<Iterator<String>>> singletonIterator0 = new SingletonIterator<ArrayList<Iterator<String>>>(arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) singletonIterator0, (Predicate<? super ArrayList<Iterator<String>>>) predicate0);
      TreeSet<SQLTransientConnectionException>[] treeSetArray0 = (TreeSet<SQLTransientConnectionException>[]) Array.newInstance(TreeSet.class, 0);
      ResettableListIterator<TreeSet<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransientConnectionException>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(436);
      Integer integer1 = new Integer(436);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      integerArray0[5] = integerArray0[1];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) resettableListIterator0);
      IteratorUtils.get((Iterator<LinkedList<Iterator<Stack>>>) resettableListIterator0, 2);
      SQLDataException sQLDataException0 = new SQLDataException();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<Closure>>) resettableListIterator0, (Closure<? super PriorityQueue<Closure>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstaniateFactory: Instantiationxcetion");
      MockFile mockFile0 = new MockFile("", "IkUCTv*di%uk");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Iterator must not be null");
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      IteratorUtils.getIterator("");
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, HashMap<SQLFeatureNotSupportedException, String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, HashMap<SQLFeatureNotSupportedException, String>>) orderedMapIterator0);
      ArrayList<Iterator<String>>[] arrayListArray0 = (ArrayList<Iterator<String>>[]) Array.newInstance(ArrayList.class, 5);
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      arrayListArray0[0] = arrayList0;
      ArrayList<Iterator<String>> arrayList1 = new ArrayList<Iterator<String>>();
      arrayListArray0[1] = arrayList1;
      ArrayList<Iterator<String>> arrayList2 = new ArrayList<Iterator<String>>();
      arrayListArray0[2] = arrayList2;
      ArrayList<Iterator<String>> arrayList3 = new ArrayList<Iterator<String>>();
      arrayListArray0[3] = arrayList3;
      ArrayList<Iterator<String>> arrayList4 = new ArrayList<Iterator<String>>();
      arrayListArray0[4] = arrayList4;
      ResettableIterator<ArrayList<Iterator<String>>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0);
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) resettableIterator0, (Predicate<? super ArrayList<Iterator<String>>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyOrderedIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) fileSystemHandling0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Iterator<String>>) null, (Iterator<? extends Iterator<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      SingletonIterator<ArrayList<Iterator<String>>> singletonIterator0 = new SingletonIterator<ArrayList<Iterator<String>>>(arrayList0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends IIOMetadataNode>) orderedMapIterator1);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      ArrayList<Iterator<IIOMetadataNode>> arrayList1 = new ArrayList<Iterator<IIOMetadataNode>>();
      ConstantFactory.constantFactory(arrayList1);
      ArrayList<Iterator<Properties>> arrayList2 = new ArrayList<Iterator<Properties>>();
      ConstantFactory.constantFactory(arrayList2);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) factoryTransformer0, "", "", "");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      SingletonIterator<ArrayList<Iterator<String>>> singletonIterator0 = new SingletonIterator<ArrayList<Iterator<String>>>(arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 424);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Integer integer0 = new Integer(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer[] integerArray0 = new Integer[0];
      IteratorUtils.arrayListIterator(integerArray0);
      LoopingIterator<Integer> loopingIterator0 = null;
      try {
        loopingIterator0 = new LoopingIterator<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) singletonIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonIterator0, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstaniateFactory: Instantiationxcetion");
      MockFile mockFile0 = new MockFile("Yra8t,Lomge f+}", "Yra8t,Lomge f+}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("n+ES\"?|GBs<Dk*2.5C", "org.apache.c2mmons.collection@4.IteratorUtils", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mockPrintWriter0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, HashMap<SQLFeatureNotSupportedException, String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, HashMap<SQLFeatureNotSupportedException, String>>) orderedMapIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<PriorityQueue<Closure>>) iterator0, (Closure<? super PriorityQueue<Closure>>) closure0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyListIterator();
      Comparator<SQLSyntaxErrorException> comparator1 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(java.sql.SQLSyntaxErrorException.class) , any(java.sql.SQLSyntaxErrorException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLSyntaxErrorException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLSyntaxErrorException) null, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator((SQLSyntaxErrorException) null);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      IteratorUtils.emptyListIterator();
      HashMap<SQLFeatureNotSupportedException, Object> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Object>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Object>(hashMap0);
      MapIterator<SQLFeatureNotSupportedException, Object> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Object>) entrySetMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(432, 432);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 432);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstaniateFactory: Instantiationxcetion");
      MockFile mockFile0 = new MockFile("Yra8t,Lomge f+}", "Yra8t,Lomge f+}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Yra8t,Lomge f+}", "/]6]p,`1}aBScKpE", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      IteratorUtils.getIterator("InstaniateFactory: Instantiationxcetion");
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, HashMap<SQLFeatureNotSupportedException, String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, HashMap<SQLFeatureNotSupportedException, String>>) orderedMapIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<PriorityQueue<Closure>>) orderedMapIterator0, (Closure<? super PriorityQueue<Closure>>) closure0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      IteratorUtils.singletonIterator(arrayList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "Enumeration must not be null", 2444, sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("X!o(:", "X!o(:", 2444, sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("X!o(:", "X!o(:", 2444, sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException1);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      Iterator<?> iterator0 = new SingletonListIterator<String>("");
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Hashtable<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException>[]) null, 2444);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      List<Iterator<SQLRecoverableException>> list0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Iterator<SQLRecoverableException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Iterator<?> iterator0 = new SingletonIterator<String>("0*e5# Bjmf0HPLU");
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      Comparator<SQLTransientException> comparator1 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) iteratorArray0[0], (Iterator<? extends SQLTransientConnectionException>) iteratorArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.toList((Iterator<? extends String>) resettableIterator0, 100);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) priorityQueue0);
      MapIterator<SQLInvalidAuthorizationSpecException, HashMap<SQLFeatureNotSupportedException, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ObjectArrayListIterator<Class<Properties>> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Class<Properties>>((Class<Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedHashSet0);
      IteratorUtils.emptyMapIterator();
      Integer integer0 = new Integer((-2341));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<TreeSet<DataTruncation>>) null, (Predicate<? super TreeSet<DataTruncation>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<Object> iterator1 = IteratorUtils.filteredIterator((Iterator<?>) iterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super Object>) predicate0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Hashtable<DataTruncation, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<DataTruncation, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<DataTruncation, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLFeatureNotSupportedException>(hashtable0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) entrySetMapIterator0, 0L);
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) orderedIterator0, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(436);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(436);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(175);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      int int0 = 2;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(10);
      integerArray0[5] = integer5;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) resettableListIterator0);
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.get((Iterator<LinkedList<Iterator<Stack>>>) resettableListIterator0, 2);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, int0, sQLNonTransientConnectionException0);
      sQLSyntaxErrorException0.getLocalizedMessage();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLSyntaxErrorException0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integerArray0[1]);
      LinkedList<Iterator<Stack>> linkedList0 = IteratorUtils.get((Iterator<LinkedList<Iterator<Stack>>>) singletonListIterator0, (int) integerArray0[0]);
      EmptyIterator.emptyIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, linkedList0, linkedList0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) hashSet0);
      Predicate<SQLWarning> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator1, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator1);
      Integer integer0 = new Integer(91);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends IIOMetadataNode>) orderedMapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) orderedMapIterator1, (Transformer<? super SQLClientInfoException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Factory<String> factory0 = ConstantFactory.constantFactory("Q8/d");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Q8/d", "Q8/d", 173, sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) zippingIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Q8/d", sQLIntegrityConstraintViolationException0);
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLTimeoutException0, 2865);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (String) null);
      sQLTransientException0.getStackTrace();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends IIOMetadataNode>) orderedMapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory((String) null);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Transformer<? super SQLIntegrityConstraintViolationException, String>) factoryTransformer0, "", "org.apache.commons.collections4.list.AbstractLinkedList$Node", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0, 1);
      EmptyListIterator.resettableEmptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      OrderedMapIterator<SQLTransientConnectionException, TreeSet<SQLIntegrityConstraintViolationException>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, TreeSet<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, TreeSet<SQLIntegrityConstraintViolationException>>(orderedMapIterator1);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedHashSet0);
      MapIterator<SQLInvalidAuthorizationSpecException, HashMap<SQLFeatureNotSupportedException, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(436);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(436);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(175);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(10);
      integerArray0[5] = integer5;
      IteratorUtils.arrayListIterator(integerArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IteratorUtils.getIterator(integerArray0[0]);
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 436, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      MockFile mockFile0 = new MockFile("Yra8t,Lomge f+}", "Yra8t,Lomge f+}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Integer integer0 = new Integer(9);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) transformerPredicate0, (Predicate<? super Object>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedList0);
      Closure<SQLFeatureNotSupportedException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.singletonListIterator((Closure<HashSet>) closure0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("NodeList must not be null", "setValue() can only be called after next() and before remove()");
      linkedList0.offerFirst(sQLTimeoutException0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableListIterator<LinkedHashSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      ResettableListIterator<String> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends String>) resettableListIterator1, 1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Integer integer0 = new Integer(0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties1, false);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableListIterator0);
      IteratorUtils.loopingListIterator(list0);
      Properties[] propertiesArray0 = new Properties[0];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0, 0);
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) objectArrayIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(436);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(436);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(175);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(10);
      integerArray0[5] = integer5;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) resettableListIterator0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedList<Iterator<Stack>>>) resettableListIterator0, (int) integerArray0[2]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 169
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) singletonIterator0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) resettableListIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Integer integer0 = new Integer(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer[] integerArray0 = new Integer[1];
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) resettableListIterator1);
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-326));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("XYB/A6GKva9G&+", "", (-326));
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("$Wp-TbEUzhm2))V ic", "", 12, sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      int int0 = (-2132);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, (-326), (-2132));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rV,\"$hTR+ =";
      stringArray0[1] = "`ko;LIOv}_*_D~[";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer>(orderedMapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) orderedMapIterator1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`ko;LIOv}_*_D~[", "iterator");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.IterableUtils$5", "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", (-929), sQLIntegrityConstraintViolationException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", "`ko;LIOv}_*_D~[");
      sQLTimeoutException0.setNextException(sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) orderedIterator0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyListIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      stack0.add((BatchUpdateException) null);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>(stringArray0[0]);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(10);
      integerArray0[1] = integer1;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) resettableListIterator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) null, (-902));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 1, 1172);
      SQLDataException sQLDataException0 = new SQLDataException("#MZ@yjQ:gX87;jS;aj", "#MZ@yjQ:gX87;jS;aj", dataTruncation0);
      IteratorUtils.getIterator(sQLDataException0);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("H");
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("e~d");
      IteratorUtils.chainedIterator((Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) listIterator0);
      IteratorUtils.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("H");
      ArrayIterator<String> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<String>(sQLTransientConnectionException0, (-67), (-942));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends Integer>) resettableListIterator0);
      int int0 = 1554;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null, 3, 1554);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "[");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      Properties[] propertiesArray0 = new Properties[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties(properties0);
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      ResettableListIterator<Properties> resettableListIterator1 = IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) resettableListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "/O Bj_y}Rc#'S[n-");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ResettableListIterator<String> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends String>) resettableListIterator1, 100);
      sQLTransientException0.initCause(sQLTimeoutException0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator2 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator2);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(100, 12);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      Closure<SQLFeatureNotSupportedException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.singletonListIterator((Closure<HashSet>) closure0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) singletonIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      Properties properties0 = new Properties();
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("'");
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      EmptyListIterator.resettableEmptyListIterator();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(1, 100);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      Closure<SQLFeatureNotSupportedException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.singletonListIterator((Closure<HashSet>) closure0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(":d");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Hashtable<SQLDataException, SQLNonTransientException> hashtable0 = new Hashtable<SQLDataException, SQLNonTransientException>();
      EntrySetMapIterator<SQLDataException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLNonTransientException>(hashtable0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) entrySetMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("Entry does not exist: ", "?Ol$JN<x$v:dG'$AH");
      hashtable0.put(sQLDataException0, sQLDataException0);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(listIterator1);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<ArrayDeque>>) listIteratorWrapper0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) zippingIterator0, 0L, 0L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (Throwable) null);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 0, (int)  (-128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3353));
      integerArray0[1] = integer0;
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      MapIterator<ArrayList<Iterator<String>>, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<ArrayList<Iterator<String>>, SQLTransientConnectionException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) mapIterator1, (Predicate<? super ArrayList<Iterator<String>>>) predicate0);
      Integer integer1 = new Integer(1522);
      Integer integer2 = new Integer(1522);
      IteratorUtils.singletonIterator(integer2);
      IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "\"voXKd}4q'|95WB,", (-3353));
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 2386;
      Factory<String> factory0 = ConstantFactory.constantFactory("NodeList must not be null");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      Transformer<SQLException, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends SQLSyntaxErrorException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientException sQLTransientException0 = new SQLTransientException("H", "H");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends IIOMetadataNode>) orderedMapIterator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Factory<String> factory0 = ConstantFactory.constantFactory("Tt#OV1WuK/lg.{VJQ");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 7);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      classArray0[5] = class5;
      Class<BatchUpdateException> class6 = BatchUpdateException.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<Object, SQLSyntaxErrorException>("BZ\"Y|J^(\";-V3!O@", classArray0, classArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedMapIterator1, (Transformer<? super SQLException, ? extends SQLSyntaxErrorException>) invokerTransformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Transformer<? super SQLIntegrityConstraintViolationException, String>) factoryTransformer0, " must be Comparable", "H@@}RbTF1g!'As4x<`", "");
      ArrayListIterator<SQLNonTransientException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientException>("H@@}RbTF1g!'As4x<`", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("(>-Q04Fq");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, TreeSet<ArrayList>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) factoryTransformer0, "(>-Q04Fq", "(>-Q04Fq", "(>-Q04Fq");
      Object object0 = new Object();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<?>) iterator0, (Predicate<? super Object>) predicate0);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(32, 32);
      HashSet<SQLTimeoutException> hashSet1 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet1);
      Closure<SQLFeatureNotSupportedException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.singletonListIterator((Closure<HashSet>) closure0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("' on '");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "[");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ResettableListIterator<String> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends String>) resettableListIterator1, 100);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator2 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator2);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(12, 100);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      Closure<SQLFeatureNotSupportedException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.singletonListIterator((Closure<HashSet>) closure0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "`ko;LIOv}_*_D~[";
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>(stringArray0[0]);
      IteratorUtils.chainedIterator((Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) singletonIterator0);
      IteratorUtils.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) orderedMapIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "iterator");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(";GgD(O?", "Closure collection must not be null", (byte) (-1), sQLIntegrityConstraintViolationException0);
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLSyntaxErrorException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLSyntaxErrorException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) orderedMapIterator1, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      IteratorUtils.getIterator("iterator");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Closure collection must not be null");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) nodeList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      MockFile mockFile0 = new MockFile("V4#7m`64O3eY,[&", "Yra8t,Lomge f+}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("V4#7m`64O3eY,[&", "", 1497, sQLTimeoutException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(70).when(comparator0).compare(any(java.sql.SQLSyntaxErrorException.class) , any(java.sql.SQLSyntaxErrorException.class));
      Predicate<SQLSyntaxErrorException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLSyntaxErrorException) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 0);
      Factory<SQLSyntaxErrorException> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) classArray0, (Object[]) classArray0);
      FactoryTransformer<SQLException, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLSyntaxErrorException>(factory0);
      FactoryTransformer.factoryTransformer((Factory<?>) factory0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) factoryTransformer0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer1);
      IteratorUtils.toString((Iterator<Integer>) singletonIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      MockFile mockFile0 = new MockFile("V4#7m`64O3eY,[&", "Yra8t,Lomge f+}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("V4#7m`64O3eY,[&", "", 1497, sQLTimeoutException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLSyntaxErrorException.class) , any(java.sql.SQLSyntaxErrorException.class));
      Predicate<SQLSyntaxErrorException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLSyntaxErrorException) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 0);
      Factory<SQLSyntaxErrorException> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) classArray0, (Object[]) classArray0);
      FactoryTransformer<SQLException, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLSyntaxErrorException>(factory0);
      FactoryTransformer.factoryTransformer((Factory<?>) factory0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) factoryTransformer0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      IteratorUtils.toString((Iterator<Integer>) singletonIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      treeSet0.stream();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator((BatchUpdateException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      MockFile mockFile0 = new MockFile("V4#7m`64O3eY,[&", "Yra8t,Lomge f+}");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Transformer<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("Transformer must not be null");
      IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[0], comparatorPredicate0);
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Predicate<SQLNonTransientConnectionException> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 7, 480);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      MockFile mockFile0 = new MockFile("Yra8t,Lomge f+}", ".yjYfkt?6@*dq");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("V4#7m`64O3eY,[&", "/]6]p,`1}aBScKpE", sQLTimeoutException0);
      SQLException sQLException0 = new SQLException("/]6]p,`1}aBScKpE", ">>|J*\"A;$GT", 1073741824, sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(">>|J*\"A;$GT");
      IteratorUtils.getIterator("");
      EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.skippingIterator(iterator0, 136L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale.forLanguageTag("");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "zIygm\"D)", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTransactionRollbackException0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.constantTransformer(sQLFeatureNotSupportedException0);
      IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      IteratorUtils.filteredIterator((Iterator<?>) orderedMapIterator0, (Predicate<? super Object>) anyPredicate0);
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.loopingIterator((Collection<?>) list0);
      IteratorUtils.matchesAny((Iterator<Object>) resettableIterator1, (Predicate<? super Object>) predicate1);
      IteratorUtils.isEmpty(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer[] integerArray0 = new Integer[1];
      IteratorUtils.arrayListIterator(integerArray0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "org.apache.commons.collections4.functors.AndPredicate", "CQ~8uue$hv\"f`_s", "CQ~8uue$hv\"f`_s");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      MockFile mockFile0 = new MockFile("V4#7m`64O3eY,[&", "Yra8t,Lomge f+}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0);
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends IIOMetadataNode>) orderedMapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Transformer<? super SQLIntegrityConstraintViolationException, String>) factoryTransformer0, "Yra8t,Lomge f+}", "H@@}RbTF1g!'As4x<`", "Yra8t,Lomge f+}");
      ArrayListIterator<SQLNonTransientException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientException>(factoryTransformer0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "`ko;LIOv}_*_D~[";
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>(stringArray0[0]);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) singletonIterator0);
      IteratorUtils.isEmpty(iterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) null, (Predicate<? super ArrayList<Iterator<String>>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rV,\"$hTR+ =";
      stringArray0[1] = "`ko;LIOv}_*_D~[";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer>(orderedMapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) orderedMapIterator1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`ko;LIOv}_*_D~[", "iterator");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iterator", "rV,\"$hTR+ =", (-929), sQLIntegrityConstraintViolationException0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) null, (Predicate<? super ArrayList<Iterator<String>>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rV,\"$hTR+ =";
      stringArray0[1] = "`ko;LIOv}_*_D~[";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer>(orderedMapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) orderedMapIterator1);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLTransientConnectionException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends DataTruncation>) orderedMapIterator0);
      MapIterator<SQLTransientConnectionException, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, DataTruncation>) orderedMapIterator1);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) mapIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      MockFile mockFile0 = new MockFile("V4#7m`64O3eY,[&", "Yra8t,Lomge f+}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("lej`Vf $=", "/]6]p,`1}aBScKpE", sQLTimeoutException0);
      SQLException sQLException0 = new SQLException("", "InstantiateFactory: InstantiationException", 0, sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("ListIterator must not be null", "InstantiateFactory: InstantiationException", 0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      StringTokenizer stringTokenizer0 = new StringTokenizer("V4#7m`64O3eY,[&");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stringTokenizer0);
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      ListIterator<Object> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) listIterator1, 468);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<String, Integer> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<String, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-1202);
      Integer integer0 = new Integer((-1202));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3353));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(100);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3353));
      integerArray0[3] = integer3;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) resettableListIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ListIterator<Predicate<Object>> listIterator0 = IteratorUtils.singletonListIterator(predicate0);
      IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) listIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int1 = 4491;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class0, (-3353), 4491);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("Enumeration must not be null");
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      int int0 = 4;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      MockFile mockFile0 = new MockFile((String) null, "The map size must be 0 or 1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractMapDecorator", "Estimated size must be greater than 0", sQLTimeoutException0);
      SQLException sQLException0 = new SQLException("InstantiateFactory: InstantiationException", "{", 4, sQLTimeoutException0);
      sQLTimeoutException1.setNextException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      IteratorUtils.getIterator(iterator0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = null;
      try {
        orderedIterator0 = new ArrayListIterator<SQLTransactionRollbackException>(sQLTimeoutException0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("Enumeration must not be null", "");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends IIOMetadataNode>) orderedMapIterator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q8/d");
      Factory<String> factory0 = ConstantFactory.constantFactory("Enumeration must not be null");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InvokerTransformer<Object, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<Object, SQLSyntaxErrorException>("BZ\"Y|J^(\";-V3!O@", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) singletonIterator0, (Transformer<? super SQLException, ? extends SQLSyntaxErrorException>) invokerTransformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "", "PJ5vDQ&?LQmm`zC\"1", "");
      ArrayListIterator<SQLNonTransientException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientException>(class0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      Factory<String> factory0 = ConstantFactory.constantFactory("InstantiateFactory: InstantiationException");
      Factory<String> factory1 = ConstantFactory.constantFactory("InstantiateFactory: InstantiationException");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory1);
      String string0 = "H@@}RbTF1g!'As4x<`";
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string1 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "", (String) null, "V4#7m`64O3eY,[&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-3353));
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>((SQLTransientException) null);
      singletonIterator0.reset();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      Integer integer1 = new Integer(1320);
      Integer integer2 = new Integer(16);
      Integer integer3 = new Integer(0);
      SingletonIterator<Integer> singletonIterator1 = new SingletonIterator<Integer>(integer3);
      IteratorUtils.toString((Iterator<Integer>) singletonIterator1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rV,\"$hTR+ =";
      stringArray0[1] = "`ko;LIOv}_*_D~[";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer>(orderedMapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) abstractOrderedMapIteratorDecorator0);
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) orderedMapIterator1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`ko;LIOv}_*_D~[", "iterator");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iterator", "rV,\"$hTR+ =", (-929), sQLIntegrityConstraintViolationException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLSyntaxErrorException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLSyntaxErrorException) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) orderedMapIterator2, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      IteratorUtils.toString((Iterator<Integer>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<Object> iterator1 = IteratorUtils.filteredIterator((Iterator<?>) iterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super Object>) predicate0);
      IteratorUtils.isEmpty(iterator0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-365));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-365));
      integerArray0[1] = integer1;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("2rna-l0dwVLdYS^qJKw", sQLNonTransientException0);
      IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      Object object0 = new Object();
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Enumeration must not be null");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "+ikv";
      objectArray0[1] = (Object) "+ikv";
      objectArray0[2] = (Object) "+ikv";
      objectArray0[3] = (Object) mockPrintWriter0;
      EmptyIterator.emptyIterator();
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("There are no elements for this iterator to loop on", "There are no elements for this iterator to loop on", (-3214));
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      EntrySetToMapIteratorAdapter<DataTruncation, Locale.FilteringMode> entrySetToMapIteratorAdapter0 = null;
      try {
        entrySetToMapIteratorAdapter0 = new EntrySetToMapIteratorAdapter<DataTruncation, Locale.FilteringMode>((Set<Map.Entry<DataTruncation, Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Closure collection must not be null", "Closure collection must not be null", 0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<?>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, (-1234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<Object> iterator1 = IteratorUtils.filteredIterator((Iterator<?>) iterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super Object>) predicate0);
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "`ko;LIOv}_*_D~[";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      MapIterator<ArrayList<Iterator<String>>, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) mapIterator0, (Predicate<? super ArrayList<Iterator<String>>>) predicate0);
      Integer integer0 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`ko;LIOv}_*_D~[", "`ko;LIOv}_*_D~[", 1071, (long[]) null, (Throwable) null);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) singletonIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",[z8Esl|i?mRF*nR";
      stringArray0[1] = "rV,\"$hTR+ =";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      Iterator<String> iterator0 = null;
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyIterator.emptyIterator();
      Properties properties0 = new Properties();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "2R`C", 1950);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      properties0.put(sQLRecoverableException0, iIOMetadataNode0);
      IdentityPredicate.identityPredicate(properties0);
      String string0 = "";
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) resettableIterator0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.printf(locale0, "InstantiateFactory: InstantiationException", objectArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yra8t,Lomge f+}");
      sQLTimeoutException0.printStackTrace(printWriter0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("(this Map)", "(this Map)", sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0, 10);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.emptyMapIterator();
      ServiceLoader<Object>[] serviceLoaderArray0 = (ServiceLoader<Object>[]) Array.newInstance(ServiceLoader.class, 5);
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: InstantiationException");
      MockFile mockFile0 = new MockFile("V4#7m`64O3eY,[&", "Yra8t,Lomge f+}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("lej`Vf $=", "/]6]p,`1}aBScKpE", sQLTimeoutException0);
      SQLException sQLException0 = new SQLException("", "InstantiateFactory: InstantiationException", 0, sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      IteratorUtils.getIterator("InstantiateFactory: InstantiationException");
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) orderedIterator0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rV,\"$hTR+ =";
      stringArray0[1] = "`ko;LIOv}_*_D~[";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      IteratorUtils.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.singletonIterator(integer1);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<Integer>) resettableIterator1, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      iteratorArray0[0] = (Iterator<SQLTransientException>) singletonIterator0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<String>, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Iterator<String>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<String>, SQLFeatureNotSupportedException>(orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<String>, SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      MapIterator<ArrayList<Iterator<String>>, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<ArrayList<Iterator<String>>, SQLTransientConnectionException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) mapIterator1, (Predicate<? super ArrayList<Iterator<String>>>) predicate0);
      Integer integer0 = new Integer((-1));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(".g*;lp%:*7A}", "delimiter may not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      UniquePredicate<SQLSyntaxErrorException> uniquePredicate0 = new UniquePredicate<SQLSyntaxErrorException>();
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.matchesAll((Iterator<HashSet<Hashtable>>) null, (Predicate<? super HashSet<Hashtable>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends IIOMetadataNode>) orderedMapIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      int[] intArray0 = new int[9];
      intArray0[0] = 31;
      intArray0[1] = 31;
      intArray0[2] = 31;
      intArray0[3] = 31;
      intArray0[4] = 31;
      intArray0[5] = 100;
      intArray0[6] = 31;
      intArray0[7] = 31;
      intArray0[8] = 31;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("K4%A Xj", "wvg0:d01ex}", 31, intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 3);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>((Predicate<? super SQLException>) null, (Predicate<? super SQLException>) null);
      predicateArray0[0] = (Predicate<SQLException>) orPredicate0;
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicateArray0[0], orPredicate0);
      predicateArray0[1] = (Predicate<SQLException>) andPredicate0;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(predicate2);
      predicateArray0[2] = (Predicate<SQLException>) nullIsTruePredicate0;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) orderedMapIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "iterator");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(";GgD(O?", "Closure collection must not be null", (byte) (-1), sQLIntegrityConstraintViolationException0);
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLSyntaxErrorException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLSyntaxErrorException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) orderedMapIterator1, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 8);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(classArray0, (-2668));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Closure collection must not be null", "Closure collection must not be null", 0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      OrderedMapIterator<String, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) orderedMapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) resettableIterator0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.printf(locale0, "InstantiateFactory: InstantiationException", objectArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yra8t,Lomge f+}");
      sQLTimeoutException0.printStackTrace(printWriter0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("(this Map)", "(this Map)", sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      IteratorUtils.getIterator(sQLTimeoutException2);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) orderedIterator0, (-1264L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      IteratorUtils.singletonIterator(arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Closure collection must not be null", "Closure collection must not be null", 0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<?>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1640, (-1234));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",q/Aft3:9sos1dYt");
      IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      OrderedMapIterator<Class<SQLInvalidAuthorizationSpecException>, LinkedList<SQLTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Class<SQLInvalidAuthorizationSpecException>>) orderedMapIterator0);
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", (String) null);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("dR\"pLb;O&:@", "", sQLClientInfoException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, "[Fs\"oXxF[D", sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("V%#?X");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", "transformer may not be null");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$EntrySet", "@r-d0ab?tC'Sc<8<6l", (-65));
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Predicate<SQLException>, Object> hashMap0 = new HashMap<Predicate<SQLException>, Object>();
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      hashMap0.replace(predicate0, (Object) predicate0);
      EntrySetMapIterator<Predicate<SQLException>, Object> entrySetMapIterator0 = new EntrySetMapIterator<Predicate<SQLException>, Object>(hashMap0);
      IteratorUtils.skippingIterator((Iterator<Predicate<SQLException>>) entrySetMapIterator0, 385L);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate to call must not be null
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyListIterator();
      ListIteratorWrapper<Locale.FilteringMode> listIteratorWrapper0 = null;
      try {
        listIteratorWrapper0 = new ListIteratorWrapper<Locale.FilteringMode>((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rV,\"$hTR+ =";
      stringArray0[1] = "`ko;LIOv}_*_D~[";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer>(orderedMapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) orderedMapIterator1);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null, (Collection<? super SQLTimeoutException>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, IIOMetadataNode>(orderedMapIterator0);
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) mapIterator1, class0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 8);
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends Integer>) orderedMapIterator0);
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0);
      iteratorArray0[0] = (Iterator<SQLTransientException>) singletonIterator0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      Iterator<SQLTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedHashSet0);
      iteratorArray0[1] = iterator1;
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator1, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      Integer integer0 = new Integer(91);
      Integer integer1 = new Integer((-2425));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer1);
      IteratorUtils.toString((Iterator<Integer>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "+ikv";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Enumeration must not be null");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string1 = "X[C";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "+ikv";
      objectArray0[1] = (Object) "+ikv";
      objectArray0[2] = (Object) "+ikv";
      objectArray0[3] = (Object) mockPrintWriter0;
      Iterator<Object> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      objectArray0[4] = null;
      objectArray0[5] = (Object) mockPrintWriter0;
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",[z8Esl|i?mRF*nR";
      stringArray0[1] = "rV,\"$hTR+ =";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      IteratorUtils.emptyIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ArrayIterator<String> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<String>(sQLRecoverableException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      IteratorUtils.singletonIterator(arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, (-824));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.emptyMapIterator();
      ServiceLoader<Object>[] serviceLoaderArray0 = (ServiceLoader<Object>[]) Array.newInstance(ServiceLoader.class, 5);
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<Object> serviceLoader1 = ServiceLoader.load(class0, classLoader1);
      serviceLoaderArray0[1] = serviceLoader1;
      ServiceLoader<Object> serviceLoader2 = ServiceLoader.load(class0, classLoader1);
      serviceLoaderArray0[2] = serviceLoader2;
      ServiceLoader<Object> serviceLoader3 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[3] = serviceLoader3;
      ServiceLoader<Object> serviceLoader4 = ServiceLoader.load(class0);
      serviceLoaderArray0[4] = serviceLoader4;
      ObjectArrayListIterator<ServiceLoader<Object>> objectArrayListIterator0 = new ObjectArrayListIterator<ServiceLoader<Object>>(serviceLoaderArray0, 0);
      Predicate<Object>[] predicateArray0 = null;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>((Predicate<? super Object>[]) null, closureArray0, chainedClosure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, switchClosure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, chainedClosure0, forClosure0);
      closureArray0[0] = (Closure<Object>) ifClosure0;
      Closure<Object> closure0 = ForClosure.forClosure(0, (Closure<? super Object>) chainedClosure0);
      closureArray0[1] = closure0;
      Closure<Object> closure1 = NOPClosure.nopClosure();
      closureArray0[2] = closure1;
      // Undeclared exception!
      try { 
        ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The closure array must not contain a null closure, index 3 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",[z8Esl|i?mRF*nR";
      stringArray0[1] = "rV,\"$hTR+ =";
      stringArray0[2] = "`ko;LIOv}_*_D~[";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ArrayIterator<String> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<String>(sQLRecoverableException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      IteratorUtils.singletonIterator((SQLIntegrityConstraintViolationException) null);
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<String>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<String>, SQLFeatureNotSupportedException>(orderedMapIterator0);
      Iterator<Iterator<String>> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Iterator<String>>) abstractOrderedMapIteratorDecorator0);
      long long0 = 178L;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Iterator<String>>) iterator0, (-780L), 178L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      long long0 = 0L;
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 0L);
      IteratorUtils.emptyMapIterator();
      int int0 = (-111);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, (-111));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -111
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "@ Sh>";
      String string1 = "' threw an exception";
      int int0 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("No element at index ", "@ Sh>");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("' threw an exception", "(=v:$B/}mT", 0, intArray0, sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@ Sh>", "@ Sh>", batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@ Sh>", sQLNonTransientException0);
      batchUpdateException0.getUpdateCounts();
      sQLNonTransientException0.printStackTrace();
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0, (-3554));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "\\W!@zUYRk>";
      String string1 = "O]:8F.sYEc8~'?^";
      int int0 = 16;
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      intArray0[1] = 16;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("W!@zUYRk>", "O]:8F.sYEc8~'?^", 16, intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (Throwable) null);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, (-2528L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>(0, 1821.0F);
      Iterator<SQLFeatureNotSupportedException> iterator0 = linkedHashSet0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (-815L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "transformer may not be null";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("transformer may not be null", "transformer may not be null");
      sQLNonTransientConnectionException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 387);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale.forLanguageTag("");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      String string0 = "zIygm\"D)";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "zIygm\"D)", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTransactionRollbackException0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.constantTransformer(sQLFeatureNotSupportedException0);
      IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      IteratorUtils.filteredIterator((Iterator<?>) orderedMapIterator0, (Predicate<? super Object>) anyPredicate0);
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.loopingIterator((Collection<?>) list0);
      IteratorUtils.matchesAny((Iterator<Object>) resettableIterator1, (Predicate<? super Object>) predicate1);
      IteratorUtils.isEmpty(resettableIterator1);
      OrderedIterator<PriorityQueue<Boolean>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<PriorityQueue<Boolean>>) orderedIterator0, (Predicate<? super PriorityQueue<Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, true);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0;
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) orderedIterator0;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[2] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Integer integer0 = new Integer((-1230));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Iterator<Integer> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) singletonListIterator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator1);
      Iterator<Integer> iterator2 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      Transformer<Integer, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator2, (Transformer<? super Integer, String>) transformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ArrayList<Iterator<String>> arrayList0 = new ArrayList<Iterator<String>>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ResettableIterator<ArrayList<Iterator<String>>> resettableIterator0 = IteratorUtils.singletonIterator(arrayList0);
      assertNotNull(resettableIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<String>, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<Iterator<String>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<String>, SQLFeatureNotSupportedException>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      OrderedMapIterator<Iterator<String>, SQLFeatureNotSupportedException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<String>, ? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertNotSame(orderedMapIterator1, orderedMapIterator2);
      assertNotSame(orderedMapIterator2, orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<Iterator<String>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<Iterator<String>, SQLFeatureNotSupportedException>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator1);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(abstractOrderedMapIteratorDecorator1.equals((Object)abstractOrderedMapIteratorDecorator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator1.hasPrevious());
      
      MapIterator<Iterator<String>, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<String>, SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator0.hasPrevious());
      
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      assertNotNull(treeSet0);
      
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      assertNotNull(predicate0);
      
      MapIterator<ArrayList<Iterator<String>>, SQLTransientConnectionException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      MapIterator<ArrayList<Iterator<String>>, SQLTransientConnectionException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertNotNull(mapIterator2);
      assertFalse(mapIterator2.equals((Object)mapIterator1));
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) mapIterator1, (Predicate<? super ArrayList<Iterator<String>>>) predicate0);
      assertFalse(mapIterator1.equals((Object)mapIterator2));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.singletonIterator(integer1);
      assertNotNull(resettableIterator1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = IteratorUtils.find((Iterator<Integer>) resettableIterator1, (Predicate<? super Integer>) predicate0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      assertNotNull(predicate0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super Properties>) predicate0);
      assertFalse(boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Enumeration<SQLDataException> enumeration0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      assertNotNull(predicate0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super Properties>) predicate0);
      assertFalse(boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ResettableListIterator<LinkedHashSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Object object0 = IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate0);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) resettableIterator0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      assertEquals(5, objectArray0.length);
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      OrderedMapIterator<DataTruncation, DataTruncation> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      boolean boolean0 = IteratorUtils.contains((Iterator<DataTruncation>) orderedMapIterator1, (Object) null);
      assertFalse(boolean0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      boolean boolean1 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(predicate0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(arrayList0.contains(predicate1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean2 = IteratorUtils.matchesAny((Iterator<ArrayList<Iterator<String>>>) null, (Predicate<? super ArrayList<Iterator<String>>>) predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(arrayList0.contains(predicate1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = 415;
      ArrayIterator<String> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<String>(orderedMapIterator0, 1985, 415);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      assertNotNull(listIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      assertTrue(boolean0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      assertNotNull(resettableIterator0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableIterator0, 0L);
      assertNotNull(boundedIterator0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(listIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertNotNull(listIterator1);
      assertSame(listIterator0, listIterator1);
      assertSame(listIterator1, listIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
