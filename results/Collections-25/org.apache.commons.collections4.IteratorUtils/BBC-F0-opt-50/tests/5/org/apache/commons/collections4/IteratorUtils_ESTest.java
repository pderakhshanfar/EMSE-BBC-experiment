/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 21:59:10 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      SQLDataException sQLDataException0 = new SQLDataException("Iterable must not be null");
      hashSet0.add(sQLDataException0);
      int int0 = 118;
      DataTruncation dataTruncation0 = new DataTruncation(118, true, false, 118, 118);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLDataException>) resettableIterator0, (Object) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.get((Iterator<SQLException>) listIterator0, 0);
      MapIterator<InstanceofPredicate, Locale.FilteringMode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0, 1);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) list0);
      Transformer<InstanceofPredicate, String> transformer0 = InvokerTransformer.invokerTransformer(":m");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, ":m", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[d*A)QYB", "[d*A)QYB", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[d*A)QYB", sQLSyntaxErrorException0);
      Transformer<SQLException, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("[d*A)QYB");
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[d*A)QYB' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<HashMap<Properties, SQLClientInfoException>>[] iteratorArray0 = (Iterator<HashMap<Properties, SQLClientInfoException>>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends HashMap<Properties, SQLClientInfoException>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLException> class0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("G'!lzb]P`xgh", "G'!lzb]P`xgh", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("G'!lzb]P`xgh");
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException1, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'G'!lzb]P`xgh' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure.chainedClosure((Closure<? super SQLDataException>[]) closureArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "i.F92'5bicQ`", (Throwable) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLInvalidAuthorizationSpecException0, comparator0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-4003), (Closure<? super Object>) null);
      Closure<Object> closure0 = ForClosure.forClosure((-4003), (Closure<? super Object>) forClosure0);
      IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) forClosure0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException("i.F92'5bicQ`", "i.F92'5bicQ`");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("i.F92'5bicQ`", sQLInvalidAuthorizationSpecException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, "i.F92'5bicQ`");
      sQLDataExceptionArray0[2] = sQLDataException2;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IteratorUtils.apply((Iterator<SQLDataException>) resettableListIterator0, (Closure<? super SQLDataException>) closure0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableListIterator0, class0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLInvalidAuthorizationSpecException0, comparator0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(58, (Closure<? super Object>) null);
      Closure<Object> closure0 = ForClosure.forClosure(5, (Closure<? super Object>) forClosure0);
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      IteratorUtils.apply((Iterator<SQLDataException>) mapIterator0, (Closure<? super SQLDataException>) closure1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 5, sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLInvalidAuthorizationSpecException0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, class0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[9];
      intArray0[0] = 31;
      intArray0[1] = 10;
      intArray0[2] = (-468);
      intArray0[3] = (-431);
      intArray0[4] = (-2205);
      intArray0[5] = (-2667);
      intArray0[6] = (-3317);
      intArray0[7] = (-3450);
      intArray0[8] = 3036;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("6`_N1od7#5*^*,", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3317);
      longArray0[1] = (long) 3036;
      longArray0[2] = (long) (-3317);
      longArray0[3] = 1408L;
      longArray0[4] = (long) (-2360);
      longArray0[5] = (long) (-3317);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("6`_N1od7#5*^*,", "~xO9,2d0g", (-2360), longArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("6`_N1od7#5*^*,", intArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 1);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) null, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) transformer0);
      SQLDataException sQLDataException0 = new SQLDataException();
      DataTruncation dataTruncation0 = new DataTruncation(419, false, false, (-238), 125, sQLDataException0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 6);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[4] = class3;
      classArray0[5] = class0;
      InvokerTransformer<SQLException, DataTruncation> invokerTransformer0 = new InvokerTransformer<SQLException, DataTruncation>("[]", classArray0, classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) invokerTransformer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[]' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) null, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) transformer0);
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 0);
      Closure<SQLDataException> closure0 = ChainedClosure.chainedClosure((Closure<? super SQLDataException>[]) closureArray0);
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closure0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      Iterator<SQLNonTransientException>[] iteratorArray0 = (Iterator<SQLNonTransientException>[]) Array.newInstance(Iterator.class, 5);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLNonTransientConnectionException0);
      iteratorArray0[0] = (Iterator<SQLNonTransientException>) singletonIterator0;
      Comparator<SQLException> comparator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      MapIterator<Properties, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.chainedIterator((Iterator<?>) mapIterator0, (Iterator<?>) mapIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NjBcvr=", "NjBcvr=");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) null, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) transformer0);
      SQLDataException sQLDataException0 = new SQLDataException();
      DataTruncation dataTruncation0 = new DataTruncation(419, false, false, (-238), 125, sQLDataException0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 6);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      classArray0[4] = class4;
      Class<SQLNonTransientException> class5 = SQLNonTransientException.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLException, DataTruncation> invokerTransformer0 = new InvokerTransformer<SQLException, DataTruncation>((String) null, classArray0, classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<ArrayDeque<SQLNonTransientException>, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) orderedMapIterator0, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((LinkedList<SQLWarning>[]) null, 1083);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 3201, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator0, class0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) vector0);
      vector0.add((SQLTransientConnectionException) null);
      vector0.add((SQLTransientConnectionException) null);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) resettableListIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = iterator0;
      iteratorArray0[2] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      SQLException sQLException0 = new SQLException();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate(sQLException0);
      HashMap<SQLException, SQLClientInfoException> hashMap0 = new HashMap<SQLException, SQLClientInfoException>();
      Transformer<SQLException, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLClientInfoException>) hashMap0);
      Transformer<SQLException, SQLException> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends SQLException>) transformer0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator(sQLException0, (Transformer<? super SQLException, ? extends SQLException>) transformer1);
      IteratorUtils.get(iterator0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<SQLNonTransientException>, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) orderedMapIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 100);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("hjt{Y/U6*", "", true);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 100);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      TreeSet<SQLClientInfoException> treeSet1 = new TreeSet<SQLClientInfoException>();
      SingletonIterator<TreeSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<TreeSet<SQLClientInfoException>>(treeSet1, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "d\"\"^-M+R@~LpPUe|", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0, sQLTransientConnectionException0);
      treeSet1.floor(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLClientInfoException>>) singletonIterator0, (Transformer<? super TreeSet<SQLClientInfoException>, String>) null, "39ngEBe;-b", "", "39ngEBe;-b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Class<SQLException> class0 = SQLException.class;
      OrderedMapIterator<SQLIntegrityConstraintViolationException, PriorityQueue<DataTruncation>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator0, class0);
      IteratorUtils.emptyListIterator();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      SingletonIterator<TreeSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<TreeSet<SQLClientInfoException>>(treeSet0, true);
      SingletonIterator<TreeSet<SQLClientInfoException>> singletonIterator1 = new SingletonIterator<TreeSet<SQLClientInfoException>>(treeSet0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLClientInfoException>>) singletonIterator1, (Transformer<? super TreeSet<SQLClientInfoException>, String>) transformer0, (String) null, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      OrderedMapIterator<ArrayDeque<SQLNonTransientException>, Locale.LanguageRange> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLNonTransientException>, Locale.LanguageRange> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLNonTransientException>, Locale.LanguageRange>(orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLInvalidAuthorizationSpecException0, false);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = NullPredicate.nullPredicate();
      predicateArray0[4] = predicate3;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate1);
      predicateArray0[5] = (Predicate<Object>) notPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonIterator0, defaultEquator0);
      predicateArray0[6] = (Predicate<Object>) equalPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("ve'6zcG");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(onePredicate0, transformer0, transformer0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLException>) singletonIterator0, (Transformer<? super SQLException, String>) ifTransformer0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      SingletonIterator<TreeSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<TreeSet<SQLClientInfoException>>(treeSet0, true);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 6);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      classArray0[0] = class0;
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      classArray0[1] = class1;
      Class<Locale.FilteringMode> class2 = Locale.FilteringMode.class;
      classArray0[2] = class2;
      Class<Locale.FilteringMode> class3 = Locale.FilteringMode.class;
      classArray0[3] = class3;
      Class<Locale.FilteringMode> class4 = Locale.FilteringMode.class;
      classArray0[4] = class4;
      Class<Locale.FilteringMode> class5 = Locale.FilteringMode.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("!70l*RA6", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLClientInfoException>>) singletonIterator0, (Transformer<? super TreeSet<SQLClientInfoException>, String>) invokerTransformer0, "!70l*RA6", (String) null, ">n^vBmS7:K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      OrderedMapIterator<ArrayDeque<SQLNonTransientException>, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) orderedMapIterator0, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Class<SQLException> class0 = SQLException.class;
      OrderedMapIterator<SQLIntegrityConstraintViolationException, PriorityQueue<DataTruncation>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator0, class0);
      IteratorUtils.emptyListIterator();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      SingletonIterator<TreeSet<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<TreeSet<SQLClientInfoException>>(treeSet0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLClientInfoException>>) singletonIterator0, (Transformer<? super TreeSet<SQLClientInfoException>, String>) transformer0, "", ">n^vBmS7:K", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) singletonIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator((Object) null);
      Object object0 = new Object();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(predicate1);
      SQLException sQLException0 = new SQLException("5C(P");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "5C(P", sQLException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&_DRLA", "&_DRLA", sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLTransactionRollbackException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) boolean0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>((Integer) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) singletonIterator0, (Predicate<? super ArrayDeque<Hashtable>>) allPredicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator(priorityQueue0);
      Object object0 = new Object();
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(allPredicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Boolean boolean0 = predicateTransformer0.transform(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) boolean0, (-1030));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>((Integer) null);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) singletonIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator(priorityQueue0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, (-1030));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = (Enumeration<SQLSyntaxErrorException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      OrderedMapIterator<Locale.FilteringMode, SQLTransactionRollbackException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Locale.FilteringMode, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, SQLTransactionRollbackException>(orderedMapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) objectArrayListIterator0, (Iterator<? extends Locale.FilteringMode>) abstractMapIteratorDecorator0, (Iterator<? extends Locale.FilteringMode>) abstractMapIteratorDecorator0);
      Hashtable<LinkedHashSet<Integer>, SQLTimeoutException> hashtable0 = new Hashtable<LinkedHashSet<Integer>, SQLTimeoutException>();
      Enumeration<SQLTimeoutException> enumeration0 = hashtable0.elements();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 100);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int int0 = 678;
      IteratorUtils.singletonListIterator((SQLException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 678);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SQLException[] sQLExceptionArray0 = new SQLException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("vy+0l@L!uG^dtJvpfA", sQLSyntaxErrorException0);
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("");
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientConnectionException1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLExceptionArray0[3] = (SQLException) sQLRecoverableException0;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Transformer<ArrayDeque, SQLInvalidAuthorizationSpecException>>) objectArrayIterator0, (Predicate<? super Transformer<ArrayDeque, SQLInvalidAuthorizationSpecException>>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.getIterator(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      NotNullPredicate.notNullPredicate();
      NodeList nodeList0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, (-1479));
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator1 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) stack0);
      IteratorUtils.contains((Iterator<InstanceofPredicate>) resettableListIterator1, (Object) iterator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataTruncation dataTruncation0 = new DataTruncation(29, true, false, 1073741824, 832);
      priorityQueue0.add(dataTruncation0);
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(priorityQueue0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) loopingIterator0);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) loopingIterator0);
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) uniquePredicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int int0 = 99;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 5);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException1);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.get((Iterator<SQLException>) zippingIterator0, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.isEmpty(nodeListIterator0);
      IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(linkedList0);
      iteratorArray0[0] = (Iterator<DataTruncation>) loopingListIterator0;
      DataTruncation dataTruncation0 = new DataTruncation((-2576), true, true, 0, 8);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) null);
      iteratorArray0[1] = iterator0;
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      iteratorArray0[2] = (Iterator<DataTruncation>) singletonIterator0;
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "org.apache.commons.collections4.functors.WhileClosure");
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, (-1894), 0, sQLDataException0);
      Factory<DataTruncation> factory0 = ConstantFactory.constantFactory(dataTruncation0);
      Transformer<DataTruncation, DataTruncation> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends DataTruncation>) factory0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) uniquePredicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      hashSet0.add(sQLTransientConnectionException0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SQLDataException sQLDataException0 = new SQLDataException();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.emptyIterator();
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(listIterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("Predicate must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableListIterator1, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      ListIterator<ArrayDeque<SQLNonTransientException>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) listIterator0, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      Vector<Integer> vector0 = new Stack<Integer>();
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("Predicate must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableListIterator1, (Transformer<? super Integer, ? extends Integer>) transformer0);
      EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Predicate must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      ListIterator<SQLDataException> listIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      IteratorUtils.find((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      String string0 = "N7`)J'ks4R";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("N7`)J'ks4R", "N7`)J'ks4R");
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyIterator();
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[1] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[2] = class1;
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("Predicate must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableListIterator1, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("Predicate must not be null");
      IteratorUtils.toString(iterator0, (Transformer<? super Locale.FilteringMode, String>) transformer1, "{1`uJ! ~", "Y{U~)[?nH", "Predicate must not be null");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) uniquePredicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 6);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      classArray0[5] = class5;
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("kZNI5*z<RU", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) locale_FilteringMode0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.find((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) notPredicate0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(listIterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedMapIterator0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      IteratorUtils.find((Iterator<SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) notPredicate0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      Vector<Integer> vector0 = new Vector<Integer>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("|To", "FNZ", (Throwable) null);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Integer integer0 = new Integer(14);
      vector0.add(integer0);
      OrderedMapIterator<Object, HashSet<SQLException>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      PriorityQueue<InstanceofPredicate> priorityQueue1 = new PriorityQueue<InstanceofPredicate>();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableListIterator0);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "y$SC H~H");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("suffix may not be null", "?Jc:J//?Wu=:-Gh*M", sQLIntegrityConstraintViolationException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("?Jc:J//?Wu=:-Gh*M", "-", sQLIntegrityConstraintViolationException2);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(priorityQueue0);
      Locale locale0 = Locale.CANADA_FRENCH;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException1);
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("ListIterator must not be null");
      Locale locale0 = Locale.CANADA_FRENCH;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ListIterator must not be null", "ListIterator must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<String, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, Predicate<Object>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends Predicate<Object>>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) orderedMapIterator1, (Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      IteratorUtils.emptyIterator();
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("Predicate must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Integer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableListIterator1, (Transformer<? super Integer, ? extends Integer>) transformer0);
      EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IteratorUtils.toArray(iterator0);
      Integer integer0 = new Integer(14);
      vector0.add(integer0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.size(resettableListIterator1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      Integer integer0 = new Integer((-1));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Transformer<Integer, String> transformer0 = ConstantTransformer.constantTransformer("R{B");
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) transformer0, "m#4p.4]pb!S", "Dljx-0>$~nL>(9&", "ExceptionTransformer invoked");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "ExceptionTransformer invoked");
      Locale locale0 = Locale.CANADA_FRENCH;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("Predicate must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableListIterator1, (Transformer<? super Integer, ? extends Integer>) transformer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null", 1242, sQLIntegrityConstraintViolationException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", 1242);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("bv2Em[OEN", "s`=\"YgU:8GH]z9k", 1890);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 1890, (-24));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      PriorityQueue<InstanceofPredicate> priorityQueue1 = new PriorityQueue<InstanceofPredicate>();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableListIterator0);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      String string0 = "-";
      String string1 = "y$SC H~H";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "y$SC H~H");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      String string2 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", sQLFeatureNotSupportedException0);
      String string3 = "?Jc:J//?Wu=:-Gh*M";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("suffix may not be null", "?Jc:J//?Wu=:-Gh*M", sQLIntegrityConstraintViolationException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("?Jc:J//?Wu=:-Gh*M", "-", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException4;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException3;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      IteratorUtils.size(resettableListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "y$SC H~H", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedMapIterator0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      IteratorUtils.find((Iterator<SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) notPredicate0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(";mQ<IJ@$EGCTl");
      Locale locale0 = Locale.CANADA_FRENCH;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";mQ<IJ@$EGCTl");
      EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      OrderedMapIterator<String, PriorityQueue<SQLException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) orderedMapIterator0, (Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("ListIterator must not be null");
      Locale locale0 = Locale.CANADA_FRENCH;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Couldn't get the node: index (");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator1);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("Closure must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) uniquePredicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      IteratorUtils.getIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) uniquePredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      EqualPredicate.equalPredicate((Object) "Node must not be null");
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) null, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) transformer0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(priorityQueue0);
      DataTruncation dataTruncation0 = new DataTruncation((-1954), true, false, 8, (-1954));
      priorityQueue0.add(dataTruncation0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) loopingIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(vector0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLDataException sQLDataException0 = new SQLDataException("\"!V;Sh'G!xHAw", "", 125, sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("\"!V;Sh'G!xHAw", "\"!V;Sh'G!xHAw", sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation(347, true, false, 0, 0, sQLSyntaxErrorException1);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) listIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      StringTokenizer stringTokenizer0 = new StringTokenizer("$Gl|ONnC1!PS2JK", "$Gl|ONnC1!PS2JK");
      EqualPredicate.equalPredicate((Object) stringTokenizer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.isEmpty(loopingIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(locale_FilteringMode0);
      Hashtable<SQLNonTransientException, Integer> hashtable0 = new Hashtable<SQLNonTransientException, Integer>(1454);
      EntrySetMapIterator<SQLNonTransientException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientException, Integer>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, Integer>) entrySetMapIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<IIOMetadataNode, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<IIOMetadataNode, SQLTransactionRollbackException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) mapIterator1;
      IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Integer integer0 = new Integer((-2639));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Vector<Integer> vector0 = new Vector<Integer>();
      EqualPredicate.equalPredicate((Object) iIOMetadataNode0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) resettableListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(onePredicate0);
      Iterator<SQLDataException> iterator0 = null;
      IteratorUtils.find((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ArrayIterator<SQLClientInfoException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLClientInfoException>(sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("nm#*~-", "\"htp'2o.5");
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = "";
      String string1 = "7";
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("7");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientConnectionException0, (Equator<SQLException>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(priorityQueue0);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) loopingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(bsk");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedMapIterator0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      IteratorUtils.find((Iterator<SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) notPredicate0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAny((Iterator<Transformer<ArrayDeque, SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Predicate<? super Transformer<ArrayDeque, SQLInvalidAuthorizationSpecException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
      Stack<Integer> stack0 = new Stack<Integer>();
      SQLTransientException sQLTransientException0 = new SQLTransientException(",Rg", "End index must not be less than start index.");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",Rg", ",Rg", sQLTransientException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      Stack<InstanceofPredicate> stack1 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) stack1);
      predicateArray0[1] = predicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate2, predicate0);
      predicateArray0[3] = (Predicate<Object>) orPredicate0;
      Predicate<SQLIntegrityConstraintViolationException> predicate3 = NonePredicate.nonePredicate((Predicate<? super SQLIntegrityConstraintViolationException>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Integer integer0 = new Integer((-2639));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Integer integer1 = new Integer((-1598));
      SingletonIterator<Integer> singletonIterator1 = new SingletonIterator<Integer>(integer1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("xpL:(#n.J");
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)112;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      PriorityQueue<InstanceofPredicate> priorityQueue1 = new PriorityQueue<InstanceofPredicate>();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableListIterator0);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("-", "-");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("-", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, "?Jc:J//?Wu=:-Gh*M", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IdentityPredicate.identityPredicate((Object) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Integer integer0 = new Integer((-2639));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Integer integer1 = new Integer((-1598));
      SingletonIterator<Integer> singletonIterator1 = new SingletonIterator<Integer>((Integer) null);
      IteratorUtils.emptyIterator();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-648), (-88));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(priorityQueue0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) loopingIterator0);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) loopingIterator0);
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(mapIterator0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIteratorWrapper0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null, (Collection<? super SQLWarning>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("ListIterator must not be null");
      String string0 = "Couldn't get the node: index (";
      IteratorUtils.toString((Iterator<Integer>) orderedIterator0, (Transformer<? super Integer, String>) constantTransformer0, "Couldn't get the node: index (", "ListIterator must not be null", "Couldn't get the node: index (");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"htp'2o.5", "Estimated size must be greater than 0");
      Locale locale0 = Locale.CANADA_FRENCH;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) listIterator0, (long) 1);
      int int0 = (-261);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) boundedIterator0, (-261));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -261
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator1);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("`", sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Collection must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(44);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer1);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) singletonIterator0, 1000);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(list0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableListIterator0, (long) 1000, (long) 0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("^!@iQobYj/k |S");
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<SQLException> class0 = SQLException.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) singletonIterator0, (Iterator<? extends SQLClientInfoException>) singletonIterator0);
      IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(priorityQueue0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) loopingIterator0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) loopingIterator0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) list0);
      String string0 = "(bsk";
      Iterator<SQLException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 1217);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1217
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator0, 0L, (long) 1);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("<?$KIuX");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Integer integer0 = new Integer(758);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) singletonIterator0, 1242);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(list0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableListIterator0, (long) (-2339), (long) (-3741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "", 3);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "org.apache.commons.collections4.map.Flat3Map$KeySet");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("predicate must not be null.", "N[Jv7IGC\"ePoH+;d", 3, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("9k", "predicate must not be null.", 3);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("org.apache.commons.collections4.map.Flat3Map", (String) null, sQLRecoverableException3);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 5);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("ListIterator must not be null");
      IteratorUtils.toString((Iterator<Integer>) orderedIterator0, (Transformer<? super Integer, String>) constantTransformer0, "Couldn't get the node: index (", "ListIterator must not be null", "Couldn't get the node: index (");
      String string0 = "org.apache.commons.collections4.functors.NullIsExceptionPredicate";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"htp'2o.5", "Estimated size must be greater than 0");
      Locale locale0 = Locale.CANADA_FRENCH;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) zippingIterator0, 1248);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1239
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      int int0 = (-2953);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("p/C]&", (String) null, 388);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, (-2953), 388);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      MapIterator<SQLDataException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, IIOMetadataNode>(mapIterator0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) abstractMapIteratorDecorator0, 174L);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.ObjectArrayIterator");
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) skippingIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) zippingIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0, 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 939);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      int int0 = 512;
      int[] intArray0 = new int[1];
      intArray0[0] = 939;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("aG", intArray0, sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@#I'DZx]k%Ot,3hv(Q6", "Co#Y{~*G", 512, batchUpdateException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLSyntaxErrorException0;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 4, 4);
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 512, sQLNonTransientExceptionArray0[0]);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\":?8g", "\":?8g");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \":?8g
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      OrderedMapIterator<SQLFeatureNotSupportedException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Properties properties0 = new Properties();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      IteratorUtils.arrayListIterator(objectArray0, 0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = (IIOMetadataNode)iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Integer integer0 = new Integer((-2639));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) singletonIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2711), 682);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(priorityQueue0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) loopingIterator0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) loopingIterator0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) list0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(bsk");
      EqualPredicate.equalPredicate((Object) sQLTransientConnectionException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) loopingIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 125, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      PriorityQueue<InstanceofPredicate>[] priorityQueueArray0 = (PriorityQueue<InstanceofPredicate>[]) Array.newInstance(PriorityQueue.class, 8);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<InstanceofPredicate> priorityQueue1 = new PriorityQueue<InstanceofPredicate>();
      priorityQueueArray0[1] = priorityQueue1;
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableListIterator0);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) hashSet0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(bsk");
      EqualPredicate.equalPredicate((Object) sQLTransientConnectionException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) iterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("E15.yem<k", "Iterator must not be null", (-2953));
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) listIterator0, (-2912L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@yaQh>_KxH~V`f");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("@yaQh>_KxH~V`f", "@yaQh>_KxH~V`f", 327);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) singletonListIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      EmptyIterator.emptyIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      arrayDeque0.add(sQLTransientConnectionException0);
      arrayDeque0.removeLast();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) arrayDeque0);
      EmptyIterator.resettableEmptyIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) listIterator1);
      Iterator<Object> iterator1 = IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) iterator1, (-945L), (-518L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      MapIterator<SQLDataException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, IIOMetadataNode>(mapIterator0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) abstractMapIteratorDecorator0, 174L);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) skippingIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(resettableIterator0);
      
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, sQLExceptionArray0.length);
      assertNotNull(sQLExceptionArray0);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(1, iIOMetadataNodeArray0.length);
      assertNotNull(resettableListIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedMapIterator0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      Iterator<String> iterator0 = null;
      long long0 = (-437L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) notPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      hashSet0.stream();
      IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) resettableIterator0, (-1150L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, IIOMetadataNode>(orderedMapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLRecoverableException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Transformer<Integer, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "", "", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", "\"htp'2o.5");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.removeChild(iIOMetadataNode0);
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      int int0 = 188;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 188);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<SQLRecoverableException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends Properties>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) orderedMapIterator1;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("92&9V.brtws!ZqoC", "", 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("92&9V.brtws!ZqoC", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("92&9V.brtws!ZqoC", "92&9V.brtws!ZqoC", 10, sQLSyntaxErrorException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLSyntaxErrorException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, (String) null, 0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 681);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ListIterator<Integer> listIterator0 = null;
      Iterator<Object> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, (-851));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -851
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "^$T*OaWLL3e4s)\u0004", 0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^$T*OaWLL3e4s)\u0004", "^$T*OaWLL3e4s)\u0004", 1072, hashMap0, sQLSyntaxErrorException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("~n}fS*ok", "org.apache.commons.collections4.functors.UniquePredicate", "^$T*OaWLL3e4s)\u0004", 100);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.apache.commons.collections4.functors.UniquePredicate", "^$T*OaWLL3e4s)\u0004", "org.apache.commons.collections4.functors.UniquePredicate", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 1072);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-6334);
      longArray0[1] = (-2537L);
      longArray0[2] = 292L;
      longArray0[3] = (long) (-6334);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("$&E#WwU!#J", "prefix may not be null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.SkippingIterator", "prefix may not be null", (-6334), longArray0, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("prefix may not be null", "prefix may not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(", ", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(" _SG6K2#F5g@i`T(", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("", "org.apache.commons.collections4.iterators.SkippingIterator", sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("|n]n3Y/yh?6Gbe<p}N");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException7;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException8 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.SkippingIterator", "", (-1783));
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException8;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (-118L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(resettableIterator0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertNotNull(iIOMetadataNode3);
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertNotNull(iIOMetadataNode4);
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertNotNull(iIOMetadataNode5);
      
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode6);
      
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode6));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode7);
      
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode6));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode7));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode8);
      
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(9, iIOMetadataNodeArray0.length);
      assertNotNull(resettableListIterator0);
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(9, iIOMetadataNodeArray0.length);
      assertNotNull(listIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) uniquePredicate0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(9, iIOMetadataNodeArray0.length);
      assertNotNull(iterator0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      OrderedMapIterator<SQLNonTransientException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.transformedIterator((Iterator<?>) resettableListIterator1, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(iterator1);
      
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = iterator1;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) listIterator0;
      iteratorArray0[2] = iterator1;
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      MapIterator<DataTruncation, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, Integer>(mapIterator0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) abstractMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<Integer, Vector<Locale.FilteringMode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<Integer, Vector<Locale.FilteringMode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Vector<Locale.FilteringMode>>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      iteratorArray0[0] = (Iterator<Integer>) abstractOrderedMapIteratorDecorator0;
      Integer integer0 = new Integer(2923);
      assertNotNull(integer0);
      assertEquals(2923, (int)integer0);
      
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      iteratorArray0[1] = (Iterator<Integer>) singletonIterator0;
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      iteratorArray0[2] = (Iterator<Integer>) orderedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) uniquePredicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(boolean0);
      
      ResettableListIterator<SQLDataException> resettableListIterator2 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator2.hasNext());
      assertFalse(resettableListIterator2.hasPrevious());
      assertNotNull(resettableListIterator2);
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      DataTruncation dataTruncation0 = new DataTruncation((-3201), true, true, 2451, 2451);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      DataTruncation dataTruncation1 = (DataTruncation)dataTruncation0.initCause(sQLNonTransientExceptionArray0[1]);
      assertSame(dataTruncation1, dataTruncation0);
      assertSame(dataTruncation0, dataTruncation1);
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals(5, sQLNonTransientExceptionArray0.length);
      assertNotNull(dataTruncation1);
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertSame(dataTruncation0, dataTruncation1);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNull(sQLWarning0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("sH]:>Z", "5", (Throwable) null);
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("sH]:>Z", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: sH]:>Z", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("5", sQLIntegrityConstraintViolationException1.getSQLState());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException((String) null);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getSQLState());
      assertNull(sQLNonTransientException1.getMessage());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertFalse(sQLNonTransientException1.equals((Object)sQLNonTransientException0));
      assertNotNull(sQLNonTransientException1);
      
      sQLNonTransientExceptionArray0[4] = sQLNonTransientException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, (-3201), 2765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) null, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      assertTrue(boolean0);
      
      PriorityQueue<InstanceofPredicate> priorityQueue1 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", (-4288));
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals((-4288), sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLNonTransientException0);
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals((-4288), sQLNonTransientException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals((-4288), sQLNonTransientException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLIntegrityConstraintViolationException: ", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-2659), true, true, (-2659), 4, sQLTransientException0);
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals((-4288), sQLNonTransientException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLIntegrityConstraintViolationException: ", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(4, true, true, (-2659), (-1), sQLNonTransientException0);
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals((-4288), sQLNonTransientException0.getErrorCode());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation1);
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-1), true, true, 31, (-1));
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation2);
      
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-3103), true, false, 31, 4);
      assertEquals(0, dataTruncation3.getErrorCode());
      assertEquals("22001", dataTruncation3.getSQLState());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertNotNull(dataTruncation3);
      
      dataTruncationArray0[3] = dataTruncation3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
      
      PriorityQueue<InstanceofPredicate>[] priorityQueueArray0 = (PriorityQueue<InstanceofPredicate>[]) Array.newInstance(PriorityQueue.class, 8);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<InstanceofPredicate> priorityQueue1 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<InstanceofPredicate> priorityQueue2 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue2.size());
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue2);
      
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<InstanceofPredicate> priorityQueue3 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue3.size());
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertNotNull(priorityQueue3);
      
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) resettableListIterator0, class0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, sQLExceptionArray0.length);
      assertNotNull(sQLExceptionArray0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      iIOMetadataNodeArray0[6] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertEquals(7, iIOMetadataNodeArray0.length);
      assertNotNull(resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) null, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) transformer0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
      
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("RGZw]$(NFRYd:T", "[]", sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("RGZw]$(NFRYd:T", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: RGZw]$(NFRYd:T", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("RGZw]$(NFRYd:T", "RGZw]$(NFRYd:T", 2111, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("RGZw]$(NFRYd:T", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: RGZw]$(NFRYd:T", sQLTransientConnectionException0.toString());
      assertEquals(2111, sQLClientInfoException1.getErrorCode());
      assertEquals("RGZw]$(NFRYd:T", sQLClientInfoException1.getMessage());
      assertEquals("RGZw]$(NFRYd:T", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: RGZw]$(NFRYd:T", sQLClientInfoException1.toString());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("RGZw]$(NFRYd:T", "[]", (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("RGZw]$(NFRYd:T", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: RGZw]$(NFRYd:T", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("RGZw]$(NFRYd:T", sQLClientInfoException2.getMessage());
      assertEquals("java.sql.SQLClientInfoException: RGZw]$(NFRYd:T", sQLClientInfoException2.toString());
      assertEquals("[]", sQLClientInfoException2.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertNotNull(sQLClientInfoException2);
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("r\"Y[g=N*", (Map<String, ClientInfoStatus>) null, sQLClientInfoException2);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("RGZw]$(NFRYd:T", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: RGZw]$(NFRYd:T", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("RGZw]$(NFRYd:T", sQLClientInfoException2.getMessage());
      assertEquals("java.sql.SQLClientInfoException: RGZw]$(NFRYd:T", sQLClientInfoException2.toString());
      assertEquals("[]", sQLClientInfoException2.getSQLState());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals("r\"Y[g=N*", sQLClientInfoException3.getMessage());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: r\"Y[g=N*", sQLClientInfoException3.toString());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException3);
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      assertNull(sQLClientInfoException4.getSQLState());
      assertNull(sQLClientInfoException4.getMessage());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException4.toString());
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertNotNull(sQLClientInfoException4);
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, 0);
      assertEquals(5, sQLClientInfoExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertEquals(5, sQLClientInfoExceptionArray0.length);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<Hashtable>>) resettableListIterator0, (Predicate<? super ArrayDeque<Hashtable>>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
      
      PriorityQueue<InstanceofPredicate>[] priorityQueueArray0 = (PriorityQueue<InstanceofPredicate>[]) Array.newInstance(PriorityQueue.class, 8);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<InstanceofPredicate> priorityQueue1 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<InstanceofPredicate> priorityQueue2 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue2.size());
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue2);
      
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<InstanceofPredicate> priorityQueue3 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue3.size());
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertNotNull(priorityQueue3);
      
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<InstanceofPredicate> priorityQueue4 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue4.size());
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      assertNotNull(priorityQueue4);
      
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<InstanceofPredicate> priorityQueue5 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue5.size());
      assertFalse(priorityQueue5.equals((Object)priorityQueue2));
      assertFalse(priorityQueue5.equals((Object)priorityQueue4));
      assertFalse(priorityQueue5.equals((Object)priorityQueue1));
      assertFalse(priorityQueue5.equals((Object)priorityQueue0));
      assertFalse(priorityQueue5.equals((Object)priorityQueue3));
      assertNotNull(priorityQueue5);
      
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<InstanceofPredicate> priorityQueue6 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue6.size());
      assertFalse(priorityQueue6.equals((Object)priorityQueue3));
      assertFalse(priorityQueue6.equals((Object)priorityQueue2));
      assertFalse(priorityQueue6.equals((Object)priorityQueue0));
      assertFalse(priorityQueue6.equals((Object)priorityQueue4));
      assertFalse(priorityQueue6.equals((Object)priorityQueue5));
      assertFalse(priorityQueue6.equals((Object)priorityQueue1));
      assertNotNull(priorityQueue6);
      
      priorityQueueArray0[6] = priorityQueue6;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<InstanceofPredicate> priorityQueue7 = new PriorityQueue<InstanceofPredicate>(comparator0);
      assertEquals(0, priorityQueue7.size());
      assertFalse(priorityQueue7.equals((Object)priorityQueue0));
      assertFalse(priorityQueue7.equals((Object)priorityQueue4));
      assertFalse(priorityQueue7.equals((Object)priorityQueue6));
      assertFalse(priorityQueue7.equals((Object)priorityQueue2));
      assertFalse(priorityQueue7.equals((Object)priorityQueue3));
      assertFalse(priorityQueue7.equals((Object)priorityQueue5));
      assertFalse(priorityQueue7.equals((Object)priorityQueue1));
      assertNotNull(priorityQueue7);
      
      priorityQueueArray0[7] = priorityQueue7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(priorityQueueArray0, (-1342), 1107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(resettableIterator0);
      
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(zippingIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(string0);
      assertEquals("[java.sql.SQLTransientConnectionException]", string0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode1.appendChild(iIOMetadataNode0);
      assertSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode1, node0);
      assertSame(node0, iIOMetadataNode0);
      assertNotSame(node0, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode1));
      assertNotNull(node0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode1, node0);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode1.equals((Object)node0));
      assertNotNull(nodeListIterator0);
      
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      iteratorArray0[0] = iterator0;
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertEquals(1, iteratorArray0.length);
      assertNotNull(zippingIterator1);
      
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = (-3741);
      int int1 = 125;
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedIterator0, 125);
      assertFalse(list0.contains(int0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ArrayList<Integer> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<LinkedHashSet<SQLTransientException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 3);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Rv~rt2ifQ.:' Hq)H");
      assertNotNull(transformer0);
      
      transformerArray0[0] = transformer0;
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Transformer<Object, String> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(transformer1.equals((Object)transformer0));
      assertNotNull(transformer1);
      
      transformerArray0[1] = transformer1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) transformer1, comparator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(transformer1.equals((Object)transformer0));
      assertNotNull(predicate0);
      
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(transformer0.equals((Object)transformer1));
      assertFalse(transformer1.equals((Object)transformer0));
      assertNotNull(ifTransformer0);
      
      transformerArray0[2] = (Transformer<Object, String>) ifTransformer0;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends String>[]) transformerArray0, (Transformer<? super Object, ? extends String>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Transformer<Integer, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ArrayList<PriorityQueue>>) null, (-1951L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(loopingIterator0);
      
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) loopingIterator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(enumeration0);
      
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) loopingIterator0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) list0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(iterator0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(bsk");
      assertEquals("java.sql.SQLTransientConnectionException: (bsk", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("(bsk", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: (bsk", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("(bsk", sQLTransientConnectionException0.getMessage());
      assertNotNull(predicate0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate0;
      Closure<Object>[] closureArray0 = null;
      // Undeclared exception!
      try { 
        ChainedClosure.chainedClosure((Closure<? super Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The closure array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      assertEquals(0, predicateArray0.length);
      assertNotNull(predicate0);
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(0, predicateArray0.length);
      assertNotNull(listIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(0, predicateArray0.length);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) iterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(predicate0);
      
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(notPredicate0);
      
      SQLDataException sQLDataException0 = IteratorUtils.find((Iterator<SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) notPredicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNull(sQLDataException0);
      
      ArrayIterator<SQLClientInfoException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLClientInfoException>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Predicate<SQLNonTransientException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Integer integer0 = new Integer((-2639));
      assertNotNull(integer0);
      assertEquals((-2639), (int)integer0);
      
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) singletonIterator0, (-3741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.item((-1287));
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, 0L);
      assertNotNull(skippingIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      predicateArray0[1] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      assertEquals(5, predicateArray0.length);
      assertNotNull(onePredicate0);
      
      predicateArray0[2] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicateArray0[2]);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertEquals(5, predicateArray0.length);
      assertNotNull(predicate2);
      
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = FalsePredicate.falsePredicate();
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      predicateArray0[4] = predicate3;
      AnyPredicate<SQLNonTransientException> anyPredicate0 = new AnyPredicate<SQLNonTransientException>(predicateArray0);
      assertEquals(5, predicateArray0.length);
      assertNotNull(anyPredicate0);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) skippingIterator0, (Predicate<? super SQLFeatureNotSupportedException>) anyPredicate0);
      assertEquals(5, predicateArray0.length);
      assertNotNull(iterator0);
      
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(loopingIterator0);
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator0 = null;
      // Undeclared exception!
      try { 
        loopingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      String string0 = "E15.yem<k";
      String string1 = "Iterator must not be null";
      int int0 = (-2953);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("E15.yem<k", "Iterator must not be null", (-2953));
      assertEquals((-2953), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Iterator must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals("E15.yem<k", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: E15.yem<k", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, (-2953), (-2953));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      // Undeclared exception!
      try { 
        AndPredicate.andPredicate((Predicate<? super Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      MapIterator<BatchUpdateException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[0] = (Iterator<BatchUpdateException>) mapIterator0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      int int0 = 512;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 512, 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("PdE!:wu/~1B_Lg}");
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertNotNull(iIOMetadataNode3);
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode((String) null);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode4);
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("(this Collection)");
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode5);
      
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode2));
      assertNotNull(iIOMetadataNode6);
      
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("y= 7+pEt'-");
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode6));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode5));
      assertNotNull(iIOMetadataNode7);
      
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(8, iIOMetadataNodeArray0.length);
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Iterator<Object> iterator0 = null;
      int int0 = 732;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 732);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      int int0 = 10;
      int int1 = 728;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 10, 728);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "\"mx3LVV", 0);
      assertEquals("\"mx3LVV", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      assertEquals("\"mx3LVV", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLSyntaxErrorException: ", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "*z>4s", 0, sQLTransientConnectionException0);
      assertEquals("\"mx3LVV", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLSyntaxErrorException: ", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("*z>4s", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      assertEquals("\"mx3LVV", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLSyntaxErrorException: ", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("*z>4s", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      int int1 = (-1568);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-1568));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 9;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      String string0 = hashtable0.put(sQLDataException0, "Input Object must not be null");
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(string0);
      
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNotNull(transformer0);
      
      String string1 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNotNull(string1);
      assertEquals("[]", string1);
      
      OrderedMapIterator<SQLClientInfoException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertNotNull(properties2);
      
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      assertTrue(properties3.isEmpty());
      assertEquals(0, properties3.size());
      assertTrue(properties3.equals((Object)properties2));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties0));
      assertNotNull(properties3);
      
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      assertEquals(0, properties4.size());
      assertTrue(properties4.isEmpty());
      assertTrue(properties4.equals((Object)properties3));
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties1));
      assertTrue(properties4.equals((Object)properties2));
      assertNotNull(properties4);
      
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      assertTrue(properties5.isEmpty());
      assertEquals(0, properties5.size());
      assertTrue(properties5.equals((Object)properties4));
      assertTrue(properties5.equals((Object)properties1));
      assertTrue(properties5.equals((Object)properties3));
      assertTrue(properties5.equals((Object)properties0));
      assertTrue(properties5.equals((Object)properties2));
      assertNotNull(properties5);
      
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      assertTrue(properties6.isEmpty());
      assertEquals(0, properties6.size());
      assertTrue(properties6.equals((Object)properties4));
      assertTrue(properties6.equals((Object)properties2));
      assertTrue(properties6.equals((Object)properties3));
      assertTrue(properties6.equals((Object)properties0));
      assertTrue(properties6.equals((Object)properties5));
      assertTrue(properties6.equals((Object)properties1));
      assertNotNull(properties6);
      
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      assertEquals(0, properties7.size());
      assertTrue(properties7.isEmpty());
      assertTrue(properties7.equals((Object)properties3));
      assertTrue(properties7.equals((Object)properties4));
      assertTrue(properties7.equals((Object)properties5));
      assertTrue(properties7.equals((Object)properties6));
      assertTrue(properties7.equals((Object)properties2));
      assertTrue(properties7.equals((Object)properties0));
      assertTrue(properties7.equals((Object)properties1));
      assertNotNull(properties7);
      
      propertiesArray0[7] = properties7;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, (-2749));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("Iterator must not be null", "Transformer must not be null", 133, hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(map0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, (-880));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) resettableListIterator0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLIntegrityConstraintViolationException, ? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLNonTransientException>(mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLDataException, Properties> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, Properties>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator1, 4267, 4267);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLException sQLException0 = new SQLException("lF|k.MCl*OI!sX!mr|2", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("KaHc *dJ<=~j?Sj", "k0-t| 29$l&9", 0, sQLException0);
      sQLException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("k0-t| 29$l&9", "lF|k.MCl*OI!sX!mr|2", "", 3092);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("k0-t| 29$l&9", "KaHc *dJ<=~j?Sj", "Iterator[", (-454));
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("mzK!QVNGU.VB/", "mzK!QVNGU.VB/", (-454), sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("KaHc *dJ<=~j?Sj", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<SQLTimeoutException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransientConnectionException>(hashMap0);
      IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) entrySetMapIterator0, 163L);
      ArrayIterator<SQLIntegrityConstraintViolationException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLIntegrityConstraintViolationException>(entrySetMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
