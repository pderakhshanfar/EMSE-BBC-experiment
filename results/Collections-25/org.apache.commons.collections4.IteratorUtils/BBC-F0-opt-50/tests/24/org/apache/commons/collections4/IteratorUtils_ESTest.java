/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 09:28:10 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.getIterator(predicate0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("iterator");
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iterator0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'iterator' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator1 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator1, (Closure<? super SQLIntegrityConstraintViolationException>) closure0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-1957));
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", (String) null, sQLTimeoutException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException((String) null, "", (-4581));
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "cWn");
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      int int0 = 10;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, "", 10, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("", sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      URI uRI0 = MockURI.URI("cWn");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Closure must not be null", "Closure must not be null", 512);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("EiUwB.", "List must not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("EiUwB.", sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("EiUwB.", "K8y0V`tsVQ(X", 3);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("K8y0V`tsVQ(X", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Closure must not be null", "|Z~n(", sQLTransactionRollbackException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("-R32q+<z*\"|", "", 3, sQLIntegrityConstraintViolationException0);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException8 = new SQLInvalidAuthorizationSpecException("", "^H{!X@$m-zuf6hpa#", sQLInvalidAuthorizationSpecException6);
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 3, (-331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*!Z~", sQLClientInfoException0);
      Transformer<SQLTransactionRollbackException, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(instanceofPredicate0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) identityPredicate0);
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) nullIsExceptionPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) identityPredicate0);
      predicateArray0[4] = predicate2;
      predicateArray0[5] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[6] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[7] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[8] = (Predicate<Object>) identityPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) instanceofPredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate2);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, switchClosure0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, (Closure<? super SQLIntegrityConstraintViolationException>) switchClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.emptyIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Closure must not be null", (String) null, 274);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException1);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) singletonIterator0, 0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NullPredicate.nullPredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(class0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) identityPredicate0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[3] = predicate2;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicateArray0[2]);
      predicateArray0[5] = predicate3;
      Predicate<Object> predicate4 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate2);
      predicateArray0[6] = predicate4;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate2, closure0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Closure<? super SQLIntegrityConstraintViolationException>) whileClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) null, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Vector<HashSet>>) resettableIterator0, (Closure<? super Vector<HashSet>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) hashSet0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray1[0] = predicate0;
      predicateArray1[1] = predicate0;
      predicateArray1[2] = predicate0;
      predicateArray1[3] = predicate0;
      predicateArray1[4] = predicate0;
      predicateArray1[5] = predicate0;
      predicateArray1[6] = predicate0;
      predicateArray1[7] = predicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      predicateArray0[7] = (Predicate<Object>) andPredicate0;
      predicateArray0[8] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, switchClosure0, true);
      IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Closure<? super SQLIntegrityConstraintViolationException>) whileClosure0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 8);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[0] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[1] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[3] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[3] = class4;
      Class<SQLTimeoutException> class5 = SQLTimeoutException.class;
      classArray0[4] = class5;
      Class<SQLTimeoutException> class6 = SQLTimeoutException.class;
      classArray0[5] = class6;
      Class<SQLTimeoutException> class7 = SQLTimeoutException.class;
      classArray0[6] = class7;
      Class<SQLTimeoutException> class8 = SQLTimeoutException.class;
      classArray0[7] = class8;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>(">/J;rkd:K:Vu{QA.+", classArray0, sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((Object) null);
      ConstantFactory<Boolean> constantFactory0 = new ConstantFactory<Boolean>(boolean0);
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(constantFactory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(factoryTransformer0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) transformerPredicate0);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) singletonListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("[]");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((Object) null);
      ConstantFactory<Boolean> constantFactory0 = new ConstantFactory<Boolean>(boolean0);
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(constantFactory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(factoryTransformer0);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) singletonListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((Object) null);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      ConstantFactory<Boolean> constantFactory0 = new ConstantFactory<Boolean>(boolean0);
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(constantFactory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(factoryTransformer0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) transformerPredicate0);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) singletonListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = null;
      iteratorArray0[1] = null;
      iteratorArray0[2] = null;
      iteratorArray0[3] = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((Object) null);
      ConstantFactory<Boolean> constantFactory0 = new ConstantFactory<Boolean>(boolean0);
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(constantFactory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(factoryTransformer0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) transformerPredicate0);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) singletonListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FalsePredicate.falsePredicate();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("oGKF3PmXmrs:J%", (Map<String, ClientInfoStatus>) null);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(",PnXExh.JLe%qZAD5V", "");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 7);
      Class<StringTokenizer> class1 = StringTokenizer.class;
      classArray0[0] = class1;
      Class<StringTokenizer> class2 = StringTokenizer.class;
      classArray0[1] = class2;
      Class<StringTokenizer> class3 = StringTokenizer.class;
      classArray0[2] = class3;
      Class<StringTokenizer> class4 = StringTokenizer.class;
      classArray0[3] = class4;
      Class<StringTokenizer> class5 = StringTokenizer.class;
      classArray0[4] = class5;
      Class<StringTokenizer> class6 = StringTokenizer.class;
      classArray0[5] = class6;
      Class<StringTokenizer> class7 = StringTokenizer.class;
      classArray0[6] = class7;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) class1;
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) uniquePredicate0);
      objectArray0[2] = null;
      objectArray0[3] = (Object) ",PnXExh.JLe%qZAD5V";
      objectArray0[4] = (Object) class1;
      objectArray0[5] = (Object) class1;
      objectArray0[6] = (Object) class2;
      InstantiateFactory<SQLInvalidAuthorizationSpecException> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<SQLInvalidAuthorizationSpecException>(class0, classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      FalsePredicate.falsePredicate();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("oGKF3PmXmrs:J%", (Map<String, ClientInfoStatus>) null);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super EnumSet<ComparatorPredicate.Criterion>>) uniquePredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("]V5D7LD8HR}>gRS]'lx", "]");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(uniquePredicate0, (Equator<Object>) null);
      FalsePredicate.falsePredicate();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Equator<Object> equator0 = null;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(equator0, equator0);
      Predicate<SQLClientInfoException> predicate0 = new UniquePredicate<SQLClientInfoException>();
      String string0 = "oG\\KF3PmXmrs:J%";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(string0, map0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      String string1 = "3Z(65;0bthBWp";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string1);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLClientInfoException1);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(string1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) objectArrayIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '3Z(65;0bthBWp' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableListIterator<PriorityQueue<Object>> resettableListIterator1 = IteratorUtils.emptyListIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(resettableListIterator1, false);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 3);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) invokerTransformer0, "[]", "][b+$dTs&c", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.iterators.EmptyListIterator' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate>[] linkedHashSetArray0 = (LinkedHashSet<InstanceofPredicate>[]) Array.newInstance(LinkedHashSet.class, 0);
      IteratorUtils.arrayIterator(linkedHashSetArray0);
      EmptyIterator.resettableEmptyIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      String string0 = "";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("eqsn=^TK2I6tu;Oxn", "eqsn=^TK2I6tu;Oxn");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("eqsn=^TK2I6tu;Oxn", "eqsn=^TK2I6tu;Oxn");
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(")ch(!", "mrpDEEa*>?LxQ7");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Object) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator1 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException1;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 5, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableIterator0, 3923);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3923
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "[]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate>[] linkedHashSetArray0 = (LinkedHashSet<InstanceofPredicate>[]) Array.newInstance(LinkedHashSet.class, 0);
      ResettableIterator<LinkedHashSet<InstanceofPredicate>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      MapIterator<SQLClientInfoException, Iterator<SQLRecoverableException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) uniquePredicate0);
      Predicate<SQLClientInfoException> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) mapIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      ResettableIterator<Boolean> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Boolean>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Boolean>) resettableIterator1, (-604));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -604
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyIterator.resettableEmptyIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(vector0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (-1));
      vector0.add(sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("hsQK", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "eqsn=^TK2I6tu;Oxn");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "eqsn=^TK2I6tu;Oxn");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      Transformer<SQLWarning, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLWarning>) instanceofPredicate0, (Transformer<? super SQLWarning, ? extends String>) transformer0, (Transformer<? super SQLWarning, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer1, "[", "[", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate>[] linkedHashSetArray0 = (LinkedHashSet<InstanceofPredicate>[]) Array.newInstance(LinkedHashSet.class, 0);
      ResettableIterator<LinkedHashSet<InstanceofPredicate>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      SQLDataException sQLDataException0 = new SQLDataException("eJ?(%aZML", "a6YZ!bcjCd");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("a6YZ!bcjCd", sQLDataException0);
      linkedList0.add(sQLFeatureNotSupportedException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) linkedList0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyIterator.resettableEmptyIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(vector0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (-1));
      vector0.add(sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("hsQK", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLIntegrityConstraintViolationException0.setNextException(sQLTimeoutException0);
      DefaultEquator<SQLNonTransientException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate((SQLNonTransientException) sQLIntegrityConstraintViolationException0, (Equator<SQLNonTransientException>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "eqsn=^TK2I6tu;Oxn");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>(32);
      EmptyIterator.resettableEmptyIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rG7-i6E^=1ino0_OR", "", 32);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Object) "rG7-i6E^=1ino0_OR");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Iterator<SQLRecoverableException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Properties properties0 = new Properties();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>(32);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, class0);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) loopingListIterator0);
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<StringTokenizer>) resettableIterator0;
      iteratorArray0[1] = (Iterator<StringTokenizer>) resettableIterator0;
      IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate>[] linkedHashSetArray0 = (LinkedHashSet<InstanceofPredicate>[]) Array.newInstance(LinkedHashSet.class, 0);
      ResettableIterator<LinkedHashSet<InstanceofPredicate>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("g\"pu");
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLTransientException0);
      Predicate<SQLException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      Transformer<SQLWarning, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLWarning>) predicate1, (Transformer<? super SQLWarning, ? extends String>) transformer0, (Transformer<? super SQLWarning, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer1, ".IZSb`", "", "");
      NullPredicate.nullPredicate();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>(32);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(arrayList0, (Equator<Object>) null);
      Predicate<EnumSet<ComparatorPredicate.Criterion>> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super EnumSet<ComparatorPredicate.Criterion>>) equalPredicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Iterator<SQLRecoverableException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) mapIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      Transformer<SQLWarning, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLWarning>) instanceofPredicate0, (Transformer<? super SQLWarning, ? extends String>) transformer0, (Transformer<? super SQLWarning, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer1, "[", "[", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Properties properties0 = new Properties();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>(32);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, class0);
      IteratorUtils.emptyIterator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) loopingListIterator0);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>(hashMap1);
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      HashMap<String, ClientInfoStatus> hashMap4 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Unsupported object type: null", hashMap4);
      hashMap3.put(sQLClientInfoException0, "y");
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap3);
      Transformer<SQLWarning, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLWarning>) instanceofPredicate0, (Transformer<? super SQLWarning, ? extends String>) transformer0, (Transformer<? super SQLWarning, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer1, "org.apache.commons.collections4.functors.FalsePredicate", "", "");
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ReverseListIterator<InstanceofPredicate> reverseListIterator0 = new ReverseListIterator<InstanceofPredicate>(arrayList0);
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) reverseListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator1, 0L, 0L);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator1, (Object) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      EmptyIterator.resettableEmptyIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(vector0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      int int0 = 5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      IfTransformer.ifTransformer((Predicate<? super SQLWarning>) predicate0, (Transformer<? super SQLWarning, ? extends String>) transformer0, (Transformer<? super SQLWarning, ? extends String>) transformer0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1227);
      longArray0[2] = (long) 80;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("m.", "m.", 0, longArray0, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("t>.J!/", "m.", 80, batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1227), true, false, (-1227), 335, sQLTransientConnectionException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) singletonIterator0, (Transformer<? super DataTruncation, String>) transformer0, (String) null, "", "fromIndex =");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IfTransformer.ifTransformer((Predicate<? super SQLWarning>) uniquePredicate0, (Transformer<? super SQLWarning, ? extends String>) transformer0, (Transformer<? super SQLWarning, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer0, "", "Predicate must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 2096L, 0L);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) instanceofPredicate0);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) boundedIterator0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-458));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      EmptyIterator.resettableEmptyIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IfTransformer.ifTransformer((Predicate<? super SQLWarning>) predicate0, (Transformer<? super SQLWarning, ? extends String>) transformer0, (Transformer<? super SQLWarning, ? extends String>) transformer0);
      DataTruncation dataTruncation0 = new DataTruncation(2038, true, true, 2038, 1805);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) singletonListIterator0, (Transformer<? super DataTruncation, String>) transformer0, "Closure must not be null", "Predicate must not be null", "Mq=iUb\"CEb&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super EnumSet<ComparatorPredicate.Criterion>>) equalPredicate0);
      IteratorUtils.getIterator(mapIterator0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      EmptyIterator.resettableEmptyIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(vector0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<Properties> class1 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) instanceofPredicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super EnumSet<ComparatorPredicate.Criterion>>) predicate1);
      IteratorUtils.getIterator(arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate>[] linkedHashSetArray0 = (LinkedHashSet<InstanceofPredicate>[]) Array.newInstance(LinkedHashSet.class, 0);
      IteratorUtils.arrayIterator(linkedHashSetArray0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IfTransformer.ifTransformer((Predicate<? super SQLWarning>) allPredicate0, (Transformer<? super SQLWarning, ? extends String>) transformer0, (Transformer<? super SQLWarning, ? extends String>) transformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[", "[");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, true);
      Hashtable<Object, DataTruncation> hashtable1 = new Hashtable<Object, DataTruncation>();
      Transformer<Object, DataTruncation> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashtable1);
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) singletonIterator0, (Transformer<? super StringTokenizer, ? extends DataTruncation>) transformer1);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0);
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) loopingIterator0, (Transformer<? super DataTruncation, String>) transformer0, "[", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) mapIterator0, (Iterator<? extends SQLException>) resettableListIterator0);
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      EmptyIterator.resettableEmptyIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(arrayList0, (Equator<Object>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      Predicate<EnumSet<ComparatorPredicate.Criterion>> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super EnumSet<ComparatorPredicate.Criterion>>) equalPredicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      IteratorUtils.filteredIterator(iterator0, (Predicate<? super Object>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate>[] linkedHashSetArray0 = (LinkedHashSet<InstanceofPredicate>[]) Array.newInstance(LinkedHashSet.class, 0);
      IteratorUtils.arrayIterator(linkedHashSetArray0);
      Iterable<Object> iterable0 = new LinkedList<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLDataException0);
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.emptyListIterator();
      UniquePredicate<SQLRecoverableException> uniquePredicate0 = new UniquePredicate<SQLRecoverableException>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableIterator<ArrayList<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      ArrayDeque<SQLClientInfoException> arrayDeque1 = arrayDeque0.clone();
      ResettableIterator<SQLException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) arrayDeque1);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) resettableIterator1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<DataTruncation> class1 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      IfTransformer.ifTransformer((Predicate<? super SQLWarning>) instanceofPredicate0, (Transformer<? super SQLWarning, ? extends String>) transformer0, (Transformer<? super SQLWarning, ? extends String>) transformer0);
      DataTruncation dataTruncation0 = new DataTruncation(703, true, true, (-1663), 703);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.toString((Iterator<DataTruncation>) zippingIterator0, (Transformer<? super DataTruncation, String>) transformer0, "8wObaT", "8wObaT", "");
      IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) singletonListIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("[]");
      SQLWarning sQLWarning1 = new SQLWarning("", "suffix may not be null", sQLWarning0);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      IdentityPredicate.identityPredicate(instanceofPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      Hashtable<Predicate<Object>, Closure<Object>> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<Predicate<Object>, Closure<Object>>(12, (-240.17F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load: -240.17
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("G4k&6", "", 43);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("%&", "6Mx", 1797, sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("NodeList must not be null", "xL7G5J(`tjcI{Z/", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 1797);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      OrderedMapIterator<SQLNonTransientConnectionException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends DataTruncation>) orderedMapIterator0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator1, (Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<ClientInfoStatus, SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends DataTruncation>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator1, (Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<ClientInfoStatus, SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      String string0 = "The predicate and transformer map must not be null";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DataTruncation dataTruncation0 = new DataTruncation((-1157), false, true, (-1157), 3197);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ConstantTransformer<Locale.Category, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Locale.Category, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Transformer<? super Locale.Category, ? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      String string0 = "The predicate and transformer map must not be null";
      DataTruncation dataTruncation0 = new DataTruncation((-1157), false, true, (-1157), 3197);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The predicate and transformer map must not be null");
      ConstantTransformer<Locale.Category, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Locale.Category, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Transformer<? super Locale.Category, ? extends SQLTransactionRollbackException>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      DataTruncation dataTruncation0 = new DataTruncation(3197, false, false, 3197, 3197);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", dataTruncation0);
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(mapIterator1);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      Vector<HashSet<SQLNonTransientException>> vector0 = new Vector<HashSet<SQLNonTransientException>>();
      vector0.add((HashSet<SQLNonTransientException>) linkedHashSet0);
      IteratorUtils.loopingListIterator((List<HashSet<SQLNonTransientException>>) vector0);
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLWarning, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MYA/Z.Dz0*zok;S");
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) orderedMapIterator0, (Transformer<? super DataTruncation, String>) transformer0, "MYA/Z.Dz0*zok;S", (String) null, "NodeList must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      InstanceofPredicate.instanceOfPredicate(class0);
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) instanceofPredicate0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ", ";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, true);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, class1);
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException>();
      String[] stringArray0 = new String[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      stringArray0[0] = ", ";
      stringArray0[1] = ", ";
      stringArray0[2] = ", ";
      stringArray0[3] = ", ";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      objectArrayIterator0.next();
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) objectArrayIterator0, (Iterator<? extends String>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getNodeValue();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      MapIterator<DataTruncation, String> mapIterator1 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, String> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends String>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) mapIterator2);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Hashtable<Integer, SQLDataException> hashtable0 = new Hashtable<Integer, SQLDataException>(767);
      Enumeration<SQLDataException> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      ArrayList<SQLTransactionRollbackException> arrayList1 = new ArrayList<SQLTransactionRollbackException>();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("E\"m-Joj%%+fajT*a8@6", "E\"m-Joj%%+fajT*a8@6", 876, mockThrowable0);
      arrayList1.add(sQLTransactionRollbackException0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) arrayList1);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      // Undeclared exception!
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Equator<Object> equator0 = null;
      int int0 = 61;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("transformer may not be null");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) singletonIterator0, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 60
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate>[] linkedHashSetArray0 = (LinkedHashSet<InstanceofPredicate>[]) Array.newInstance(LinkedHashSet.class, 0);
      ResettableIterator<LinkedHashSet<InstanceofPredicate>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("s[OJFC5]fRL9/A");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s[OJFC5]fRL9/A", "s[OJFC5]fRL9/A", sQLWarning0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0, defaultEquator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s[OJFC5]fRL9/A", sQLWarning0);
      SQLWarning sQLWarning1 = new SQLWarning("", sQLTimeoutException0);
      SQLWarning sQLWarning2 = new SQLWarning("s[OJFC5]fRL9/A", "", sQLTimeoutException0);
      sQLWarning2.setNextWarning(sQLWarning1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 61, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%nOPEV<rb\" VVG", "%nOPEV<rb\" VVG", 0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("%nOPEV<rb\" VVG", "%nOPEV<rb\" VVG", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("U@3hdjGM7Y*");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", sQLTransientConnectionException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate1);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) resettableListIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyIterator.resettableEmptyIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) instanceofPredicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator1);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(list0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableIterator<ArrayList<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends DataTruncation>) orderedMapIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) iterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) hashSet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) enumeration0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Entry does not exist: ");
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(478);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(478);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(478);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((byte)125);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(552);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2405));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((byte)53);
      integerArray0[6] = integer6;
      IteratorUtils.arrayListIterator(integerArray0, (int) 1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      OrPredicate.orPredicate((Predicate<? super SQLIntegrityConstraintViolationException>) predicate0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends Properties>) orderedIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 2180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", "", sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException("Predicate must not be null", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?C<b-Tlr");
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate>[] linkedHashSetArray0 = (LinkedHashSet<InstanceofPredicate>[]) Array.newInstance(LinkedHashSet.class, 0);
      ResettableIterator<LinkedHashSet<InstanceofPredicate>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      int int0 = 842;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("I]xs?;P~sr/!QlR", "oi?=|Cks:no", 842);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("7=c;-t", sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("7=c;-t", "g9Na!@b", 842, sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("g9Na!@b", sQLNonTransientConnectionException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 842, 1713);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      stack0.add(integer1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) objectArrayIterator0, (Iterator<? extends String>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransactionRollbackException0);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(vector0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) singletonIterator0;
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0, 1);
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) resettableIterator0;
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) singletonIterator0;
      iteratorArray0[4] = (Iterator<InstanceofPredicate>) singletonIterator0;
      iteratorArray0[5] = (Iterator<InstanceofPredicate>) singletonIterator0;
      ArrayIterator<InstanceofPredicate> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<InstanceofPredicate>(enumeration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      Iterator<SQLTransientException> iterator0 = null;
      IteratorUtils.toString((Iterator<SQLTransientException>) null);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) priorityQueue0);
      SQLException sQLException0 = new SQLException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("w", sQLException0);
      String string0 = "Array class must not be null";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Array class must not be null", "Array class must not be null");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Array class must not be null
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", (-551));
      priorityQueue0.add(sQLTransientConnectionException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", 10, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      String string0 = "16T7}1 ^titEgpG)6Z";
      String string1 = "qf~S*XSv4b*";
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("16T7}1 ^titEgpG)6Z", "qf~S*XSv4b*", (-169), (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException1;
      String string2 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 6812, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(linkedList0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Equator<Object> equator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) reverseListIterator0, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 61
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, notPredicate0);
      OrPredicate.orPredicate((Predicate<? super SQLIntegrityConstraintViolationException>) predicate0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Predicate<BatchUpdateException> predicate2 = AndPredicate.andPredicate((Predicate<? super BatchUpdateException>) orPredicate0, (Predicate<? super BatchUpdateException>) predicate1);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) orderedIterator0, (Predicate<? super BatchUpdateException>) predicate2);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Class<SQLInvalidAuthorizationSpecException>, TreeSet<Locale.Category>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<DataTruncation, ServiceLoader<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", (-551));
      priorityQueue0.add(sQLTransientConnectionException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", 10, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      SQLWarning sQLWarning0 = new SQLWarning("", "16T7}1 ^titEgpG)6Z", sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.AbstractHashedMap", "2,`fSh*97");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0, defaultEquator0);
      SQLWarning sQLWarning1 = new SQLWarning("c:d@1U,$j6AJuG=", "16T7}1 ^titEgpG)6Z");
      sQLWarning0.setNextWarning(sQLWarning1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", 10, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransactionRollbackException0);
      IteratorUtils.toString((Iterator<SQLTransientException>) singletonListIterator0);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-76), true, true, 512, (-686));
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("[java.sql.SQLTransactionRollbackException]", dataTruncation0);
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, String> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(mapIterator0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransactionRollbackException1, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.singletonIterator((SQLNonTransientException) null);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IteratorChain cannot be changed after the first use of a method from the Iterator interface");
      Vector<HashSet<SQLNonTransientException>> vector0 = new Vector<HashSet<SQLNonTransientException>>();
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      vector0.add((HashSet<SQLNonTransientException>) linkedHashSet0);
      IteratorUtils.loopingListIterator((List<HashSet<SQLNonTransientException>>) vector0);
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Integer, SQLDataException> hashtable0 = new Hashtable<Integer, SQLDataException>(43);
      Enumeration<SQLDataException> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ConstantTransformer<SQLNonTransientConnectionException, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("IteratorChain cannot be changed after the first use of a method from the Iterator interface", "IteratorChain cannot be changed after the first use of a method from the Iterator interface", 4, sQLNonTransientConnectionException0);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer1 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException1);
      IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) constantTransformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) null, (long) 43, (long) 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      long long0 = 0L;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 0L, 0L);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) boundedIterator0, 0L);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) skippingIterator0, 0L, 0L);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayList0);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 6);
      ArrayList<InstanceofPredicate> arrayList1 = new ArrayList<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator1 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) arrayList1);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableListIterator1;
      iteratorArray0[1] = iterator0;
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) listIterator0;
      iteratorArray0[4] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      iteratorArray0[5] = (Iterator<InstanceofPredicate>) listIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation((-1157), false, true, (-1157), 3197);
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("INMv!=nz");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayListIterator(propertiesArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation((-1157), false, true, (-1157), 3197);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The predicate and transformer map must not be null");
      ConstantTransformer<Locale.Category, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Locale.Category, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Transformer<? super Locale.Category, ? extends SQLTransactionRollbackException>) constantTransformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      MapIterator<DataTruncation, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, String>(mapIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLException sQLException0 = new SQLException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) objectArrayListIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ResettableIterator<Transformer<SQLTimeoutException, Class<SQLIntegrityConstraintViolationException>>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Transformer<SQLTimeoutException, Class<SQLIntegrityConstraintViolationException>>>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayIterator<SQLTransactionRollbackException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLTransactionRollbackException>(resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<DataTruncation, ServiceLoader<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 9);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<DataTruncation, ServiceLoader<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      MapIterator<ArrayDeque<DataTruncation>, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 9);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ConstantTransformer<Locale.Category, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Locale.Category, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("k", "`S81c;G:g2F", (-312));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("k", "`S81c;G:g2F", (-312), sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`S81c;G:g2F", "", 0, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("`S81c;G:g2F", (String) null);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[4] = sQLNonTransientException0;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("k");
      arrayList0.add(sQLNonTransientConnectionException0);
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      OrderedMapIterator<ArrayDeque<DataTruncation>, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<ArrayDeque<DataTruncation>, SQLIntegrityConstraintViolationException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayDeque<DataTruncation>, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<ArrayDeque<DataTruncation>, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<DataTruncation>, SQLIntegrityConstraintViolationException>(orderedMapIterator1);
      IteratorUtils.toString((Iterator<ArrayDeque<DataTruncation>>) abstractOrderedMapIteratorDecorator0, (Transformer<? super ArrayDeque<DataTruncation>, String>) invokerTransformer0);
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLWarning, BatchUpdateException> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLWarning>) orderedMapIterator2;
      Iterator<SQLWarning> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) iterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<Integer, SQLDataException> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<Integer, SQLDataException>((-2410));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2410
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) singletonIterator0;
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayList0);
      iteratorArray0[1] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      Node node0 = iIOMetadataNode0.insertBefore(iIOMetadataNode1, iIOMetadataNode1);
      IteratorUtils.nodeListIterator(node0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(linkedList0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayList0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) singletonIterator0;
      iteratorArray0[1] = iterator0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) listIterator0;
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) singletonIterator0;
      iteratorArray0[4] = (Iterator<InstanceofPredicate>) singletonIterator0;
      iteratorArray0[5] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<SQLException, InstanceofPredicate>[] hashMapArray0 = (HashMap<SQLException, InstanceofPredicate>[]) Array.newInstance(HashMap.class, 1);
      IteratorUtils.emptyMapIterator();
      HashMap<SQLException, InstanceofPredicate> hashMap0 = new HashMap<SQLException, InstanceofPredicate>();
      hashMapArray0[0] = hashMap0;
      ResettableListIterator<HashMap<SQLException, InstanceofPredicate>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashMapArray0);
      IteratorUtils.isEmpty(resettableListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTransientConnectionException0);
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLNonTransientConnectionException0, 1085);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<DataTruncation, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends String>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayList0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) singletonIterator0;
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayList0);
      iteratorArray0[1] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IteratorChain cannot be changed after the first use of a method from the Iterator interface");
      Vector<HashSet<SQLNonTransientException>> vector0 = new Vector<HashSet<SQLNonTransientException>>();
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      vector0.add((HashSet<SQLNonTransientException>) linkedHashSet0);
      IteratorUtils.loopingListIterator((List<HashSet<SQLNonTransientException>>) vector0);
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLWarning, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IteratorUtils.toString((Iterator<DataTruncation>) orderedMapIterator0, (Transformer<? super DataTruncation, String>) transformer0, "IteratorChain cannot be changed after the first use of a method from the Iterator interface", "", "IteratorChain cannot be changed after the first use of a method from the Iterator interface");
      IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) orderedMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("IteratorChain cannot be changed after the first use of a method from the Iterator interface");
      SQLWarning sQLWarning1 = new SQLWarning("", "", sQLWarning0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLWarning1, (Equator<Object>) null);
      sQLWarning0.setNextWarning(sQLWarning1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) equalPredicate0, 12, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", "", sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException("Predicate must not be null", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("/9PFXDiZplN", "Ttoyv1Id#O1{&N", 61);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("NodeList must not be null", "", 93, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", (String) null, sQLFeatureNotSupportedException2);
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayIterator0.forEachRemaining(consumer0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0, 2161);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(list0);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator1 = new LoopingListIterator<SQLFeatureNotSupportedException>(list0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator1, class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 61, sQLFeatureNotSupportedException2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 93, 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", (-551));
      priorityQueue0.add(sQLTransientConnectionException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", 10, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", 10, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("16T7}1 ^titEgpG)6Z", "qf~S*XSv4b*", (-169), (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", "", 1956, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", "i>,,b;M-}&o_8^", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap", "16T7}1 ^titEgpG)6Z", (Map<String, ClientInfoStatus>) null, sQLClientInfoException3);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) objectArrayListIterator0, (-551));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -551
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", "", sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException("Predicate must not be null", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("/9PFXDiZplN", "Ttoyv1Id#O1{&N", 61);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException1.forEach(consumer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("NodeList must not be null", "", 93, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator((SQLDataException) null);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) iterator0, 3174L);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", "", sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException("Predicate must not be null", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Ttoyv1Id#O1{&N", "", 749);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("NodeList must not be null", "", 93, sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning0 = new SQLWarning(")VR)r!D9-9aM", "NodeList must not be null", 1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("NodeList must not be null", "em+sU", sQLWarning0);
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0, (-1227));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      DataTruncation dataTruncation0 = new DataTruncation((-1157), false, true, (-1157), 3197);
      assertNotNull(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*+]X3", dataTruncation0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: *+]X3", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("*+]X3", sQLTransactionRollbackException0.getMessage());
      
      ConstantTransformer<Locale.Category, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Locale.Category, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      assertNotNull(constantTransformer0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: *+]X3", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("*+]X3", sQLTransactionRollbackException0.getMessage());
      
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Transformer<? super Locale.Category, ? extends SQLTransactionRollbackException>) constantTransformer0);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: *+]X3", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("*+]X3", sQLTransactionRollbackException0.getMessage());
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      assertNotNull(listIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: *+]X3", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("*+]X3", sQLTransactionRollbackException0.getMessage());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      OrderedMapIterator<SQLException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("k", "INMv!=nz", 3197, sQLTransactionRollbackException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: *+]X3", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("*+]X3", sQLTransactionRollbackException0.getMessage());
      assertEquals(3197, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: k", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("k", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("INMv!=nz", sQLIntegrityConstraintViolationException0.getSQLState());
      
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLNonTransientExceptionArray0[0]);
      assertEquals(4, sQLNonTransientExceptionArray0.length);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException: k", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: k", sQLIntegrityConstraintViolationException1.getMessage());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 0, sQLIntegrityConstraintViolationException1);
      assertEquals(4, sQLNonTransientExceptionArray0.length);
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException: k", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: k", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      sQLNonTransientExceptionArray0[2] = sQLNonTransientException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "5");
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertEquals("5", sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException2.toString());
      assertEquals("", sQLIntegrityConstraintViolationException2.getMessage());
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException2;
      ResettableListIterator<SQLNonTransientException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      assertEquals(4, sQLNonTransientExceptionArray0.length);
      assertNotNull(resettableListIterator1);
      assertTrue(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class1);
      Class<Properties> class3 = Properties.class;
      InstanceofPredicate.instanceOfPredicate(class3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) null, (Collection<? super SQLIntegrityConstraintViolationException>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = (-533);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-533));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      Hashtable<SQLDataException, SQLClientInfoException>[] hashtableArray0 = (Hashtable<SQLDataException, SQLClientInfoException>[]) Array.newInstance(Hashtable.class, 0);
      int int0 = (-2988);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashtableArray0, (-2988), (-2988));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedMapIterator<DataTruncation, ServiceLoader<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      MapIterator<ArrayDeque<DataTruncation>, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 9);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[5] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[6] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[7] = class7;
      Class<SQLDataException> class8 = SQLDataException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("su?P :t+5", classArray0, classArray0);
      IteratorUtils.toString((Iterator<ArrayDeque<DataTruncation>>) mapIterator0, (Transformer<? super ArrayDeque<DataTruncation>, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "FbF", (-413));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "[", (-413), hashMap0, sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLClientInfoException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("[", "FbF", sQLTimeoutException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", sQLNonTransientException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(">r\"AV\"h2!}*{m+64u");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("transformer may not be null");
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("VKbS.14T8DZWQp-8", "", 1385);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException(">r\"AV\"h2!}*{m+64u", "", sQLFeatureNotSupportedException6);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException("ZScP%*.:Vdc\"", "", 922, sQLFeatureNotSupportedException7);
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 1385, 470);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      sQLNonTransientConnectionException0.setNextException(sQLSyntaxErrorException0);
      String string0 = ")m`Ml";
      String string1 = "`yYpV@H-|?5/wgbH";
      int int0 = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")m`Ml", "`yYpV@H-|?5/wgbH", 0, sQLSyntaxErrorException0);
      Factory<SQLInvalidAuthorizationSpecException> factory0 = ConstantFactory.constantFactory(sQLInvalidAuthorizationSpecException0);
      FactoryTransformer<Object, SQLInvalidAuthorizationSpecException> factoryTransformer0 = new FactoryTransformer<Object, SQLInvalidAuthorizationSpecException>(factory0);
      factoryTransformer0.transform(sQLNonTransientConnectionException0);
      IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.Flat3Map$EntryIterator");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", sQLTimeoutException0);
      int int0 = (-258);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException1, (-258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, (-2346), (-2346));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransactionRollbackException0);
      IteratorUtils.toString((Iterator<SQLTransientException>) singletonListIterator0);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 6);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) vector0);
      predicateArray0[0] = predicate0;
      Predicate<SQLException> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) vector0);
      predicateArray0[1] = predicate1;
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<SQLException> predicate2 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) priorityQueue0);
      predicateArray0[2] = predicate2;
      Predicate<SQLException> predicate3 = IdentityPredicate.identityPredicate((SQLException) sQLTransactionRollbackException0);
      predicateArray0[3] = predicate3;
      Predicate<SQLException> predicate4 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate2);
      predicateArray0[5] = predicate4;
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 0);
      Hashtable<Predicate<Object>, Closure<Object>> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<Predicate<Object>, Closure<Object>>((-3137), 2434.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3137
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) resettableListIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, 638);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransactionRollbackException0);
      IteratorUtils.toString((Iterator<SQLTransientException>) singletonListIterator0);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 6);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) vector0);
      predicateArray0[0] = predicate0;
      Predicate<SQLException> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) vector0);
      predicateArray0[1] = predicate1;
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<SQLException> predicate2 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) priorityQueue0);
      predicateArray0[2] = predicate2;
      Predicate<SQLException> predicate3 = IdentityPredicate.identityPredicate((SQLException) sQLTransactionRollbackException0);
      predicateArray0[3] = predicate3;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<SQLException> predicate4 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransactionRollbackException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[4] = predicate4;
      Predicate<SQLException> predicate5 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate2);
      predicateArray0[5] = predicate5;
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 0);
      int int0 = (-3137);
      Hashtable<Predicate<Object>, Closure<Object>> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<Predicate<Object>, Closure<Object>>((-3137), 2434.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3137
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransactionRollbackException) null);
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(listIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, false, 780, 91);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(93, false, false, 1324, 0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1324, false, true, (-3115), (-726));
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-726), true, true, 9, (-3838), dataTruncation0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(93, false, false, 1324, 9);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(93, true, false, 93, 1020, dataTruncation2);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation((-574), true, false, 1192, 780);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(9, true, true, 2614, 624);
      dataTruncationArray0[8] = dataTruncation8;
      IteratorUtils.arrayIterator(dataTruncationArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(16, false, false, 12, 12);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, (-1134));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      IteratorUtils.emptyOrderedIterator();
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(iterator0, (-1045), 1310);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2471;
      intArray0[1] = 2471;
      intArray0[2] = 2471;
      intArray0[3] = 1;
      intArray0[4] = 2292;
      intArray0[5] = 1;
      intArray0[6] = 2292;
      intArray0[7] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">X$9A*_[{;&'(s", intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(2471, false, false, 1, 2292, batchUpdateException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends DataTruncation>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 43;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")ul*1K", "There are no elements for this iterator to loop on", 43, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("u-v", "Mm[\rU399GYDuVi", 43, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException1, false);
      IteratorUtils.size(singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) ")ul*1K", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*yDb>0z:'I=Uo", "Array class must not be null");
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1157), false, true, (-1157), 3197);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*+]X3", dataTruncation0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: *+]X3", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("*+]X3", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<DataTruncation, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(mapIterator1);
      assertNotNull(listIteratorWrapper0);
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("iterator", "", (-689), dataTruncation0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("iterator", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-689), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: iterator", sQLFeatureNotSupportedException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("iterator", "", sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("iterator", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-689), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: iterator", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("iterator", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: iterator", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException1;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(6, objectArrayIterator0.getEndIndex());
      
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0, 100);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertTrue(list0.contains(sQLFeatureNotSupportedException1));
      assertNotNull(list0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(6, objectArrayIterator0.getEndIndex());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(list0);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertTrue(list0.contains(sQLFeatureNotSupportedException1));
      assertNotNull(loopingListIterator0);
      assertTrue(loopingListIterator0.hasNext());
      assertEquals(6, loopingListIterator0.size());
      assertTrue(loopingListIterator0.hasPrevious());
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(6, objectArrayIterator0.getEndIndex());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      MapIterator<ServiceLoader<InstanceofPredicate>, ServiceLoader<ComparatorPredicate.Criterion>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean1 = priorityQueue0.add(locale_Category0);
      assertTrue(priorityQueue0.contains(locale_Category0));
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = priorityQueue0.add(locale_Category0);
      assertTrue(priorityQueue0.contains(locale_Category0));
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean3 = priorityQueue0.add(locale_Category1);
      assertTrue(priorityQueue0.contains(locale_Category1));
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(3, priorityQueue0.size());
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.Category>) priorityQueue0);
      assertTrue(priorityQueue0.contains(locale_Category1));
      assertNotNull(resettableIterator0);
      assertEquals(3, priorityQueue0.size());
      
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
      
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      assertNotNull(predicate0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      assertNotNull(predicate1);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) resettableIterator1, (Predicate<? super SQLTimeoutException>) predicate1);
      assertNotNull(iterator0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("eBqUx,&`/LPhkMVDNh", "NodeList must not be null");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("NodeList must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: eBqUx,&`/LPhkMVDNh", sQLSyntaxErrorException0.toString());
      assertEquals("eBqUx,&`/LPhkMVDNh", sQLSyntaxErrorException0.getMessage());
      
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      assertNotNull(singletonListIterator0);
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("NodeList must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: eBqUx,&`/LPhkMVDNh", sQLSyntaxErrorException0.toString());
      assertEquals("eBqUx,&`/LPhkMVDNh", sQLSyntaxErrorException0.getMessage());
      
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (long) 0);
      assertNotNull(boundedIterator0);
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("NodeList must not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: eBqUx,&`/LPhkMVDNh", sQLSyntaxErrorException0.toString());
      assertEquals("eBqUx,&`/LPhkMVDNh", sQLSyntaxErrorException0.getMessage());
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<DataTruncation> class1 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<Properties> class2 = Properties.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      assertNotNull(instanceofPredicate2);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate3);
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate1));
      
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<String> class3 = String.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class3);
      assertNotNull(instanceofPredicate4);
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate3));
      
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate5);
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate3));
      
      instanceofPredicateArray0[5] = instanceofPredicate5;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate6);
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[6] = instanceofPredicate6;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate7);
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate6));
      
      instanceofPredicateArray0[7] = instanceofPredicate7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list0);
      assertNotNull(reverseListIterator0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, false);
      assertNotNull(singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) singletonIterator0;
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      assertNotNull(enumeration0);
      assertTrue(singletonIterator0.hasNext());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(false));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayList0);
      assertFalse(arrayList0.contains(false));
      assertNotNull(iterator0);
      assertTrue(singletonIterator0.hasNext());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      iteratorArray0[1] = iterator0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      assertEquals(2, iteratorArray0.length);
      assertNotNull(zippingIterator0);
      
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>) singletonIterator0, (Iterator<?>) zippingIterator0);
      assertEquals(2, iteratorArray0.length);
      assertNotNull(iterator1);
      assertTrue(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ja0v:Bc");
      assertFalse(boolean0);
      
      MapIterator<SQLSyntaxErrorException, ArrayDeque<SQLSyntaxErrorException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLSyntaxErrorException, ArrayDeque<SQLSyntaxErrorException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator1, 1768);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 512;
      longArray0[1] = (long) 512;
      longArray0[2] = 965L;
      longArray0[3] = (long) 512;
      longArray0[4] = (long) 512;
      longArray0[5] = (long) 512;
      longArray0[6] = (long) 512;
      longArray0[7] = (long) 512;
      longArray0[8] = (long) 512;
      int[] intArray0 = new int[1];
      intArray0[0] = 512;
      SQLWarning sQLWarning0 = new SQLWarning("JApg`^?#");
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("JApg`^?#", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: JApg`^?#", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("JApg`^?#", intArray0, sQLWarning0);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("JApg`^?#", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: JApg`^?#", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: JApg`^?#", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("JApg`^?#", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {512}, intArray0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("JApg`^?#", "JApg`^?#", 512, longArray0, batchUpdateException0);
      assertEquals(9, longArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException1);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("JApg`^?#", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: JApg`^?#", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: JApg`^?#", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("JApg`^?#", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("JApg`^?#", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: JApg`^?#", batchUpdateException1.toString());
      assertEquals("JApg`^?#", batchUpdateException1.getSQLState());
      assertEquals(512, batchUpdateException1.getErrorCode());
      assertArrayEquals(new long[] {512L, 512L, 965L, 512L, 512L, 512L, 512L, 512L, 512L}, longArray0);
      assertArrayEquals(new int[] {512}, intArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException1);
      assertEquals(9, longArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(listIterator0);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("JApg`^?#", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: JApg`^?#", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: JApg`^?#", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("JApg`^?#", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("JApg`^?#", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: JApg`^?#", batchUpdateException1.toString());
      assertEquals("JApg`^?#", batchUpdateException1.getSQLState());
      assertEquals(512, batchUpdateException1.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertArrayEquals(new long[] {512L, 512L, 965L, 512L, 512L, 512L, 512L, 512L, 512L}, longArray0);
      assertArrayEquals(new int[] {512}, intArray0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      Vector<StringTokenizer>[] vectorArray0 = (Vector<StringTokenizer>[]) Array.newInstance(Vector.class, 7);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      vectorArray0[0] = vector0;
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>();
      assertNotNull(vector1);
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertTrue(vector1.equals((Object)vector0));
      
      vectorArray0[1] = vector1;
      Vector<StringTokenizer> vector2 = new Vector<StringTokenizer>();
      assertNotNull(vector2);
      assertTrue(vector2.isEmpty());
      assertEquals("[]", vector2.toString());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      assertTrue(vector2.equals((Object)vector1));
      assertTrue(vector2.equals((Object)vector0));
      
      vectorArray0[2] = vector2;
      Vector<StringTokenizer> vector3 = new Vector<StringTokenizer>();
      assertNotNull(vector3);
      assertEquals(0, vector3.size());
      assertEquals("[]", vector3.toString());
      assertEquals(10, vector3.capacity());
      assertTrue(vector3.isEmpty());
      assertTrue(vector3.equals((Object)vector0));
      assertTrue(vector3.equals((Object)vector2));
      assertTrue(vector3.equals((Object)vector1));
      
      vectorArray0[3] = vector3;
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      vectorArray0[4] = (Vector<StringTokenizer>) stack0;
      Vector<StringTokenizer> vector4 = new Vector<StringTokenizer>();
      assertNotNull(vector4);
      assertEquals(0, vector4.size());
      assertEquals(10, vector4.capacity());
      assertEquals("[]", vector4.toString());
      assertTrue(vector4.isEmpty());
      assertTrue(vector4.equals((Object)vector0));
      assertTrue(vector4.equals((Object)vector1));
      assertTrue(vector4.equals((Object)vector2));
      assertTrue(vector4.equals((Object)vector3));
      
      vectorArray0[5] = vector4;
      Vector<StringTokenizer> vector5 = new Vector<StringTokenizer>();
      assertNotNull(vector5);
      assertEquals(10, vector5.capacity());
      assertEquals(0, vector5.size());
      assertTrue(vector5.isEmpty());
      assertEquals("[]", vector5.toString());
      assertTrue(vector5.equals((Object)vector2));
      assertTrue(vector5.equals((Object)vector1));
      assertTrue(vector5.equals((Object)vector3));
      assertTrue(vector5.equals((Object)vector4));
      assertTrue(vector5.equals((Object)vector0));
      
      vectorArray0[6] = vector5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(vectorArray0, 61, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      assertNotNull(predicateTransformer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      DataTruncation dataTruncation0 = new DataTruncation(7, false, false, 7, 7, sQLWarning0);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      Boolean boolean1 = predicateTransformer0.transform(dataTruncation0);
      assertNotNull(boolean1);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      PredicateTransformer<Object> predicateTransformer1 = new PredicateTransformer<Object>(uniquePredicate0);
      assertNotNull(predicateTransformer1);
      assertFalse(predicateTransformer1.equals((Object)predicateTransformer0));
      
      Boolean boolean2 = predicateTransformer0.transform((Object) null);
      assertNotNull(boolean2);
      assertNotSame(predicateTransformer0, predicateTransformer1);
      assertFalse(predicateTransformer0.equals((Object)predicateTransformer1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      OrderedMapIterator<IIOMetadataNode, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      assertNotNull(iterator0);
      
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = 3;
      intArray0[3] = 12;
      intArray0[4] = 1073741824;
      intArray0[5] = 12;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      assertEquals(6, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {12, 12, 3, 12, 1073741824, 12}, intArray0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.AllPredicate", "org.apache.commons.collections4.functors.AllPredicate", 12, batchUpdateException0);
      assertEquals(6, intArray0.length);
      assertNotNull(sQLRecoverableException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.getMessage());
      assertEquals(12, sQLRecoverableException0.getErrorCode());
      assertArrayEquals(new int[] {12, 12, 3, 12, 1073741824, 12}, intArray0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLRecoverableException0);
      assertEquals(6, intArray0.length);
      assertNotNull(batchUpdateException1);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.getMessage());
      assertEquals(12, sQLRecoverableException0.getErrorCode());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", batchUpdateException1.toString());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", batchUpdateException1.getMessage());
      assertArrayEquals(new int[] {12, 12, 3, 12, 1073741824, 12}, intArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.AllPredicate", "", batchUpdateException1);
      assertEquals(6, intArray0.length);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.getMessage());
      assertEquals(12, sQLRecoverableException0.getErrorCode());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", batchUpdateException1.toString());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", batchUpdateException1.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.collections4.functors.AllPredicate", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLInvalidAuthorizationSpecException0.getMessage());
      assertArrayEquals(new int[] {12, 12, 3, 12, 1073741824, 12}, intArray0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")gvfF>~yGGU");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      batchUpdateException0.printStackTrace((PrintWriter) mockPrintWriter1);
      assertEquals(6, intArray0.length);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {12, 12, 3, 12, 1073741824, 12}, intArray0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.AllPredicate");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.AllPredicate", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = hashtable0.put(sQLInvalidAuthorizationSpecException0, sQLTransactionRollbackException0);
      assertEquals(6, intArray0.length);
      assertNull(sQLTransactionRollbackException1);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.AllPredicate", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLRecoverableException0.getMessage());
      assertEquals(12, sQLRecoverableException0.getErrorCode());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", batchUpdateException1.toString());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.AllPredicate", batchUpdateException1.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.collections4.functors.AllPredicate", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AllPredicate", sQLInvalidAuthorizationSpecException0.getMessage());
      assertArrayEquals(new int[] {12, 12, 3, 12, 1073741824, 12}, intArray0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      ListIterator<Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(hashtable0);
      assertNotNull(listIterator0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      OrderedMapIterator<String, HashSet<SQLIntegrityConstraintViolationException>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>) orderedMapIterator1, (Iterator<? extends String>) orderedMapIterator1);
      assertNotNull(iterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<DataTruncation, String> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator2.hasPrevious());
      
      OrderedMapIterator<DataTruncation, String> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends String>) orderedMapIterator2);
      assertNotNull(orderedMapIterator3);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator3.hasPrevious());
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator2));
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, String>(orderedMapIterator3);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator3.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator3));
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator2));
      
      MapIterator<DataTruncation, String> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, String>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator3.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator3));
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator2));
      
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(mapIterator0);
      assertNotNull(listIteratorWrapper0);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator3.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator3));
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator2));
      
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) null, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertNotNull(predicate0);
      
      Iterator<DataTruncation> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) listIteratorWrapper0, (Predicate<? super DataTruncation>) predicate0);
      assertNotNull(iterator2);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator3.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator3));
      assertFalse(orderedMapIterator3.equals((Object)orderedMapIterator2));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", "", sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException("Predicate must not be null", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("/9PFXDiZplN", "Ttoyv1Id#O1{&N", 61);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("NodeList must not be null", "", 93, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("|aQC7Q|Rj0", "org.apache.commons.collections4.set.ListOrderedSet", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0, 61);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(list0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(linkedList0);
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(hashSet0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) null, (-1275L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<SQLIntegrityConstraintViolationException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, 997L);
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) skippingIterator0);
      String string0 = "org.apache.commons.collections4.iterators.AbstractEmptyMapIterator";
      String string1 = "";
      Hashtable<String, ClientInfoStatus> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<String, ClientInfoStatus>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      Integer integer1 = new Integer(0);
      stack0.add(integer1);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) stack0);
      assertNotNull(resettableIterator0);
  }
}
