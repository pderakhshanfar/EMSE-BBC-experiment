/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:54:24 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ftoeB", "Qiz{fY,?Z<)dD&yAR", 0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLInvalidAuthorizationSpecException, ? extends SQLTransientException>) orderedMapIterator0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLTransientConnectionException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      MapIterator<SQLTransientConnectionException, PriorityQueue<ServiceLoader>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) mapIterator0;
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 1);
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsFalsePredicate0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("GPvtU1`K6vFc");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<String, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super String>) nullIsExceptionPredicate0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
      String string0 = IteratorUtils.toString((Iterator<String>) resettableListIterator0, (Transformer<? super String, String>) transformer1, "Collection must not be null", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("A`@/j*3p&[ wA");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer stringTokenizer0 = new StringTokenizer("suffix may not be null", "gK9,]{/,8(1\"B", false);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableIterator0, class0);
      assertEquals(1, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedMapIterator0, class0);
      assertEquals(0, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Enumeration must not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("j'|Ioy1>@@", "oc,/yY2i", sQLTimeoutException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) linkedList0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1084, false, false, 1084, 1084);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      dataTruncationArray0[0] = dataTruncation0;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      DataTruncation dataTruncation1 = IteratorUtils.get((Iterator<DataTruncation>) resettableListIterator0, 1759);
      assertEquals(0, dataTruncation1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) orderedIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(arrayList0);
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) loopingListIterator0, 608L, 2783L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MapIterator<Locale.FilteringMode, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (long) 0);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLException>[] iteratorArray0 = (Iterator<SQLException>[]) Array.newInstance(Iterator.class, 0);
      ResettableListIterator<Iterator<SQLException>> resettableListIterator0 = IteratorUtils.arrayListIterator(iteratorArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Gg");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<SQLClientInfoException>, SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("d\"l\"H>zU[UDbI=Aa");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "r", "", "r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'd\"l\"H>zU[UDbI=Aa' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "~zp'", 2, intArray0, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(batchUpdateException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1610), (-889), 0, (-1038), 17).when(comparator0).compare(any(java.sql.DataTruncation.class) , any(java.sql.DataTruncation.class));
      Predicate<DataTruncation> predicate0 = ComparatorPredicate.comparatorPredicate(dataTruncationArray0[1], comparator0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      // Undeclared exception!
      IteratorUtils.get((Iterator<DataTruncation>) listIterator0, 100);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashMap<SQLWarning, ArrayList>>) null, 4724);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("yO/)WKp");
      DataTruncation dataTruncation0 = new DataTruncation(88, false, false, 88, 1, sQLTimeoutException0);
      int[] intArray0 = new int[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(dataTruncation0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("q}*uk~9cbj$5NsC", "yO/)WKp", 1, intArray0, sQLSyntaxErrorException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Predicate<BatchUpdateException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InputStream>[] iteratorArray0 = (Iterator<InputStream>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InputStream>) comparator0, (Iterator<? extends InputStream>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) zippingIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, (-161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-1004), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 2552);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 91, 230);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      PredicateTransformer<SQLNonTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientConnectionException>(predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("iqMm", sQLDataException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, 1594);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Class<Integer>[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0, (-962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(classArray0, 5, 96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, (-1388));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayDeque<SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "Enumeration must not be null", 9, 125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("!", classArray0, classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(allPredicate0, transformerClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) singletonListIterator0, (Closure<? super BatchUpdateException>) ifClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(") greater than the size of the ");
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) objectArrayListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, ") greater than the size of the ", "", "^p3Y}bDGi#t:imw");
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(") greater than the size of the ) greater than the size of the ) greater than the size of the ) greater than the size of the ) greater than the size of the ) greater than the size of the ) greater than the size of the ) greater than the size of the ) greater than the size of the ^p3Y}bDGi#t:imw", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedIterator<PriorityQueue<BatchUpdateException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<BatchUpdateException>>) orderedIterator0, (Transformer<? super PriorityQueue<BatchUpdateException>, String>) null, "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer(100);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super Integer>) anyPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator((SQLFeatureNotSupportedException) null);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, 6807);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, 2396L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("suffix may not be null");
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, String>) transformer0, "y.bTQ/,", "", "=9o'U07S");
      assertEquals("=9o'U07S", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("List must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "", "List must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableListIterator<InputStream> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InputStream>) resettableListIterator0, (Transformer<? super InputStream, String>) transformer0, "s5x5 `F2", (String) null, "Enumeration must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("d\"l\"H>zU[UDbI=Aa");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, (String) null, "org.apache.commons.collections4.iterators.ReverseListIterator", "- 4L?HHF^~_<]{e|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<SQLSyntaxErrorException, IIOMetadataNode> hashMap0 = new HashMap<SQLSyntaxErrorException, IIOMetadataNode>();
      EntrySetMapIterator<SQLSyntaxErrorException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, IIOMetadataNode>(hashMap0);
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) abstractMapIteratorDecorator0, (Transformer<? super SQLSyntaxErrorException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      int int0 = IteratorUtils.size(objectArrayIterator0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      DataTruncation dataTruncation0 = IteratorUtils.get((Iterator<DataTruncation>) resettableListIterator0, 31);
      assertNull(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ServiceLoader<HashSet>>) null, (Predicate<? super ServiceLoader<HashSet>>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Integer>) objectArrayIterator0, (Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("5dVD");
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTimeoutException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("3{", ",]", 7);
      DataTruncation dataTruncation0 = new DataTruncation((-2263), true, true, 12, (-2263), sQLTimeoutException0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(dataTruncation0, true);
      SQLWarning sQLWarning0 = new SQLWarning("3{", ",]", 7, sQLTimeoutException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLWarning0);
      IteratorUtils.find((Iterator<SQLWarning>) singletonIterator0, (Predicate<? super SQLWarning>) equalPredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SQLWarning sQLWarning0 = IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      assertNull(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedMapIterator<SQLException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0, false);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<EnumSet<Locale.FilteringMode>>) singletonIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) uniquePredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, closure0, closure0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) singletonListIterator0, (Iterator<? extends SQLTransientException>) singletonListIterator0);
      IteratorUtils.apply((Iterator<SQLTransientException>) zippingIterator0, (Closure<? super SQLTransientException>) ifClosure0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>(0);
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(transformerPredicate0, closure0);
      IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) resettableIterator0, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 4);
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<DataTruncation>>) objectArrayIterator0, (Closure<? super PriorityQueue<DataTruncation>>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, ArrayList<SQLException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, ArrayList<SQLException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, ArrayList<SQLException>>(orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0, (-1276));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MapIterator<StringTokenizer, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) mapIterator0, (Class<StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterable<EnumSet<Locale.FilteringMode>> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "List must not be null");
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null, (Collection<? super IIOMetadataNode>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) priorityQueue0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0, 0, 1);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) objectArrayIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) stack0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("", classArray0, classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) null, (Predicate<? super Object>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ListIterator<Predicate<Object>> listIterator0 = IteratorUtils.singletonListIterator((Predicate<Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) listIterator0, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<SQLException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate0);
      Hashtable<SQLTimeoutException, ArrayList<BatchUpdateException>> hashtable0 = new Hashtable<SQLTimeoutException, ArrayList<BatchUpdateException>>();
      EntrySetMapIterator<SQLTimeoutException, ArrayList<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, ArrayList<BatchUpdateException>>(hashtable0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Hashtable<SQLTimeoutException, ArrayList<BatchUpdateException>> hashtable0 = new Hashtable<SQLTimeoutException, ArrayList<BatchUpdateException>>();
      EntrySetMapIterator<SQLTimeoutException, ArrayList<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, ArrayList<BatchUpdateException>>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) objectArrayListIterator0, (Transformer<? super SQLException, ? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends SQLTransientConnectionException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("{5G~t4/dj4zvw#l");
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Transformer<? super BatchUpdateException, ? extends SQLTransientConnectionException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.arrayIterator(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator1);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableIterator0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Object>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.LanguageRange>) null, (Iterator<? extends Locale.LanguageRange>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MapIterator<ArrayDeque<ObjectInputStream>, Locale.FilteringMode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<ArrayDeque<ObjectInputStream>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<ArrayDeque<ObjectInputStream>>) mapIterator0, (long) 3);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0, 0, 1);
      Transformer<Properties, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) objectArrayIterator0, (Transformer<? super Properties, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1), 96);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 3620);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedHashSet<ClientInfoStatus> linkedHashSet0 = new LinkedHashSet<ClientInfoStatus>();
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>(linkedHashSet0);
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(linkedList0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>) reverseListIterator0, (Iterator<? extends ClientInfoStatus>) reverseListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, 6812);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTransactionRollbackException, Object> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, Object>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InputStream[]) null, 101, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException("o^hq>", sQLIntegrityConstraintViolationException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) listIterator0);
      assertFalse(listIterator0.hasNext());
      assertEquals("[java.sql.SQLDataException: o^hq>]", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MapIterator<Locale.FilteringMode, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (-1357L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0, 1, 1);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("q");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 3, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2);
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Integer>) objectArrayIterator0, (Object) integer0);
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.SwitchTransformer", "transformer may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, (-2106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedIterator<Iterator<SQLClientInfoException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Iterator<SQLClientInfoException>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Iterator<SQLClientInfoException>>) null, (Iterator<? extends Iterator<SQLClientInfoException>>) orderedIterator0, (Iterator<? extends Iterator<SQLClientInfoException>>) orderedIterator0);
      assertNotNull(iterator0);
  }
}
