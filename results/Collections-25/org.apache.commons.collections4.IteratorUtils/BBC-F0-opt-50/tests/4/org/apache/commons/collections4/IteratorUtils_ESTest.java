/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 01:21:19 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hashtable<SQLTransientConnectionException, SQLDataException> hashtable0 = new Hashtable<SQLTransientConnectionException, SQLDataException>();
      EntrySetMapIterator<SQLTransientConnectionException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, SQLDataException>(hashtable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("clone", "Max parameter must not be negative.");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" y+8E>wU4}Vk(VZa", "H$K3f", sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@F3S1z-", "org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("@F3S1z-", "H$K3f", 2, sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException(" y+8E>wU4}Vk(VZa", "");
      hashtable0.put(sQLTransientConnectionException1, sQLDataException0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator0, (Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator0, (Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      arrayList0.add((SQLInvalidAuthorizationSpecException) null);
      arrayList0.add((SQLInvalidAuthorizationSpecException) null);
      IteratorUtils.singletonIterator(arrayList0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
      Comparator<DataTruncation> comparator0 = null;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("-eUf");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
      Iterator<TreeSet<SQLIntegrityConstraintViolationException>> iterator0 = null;
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1543;
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) null, 1543);
      String string0 = "Xx";
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      vector0.add((SQLNonTransientException) null);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(vector0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) loopingListIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      String string0 = "r5=,";
      String string1 = "%,f";
      SQLTransientException sQLTransientException0 = new SQLTransientException("r5=,", "%,f");
      String string2 = "\\kz$seMg\"Olj";
      MockFile mockFile0 = new MockFile("kz$seMg\"Olj");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0, string2);
      Locale locale0 = null;
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, Properties>(orderedMapIterator0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) zippingIterator0, class0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = null;
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) linkedList0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, 1648L);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableIterator0, 1975);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(list0);
      Enumeration<SQLDataException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration1, (Collection<? super SQLDataException>) vector0);
      IteratorUtils.arrayIterator((Object) null, 0);
      IteratorUtils.size(orderedIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ServiceLoader<SQLRecoverableException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLRecoverableException>> singletonIterator0 = null;
      try {
        singletonIterator0 = new SingletonIterator<ServiceLoader<SQLRecoverableException>>(serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Closure must not be null", sQLDataException0);
      IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      int int0 = 0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Iterator remove() can only be called once after next()", "Iterator remove() can only be called once after next()", 0, hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Closure must not be null", (String) null, map0, sQLNonTransientConnectionException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, (String) null, map0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("Iterator remove() can only be called once after next()", "Closure must not be null", hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, (-2223), 0);
      IteratorUtils.get((Iterator<SQLClientInfoException>) resettableIterator0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) singletonListIterator0);
      IteratorUtils.size(listIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2554;
      intArray0[1] = 702;
      intArray0[2] = 3424;
      intArray0[3] = (-2006);
      intArray0[4] = 0;
      intArray0[5] = 76;
      intArray0[6] = 0;
      intArray0[7] = 0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("Cg3(");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Collection must not be null", "Cg3(", intArray0, sQLTransientException0);
      IteratorUtils.arrayListIterator((Object) batchUpdateException0, 76, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      linkedHashSet0.iterator();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedHashSet0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2300);
      intArray0[3] = 91;
      intArray0[4] = (-3850);
      intArray0[5] = 16;
      intArray0[6] = (-2708);
      intArray0[7] = (-1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Q4?,TN 9w?YY", "Q4?,TN 9w?YY", intArray0, sQLTimeoutException0);
      IteratorUtils.arrayIterator((Object) batchUpdateException0, (-2708));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      singletonListIterator0.reset();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) singletonListIterator0);
      IteratorUtils.size(listIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 10, 10);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = 3468;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 3468);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3468
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\" ^KD?nGGyV-(laZ");
      sQLTransactionRollbackException0.printStackTrace();
      Transformer<Object, SQLTimeoutException> transformer0 = InvokerTransformer.invokerTransformer("6+2", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.objectGraphIterator((SQLTransientException) sQLTransactionRollbackException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0);
      Stack<SQLNonTransientConnectionException>[] stackArray0 = (Stack<SQLNonTransientConnectionException>[]) Array.newInstance(Stack.class, 5);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[0] = stack0;
      Stack<SQLNonTransientConnectionException> stack1 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[1] = stack1;
      Stack<SQLNonTransientConnectionException> stack2 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[2] = stack2;
      Stack<SQLNonTransientConnectionException> stack3 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[3] = stack3;
      Stack<SQLNonTransientConnectionException> stack4 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[4] = stack4;
      ObjectArrayListIterator<Stack<SQLNonTransientConnectionException>> objectArrayListIterator0 = new ObjectArrayListIterator<Stack<SQLNonTransientConnectionException>>(stackArray0, 0, 669);
      IteratorUtils.unmodifiableIterator((Iterator<Stack<SQLNonTransientConnectionException>>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 8);
      MapIterator<StringTokenizer, HashSet<ArrayDeque>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<StringTokenizer>) mapIterator0;
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      StringTokenizer stringTokenizer0 = new StringTokenizer("kl@.+$]^Fd", "fQ;&KTi+SL'S)a9^");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("fQ;&KTi+SL'S)a9^", "kl@.+$]^Fd", false);
      stringTokenizerArray0[2] = stringTokenizer2;
      int int0 = 903;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 903, 903);
      iteratorArray0[1] = (Iterator<StringTokenizer>) resettableListIterator0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator((Object) locale_Category0);
      iteratorArray0[2] = (Iterator<StringTokenizer>) resettableIterator0;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      int[] intArray0 = new int[8];
      intArray0[0] = (-417);
      intArray0[1] = 0;
      intArray0[2] = (-142);
      intArray0[3] = 100;
      intArray0[4] = 100;
      intArray0[5] = 2394;
      intArray0[6] = 401;
      intArray0[7] = 1;
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 2235, 100);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", (-142), dataTruncation0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("d7~dr-XU%abN>Tr!lz{", intArray0, sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("d7~dr-XU%abN>Tr!lz{", "", 0, sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("v", "", 2235, intArray0, sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(";R6bHeQ:G,|l{3", "", 1, batchUpdateException1);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, (-2035), 0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException>(orderedMapIterator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 3060;
      intArray0[2] = 1461;
      intArray0[3] = 100;
      intArray0[4] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("No element at index ", (String) null, sQLDataException0);
      IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "7_", (-1078));
      vector0.add(sQLTransientException0);
      sQLTransientException0.spliterator();
      vector0.add(sQLTransientException0);
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientException>) vector0);
      IteratorUtils.toList((Iterator<? extends SQLException>) resettableListIterator0, (-1908));
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = null;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLClientInfoException1);
      IteratorUtils.arrayListIterator((Object) sQLDataException0, 512, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      // Undeclared exception!
      try { 
        TruePredicate.truePredicate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      IteratorUtils.isEmpty(orderedIterator0);
      int int0 = 927;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "?=M.WdZpDtp7ltkfQN", 927);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLSyntaxErrorException0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) null, "", "pWzy*OD", "d4C[6J");
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) treeSet0);
      Iterator<Locale.Category> iterator0 = null;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator must not be null.
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = null;
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) null, "zY}eN*1wiNF(V", "", "zY}eN*1wiNF(V");
      Collection<IIOMetadataNode> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-289);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1\"~lnsz*O0qwc);", "\"]3", (-289));
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLSyntaxErrorException0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "org.apache.commons.collections4.iterators.AbstractEmptyIterator", "1\"~lnsz*O0qwc);", "pWzy*OD");
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("HjnW24rQ0_u");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLFeatureNotSupportedException0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) identityPredicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) identityPredicate0, (Predicate<? super Object>) orPredicate0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer1 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap1);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(identityPredicate0);
      IfTransformer<SQLSyntaxErrorException, String> ifTransformer0 = new IfTransformer<SQLSyntaxErrorException, String>(nullIsTruePredicate0, transformer1, transformer1);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) ifTransformer0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("bG", sQLSyntaxErrorException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.arrayListIterator((Object) predicate1, 2485);
      Iterator<BatchUpdateException> iterator0 = null;
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      int int0 = 9;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      SQLWarning sQLWarning0 = new SQLWarning("", "Predicate must not be null", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Predicate must not be null", "Predicate must not be null", 0, longArray0, sQLWarning0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("ConstantTransformer", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("Predicate must not be null", "iterator", 2, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0, 16);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Integer integer0 = new Integer(100);
      IteratorUtils.arrayListIterator((Object) integer0, 100);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IteratorUtils.toString((Iterator<PriorityQueue<SQLNonTransientException>>) null);
      ArrayList<SQLClientInfoException>[] arrayListArray0 = (ArrayList<SQLClientInfoException>[]) Array.newInstance(ArrayList.class, 6);
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLClientInfoException> arrayList1 = new ArrayList<SQLClientInfoException>();
      arrayListArray0[1] = arrayList1;
      int int0 = (-513);
      ArrayList<SQLClientInfoException> arrayList2 = new ArrayList<SQLClientInfoException>((-513));
      arrayListArray0[2] = arrayList2;
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MapIterator<SQLNonTransientException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Iterator must not be null", "LE>/3Gv1Vpp$^y[KD");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLNonTransientException0, false);
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLException>) singletonIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "LE>/3Gv1Vpp$^y[KD", (-358), sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, (-358));
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) zippingIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = null;
      try {
        comparatorPredicate0 = new ComparatorPredicate<Object>(mapIterator0, comparator0, comparatorPredicate_Criterion0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator1, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) hashSet0);
      Properties properties0 = new Properties();
      IteratorUtils.arrayIterator((Object) properties0, 4081);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Properties properties0 = new Properties();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      properties0.put(iIOMetadataNode0, sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("'C}vlk", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("$(", "D.n:a|@_i;8", (-303));
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 1);
      IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException>(orderedMapIterator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      String string0 = "No element at index ";
      int[] intArray0 = new int[5];
      int int0 = 10;
      intArray0[0] = 10;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("V46", "No element at index ");
      String string1 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "", 5293);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException2;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, (-1235));
      IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string1, int0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      int int1 = (-3827);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (-560L));
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = null;
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      int int0 = 1923;
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(1923, false, false, 1923, 1923, sQLTransientException0);
      dataTruncation0.getNextWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()", sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      IfTransformer<SQLSyntaxErrorException, String> ifTransformer0 = new IfTransformer<SQLSyntaxErrorException, String>(predicate1, transformer0, transformer0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) objectArrayListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) ifTransformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[null]", "ListIterator must not be null", sQLInvalidAuthorizationSpecException0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) null);
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) iterator0);
      LinkedList<SQLDataException>[] linkedListArray0 = (LinkedList<SQLDataException>[]) Array.newInstance(LinkedList.class, 0);
      IteratorUtils.arrayIterator(linkedListArray0);
      IteratorUtils.arrayIterator((Object) null);
      String string0 = "jhm6W>oy~-tsu<lV\\2F";
      String string1 = "org.apache.commons.collections4.functors.ComparatorPredicate";
      String string2 = "";
      int int1 = 0;
      SQLTimeoutException sQLTimeoutException0 = null;
      try {
        sQLTimeoutException0 = new SQLTimeoutException(string1, string2, int1, sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1\"~lnsz*O0qwc);", "\"]3", (-289));
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLSyntaxErrorException0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "org.apache.commons.collections4.iterators.AbstractEmptyIterator", "1\"~lnsz*O0qwc);", "pWzy*OD");
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) treeSet0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) predicate0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque5 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque6 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque7 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque8 = new ArrayDeque<StringTokenizer>();
      int int0 = (-1920);
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 2);
      arrayDequeArray0[0] = arrayDeque7;
      int int1 = 4274;
      IteratorUtils.arrayIterator(arrayDequeArray0, (-1920), 4274);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IteratorUtils.arrayIterator((SQLClientInfoException[]) null);
      int int0 = (-1360);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("ExceptionTransformer invoked", "7S=hZ9i~$p*AR#kb.", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("7S=hZ9i~$p*AR#kb.");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLSyntaxErrorException2);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) singletonListIterator0, (Iterator<? extends SQLRecoverableException>) singletonListIterator0, (Iterator<? extends SQLRecoverableException>) singletonListIterator0);
      LinkedList<SQLDataException>[] linkedListArray0 = (LinkedList<SQLDataException>[]) Array.newInstance(LinkedList.class, 0);
      IteratorUtils.arrayIterator(linkedListArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 1461;
      intArray0[2] = 10;
      intArray0[3] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("6m<nJKX~", "su\"$~O[)[y", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, batchUpdateException0);
      sQLDataException0.addSuppressed(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "7_", sQLDataException0);
      IteratorUtils.arrayIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IteratorUtils.nodeListIterator((Node) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException>(orderedMapIterator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("No element at index ", "No element at index ", (-1078));
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      sQLTransientException0.getSuppressed();
      vector0.add(sQLTransientException0);
      sQLTransientException0.spliterator();
      vector0.add(sQLTransientException0);
      IteratorUtils.loopingListIterator((List<SQLTransientException>) vector0);
      IteratorUtils.toList((Iterator<? extends SQLException>) abstractOrderedMapIteratorDecorator0, 4442);
      IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(vector0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) loopingListIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("r5=,", ";w={R.kF$gf9>Z|G", (-1078));
      sQLTransientConnectionException1.spliterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      IteratorUtils.arrayIterator((Object) properties1, (-1078));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(1923, true, true, 1923, 1923, sQLTransientException0);
      dataTruncation0.getNextWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()", sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.matchesAll((Iterator<Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) predicate1);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque5 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque6 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque7 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 4);
      arrayDequeArray0[0] = arrayDeque1;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque2;
      arrayDequeArray0[3] = arrayDeque2;
      StringTokenizer stringTokenizer0 = new StringTokenizer("c.*+qv*AZk", (String) null);
      arrayDeque1.push(stringTokenizer0);
      IteratorUtils.arrayIterator(arrayDequeArray0, (-1920), (-1650));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("D.n:a|@_i;8", "", 3468);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException3;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 3468);
      IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      IteratorUtils.isEmpty(orderedIterator0);
      OrderedMapIterator<SQLRecoverableException, HashSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, HashSet<Object>>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator((Object) null);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException2;
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue1 = new PriorityQueue<SQLFeatureNotSupportedException>(priorityQueue0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      singletonListIterator0.reset();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) singletonListIterator0);
      IteratorUtils.size(listIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("ExceptionTransformer invoked", "7S=hZ9i~$p*AR#kb.", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      Integer integer0 = new Integer(1);
      IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 1, 63);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.emptyIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("H}!3zet", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("C~}KeF_e~B\"*54V", "", 2010, (Map<String, ClientInfoStatus>) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLWarning sQLWarning0 = new SQLWarning(mockThrowable0);
      IteratorUtils.getIterator(sQLWarning0);
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(iterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) arrayListIterator0, (Iterator<? extends SQLNonTransientException>) arrayListIterator0);
      Iterator<SQLTimeoutException> iterator1 = null;
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) iterator1);
      EmptyListIterator.emptyListIterator();
      int int0 = (-4083);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("D.n:a|@_i;8", "", 3468);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0, (Equator<Object>) defaultEquator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, false);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) whileClosure0, true);
      Closure<SQLTimeoutException> closure2 = IfClosure.ifClosure((Predicate<? super SQLTimeoutException>) predicate0, (Closure<? super SQLTimeoutException>) closure1);
      ForClosure<SQLTimeoutException> forClosure0 = new ForClosure<SQLTimeoutException>(3468, closure2);
      Closure<SQLTimeoutException>[] closureArray0 = (Closure<SQLTimeoutException>[]) Array.newInstance(Closure.class, 0);
      IteratorUtils.arrayIterator(closureArray0, 411);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLFeatureNotSupportedException0);
      Object object0 = IteratorUtils.get((Iterator<Object>) singletonIterator0, 1667);
      // Undeclared exception!
      try { 
        properties0.put(object0, resettableIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1666
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(1923, false, false, 1923, 1923, sQLTransientException0);
      dataTruncation0.getNextWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()", sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Iterator setValue() can only be called after next() and before remove()", "j.fUp<)1pa");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "", 1923);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 1923);
      IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", (String) null, 3468);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException3;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(1923, false, false, 1923, 1923, sQLTransientException0);
      dataTruncation0.getNextWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()", sQLInvalidAuthorizationSpecException0);
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      IfTransformer<SQLSyntaxErrorException, String> ifTransformer0 = new IfTransformer<SQLSyntaxErrorException, String>(predicate1, transformer0, transformer0);
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) objectArrayListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) ifTransformer0);
      String string1 = "ListIterator must not be null";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string1, sQLInvalidAuthorizationSpecException0);
      Transformer<Object, SQLRecoverableException> transformer1 = null;
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) iterator0);
      LinkedList<SQLDataException>[] linkedListArray0 = (LinkedList<SQLDataException>[]) Array.newInstance(LinkedList.class, 0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLSyntaxErrorException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) singletonIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      String string0 = ">-\\uV!]a>&7#]j9\\&>D";
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(string0, "");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "", sQLSyntaxErrorException1);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException2;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      Integer integer0 = new Integer((-1));
      IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException2, 63, 3468);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("l", "");
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue1 = new PriorityQueue<SQLFeatureNotSupportedException>(priorityQueue0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator1 = null;
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.toArray(iterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-571));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ap#6EBeJ3'ru;H");
      IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, (-571));
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) orderedIterator1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      InvokerTransformer.invokerTransformer("Xhx", (Class<?>[]) null, (Object[]) null);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(orderedIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<DataTruncation> predicate0 = NonePredicate.nonePredicate((Predicate<? super DataTruncation>[]) predicateArray0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) listIteratorWrapper0, (Predicate<? super DataTruncation>) predicate0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) listIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) listIterator1, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.arrayListIterator((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.emptyOrderedMapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLNonTransientConnectionException, SQLWarning> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLWarning>) mapIterator1);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator2);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("FdA}");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("suffix may not be null", "", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("suffix may not be null", "", 2019);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("?8_w>52CH9_(B,", "FdA}", 2019);
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("yx2pzID.e2|^F#-W", "w01l@{MK*9Wn1n");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("?8_w>52CH9_(B,", "yx2pzID.e2|^F#-W", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException8;
      SQLNonTransientConnectionException sQLNonTransientConnectionException9 = new SQLNonTransientConnectionException("VZ*-2", "w01l@{MK*9Wn1n", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException9;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0, (long) 2019, 0L);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(1923, false, false, 1923, 1923, sQLTransientException0);
      dataTruncation0.getNextWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()", sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-704));
      IteratorUtils.arrayListIterator((Object) predicate0, 1666);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("l", "");
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue1 = new PriorityQueue<SQLFeatureNotSupportedException>(priorityQueue0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException>(orderedMapIterator1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.getSuppressed();
      Properties properties0 = new Properties();
      LinkedList<SQLDataException>[] linkedListArray0 = (LinkedList<SQLDataException>[]) Array.newInstance(LinkedList.class, 0);
      IteratorUtils.arrayIterator(linkedListArray0);
      Integer integer0 = new Integer((-2689));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      ListIterator<Integer> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) null);
      int int0 = 1923;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) listIterator1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) null);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-963);
      Integer integer0 = new Integer((-963));
      MapIterator<SQLRecoverableException, HashSet<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ResettableListIterator<Vector<SQLDataException>> resettableListIterator0 = IteratorUtils.arrayListIterator((Object) integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Vector<SQLDataException>>) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("ExceptionTransformer invoked", "7S=hZ9i~$p*AR#kb.", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("7S=hZ9i~$p*AR#kb.", "L?Xroypvy?mwRT#");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("ExceptionTransformer invoked", "");
      Factory<SQLNonTransientConnectionException> factory0 = ConstantFactory.constantFactory(sQLNonTransientConnectionException1);
      FactoryTransformer<Object, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLNonTransientConnectionException>(factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLNonTransientConnectionException>) factoryTransformer0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLException>(orderedMapIterator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) treeSet0);
      Iterator<Locale.Category> iterator0 = null;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) null, 2764L, 0L);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) boundedIterator0, (Predicate<? super Locale.Category>) predicate0);
      ArrayDeque<StringTokenizer> arrayDeque0 = null;
      try {
        arrayDeque0 = new ArrayDeque<StringTokenizer>();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(1923, false, false, 1923, 1923, sQLTransientException0);
      dataTruncation0.getNextWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()", sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      IfTransformer<SQLSyntaxErrorException, String> ifTransformer0 = new IfTransformer<SQLSyntaxErrorException, String>(predicate1, transformer0, transformer0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
      String string0 = "zlLwLTiqlj#*r";
      String string1 = "suffix may not be null";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string1);
      String string2 = "h++[MT|OQK";
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(string1, string2);
      // Undeclared exception!
      try { 
        ConstantFactory.constantFactory(sQLNonTransientConnectionException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(1923, false, false, 1923, 1923, sQLTransientException0);
      dataTruncation0.getNextWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()", sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayListIterator0, 1923);
      IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator1, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) hashSet0);
      IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator1, 4442);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.singletonListIterator((Vector<IIOMetadataNode>) stack0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(orderedIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-704));
      IteratorUtils.arrayListIterator((Object) null, (-704));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLWarning>) mapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("FdA}");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("suffix may not be null", "", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("suffix may not be null", "", 2019);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("?8_w>52CH9_(B,", "FdA}", 2019);
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("yx2pzID.e2|^F#-W", "w01l@{MK*9Wn1n");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("?8_w>52CH9_(B,", "yx2pzID.e2|^F#-W", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException9 = new SQLNonTransientConnectionException("VZ*-2", "w01l@{MK*9Wn1n", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException9;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0, (long) 2019, 0L);
      IteratorUtils.unmodifiableListIterator((ListIterator<Transformer<SQLNonTransientConnectionException, EnumSet>>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      singletonListIterator0.reset();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) singletonListIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) listIterator0, (-1946L));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLWarning>) mapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("FdA}");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("suffix may not be null", "", sQLInvalidAuthorizationSpecException0);
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) null);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) hashSet0);
      int int0 = 4442;
      IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, int0);
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Properties properties0 = new Properties();
      OrderedMapIterator<SQLTransientConnectionException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, Properties>(orderedMapIterator0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) zippingIterator0, class0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Properties properties0 = new Properties();
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException>(orderedMapIterator1);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException>) abstractMapIteratorDecorator0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator1, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator1, (Iterator<? extends SQLTransactionRollbackException>) zippingIterator0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) vector0);
      Properties properties1 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.arrayIterator((Object) iIOMetadataNode0, (-325));
  }
}
