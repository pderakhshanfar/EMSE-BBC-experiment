/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 09:10:30 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'oIt$.iH ?b");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      MockThrowable mockThrowable0 = new MockThrowable("'oIt$.iH ?b");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("|j.2WKN94.@LK4|", "", (-1635), mockThrowable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'oIt$.iH ?b", "'oIt$.iH ?b", sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null, (String) null, (-1635));
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException((Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("IS;[XM", sQLIntegrityConstraintViolationException0);
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      FactoryTransformer<SQLException, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLTimeoutException>(factory0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>((Predicate<? super SQLException>) null, (Predicate<? super SQLException>) null);
      Predicate<SQLException> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super SQLException, ? extends SQLException>) factoryTransformer0, (Predicate<? super SQLException>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      vector0.add((SQLException) sQLClientInfoException0);
      LoopingListIterator<SQLException> loopingListIterator0 = new LoopingListIterator<SQLException>(vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      Iterator<Iterator<SQLClientInfoException>>[] iteratorArray0 = (Iterator<Iterator<SQLClientInfoException>>[]) Array.newInstance(Iterator.class, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray1 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray1[0] = iterator0;
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ListIterator<SQLClientInfoException> listIterator0 = arrayList0.listIterator();
      iteratorArray1[1] = (Iterator<SQLClientInfoException>) listIterator0;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (-751), (Map<String, ClientInfoStatus>) null, sQLTransactionRollbackException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      iteratorArray1[2] = (Iterator<SQLClientInfoException>) objectArrayIterator0;
      int int0 = (-2516);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iteratorArray1, 1, (-2516));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) arrayList0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("*C2C)");
      arrayList0.add(stringTokenizer0);
      Predicate<StringTokenizer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super StringTokenizer>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 18);
      Integer integer0 = new Integer(1100);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 3);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray0[1] = (Object) class2;
      objectArray0[2] = (Object) "Predicate must not be null";
      objectArray0[3] = (Object) sQLIntegrityConstraintViolationException1;
      InvokerTransformer<Integer, Integer> invokerTransformer0 = new InvokerTransformer<Integer, Integer>("Predicate must not be null", classArray0, objectArray0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Integer, String>) transformer0, "Predicate must not be null", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Predicate must not be null' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Collection must not be null");
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 1);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      InvokerTransformer<IIOMetadataNode, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, IIOMetadataNode>("Collection must not be null", classArray0, classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Collection must not be null' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ";lI%wZ";
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator(";lI%wZ");
      ListIterator<Object> listIterator1 = IteratorUtils.toListIterator((Iterator<?>) listIterator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(notPredicate0, notPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Object>) listIterator1, (Predicate<? super Object>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 1077);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<LinkedList<Predicate>>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      loopingIterator0.next();
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 1389);
      // Undeclared exception!
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(22);
      stack0.add(integer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) stack0);
      int int0 = 9;
      Integer integer1 = new Integer(9);
      stack0.add(integer1);
      int int1 = 6;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0, 6);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Class<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<SQLWarning>>) null, (Predicate<? super PriorityQueue<SQLWarning>>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      transformerArray0[2] = transformer0;
      transformerArray0[3] = transformer0;
      transformerArray0[4] = transformer0;
      SwitchTransformer<Object, Boolean> switchTransformer0 = new SwitchTransformer<Object, Boolean>(predicateArray0, transformerArray0, transformer0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(switchTransformer0);
      IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<SQLWarning>>) listIterator0, (Predicate<? super PriorityQueue<SQLWarning>>) transformerPredicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("g^TmO7wWb", "prefix may not be null", sQLTimeoutException0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      InvokerTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>("prefix may not be null", classArray0, transformerArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'prefix may not be null' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("6*xNo<;i!gD", "", 12);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", sQLRecoverableException1);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, class0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      ListIteratorWrapper<SQLIntegrityConstraintViolationException> listIteratorWrapper0 = new ListIteratorWrapper<SQLIntegrityConstraintViolationException>(orderedIterator0);
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) listIteratorWrapper0, class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<?>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Vector<PriorityQueue<SQLWarning>> vector0 = new Vector<PriorityQueue<SQLWarning>>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "6*xNo<;i!gD", 12);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableExceptionArray0[0]);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      List<Object> list0 = IteratorUtils.toList(iterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, class1);
      IteratorUtils.matchesAny((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) instanceofPredicate0);
      OrderedMapIterator<SQLSyntaxErrorException, Closure<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      long long0 = 1L;
      SkippingIterator<SQLSyntaxErrorException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) orderedMapIterator0, long0);
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      DataTruncation dataTruncation0 = new DataTruncation(2787, false, false, 2787, 19);
      dataTruncation0.getNextWarning();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "List must not be null", (Throwable) null);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("@j.})\"8Kk?", "@j.})\"8Kk?", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("@j.})\"8Kk?", "org.apache.commons.collections4.functors.AbstractQuantifierPredicate", 1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("List must not be null", "[]", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("InstantiateFactory: InstantiationException", (String) null);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException((String) null, "@j.})\"8Kk?", 2787, (Throwable) null);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "i1Cy(#5 a", 19, (Throwable) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0, (Equator<Object>) defaultEquator0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) zippingIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException3, (-1399), 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("A3]s/c3[@)a");
      properties0.put(arrayDeque0, iIOMetadataNode0);
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 3572, sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(1359, false, false, (-748), 3572, sQLTransientConnectionException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) singletonListIterator0);
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLExceptionArray0[0] = (SQLException) dataTruncation0;
      sQLExceptionArray0[1] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[2] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[3] = (SQLException) sQLTimeoutException0;
      sQLExceptionArray0[4] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[5] = (SQLException) dataTruncation0;
      sQLExceptionArray0[6] = (SQLException) sQLTimeoutException0;
      sQLExceptionArray0[7] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[8] = (SQLException) dataTruncation0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 25);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      int int0 = 25;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 25);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DeqIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("D?YY4EtT7H> 2Ym1", mockThrowable0);
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      IdentityPredicate<SQLTransientException> identityPredicate0 = new IdentityPredicate<SQLTransientException>(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("WP5qa-Dsy8sB?xg");
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) sQLNonTransientConnectionException0);
      IteratorUtils.find((Iterator<Object>) listIterator0, (Predicate<? super Object>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Iterator<Closure<Object>>[] iteratorArray0 = (Iterator<Closure<Object>>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Closure<Object>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 25);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("pYW^cwAOb]{SiA6S", "pYW^cwAOb]{SiA6S", sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, "pYW^cwAOb]{SiA6S", 25, sQLIntegrityConstraintViolationException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("@`}b+", "pYW^cwAOb]{SiA6S");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) objectArrayIterator0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) arrayList0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) constantTransformer0, "org.apache.commons.collections4.iterators.ReverseListIterator", "pYW^cwAOb]{SiA6S", "org.apache.commons.collections4.iterators.ReverseListIterator");
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque1 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 25, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      Stack<Integer> stack0 = new Stack<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) stack0);
      NullPredicate.nullPredicate();
      int int0 = 20;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 25);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      // Undeclared exception!
      IteratorUtils.apply((Iterator<Stack<HashSet>>) loopingIterator0, (Closure<? super Stack<HashSet>>) closure0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 25);
      Enumeration<String> enumeration0 = null;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<?>) loopingIterator0, 512);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Stack<HashSet>>) orderedIterator0, (Closure<? super Stack<HashSet>>) closure0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toArray(iterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) constantTransformer0, (Predicate<? super Object>) nullIsExceptionPredicate0);
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      hashMap0.put(predicate1, closure0);
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.toArray(iterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(stack0);
      ListIteratorWrapper<Locale.FilteringMode> listIteratorWrapper0 = new ListIteratorWrapper<Locale.FilteringMode>(loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIteratorWrapper0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toArray(iterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) zippingIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null, "K/-PPpvFeHj.c", "K/-PPpvFeHj.c", "0_u^w$M?B58w+9A%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<SQLWarning>>) listIterator0, (Predicate<? super PriorityQueue<SQLWarning>>) instanceofPredicate0);
      MapIterator<SQLSyntaxErrorException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) mapIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) mapIterator0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0, "Kp)4Yj Yt6[PR#=", "H'-k}", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      OrderedMapIterator<SQLTransientConnectionException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "8<uE`", "8<uE`", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException>(orderedMapIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      int[] intArray0 = new int[1];
      intArray0[0] = 976;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, mockThrowable0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      MapIterator<BatchUpdateException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      PriorityQueue<SQLWarning>[] priorityQueueArray0 = (PriorityQueue<SQLWarning>[]) Array.newInstance(PriorityQueue.class, 4);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLWarning> priorityQueue1 = new PriorityQueue<SQLWarning>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLWarning> priorityQueue2 = new PriorityQueue<SQLWarning>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<DataTruncation> priorityQueue3 = new PriorityQueue<DataTruncation>();
      PriorityQueue<SQLWarning> priorityQueue4 = new PriorityQueue<SQLWarning>(priorityQueue3);
      priorityQueueArray0[3] = priorityQueue4;
      ObjectArrayListIterator<PriorityQueue<SQLWarning>> objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<SQLWarning>>(priorityQueueArray0);
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingIterator0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException>(orderedMapIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      int[] intArray0 = new int[1];
      intArray0[0] = 976;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      MapIterator<BatchUpdateException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Object object0 = new Object();
      Boolean boolean0 = predicateTransformer0.transform(object0);
      IteratorUtils.singletonListIterator(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException>(orderedMapIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("F6Kau?!W2F3a", (int[]) null, mockThrowable0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("t97%Rg;TeO]XZ0#", (int[]) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      MapIterator<BatchUpdateException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) mapIterator0, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      vector0.add((Object) iIOMetadataNode0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0);
      IteratorUtils.getIterator(iterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Map.Entry.setValue is not supported", "d");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.getIterator(sQLTimeoutException0);
      IteratorUtils.toString(iterator0);
      Transformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> transformer0 = CloneTransformer.cloneTransformer();
      IteratorUtils.objectGraphIterator((SQLInvalidAuthorizationSpecException) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      TreeSet<Predicate<Object>>[] treeSetArray0 = (TreeSet<Predicate<Object>>[]) Array.newInstance(TreeSet.class, 8);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Predicate<Object>> treeSet1 = new TreeSet<Predicate<Object>>();
      treeSetArray0[1] = treeSet1;
      TreeSet<Predicate<Object>> treeSet2 = new TreeSet<Predicate<Object>>();
      treeSetArray0[2] = treeSet2;
      TreeSet<Predicate<Object>> treeSet3 = new TreeSet<Predicate<Object>>();
      treeSetArray0[3] = treeSet3;
      TreeSet<Predicate<Object>> treeSet4 = new TreeSet<Predicate<Object>>();
      treeSetArray0[4] = treeSet4;
      TreeSet<Predicate<Object>> treeSet5 = new TreeSet<Predicate<Object>>();
      treeSetArray0[5] = treeSet5;
      TreeSet<Predicate<Object>> treeSet6 = new TreeSet<Predicate<Object>>();
      treeSetArray0[6] = treeSet6;
      TreeSet<Predicate<Object>> treeSet7 = new TreeSet<Predicate<Object>>();
      treeSetArray0[7] = treeSet7;
      IteratorUtils.arrayListIterator(treeSetArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLFeatureNotSupportedException>(orderedMapIterator0);
      MapIterator<String, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2341, 2341);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator.defaultEquator();
      OrderedMapIterator<IIOMetadataNode, Stack<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<IIOMetadataNode> predicate1 = NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) nullIsTruePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      MapIterator<Closure<BatchUpdateException>, Hashtable<Iterator, ArrayDeque>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.matchesAll((Iterator<Closure<BatchUpdateException>>) mapIterator0, (Predicate<? super Closure<BatchUpdateException>>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Iterator<SQLClientInfoException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException>(orderedMapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyOrderedIterator();
      Locale.FilteringMode.values();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-404)).when(comparator0).compare(any() , any());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<LinkedHashSet>>) iterator0, (Predicate<? super PriorityQueue<LinkedHashSet>>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("delimiter may not be null", "", true);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) stringTokenizer0, (Collection<? super Object>) treeSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Object>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(vector0);
      HashMap<IIOMetadataNode, IIOMetadataNode> hashMap0 = new HashMap<IIOMetadataNode, IIOMetadataNode>(3119);
      EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, IIOMetadataNode>) entrySetMapIterator0);
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Hashtable<SQLWarning, ArrayList>>) listIterator0, (Predicate<? super Hashtable<SQLWarning, ArrayList>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = ", ";
      StringTokenizer stringTokenizer0 = new StringTokenizer(", ", "YH]<^_(-=z,x%4A'Kl");
      stringTokenizer0.nextElement();
      stringTokenizer0.hasMoreTokens();
      stringTokenizer0.hasMoreElements();
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      IteratorUtils.size(iterator0);
      MapIterator<HashSet<Class<DataTruncation>>, Locale.FilteringMode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(", ");
      IteratorUtils.matchesAll((Iterator<HashSet<Class<DataTruncation>>>) mapIterator0, (Predicate<? super HashSet<Class<DataTruncation>>>) identityPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(", ");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ArrayListIterator<Transformer<Object, Locale.FilteringMode>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Transformer<Object, Locale.FilteringMode>>(sQLNonTransientConnectionException0, 0, 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.getIterator((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyIterator();
      int int0 = (-125);
      Integer integer0 = new Integer((-125));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, (-885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate1);
      Boolean boolean0 = predicateTransformer0.transform((Object) null);
      SingletonIterator<Boolean> singletonIterator0 = new SingletonIterator<Boolean>(boolean0);
      IteratorUtils.asIterable((Iterator<? extends Boolean>) singletonIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException>(orderedMapIterator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1, class0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException>(orderedMapIterator2);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator2);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedMapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Boolean boolean0 = predicateTransformer0.transform(sQLSyntaxErrorException0);
      SingletonIterator<Boolean> singletonIterator0 = new SingletonIterator<Boolean>(boolean0);
      IteratorUtils.asIterable((Iterator<? extends Boolean>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = EmptyListIterator.emptyListIterator();
      List<EnumSet<Locale.FilteringMode>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      IteratorUtils.loopingListIterator(list0);
      Object object0 = new Object();
      Hashtable<SQLClientInfoException, SQLRecoverableException> hashtable0 = new Hashtable<SQLClientInfoException, SQLRecoverableException>();
      EntrySetMapIterator<SQLClientInfoException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLRecoverableException>(hashtable0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) entrySetMapIterator0, (Closure<? super SQLClientInfoException>) transformerClosure0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList2 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList3 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList4 = new LinkedList<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((LinkedList<SQLException>[]) null, (-1421));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "q^LDZ%Yzh}J#;", 47);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Factory<SQLIntegrityConstraintViolationException> factory0 = ConstantFactory.constantFactory(sQLIntegrityConstraintViolationException0);
      FactoryTransformer<Object, SQLIntegrityConstraintViolationException> factoryTransformer0 = new FactoryTransformer<Object, SQLIntegrityConstraintViolationException>(factory0);
      IfTransformer<Object, SQLIntegrityConstraintViolationException> ifTransformer0 = new IfTransformer<Object, SQLIntegrityConstraintViolationException>(predicate0, factoryTransformer0, factoryTransformer0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) ifTransformer0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      Properties properties0 = new Properties();
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<String, SQLFeatureNotSupportedException>(orderedMapIterator1);
      MapIterator<String, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      Object object0 = new Object();
      Hashtable<SQLClientInfoException, SQLRecoverableException> hashtable0 = new Hashtable<SQLClientInfoException, SQLRecoverableException>();
      EntrySetMapIterator<SQLClientInfoException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLRecoverableException>(hashtable0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 8);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[5] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[5] = class5;
      Class<Properties> class6 = Properties.class;
      classArray0[6] = class6;
      Class<Properties> class7 = Properties.class;
      classArray0[7] = class7;
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) entrySetMapIterator0, (Closure<? super SQLClientInfoException>) transformerClosure0);
      LinkedList<SQLException>[] linkedListArray0 = (LinkedList<SQLException>[]) Array.newInstance(LinkedList.class, 5);
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      linkedListArray0[0] = linkedList1;
      LinkedList<SQLException> linkedList2 = new LinkedList<SQLException>();
      linkedListArray0[1] = linkedList2;
      LinkedList<SQLException> linkedList3 = new LinkedList<SQLException>();
      linkedListArray0[2] = linkedList3;
      LinkedList<SQLException> linkedList4 = new LinkedList<SQLException>();
      linkedListArray0[3] = linkedList4;
      LinkedList<SQLException> linkedList5 = new LinkedList<SQLException>();
      linkedListArray0[4] = linkedList5;
      ResettableListIterator<LinkedList<SQLException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0, 0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IteratorUtils.find((Iterator<LinkedList<SQLException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("#$Z*![r(tza{");
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 2, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) closure0);
      DataTruncation dataTruncation0 = new DataTruncation((-2294), true, true, 32, (-1), (Throwable) null);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      Closure<Object> closure1 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<DataTruncation>) singletonIterator0, (Closure<? super DataTruncation>) closure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLFeatureNotSupportedException, SQLTimeoutException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLTimeoutException>) mapIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator2);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "add() is not supported");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("add() is not supported", "", sQLRecoverableException0);
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableListIterator0, (Object) sQLRecoverableException1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 100;
      intArray0[2] = (-90);
      intArray0[3] = 1867;
      intArray0[4] = 512;
      intArray0[5] = 32;
      intArray0[6] = 8;
      intArray0[7] = (-760);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLFeatureNotSupportedException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLNonTransientConnectionException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", (String) null, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(sQLNonTransientConnectionException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 8;
      intArray1[2] = 100;
      intArray1[3] = 0;
      intArray1[4] = 100;
      intArray1[5] = 512;
      intArray1[6] = (-90);
      intArray1[7] = (-760);
      intArray1[8] = (-734);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", intArray1, sQLRecoverableException1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<String, SQLFeatureNotSupportedException>(orderedMapIterator1);
      MapIterator<String, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyOrderedIterator();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<LinkedHashSet>>) iterator0, (Predicate<? super PriorityQueue<LinkedHashSet>>) comparatorPredicate0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      IteratorUtils.getIterator(locale_FilteringMode0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLNonTransientConnectionException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, (String) null, map0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((String) null, (String) null, hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((String) null, (String) null, 270, map0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("(c9#zJ?UB", map0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 270;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, 270, longArray0, sQLClientInfoException3);
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException((String) null, (String) null, map0, batchUpdateException0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException((String) null, "", hashMap0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException8;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 5);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLClientInfoException0);
      predicateArray0[0] = predicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6%}ozh=");
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", "[]");
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.singletonListIterator(sQLDataException0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[8] = class8;
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("6%}ozh=", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLDataException0);
      TransformedPredicate<SQLDataException> transformedPredicate0 = new TransformedPredicate<SQLDataException>(transformer0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator1, (Predicate<? super SQLDataException>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '6%}ozh=' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode1, locale_FilteringMode2);
      linkedList0.addFirst(enumSet0);
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      EmptyOrderedIterator.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.size(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      MapIterator<String, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLDataException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLDataException>) mapIterator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) null, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.size(mapIterator1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) nullIsTruePredicate0);
      OrderedMapIterator<IIOMetadataNode, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, SQLRecoverableException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLRecoverableException>) orderedMapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator1, (Predicate<? super IIOMetadataNode>) predicate1);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.emptyListIterator();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>(linkedList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UL_");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("F=~Ba_+", "- 70bMEkWn2V1B_", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7T~(g]2'{3<9n`0|`KD", "transformer may uot be null", (-1), sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("F=~Ba_+", "F=~Ba_+", (-1));
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException0;
      vector0.toArray(sQLTimeoutExceptionArray0);
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      reverseListIterator0.forEachRemaining(consumer0);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) reverseListIterator0, (Iterator<? extends SQLDataException>) reverseListIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.size(orderedIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyListIterator();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>(linkedList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UL_");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Dvw", "kaoW", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Dvw", "fWJ,jZesL", 1009, sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("2{SIO*FdYS&ET", "LESS", 1009);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException0;
      vector0.toArray(sQLTimeoutExceptionArray0);
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(linkedList0);
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(vector0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) reverseListIterator0, (Iterator<? extends SQLDataException>) loopingListIterator0, (Iterator<? extends SQLDataException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("prefix may not be nul", "prefix may not be nul", 10);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("prefix may not be nul", (Class<?>[]) null, (Object[]) null);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[0] = (Transformer<Object, String>) invokerTransformer0;
      transformerArray0[1] = (Transformer<Object, String>) invokerTransformer0;
      transformerArray0[2] = (Transformer<Object, String>) invokerTransformer0;
      transformerArray0[3] = (Transformer<Object, String>) invokerTransformer0;
      transformerArray0[4] = (Transformer<Object, String>) invokerTransformer0;
      ChainedTransformer.chainedTransformer((Transformer<? super String, ? extends String>[]) transformerArray0);
      StringValueTransformer.stringValueTransformer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLRecoverableException0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, 0);
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableListIterator1, (Object) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0, (-216L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null, (Collection<? super BatchUpdateException>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      MapIterator<String, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLDataException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLDataException>) mapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) hashMap0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(notPredicate0);
      nullIsFalsePredicate0.evaluate(linkedList0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<LinkedHashSet>>) mapIterator1, (Predicate<? super PriorityQueue<LinkedHashSet>>) nullIsFalsePredicate0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      uniquePredicate0.evaluate(sQLSyntaxErrorException0);
      IteratorUtils.matchesAll((Iterator<Closure<BatchUpdateException>>) null, (Predicate<? super Closure<BatchUpdateException>>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) orderedIterator0, (Equator<Object>) defaultEquator0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      MapIterator<Closure<BatchUpdateException>, Hashtable<Iterator, ArrayDeque>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.matchesAll((Iterator<Closure<BatchUpdateException>>) mapIterator0, (Predicate<? super Closure<BatchUpdateException>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<SQLWarning>>) listIterator0, (Predicate<? super PriorityQueue<SQLWarning>>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) listIterator0, (Transformer<? super Object, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyListIterator();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>(linkedList0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("- 70bMEkWn2V1B_");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("- 70bMEkWn2V1B_", "- 70bMEkWn2V1B_", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("UL_", "- 70bMEkWn2V1B_", (-1), sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("6L6FAE<sI/0", "UL_", 125);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      vector0.toArray(sQLTimeoutExceptionArray0);
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(vector0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) reverseListIterator0, (Iterator<? extends SQLDataException>) reverseListIterator0, (Iterator<? extends SQLDataException>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedList0.pollLast();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(":X:,Ls:=B Bl}DWvqY");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode(":X:,Ls:=B Bl}DWvqY");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      linkedList0.toArray(iIOMetadataNodeArray0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      IteratorUtils.matchesAny((Iterator<Hashtable<SQLWarning, ArrayList>>) resettableListIterator0, (Predicate<? super Hashtable<SQLWarning, ArrayList>>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("g3=");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyOrderedIterator();
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("g3=");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(transformerPredicate0);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = null;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, (Predicate<? super Object>) null);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) andPredicate0);
      predicateArray0[3] = predicate2;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      predicateArray0[4] = (Predicate<Object>) transformedPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Object> predicate3 = OrPredicate.orPredicate((Predicate<? super Object>) allPredicate0, (Predicate<? super Object>) predicateArray0[2]);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate3);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Hashtable<SQLWarning, ArrayList>>) iterator0, (Predicate<? super Hashtable<SQLWarning, ArrayList>>) predicate3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'g3=' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(Z;oqD=?ffQ+", "", (-220));
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) listIterator0);
      IteratorUtils.size(resettableIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("4y+F", "", 0, sQLNonTransientException0);
      int int0 = 1;
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(sQLTransactionRollbackException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      OrderedMapIterator<SQLTransientConnectionException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      OrderedMapIterator<String, Locale.LanguageRange> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator1);
      Iterator<SQLClientInfoException> iterator0 = null;
      Predicate<SQLClientInfoException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 1427, (int[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 275);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      ListIterator<PriorityQueue<SQLWarning>> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<SQLWarning>>) listIterator0, (Predicate<? super PriorityQueue<SQLWarning>>) instanceofPredicate0);
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      IteratorUtils.matchesAny((Iterator<Hashtable<SQLWarning, ArrayList>>) resettableListIterator0, (Predicate<? super Hashtable<SQLWarning, ArrayList>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(".r:", "Predicate must not be null", (-1109), hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(".r:", hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 3);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Closure<? super SQLClientInfoException>) closure0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      classArray0[0] = class0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      classArray0[1] = class1;
      Class<SQLTransientException> class2 = SQLTransientException.class;
      classArray0[2] = class2;
      Class<SQLTransientException> class3 = SQLTransientException.class;
      classArray0[3] = class3;
      Class<SQLTransientException> class4 = SQLTransientException.class;
      classArray0[4] = class4;
      Class<SQLTransientException> class5 = SQLTransientException.class;
      classArray0[5] = class5;
      classArray0[6] = class2;
      Class<SQLTransientException> class6 = SQLTransientException.class;
      classArray0[7] = class6;
      Class<SQLTransientException> class7 = SQLTransientException.class;
      classArray0[8] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      transformerArray0[0] = (Transformer<Object, String>) invokerTransformer0;
      Transformer<String, String> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super String, ? extends String>[]) transformerArray0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("Cannot remove from list until next() or previous() called", (Transformer<? super String, ? extends String>) transformer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) iterator0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException>(orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransactionRollbackException, ? extends SQLTransientConnectionException>) abstractMapIteratorDecorator0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.setAttributeNS("Y", "|i/|<mAbys#", "ij^Nz8");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("mhggMN");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) nodeListIterator0, (Transformer<? super Object, ? extends Integer>) transformer0);
      IteratorUtils.getIterator(nodeList0);
      IteratorUtils.isEmpty(nodeListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 9);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, false, (-2199), 0, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(9, true, true, (-3954), (-3954), dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 44, (-3954), dataTruncation0);
      dataTruncationArray0[3] = dataTruncation3;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      assertNotNull(resettableIterator0);
      
      OrderedMapIterator<SQLClientInfoException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLSyntaxErrorException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) mapIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      classArray0[0] = class0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      classArray0[1] = class1;
      Class<SQLTransientException> class2 = SQLTransientException.class;
      classArray0[2] = class2;
      Class<SQLTransientException> class3 = SQLTransientException.class;
      classArray0[3] = class3;
      Class<SQLTransientException> class4 = SQLTransientException.class;
      classArray0[4] = class4;
      Class<SQLTransientException> class5 = SQLTransientException.class;
      classArray0[5] = class5;
      Class<SQLTransientException> class6 = SQLTransientException.class;
      classArray0[6] = class6;
      Class<SQLTransientException> class7 = SQLTransientException.class;
      classArray0[7] = class7;
      Class<SQLTransientException> class8 = SQLTransientException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      transformerArray0[0] = (Transformer<Object, String>) invokerTransformer0;
      Transformer<String, String> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super String, ? extends String>[]) transformerArray0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("Cannot remove from list until next() or previous() called", (Transformer<? super String, ? extends String>) transformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) iterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) orderedIterator0;
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) orderedIterator0;
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) orderedIterator0;
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) orderedIterator0;
      iteratorArray0[4] = (Iterator<SQLClientInfoException>) orderedIterator0;
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) orderedIterator0;
      iteratorArray0[6] = (Iterator<SQLClientInfoException>) orderedIterator0;
      iteratorArray0[7] = (Iterator<SQLClientInfoException>) orderedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iteratorArray0, 26, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "`_>_Ti`WyA", 1730);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedException0.forEach(consumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 3094);
      MapIterator<SQLTimeoutException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.isEmpty(loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iteratorArray0, 3094, 1730);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      classArray0[0] = class0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      classArray0[1] = class1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 3094);
      MapIterator<SQLTimeoutException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.isEmpty(loopingIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      ResettableIterator<Iterator<SQLClientInfoException>> resettableIterator0 = IteratorUtils.arrayIterator(iteratorArray0, 1980, 23);
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      InstantiateFactory<SQLTransactionRollbackException> instantiateFactory0 = new InstantiateFactory<SQLTransactionRollbackException>(class2);
      FactoryTransformer<Object, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<Object, SQLTransactionRollbackException>(instantiateFactory0);
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLClientInfoException>>) resettableIterator0, (Transformer<? super Iterator<SQLClientInfoException>, ? extends SQLTransactionRollbackException>) factoryTransformer0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator1);
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) mapIterator0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      IteratorUtils.arrayIterator(iteratorArray0, 0, 0);
      IteratorUtils.singletonIterator(iteratorArray0[0]);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = 26;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) null, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator0);
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[]");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "Hvk8&^hZ", 2868, hashMap0, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Vector<String> vector0 = new Vector<String>(arrayDeque0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 10, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator0);
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) mapIterator0);
      OrderedMapIterator<SQLTimeoutException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(orderedMapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) identityPredicate0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      IteratorUtils.skippingIterator((Iterator<SQLTransientException>) resettableIterator0, 1L);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator0);
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) mapIterator0);
      OrderedMapIterator<SQLTimeoutException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(orderedMapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      ConstantFactory<SQLTransactionRollbackException> constantFactory0 = new ConstantFactory<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      FactoryTransformer<Object, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<Object, SQLTransactionRollbackException>(constantFactory0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("%i:lM%d]8bn'G$", (String) null, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("%i:lM%d]8bn'G$", "4p:3P~@C", map0, sQLTransactionRollbackException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, map1, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("[]", map1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(map1, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("`6`jp(kJq66-V:RR", hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("%i:lM%d]8bn'G$", "`6`jp(kJq66-V:RR", map1, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("Hvk8&^hZ", "", 46, map1, sQLClientInfoException3);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException7;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      ResettableIterator<Iterator<SQLClientInfoException>> resettableIterator0 = IteratorUtils.singletonIterator((Iterator<SQLClientInfoException>) resettableListIterator0);
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLClientInfoException>>) resettableIterator0, (Transformer<? super Iterator<SQLClientInfoException>, ? extends SQLTransactionRollbackException>) factoryTransformer0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator1);
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) mapIterator0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0, "KL<Th/ME}g(7>_'", "Node must not be null", "prefix may not be null");
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      HashSet<SQLTransientException> hashSet0 = new HashSet<SQLTransientException>();
      HashSet<SQLTransientException> hashSet1 = new HashSet<SQLTransientException>();
      HashSet<SQLTransientException> hashSet2 = new HashSet<SQLTransientException>();
      LinkedHashSet<SQLTransientException> linkedHashSet1 = new LinkedHashSet<SQLTransientException>();
      HashSet<SQLTransientException>[] hashSetArray0 = (HashSet<SQLTransientException>[]) Array.newInstance(HashSet.class, 4);
      hashSetArray0[0] = hashSet2;
      hashSetArray0[1] = hashSet0;
      IteratorUtils.emptyOrderedIterator();
      NOPClosure.nopClosure();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstantiateFactory<SQLTransactionRollbackException> instantiateFactory0 = new InstantiateFactory<SQLTransactionRollbackException>(class0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransactionRollbackException>) instantiateFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLClientInfoException>>) null, (Transformer<? super Iterator<SQLClientInfoException>, ? extends SQLTransactionRollbackException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      Properties properties0 = new Properties();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) null);
      Iterator<Properties> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) iterator0);
      iteratorArray0[0] = iterator1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Properties[] propertiesArray0 = new Properties[8];
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      IteratorUtils.arrayIterator(propertiesArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator1);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator1, 861L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 14);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) zippingIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0, "prefix may not be null", "", "~4E");
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      MapIterator<Closure<BatchUpdateException>, Hashtable<Iterator, ArrayDeque>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<Closure<BatchUpdateException>>) mapIterator0, (Predicate<? super Closure<BatchUpdateException>>) predicate0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray1 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "\"j", 1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "1#qunyMExO]rF(", 1, sQLRecoverableException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      iteratorArray1[0] = (Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0;
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray1[1] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "4!`5PQ\\e;f@i%.$";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("4!`5PQe;f@i%.$", "4!`5PQe;f@i%.$");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator((SQLClientInfoException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7T/}6kcZp#o");
      iIOMetadataNode0.setAttributeNS("Z&k{H7e71z", "ij^Nz8", "Z&k{H7e71z");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("G");
      IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[3];
      int int0 = (-973);
      intArray0[0] = (-973);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<PriorityQueue<LinkedHashSet>>) listIterator0, (Predicate<? super PriorityQueue<LinkedHashSet>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("D%", "D%");
      int int0 = 0;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("2");
      int int0 = 3356;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 31, 3356);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator1);
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) mapIterator0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0, "KL<Th/ME}g(7>_'", "Node must not be null", "prefix may not be null");
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      HashSet<SQLTransientException> hashSet0 = new HashSet<SQLTransientException>();
      HashSet<SQLTransientException> hashSet1 = new HashSet<SQLTransientException>();
      HashSet<SQLTransientException> hashSet2 = new HashSet<SQLTransientException>();
      LinkedHashSet<SQLTransientException> linkedHashSet1 = new LinkedHashSet<SQLTransientException>();
      HashSet<SQLTransientException>[] hashSetArray0 = (HashSet<SQLTransientException>[]) Array.newInstance(HashSet.class, 4);
      hashSetArray0[0] = hashSet2;
      hashSetArray0[1] = hashSet0;
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) closure0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      ArrayListIterator<SQLClientInfoException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLClientInfoException>(sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Vector<String> vector0 = new Vector<String>(arrayDeque0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayDeque0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException>(orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException>(mapIterator0);
      Enumeration<SQLTransactionRollbackException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) abstractMapIteratorDecorator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      IteratorUtils.getIterator(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLClientInfoException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7T/}6kcZp#o");
      iIOMetadataNode0.setAttributeNS("Z&k{H7e71z", "ij^Nz8", "Z&k{H7e71z");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("G");
      IteratorUtils.nodeListIterator(nodeList0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) transformerPredicate0, (Predicate<? super Object>) transformerPredicate0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) ifTransformer0, "transformer may not be null", "", "");
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      HashSet<SQLTransientException> hashSet0 = new HashSet<SQLTransientException>();
      HashSet<SQLTransientException> hashSet1 = new HashSet<SQLTransientException>();
      LinkedHashSet<SQLTransientException> linkedHashSet1 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.emptyOrderedIterator();
      NOPClosure.nopClosure();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstantiateFactory<SQLTransactionRollbackException> instantiateFactory0 = new InstantiateFactory<SQLTransactionRollbackException>(class0);
      Transformer<Object, SQLTransactionRollbackException> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransactionRollbackException>) instantiateFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLClientInfoException>>) null, (Transformer<? super Iterator<SQLClientInfoException>, ? extends SQLTransactionRollbackException>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) closure0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("}RE177h }7YVydk=e", "}RE177h }7YVydk=e");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.singletonListIterator(linkedHashSet0);
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Vector<String> vector0 = new Vector<String>(arrayDeque0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) arrayDeque0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.IteratorUtils", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      ResettableIterator<String> resettableIterator1 = IteratorUtils.singletonIterator((String) null);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      iteratorArray0[3] = (Iterator<String>) resettableIterator1;
      iteratorArray0[4] = (Iterator<String>) resettableIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLClientInfoException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7T/}6kcZp#o");
      iIOMetadataNode0.setAttributeNS("Z&k{H7e71z", "ij^Nz8", "Z&k{H7e71z");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("G");
      IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-973);
      intArray0[1] = 0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (-973));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      EntrySetMapIterator<Iterator<SQLDataException>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<SQLDataException>, Integer>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<SQLDataException>, Integer>) entrySetMapIterator0);
      Comparator<Object> comparator0 = null;
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Vector<String> vector0 = new Vector<String>(arrayDeque0);
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) vector0);
      iteratorArray0[0] = iterator1;
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) orderedIterator0);
      IteratorUtils.loopingIterator((Collection<? extends String>) list0);
      String string0 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      ArrayListIterator<String> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<String>(linkedHashSet0, (-2330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rK<c");
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rK<c", intArray0, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation0 = new DataTruncation(32, true, true, 1977, 1800, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation1 = new DataTruncation(5, false, true, (-3621), 5, batchUpdateException0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) closure0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Object object0 = new Object();
      properties3.put(object0, properties0);
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) zippingIterator0, 1657L);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<ClientInfoStatus, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      int[] intArray0 = new int[8];
      intArray0[0] = 2212;
      intArray0[1] = 2;
      intArray0[2] = 2212;
      intArray0[3] = 2;
      intArray0[4] = 2212;
      intArray0[5] = 2212;
      intArray0[6] = 2212;
      intArray0[7] = 2212;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(2212, false, false, 2, 2, batchUpdateException0);
      dataTruncationArray0[0] = dataTruncation0;
      HashSet<SQLTransientException>[] hashSetArray0 = (HashSet<SQLTransientException>[]) Array.newInstance(HashSet.class, 1);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      hashSetArray0[0] = (HashSet<SQLTransientException>) linkedHashSet0;
      IteratorUtils.arrayIterator(hashSetArray0);
      Hashtable<SQLRecoverableException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLRecoverableException, SQLSyntaxErrorException>();
      HashMap<SQLRecoverableException, SQLSyntaxErrorException> hashMap0 = new HashMap<SQLRecoverableException, SQLSyntaxErrorException>(hashtable0);
      EntrySetMapIterator<SQLRecoverableException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLSyntaxErrorException>(hashMap0);
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) entrySetMapIterator0, (Iterator<? extends SQLRecoverableException>) entrySetMapIterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 61, (-809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "";
      int int0 = 1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iZDm%;'$=jT+~2``", "", 1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.printStackTrace();
      sQLTimeoutException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 1, 173);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.iterator();
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) linkedList0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("List must not be null", "List must not be null");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("List must not be null");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      sQLTimeoutException0.setNextException(sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "", 0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) listIterator0, 1357L);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotNull(skippingIterator0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray0 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(dataTruncationArray0);
      assertEquals(0, dataTruncationArray0.length);
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException("prefix may not be null", sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("prefix may not be null", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: prefix may not be null", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", sQLDataException0);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("prefix may not be null", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: prefix may not be null", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNotNull(sQLDataException1);
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertNull(sQLDataException2.getMessage());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException2.toString());
      assertNull(sQLDataException2.getSQLState());
      assertNotNull(sQLDataException2);
      
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("prefix may not be null", "prefix may not be null");
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertEquals("prefix may not be null", sQLDataException3.getSQLState());
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException: prefix may not be null", sQLDataException3.toString());
      assertEquals("prefix may not be null", sQLDataException3.getMessage());
      assertNotNull(sQLDataException3);
      
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("m7ewmVh<Ns{ HeD?8GZ", sQLDataException0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("prefix may not be null", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: prefix may not be null", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException4.getSQLState());
      assertEquals("m7ewmVh<Ns{ HeD?8GZ", sQLDataException4.getMessage());
      assertEquals("java.sql.SQLDataException: m7ewmVh<Ns{ HeD?8GZ", sQLDataException4.toString());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertNotNull(sQLDataException4);
      
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("Z$", "", 1130, sQLDataException0);
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException4));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Z$", sQLDataException5.getMessage());
      assertEquals("", sQLDataException5.getSQLState());
      assertEquals(1130, sQLDataException5.getErrorCode());
      assertEquals("java.sql.SQLDataException: Z$", sQLDataException5.toString());
      assertEquals("prefix may not be null", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: prefix may not be null", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException5);
      
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "m7ewmVh<Ns{ HeD?8GZ", 4058, sQLDataException5);
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException5));
      assertFalse(sQLDataException0.equals((Object)sQLDataException4));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Z$", sQLDataException5.getMessage());
      assertEquals("", sQLDataException5.getSQLState());
      assertEquals(1130, sQLDataException5.getErrorCode());
      assertEquals("java.sql.SQLDataException: Z$", sQLDataException5.toString());
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("m7ewmVh<Ns{ HeD?8GZ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(4058, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("prefix may not be null", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: prefix may not be null", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLDataException sQLDataException6 = new SQLDataException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", sQLIntegrityConstraintViolationException0);
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException6.equals((Object)sQLDataException5));
      assertFalse(sQLDataException6.equals((Object)sQLDataException4));
      assertFalse(sQLDataException6.equals((Object)sQLDataException3));
      assertFalse(sQLDataException6.equals((Object)sQLDataException1));
      assertFalse(sQLDataException6.equals((Object)sQLDataException0));
      assertFalse(sQLDataException6.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException5));
      assertFalse(sQLDataException0.equals((Object)sQLDataException4));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Z$", sQLDataException5.getMessage());
      assertEquals("", sQLDataException5.getSQLState());
      assertEquals(1130, sQLDataException5.getErrorCode());
      assertEquals("java.sql.SQLDataException: Z$", sQLDataException5.toString());
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("m7ewmVh<Ns{ HeD?8GZ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(4058, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLDataException6.getSQLState());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", sQLDataException6.toString());
      assertEquals(0, sQLDataException6.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", sQLDataException6.getMessage());
      assertEquals("prefix may not be null", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: prefix may not be null", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException6);
      
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException();
      assertFalse(sQLDataException7.equals((Object)sQLDataException4));
      assertFalse(sQLDataException7.equals((Object)sQLDataException5));
      assertFalse(sQLDataException7.equals((Object)sQLDataException2));
      assertFalse(sQLDataException7.equals((Object)sQLDataException6));
      assertFalse(sQLDataException7.equals((Object)sQLDataException1));
      assertFalse(sQLDataException7.equals((Object)sQLDataException3));
      assertFalse(sQLDataException7.equals((Object)sQLDataException0));
      assertNull(sQLDataException7.getMessage());
      assertNull(sQLDataException7.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException7.toString());
      assertEquals(0, sQLDataException7.getErrorCode());
      assertNotNull(sQLDataException7);
      
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("m7ewmVh<Ns{ HeD?8GZ", "Collection must not be null", (-4737));
      assertFalse(sQLDataException8.equals((Object)sQLDataException2));
      assertFalse(sQLDataException8.equals((Object)sQLDataException5));
      assertFalse(sQLDataException8.equals((Object)sQLDataException0));
      assertFalse(sQLDataException8.equals((Object)sQLDataException3));
      assertFalse(sQLDataException8.equals((Object)sQLDataException6));
      assertFalse(sQLDataException8.equals((Object)sQLDataException1));
      assertFalse(sQLDataException8.equals((Object)sQLDataException7));
      assertFalse(sQLDataException8.equals((Object)sQLDataException4));
      assertEquals("Collection must not be null", sQLDataException8.getSQLState());
      assertEquals("java.sql.SQLDataException: m7ewmVh<Ns{ HeD?8GZ", sQLDataException8.toString());
      assertEquals((-4737), sQLDataException8.getErrorCode());
      assertEquals("m7ewmVh<Ns{ HeD?8GZ", sQLDataException8.getMessage());
      assertNotNull(sQLDataException8);
      
      sQLDataExceptionArray0[8] = sQLDataException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1739, (-158));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotNull(properties1);
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotNull(properties2);
      
      Properties properties3 = new Properties();
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties2));
      assertTrue(properties3.isEmpty());
      assertEquals(0, properties3.size());
      assertNotNull(properties3);
      
      Properties properties4 = new Properties();
      assertTrue(properties4.equals((Object)properties1));
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties3));
      assertTrue(properties4.isEmpty());
      assertEquals(0, properties4.size());
      assertNotNull(properties4);
      
      Properties[] propertiesArray1 = new Properties[4];
      assertFalse(propertiesArray1.equals((Object)propertiesArray0));
      
      propertiesArray1[0] = properties2;
      propertiesArray1[1] = properties0;
      propertiesArray1[2] = properties2;
      propertiesArray1[3] = properties1;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray1);
      assertFalse(propertiesArray1.equals((Object)propertiesArray0));
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(4, propertiesArray1.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) null);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(iterator0);
      
      Iterator<Properties> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(iterator1);
      
      iteratorArray0[0] = iterator1;
      Properties[] propertiesArray0 = new Properties[8];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties0;
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      
      propertiesArray0[6] = properties1;
      propertiesArray0[7] = properties0;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, propertiesArray0.length);
      
      iteratorArray0[1] = (Iterator<Properties>) objectArrayListIterator0;
      Iterator<Object> iterator2 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
      assertNotNull(iterator2);
      assertEquals(2, iteratorArray0.length);
      
      OrderedMapIterator<SQLTransientConnectionException, Predicate<ArrayList>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends SQLTransientConnectionException>) orderedMapIterator1);
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertNotNull(orderedMapIterator2);
      
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLIntegrityConstraintViolationException, ? extends SQLTransientConnectionException>) orderedMapIterator2);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertNotNull(mapIterator0);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertNotNull(sQLIntegrityConstraintViolationExceptionArray0);
      assertEquals(0, sQLIntegrityConstraintViolationExceptionArray0.length);
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLIntegrityConstraintViolationException0);
      assertNotNull(mockThrowable0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockThrowable0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException: ", mockThrowable0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "zP1Zge_0?qUGz:M", 0, hashtable0, sQLFeatureNotSupportedException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException: ", mockThrowable0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("zP1Zge_0?qUGz:M", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      ArrayListIterator<ClientInfoStatus> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<ClientInfoStatus>(sQLClientInfoException0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Predicate<Properties>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      boolean boolean0 = arrayList0.add(properties0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(properties0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      arrayList0.sort((Comparator<? super Properties>) null);
      assertTrue(arrayList0.contains(properties0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      ResettableIterator<ArrayList<Properties>> resettableIterator1 = IteratorUtils.singletonIterator(arrayList0);
      assertTrue(arrayList0.contains(properties0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(resettableIterator1);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotNull(arrayDeque1);
      
      arrayDequeArray0[1] = arrayDeque1;
      ResettableListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(2, arrayDequeArray0.length);
      
      ListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertEquals(2, arrayDequeArray0.length);
      
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque2 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertTrue(arrayDeque2.isEmpty());
      assertEquals(0, arrayDeque2.size());
      assertNotNull(arrayDeque2);
      
      boolean boolean0 = arrayDeque1.retainAll(arrayDeque2);
      assertNotSame(arrayDeque1, arrayDeque2);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque2, arrayDeque1);
      assertNotSame(arrayDeque2, arrayDeque0);
      assertFalse(boolean0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque2));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(arrayDeque2.isEmpty());
      assertEquals(0, arrayDeque2.size());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 4018;
      intArray0[3] = 0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The map size must be 0 or 1", (String) null);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: The map size must be 0 or 1", sQLRecoverableException0.toString());
      assertEquals("The map size must be 0 or 1", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 0, intArray0, sQLRecoverableException0);
      assertArrayEquals(new int[] {0, 0, 4018, 0}, intArray0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: The map size must be 0 or 1", sQLRecoverableException0.toString());
      assertEquals("The map size must be 0 or 1", sQLRecoverableException0.getMessage());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertEquals(4, intArray0.length);
      
      String string0 = batchUpdateException0.getLocalizedMessage();
      assertArrayEquals(new int[] {0, 0, 4018, 0}, intArray0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: The map size must be 0 or 1", sQLRecoverableException0.toString());
      assertEquals("The map size must be 0 or 1", sQLRecoverableException0.getMessage());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(string0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTransientConnectionException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(iterator0);
      
      Iterator<SQLTransientException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(iterator1);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 1940);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Array class must not be null";
      stringArray0[1] = "0]]cK";
      stringArray0[2] = "z7t+:A}IGswVlom$][";
      stringArray0[3] = "prefix may not be null";
      stringArray0[4] = "Entry does not exist: ";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertNotNull(resettableIterator0);
      assertEquals(5, stringArray0.length);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation((-4391), false, true, (-4391), 0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      dataTruncationArray0[0] = dataTruncation0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: java.sql.DataTruncation: Data truncation", sQLNonTransientException0.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      DataTruncation dataTruncation1 = new DataTruncation(3, false, true, (-4391), 2939, sQLNonTransientException0);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: java.sql.DataTruncation: Data truncation", sQLNonTransientException0.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", sQLNonTransientException0.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertNotNull(dataTruncation1);
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-4391), false, false, 0, (-4391));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertEquals("22001", dataTruncation2.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertNotNull(dataTruncation2);
      
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(128, true, true, 3, 3);
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertEquals("01004", dataTruncation3.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals(0, dataTruncation3.getErrorCode());
      assertNotNull(dataTruncation3);
      
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, false, true, 260, 3, dataTruncation1);
      assertFalse(dataTruncation4.equals((Object)dataTruncation0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation2));
      assertFalse(dataTruncation4.equals((Object)dataTruncation1));
      assertFalse(dataTruncation4.equals((Object)dataTruncation3));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation3));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertFalse(dataTruncation1.equals((Object)dataTruncation2));
      assertFalse(dataTruncation1.equals((Object)dataTruncation3));
      assertEquals(0, dataTruncation4.getErrorCode());
      assertEquals("Data truncation", dataTruncation4.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation4.toString());
      assertEquals("01004", dataTruncation4.getSQLState());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: java.sql.DataTruncation: Data truncation", sQLNonTransientException0.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", sQLNonTransientException0.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertNotNull(dataTruncation4);
      
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(1281, true, false, 0, 260);
      assertFalse(dataTruncation5.equals((Object)dataTruncation0));
      assertFalse(dataTruncation5.equals((Object)dataTruncation2));
      assertFalse(dataTruncation5.equals((Object)dataTruncation3));
      assertFalse(dataTruncation5.equals((Object)dataTruncation4));
      assertFalse(dataTruncation5.equals((Object)dataTruncation1));
      assertEquals("22001", dataTruncation5.getSQLState());
      assertEquals(0, dataTruncation5.getErrorCode());
      assertEquals("Data truncation", dataTruncation5.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation5.toString());
      assertNotNull(dataTruncation5);
      
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-4391), true, false, 0, 0, sQLNonTransientException0);
      assertFalse(dataTruncation6.equals((Object)dataTruncation1));
      assertFalse(dataTruncation6.equals((Object)dataTruncation3));
      assertFalse(dataTruncation6.equals((Object)dataTruncation4));
      assertFalse(dataTruncation6.equals((Object)dataTruncation0));
      assertFalse(dataTruncation6.equals((Object)dataTruncation2));
      assertFalse(dataTruncation6.equals((Object)dataTruncation5));
      assertFalse(dataTruncation0.equals((Object)dataTruncation4));
      assertFalse(dataTruncation0.equals((Object)dataTruncation5));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation3));
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation6.toString());
      assertEquals(0, dataTruncation6.getErrorCode());
      assertEquals("Data truncation", dataTruncation6.getMessage());
      assertEquals("22001", dataTruncation6.getSQLState());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: java.sql.DataTruncation: Data truncation", sQLNonTransientException0.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", sQLNonTransientException0.getMessage());
      assertNotNull(dataTruncation6);
      
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(0, false, false, 3, 0, dataTruncation0);
      assertFalse(dataTruncation7.equals((Object)dataTruncation6));
      assertFalse(dataTruncation7.equals((Object)dataTruncation4));
      assertFalse(dataTruncation7.equals((Object)dataTruncation3));
      assertFalse(dataTruncation7.equals((Object)dataTruncation1));
      assertFalse(dataTruncation7.equals((Object)dataTruncation5));
      assertFalse(dataTruncation7.equals((Object)dataTruncation0));
      assertFalse(dataTruncation7.equals((Object)dataTruncation2));
      assertFalse(dataTruncation0.equals((Object)dataTruncation6));
      assertFalse(dataTruncation0.equals((Object)dataTruncation4));
      assertFalse(dataTruncation0.equals((Object)dataTruncation5));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation3));
      assertEquals(0, dataTruncation7.getErrorCode());
      assertEquals("Data truncation", dataTruncation7.getMessage());
      assertEquals("22001", dataTruncation7.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation7.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation7);
      
      dataTruncationArray0[7] = dataTruncation7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "O8@^;f";
      int int0 = 1100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "O8@^;f", 1100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLRecoverableException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLRecoverableException: ", sQLNonTransientConnectionException0.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLRecoverableException: ", sQLRecoverableException1.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLNonTransientConnectionException: java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertNotNull(sQLRecoverableException1);
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException1;
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      assertEquals(1, sQLRecoverableExceptionArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLRecoverableException0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean1 = IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableListIterator1, (Object) sQLFeatureNotSupportedException0);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertFalse(boolean1);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertTrue(boolean1 == boolean0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertFalse(resettableListIterator1.hasNext());
      assertTrue(resettableListIterator1.hasPrevious());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(1, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(0, iteratorArray0.length);
      
      Vector<EnumSet<Locale.FilteringMode>> vector0 = new Vector<EnumSet<Locale.FilteringMode>>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 5788;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(locale_FilteringMode0, true);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) singletonIterator0, 4634);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4633
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator((SQLClientInfoException) null);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7T/}6kcZp#o");
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNode0.setAttributeNS("Z&k{H7e71z", "ij^Nz8", "Z&k{H7e71z");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("G");
      assertNotNull(nodeList0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "7T/}6kcZp#o");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("7T/}6kcZp#o", stringWriter0.toString());
      assertEquals("7T/}6kcZp#o", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      assertNotNull(mockPrintWriter0);
      
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      assertFalse(arrayDeque0.contains(sQLIntegrityConstraintViolationException0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains(sQLIntegrityConstraintViolationException0));
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      assertTrue(arrayDeque0.contains(sQLIntegrityConstraintViolationException0));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNotNull(loopingIterator0);
      
      int int0 = 3094;
      int int1 = 139;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 139);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertTrue(arrayDeque0.contains(sQLIntegrityConstraintViolationException1));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator1 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      assertTrue(arrayDeque0.contains(sQLIntegrityConstraintViolationException1));
      assertFalse(loopingIterator1.equals((Object)loopingIterator0));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNotNull(loopingIterator1);
      
      // Undeclared exception!
      try { 
        loopingIterator1.forEachRemaining((Consumer<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(0, iteratorArray0.length);
      
      int int0 = 1730;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "l63.#d{w[", 1730);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("l63.#d{w[", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(1730, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray0 = sQLFeatureNotSupportedException0.getStackTrace();
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("l63.#d{w[", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(1730, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      
      sQLFeatureNotSupportedException0.forEach(consumer0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("l63.#d{w[", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(1730, sQLFeatureNotSupportedException0.getErrorCode());
      
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("l63.#d{w[", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(1730, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, iteratorArray0.length);
      
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      boolean boolean1 = arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(sQLIntegrityConstraintViolationException0));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      assertTrue(arrayDeque0.contains(sQLIntegrityConstraintViolationException0));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNotNull(loopingIterator0);
      
      int int1 = 3094;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0, 3094);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertTrue(arrayDeque0.contains(sQLIntegrityConstraintViolationException0));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      // Undeclared exception!
      try { 
        loopingIterator0.forEachRemaining((Consumer<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")U]e");
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(")U]e", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: )U]e", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLNonTransientConnectionException0);
      assertArrayEquals(new int[] {2, 10}, intArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(")U]e", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: )U]e", sQLNonTransientConnectionException0.toString());
      assertEquals("", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertEquals(2, intArray0.length);
      
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 10, 30, batchUpdateException0);
      assertArrayEquals(new int[] {2, 10}, intArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(")U]e", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: )U]e", sQLNonTransientConnectionException0.toString());
      assertEquals("", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      assertEquals(2, intArray0.length);
      
      DataTruncation dataTruncation1 = new DataTruncation((-460), false, false, (-460), 8, dataTruncation0);
      assertArrayEquals(new int[] {2, 10}, intArray0);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(")U]e", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: )U]e", sQLNonTransientConnectionException0.toString());
      assertEquals("", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertNotNull(dataTruncation1);
      assertEquals(2, intArray0.length);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      DataTruncation dataTruncation2 = new DataTruncation(17, false, true, 17, 16);
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertNotNull(dataTruncation2);
      
      dataTruncationArray0[2] = dataTruncation2;
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncation1;
      dataTruncationArray0[5] = dataTruncation0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(6, dataTruncationArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",e}.rN8?", "NQ/zt");
      assertEquals(",e}.rN8?", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,e}.rN8?", sQLFeatureNotSupportedException0.toString());
      assertEquals("NQ/zt", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0);
      assertEquals(",e}.rN8?", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,e}.rN8?", sQLFeatureNotSupportedException0.toString());
      assertEquals("NQ/zt", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(predicate0);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertEquals(",e}.rN8?", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,e}.rN8?", sQLFeatureNotSupportedException0.toString());
      assertEquals("NQ/zt", sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      assertEquals(6, dataTruncationArray0.length);
      
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) "org.apache.commons.collections4.map.AbstractLinkedMap");
      assertFalse(boolean0);
      assertEquals(",e}.rN8?", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,e}.rN8?", sQLFeatureNotSupportedException0.toString());
      assertEquals("NQ/zt", sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(6, dataTruncationArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("g/,");
      assertNotNull(iterator0);
      
      ArrayListIterator<SQLClientInfoException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLClientInfoException>("g/,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      int[] intArray0 = new int[8];
      intArray0[0] = 2212;
      intArray0[1] = 2;
      intArray0[2] = 2212;
      intArray0[3] = 2;
      intArray0[4] = 2212;
      intArray0[5] = 2212;
      intArray0[6] = 2212;
      intArray0[7] = 2212;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLNonTransientConnectionException0);
      assertArrayEquals(new int[] {2212, 2, 2212, 2, 2212, 2212, 2212, 2212}, intArray0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertEquals(8, intArray0.length);
      
      DataTruncation dataTruncation0 = new DataTruncation(2212, false, false, 2, 2, batchUpdateException0);
      assertArrayEquals(new int[] {2212, 2, 2212, 2, 2212, 2212, 2212, 2212}, intArray0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      assertEquals(8, intArray0.length);
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2212, false, false, 2212, 4, sQLNonTransientConnectionException0);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertNotNull(dataTruncation1);
      
      dataTruncationArray0[1] = dataTruncation1;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(2, dataTruncationArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      assertNotNull(properties2);
      
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties2));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.isEmpty());
      assertEquals(0, properties3.size());
      assertNotNull(properties3);
      
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      assertTrue(properties4.equals((Object)properties3));
      assertTrue(properties4.equals((Object)properties1));
      assertTrue(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.isEmpty());
      assertEquals(0, properties4.size());
      assertNotNull(properties4);
      
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      assertTrue(properties5.equals((Object)properties4));
      assertTrue(properties5.equals((Object)properties1));
      assertTrue(properties5.equals((Object)properties2));
      assertTrue(properties5.equals((Object)properties3));
      assertTrue(properties5.equals((Object)properties0));
      assertEquals(0, properties5.size());
      assertTrue(properties5.isEmpty());
      assertNotNull(properties5);
      
      propertiesArray0[5] = properties5;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(6, propertiesArray0.length);
      
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(zippingIterator0);
      assertEquals(6, propertiesArray0.length);
      
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) zippingIterator0, 1657L);
      assertNotNull(boundedIterator0);
      assertEquals(6, propertiesArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "prefix may not be null";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("prefix may not be null", "prefix may not be null", 10);
      assertEquals("prefix may not be null", sQLTimeoutException0.getMessage());
      assertEquals(10, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: prefix may not be null", sQLTimeoutException0.toString());
      assertEquals("prefix may not be null", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      assertEquals("prefix may not be null", sQLTimeoutException0.getMessage());
      assertEquals(10, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: prefix may not be null", sQLTimeoutException0.toString());
      assertEquals("prefix may not be null", sQLTimeoutException0.getSQLState());
      assertNotNull(resettableIterator0);
      
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      assertEquals("prefix may not be null", sQLTimeoutException0.getMessage());
      assertEquals(10, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: prefix may not be null", sQLTimeoutException0.toString());
      assertEquals("prefix may not be null", sQLTimeoutException0.getSQLState());
      assertNotNull(enumeration0);
      
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ListIterator<Integer> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Integer>) listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertNotNull(listIterator1);
      
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, int0);
      assertFalse(listIterator0.equals((Object)listIterator1));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals("prefix may not be null", sQLTimeoutException0.getMessage());
      assertEquals(10, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: prefix may not be null", sQLTimeoutException0.toString());
      assertEquals("prefix may not be null", sQLTimeoutException0.getSQLState());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("prefix may not be null", "prefix may not be null", sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("prefix may not be null", sQLTimeoutException0.getMessage());
      assertEquals(10, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: prefix may not be null", sQLTimeoutException0.toString());
      assertEquals("prefix may not be null", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: prefix may not be null", sQLTimeoutException1.toString());
      assertEquals("prefix may not be null", sQLTimeoutException1.getSQLState());
      assertEquals("prefix may not be null", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNotNull(sQLTimeoutException1);
      
      int int1 = 120;
      sQLTimeoutException0.printStackTrace();
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertEquals("prefix may not be null", sQLTimeoutException0.getMessage());
      assertEquals(10, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: prefix may not be null", sQLTimeoutException0.toString());
      assertEquals("prefix may not be null", sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        sQLTimeoutException1.initCause(sQLTimeoutException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTimeoutException: prefix may not be null
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "9h\"W", hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9h\"W", sQLClientInfoException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      hashMap0.keySet();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("9h\"W", "HbRy1TF1^~|pZc", 16, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", (String) null, 634, sQLNonTransientConnectionException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("Closure must not be null", clientInfoStatus0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("HbRy1TF1^~|pZc", "", 634, sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      sQLNonTransientConnectionException0.addSuppressed(sQLNonTransientConnectionException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("Lk_31IJK`", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator0, 1749);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<SQLWarning>>) listIterator0, (Predicate<? super PriorityQueue<SQLWarning>>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      OrderedMapIterator<ClientInfoStatus, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends ClientInfoStatus>) orderedMapIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
      int[] intArray0 = new int[9];
      intArray0[0] = 26;
      intArray0[1] = 1943;
      intArray0[2] = (-990);
      intArray0[3] = 540;
      intArray0[4] = (-673);
      intArray0[5] = (-1671);
      intArray0[6] = 32;
      intArray0[7] = 1488;
      intArray0[8] = 6;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      Factory<BatchUpdateException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) factory0);
      IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) orderedMapIterator0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) orderedIterator0);
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("(Y0hWW^WN.P)`Vw5B;)", "o7</aPzO}5.(t$VIh", 4, sQLNonTransientExceptionArray0[0]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 45, sQLRecoverableException0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientException0);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLFeatureNotSupportedException0);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("");
      sQLNonTransientExceptionArray0[6] = sQLNonTransientException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) resettableIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(45, false, false, 0, (-3269), sQLNonTransientExceptionArray0[1]);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      EntrySetMapIterator<Iterator<SQLDataException>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<SQLDataException>, Integer>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<SQLDataException>, Integer>) entrySetMapIterator0);
      Comparator<Object> comparator0 = null;
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Vector<String> vector0 = new Vector<String>(arrayDeque0);
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) vector0);
      iteratorArray0[0] = iterator1;
      IteratorUtils.loopingIterator((Collection<? extends String>) arrayDeque0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException0);
      ArrayListIterator<String> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<String>(linkedHashSet0, 2354);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) stack0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLException>) resettableIterator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLClientInfoException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7T/}6kcZp#o");
      iIOMetadataNode0.setAttributeNS("Z&k{H7e71z", "ij^Nz8", "Z&k{H7e71z");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("G");
      IteratorUtils.nodeListIterator(nodeList0);
      Comparator<Object> comparator0 = null;
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[3];
      int int0 = (-973);
      intArray0[0] = (-973);
      intArray0[1] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("QX#IR|uAC'f>", "Z&k{H7e71z", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(".xE=XNMLKk3zu", "7T/}6kcZp#o", 2801, intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "G", intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-85), 734);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation((-3923), true, true, (-3923), (-1279));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1361), false, false, 0, (-1279), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, true, (-3923), (-979));
      dataTruncationArray0[2] = dataTruncation2;
      int int0 = (-2228);
      DataTruncation dataTruncation3 = new DataTruncation((-979), true, true, (-3923), (-2228), dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, true, true, 0, 942);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-4317), false, false, (-1361), 942);
      dataTruncationArray0[5] = dataTruncation5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-4317));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 1L, 0L);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) boundedIterator0, 10);
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      HashMap<Iterator<SQLDataException>, Integer> hashMap0 = new HashMap<Iterator<SQLDataException>, Integer>();
      EntrySetMapIterator<Iterator<SQLDataException>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<SQLDataException>, Integer>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<SQLDataException>, Integer>) entrySetMapIterator0);
      Comparator<Object> comparator0 = null;
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Vector<String> vector0 = new Vector<String>(arrayDeque0);
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) vector0);
      iteratorArray0[0] = iterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("D%", "D%");
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      OrderedMapIterator<Object, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Object, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Object, Properties>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MapIterator<SQLTimeoutException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator0);
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) mapIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0, (String) null, (String) null, "List must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = 5788;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableListIterator0, 5788);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 5788
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>((Collection<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ListIterator<PriorityQueue<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) listIterator0);
      int int0 = (-1489);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1489), (-1489));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
