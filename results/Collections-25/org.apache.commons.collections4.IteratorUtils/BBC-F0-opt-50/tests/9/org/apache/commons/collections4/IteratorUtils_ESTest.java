/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 09:14:16 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("ListIterator must not be null", "b", 1285);
      SQLDataException sQLDataException0 = new SQLDataException("iterator", "ListIterator must not be null", sQLTransientException0);
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FactoryTransformer<SQLException, SQLDataException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLDataException>(factory0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0, 1285);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(294, true, true, 462, (-1));
      stack0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableListIterator0, 1386);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>((Factory<? extends SQLTimeoutException>) null);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 46;
      intArray0[1] = 359;
      intArray0[2] = 100;
      intArray0[3] = 100;
      intArray0[4] = 2373;
      intArray0[5] = 4789;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("node must not be null!", intArray0, sQLRecoverableException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("haU@z+", "haU@z+", batchUpdateException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, (long) 4789);
      AndPredicate<SQLNonTransientConnectionException> andPredicate0 = new AndPredicate<SQLNonTransientConnectionException>((Predicate<? super SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) null);
      NullIsExceptionPredicate<SQLNonTransientConnectionException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientConnectionException>(andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) boundedIterator0, (Predicate<? super SQLNonTransientConnectionException>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientConnectionException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("hr#+<Q;Iy<ObC%LS", "hr#+<Q;Iy<ObC%LS", (-1517), sQLRecoverableException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("hr#+<Q;Iy<ObC%LS", "hr#+<Q;Iy<ObC%LS", (-1517), sQLRecoverableException0);
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      sQLTransientException0.setNextException(sQLRecoverableException0);
      sQLTransientExceptionArray0[2] = sQLTransientException1;
      sQLRecoverableException0.addSuppressed(sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", (String) null, sQLTransientException0);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTimeoutException1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLTransientException1);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("~[h", "Node must not be null", 4790);
      SQLTransientException sQLTransientException2 = new SQLTransientException("", sQLNonTransientConnectionException0);
      sQLTransientExceptionArray0[5] = sQLTransientException2;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      IteratorUtils.peekingIterator((Iterator<?>) resettableListIterator0);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>();
      SingletonListIterator<PriorityQueue<SQLWarning>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLWarning>>(priorityQueue0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLWarning>>) singletonListIterator0, (Transformer<? super PriorityQueue<SQLWarning>, String>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      String string0 = "Iterator must not be null";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Iterator must not be null", ";zT", (-894));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      sQLTransientConnectionException0.setNextException(batchUpdateException0);
      vector0.add(sQLTransientConnectionException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      IteratorUtils.get((Iterator<Integer>) singletonListIterator0, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 4);
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      iteratorArray0[0] = iterator0;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLWarning sQLWarning0 = new SQLWarning("q=0Z}_A[Ps", "org.apache.commons.collections4.iterators.PushbackIterator", sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("*uR1('](d/o/59N<4D", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "Sb?%N", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", (String) null, (-1104), sQLIntegrityConstraintViolationException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("*uR1('](d/o/59N<4D", "EHt&]TOyC#t!", 0, sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("d4P6?T `h5]a_?uU", "d4P6?T `h5]a_?uU", 0, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("Pi$b&%I;ngm{", "&P`}l\"W_nos['91xS]m", sQLWarning0);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("", "q=0Z}_A[Ps", 1543);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("-ms[D54E1MqI", "tl=v4M", (-1104), sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      SQLTransientConnectionException sQLTransientConnectionException8 = IteratorUtils.get((Iterator<SQLTransientConnectionException>) objectArrayIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException8, 0, (-1104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      IteratorUtils.get((Iterator<Integer>) singletonListIterator0, 0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(1199, false, false, 0, 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-26), false, false, (-26), (-26));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(528, false, false, (-3581), 1196);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1199, false, false, 207, 188);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(207, false, false, (-3581), (-3581), dataTruncation0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-2), true, true, 1196, 4428, dataTruncation0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(528, true, true, (-2), 159);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(405, true, true, 0, 232);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(0, false, false, 159, (-1847));
      dataTruncationArray0[8] = dataTruncation8;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("fkn");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 4);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("@0]", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) transformerPredicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Object, ClientInfoStatus> hashtable0 = new Hashtable<Object, ClientInfoStatus>();
      Transformer<Object, ClientInfoStatus> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends ClientInfoStatus>) hashtable0);
      IfTransformer<Object, ClientInfoStatus> ifTransformer0 = new IfTransformer<Object, ClientInfoStatus>(predicate1, transformer1, transformer1);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '@0]' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, Transformer<Properties, Object>> hashMap0 = new HashMap<SQLNonTransientConnectionException, Transformer<Properties, Object>>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Transformer<Properties, Object>> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Transformer<Properties, Object>>(hashMap0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) listIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "prefix may not be null", "`81p'pqNIbP`DZ>>", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("|3\"7.vx~2TL4");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      OrderedIterator<SQLWarning> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLWarning> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) orderedIterator0);
      Transformer<SQLWarning, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLWarning, String>) transformer0, "|3\"7.vx~2TL4", "Ex'nu7P\"f>14F[R=J", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator(orderedIterator0);
      OrderedMapIterator<DataTruncation, Iterator<SQLDataException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, Iterator<SQLDataException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, Iterator<SQLDataException>>(orderedMapIterator0);
      MapIterator<DataTruncation, Iterator<SQLDataException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Iterator<SQLDataException>>) abstractMapIteratorDecorator0);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) mapIterator0, 1223);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1;5&a9s H";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<String>) objectArrayIterator0, (Predicate<? super String>) predicate0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResettableIterator<ComparatorPredicate.Criterion> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(resettableIterator0);
      IteratorUtils.matchesAny((Iterator<ComparatorPredicate.Criterion>) resettableIterator0, (Predicate<? super ComparatorPredicate.Criterion>) identityPredicate0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=q1sIul*)r<Z";
      stringArray0[1] = "Transformer must return an instanceof Boolean, it was a null object";
      stringArray0[2] = "'_lb";
      stringArray0[3] = "<HL+nOv6t:1/qORzb";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.matchesAny((Iterator<String>) objectArrayIterator0, (Predicate<? super String>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.getIterator("+;&");
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      Closure<SQLClientInfoException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLClientInfoException, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) singletonIterator0, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) null, (Closure<? super SQLInvalidAuthorizationSpecException>) chainedClosure0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.getIterator("(iW{G4MYnE |0$A1");
      IteratorUtils.emptyIterator();
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack0.add(properties0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedIterator0);
      OrderedIterator<Stack<SQLRecoverableException>> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = ExceptionPredicate.exceptionPredicate();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      predicateArray0[2] = predicate2;
      predicateArray0[3] = predicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[4] = (Predicate<Object>) uniquePredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      predicateArray0[5] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate2);
      predicateArray0[6] = predicate3;
      Predicate<Object> predicate4 = FalsePredicate.falsePredicate();
      predicateArray0[7] = predicate4;
      Predicate<Object> predicate5 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<Stack<SQLRecoverableException>>) orderedIterator1, (Predicate<? super Stack<SQLRecoverableException>>) predicate5);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      Integer[] integerArray0 = new Integer[0];
      IteratorUtils.arrayListIterator(integerArray0, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Enumeration<SQLTimeoutException> enumeration0 = (Enumeration<SQLTimeoutException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      Enumeration<SQLTransientException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) iterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLWarning sQLWarning0 = new SQLWarning("{t", sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransactionRollbackException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("end");
      IteratorUtils.toString((Iterator<SQLTransientException>) singletonListIterator0, (Transformer<? super SQLTransientException, String>) constantTransformer0, "end", "end", "delimiter may not be null");
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<SQLNonTransientException> closure1 = WhileClosure.whileClosure((Predicate<? super SQLNonTransientException>) uniquePredicate0, (Closure<? super SQLNonTransientException>) closure0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyIterator");
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-v,<", "-v,<", (-375), intArray0, sQLTransactionRollbackException0);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "<Q4'+HsU,RA9n/", "|EdwmB#ji^DS&|2", "<=&\"M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.iterators.EmptyIterator' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      InvokerTransformer.invokerTransformer("");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("l");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) constantTransformer0, (String) null, "", "afjG<Xc}F[\"Bd?'A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "", "org.apache.commons.collections4.functors.PredicateTransformer", "at fUp}C51-2Kb");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[1] = predicate2;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray1[0] = predicate1;
      predicateArray1[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray1[2] = predicate2;
      predicateArray1[3] = predicate1;
      predicateArray1[4] = predicate2;
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[3] = predicate3;
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate4 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[4] = predicate4;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 3);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("");
      transformerArray0[0] = transformer1;
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 6);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class5;
      Class<SQLFeatureNotSupportedException> class6 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class6;
      Transformer<Object, String> transformer2 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      transformerArray0[1] = transformer2;
      Transformer<Object, String> transformer3 = InvokerTransformer.invokerTransformer("");
      transformerArray0[2] = transformer3;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformer1);
      IteratorUtils.toString((Iterator<PriorityQueue<PriorityQueue>>) orderedMapIterator0, (Transformer<? super PriorityQueue<PriorityQueue>, String>) switchTransformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Object, SQLClientInfoException> hashMap0 = new HashMap<Object, SQLClientInfoException>();
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashMap0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      sQLClientInfoException0.getSuppressed();
      sQLClientInfoException0.fillInStackTrace();
      HashMap<SQLIntegrityConstraintViolationException, SQLClientInfoException> hashMap1 = new HashMap<SQLIntegrityConstraintViolationException, SQLClientInfoException>();
      hashMap0.putAll(hashMap1);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) null, (Closure<? super SQLClientInfoException>) chainedClosure0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ResettableIterator<SQLException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "ZZ", "ZZ", "u>!$Zu");
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("EM qz'(t,s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.EM qz'(t,s
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.getIterator("C>");
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Iterator<SQLException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) nullIsExceptionPredicate0);
      String string0 = "ListIterator must not be null";
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) null, "ListIterator must not be null", "ListIterator must not be null", "ListIterator must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("M~^/", map0);
      sQLClientInfoException1.fillInStackTrace();
      HashMap<SQLIntegrityConstraintViolationException, SQLClientInfoException> hashMap1 = new HashMap<SQLIntegrityConstraintViolationException, SQLClientInfoException>();
      HashMap<Object, SQLClientInfoException> hashMap2 = new HashMap<Object, SQLClientInfoException>();
      hashMap2.putAll(hashMap1);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0, 0L, 0L);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) boundedIterator0, (Closure<? super SQLClientInfoException>) chainedClosure0);
      IteratorUtils.getIterator(hashMap2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.getIterator("");
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 6);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("N>", "", 923);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("{|ykzl8!H0X", "G00T_*8Rvi+G[9<", 923, sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 923, sQLNonTransientConnectionException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("N>", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("iB^G@-_<R%9", "G00T_*8Rvi+G[9<", sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("G00T_*8Rvi+G[9<", "A!PQ", 5);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("{|ykzl8!H0X");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException5;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 5, 5);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableListIterator0;
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyIterator.emptyIterator();
      HashMap<Object, SQLClientInfoException> hashMap0 = new HashMap<Object, SQLClientInfoException>();
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashMap0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      String string0 = "3LGl\\,LJRld&4/\"tD?";
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("3LGl,LJRld&4/\"tD?", "", hashtable0, sQLClientInfoException0);
      IteratorUtils.objectGraphIterator(sQLClientInfoException1, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<ClientInfoStatus>[] classArray0 = (Class<ClientInfoStatus>[]) Array.newInstance(Class.class, 9);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      classArray0[0] = class0;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      classArray0[1] = class1;
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      classArray0[2] = class2;
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      classArray0[4] = class3;
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      classArray0[5] = class4;
      Class<ClientInfoStatus> class5 = ClientInfoStatus.class;
      classArray0[6] = class5;
      Class<ClientInfoStatus> class6 = ClientInfoStatus.class;
      classArray0[7] = class6;
      Class<ClientInfoStatus> class7 = ClientInfoStatus.class;
      classArray0[8] = class7;
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer(", ", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Class<Object> class8 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) iterator0, class8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ', ' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      IteratorUtils.get((Iterator<Integer>) singletonListIterator0, 0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer((-631));
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<ComparatorPredicate.Criterion>) null, (Predicate<? super ComparatorPredicate.Criterion>) uniquePredicate0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("g!Eclvxe,l$&@YW=.a", "g!Eclvxe,l$&@YW=.a", hashtable0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.replace("g!Eclvxe,l$&@YW=.a", clientInfoStatus0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashtable0);
      sQLClientInfoException1.fillInStackTrace();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("g!Eclvxe,l$&@YW=.a", "$~*.u>-}t]_=Jr[;", 47);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("g!Eclvxe,l$&@YW=.a", "0{A e", 1528, sQLClientInfoException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, (long) 1528);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ListIterator<Stack<SQLRecoverableException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Class<String> class1 = String.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class1);
      predicateArray0[1] = predicate1;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[4] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[5] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[6] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[7] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[8] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Estimated size must be greater than 0");
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate2, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(instanceofPredicate0, transformer1, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<SQLRecoverableException>>) listIterator0, (Transformer<? super Stack<SQLRecoverableException>, String>) ifTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Estimated size must be greater than 0' on 'class java.util.Stack' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "org.apache.commons.collections4.iterators.ObjectGraphIterator", hashtable0);
      Hashtable<Object, SQLClientInfoException> hashtable1 = new Hashtable<Object, SQLClientInfoException>();
      HashMap<Object, SQLClientInfoException> hashMap0 = new HashMap<Object, SQLClientInfoException>();
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException1, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 8);
      closureArray0[0] = null;
      closureArray0[1] = null;
      closureArray0[2] = null;
      closureArray0[3] = null;
      closureArray0[4] = null;
      closureArray0[5] = null;
      closureArray0[6] = null;
      closureArray0[7] = null;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLClientInfoException>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) orderedIterator0, (Predicate<? super Locale.FilteringMode>) equalPredicate0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, Object> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ?>) orderedMapIterator0);
      IteratorUtils.toString((Iterator<SQLTimeoutException>) mapIterator0);
      Transformer<Object, ServiceLoader<IIOMetadataNode>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) mapIterator0, (Transformer<? super SQLTransientException, ? extends ServiceLoader<IIOMetadataNode>>) transformer0);
      OrderedMapIterator<HashMap<SQLTransientConnectionException, ClientInfoStatus>, Object> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<HashMap<SQLTransientConnectionException, ClientInfoStatus>, Object>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<SQLTimeoutException> iterator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer>(orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, 0L);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<Object> class1 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, class1);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("||~AUUtzh?[Yo3j", "", hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("||~AUUtzh?[Yo3j", "||~AUUtzh?[Yo3j", hashMap0, sQLClientInfoException0);
      Hashtable<Object, SQLClientInfoException> hashtable0 = new Hashtable<Object, SQLClientInfoException>();
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashtable0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException1, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator1, (Closure<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) treeSet0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, 0L);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) boundedIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      OrderedMapIterator<SQLTimeoutException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[4] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[5] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[7] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[8] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.getIterator("]f");
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "";
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, SQLTransientConnectionException> transformer0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) orderedMapIterator0, (Transformer<? super Integer, ? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedHashSet0.add(locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = linkedHashSet0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode>[] iteratorArray1 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray1[0] = iterator0;
      iteratorArray1[1] = iterator0;
      iteratorArray1[2] = iterator0;
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>[]) iteratorArray1);
      IteratorUtils.contains(iterator1, (Object) linkedHashSet0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) boundedIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) treeSet0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) boundedIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.emptyIterator();
      InvokerTransformer.invokerTransformer("Predicate must not be null");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) predicate0);
      int[] intArray0 = new int[0];
      SQLTransientException sQLTransientException0 = new SQLTransientException("Transformer must not be null");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("P=$vk6ak}ii.kTL", sQLTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning("Transformer must not be null", sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Hashtable<SQLTransactionRollbackException, Locale.FilteringMode> hashtable0 = new Hashtable<SQLTransactionRollbackException, Locale.FilteringMode>();
      Enumeration<Locale.FilteringMode> enumeration0 = hashtable0.elements();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.contains(iterator0, (Object) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "";
      IteratorUtils.getIterator("");
      int int0 = 1173;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 1173, 1173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IdentityPredicate.identityPredicate((Object) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "&";
      IteratorUtils.getIterator("&");
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null, (Collection<? super SQLTimeoutException>) linkedHashSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IdentityPredicate.identityPredicate((Object) "");
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedHashSet0.add(locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = linkedHashSet0.iterator();
      IteratorUtils.contains(iterator0, (Object) zippingIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      IteratorUtils.matchesAll((Iterator<Vector<Properties>>) null, (Predicate<? super Vector<Properties>>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedIterator0, 277L);
      IteratorUtils.emptyMapIterator();
      ServiceLoader<SQLIntegrityConstraintViolationException>[] serviceLoaderArray0 = (ServiceLoader<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ServiceLoader.class, 1);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      IteratorUtils.arrayIterator(serviceLoaderArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) class0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      OrderedMapIterator<Object, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Object, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      MapIterator<Object, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLFeatureNotSupportedException>) orderedMapIterator1);
      AbstractMapIteratorDecorator<Object, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, SQLFeatureNotSupportedException>(mapIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1, class0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLNonTransientException> loopingIterator0 = new LoopingIterator<SQLNonTransientException>(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) loopingIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      assertNotNull(predicate0);
      
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      IteratorUtils.toString(iterator0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      IteratorUtils.size(zippingIterator0);
      Iterator<ComparatorPredicate.Criterion> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.skippingIterator(iterator0, (long) 0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 511);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      String string0 = "u2V_|F\\*UnB*3D";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("u2V_|F*UnB*3D", (String) null, 0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, (-2303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) treeSet0);
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString(iterator0);
      OrderedIterator<Stack<SQLRecoverableException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>[]) iteratorArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Boolean>) zippingIterator0, (Predicate<? super Boolean>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<Stack<SQLRecoverableException>>) orderedIterator0, (Predicate<? super Stack<SQLRecoverableException>>) predicate1);
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Iterator<Properties> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) resettableListIterator0);
      IteratorUtils.matchesAll(iterator1, (Predicate<? super Properties>) predicate1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer(19);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("3ck/(*!kI^");
      IteratorUtils.transformedIterator((Iterator<? extends Integer>) singletonIterator0, (Transformer<? super Integer, ? extends SQLTransientConnectionException>) transformer0);
      Hashtable<SQLTransientException, SQLTimeoutException> hashtable0 = new Hashtable<SQLTransientException, SQLTimeoutException>();
      Enumeration<SQLTransientException> enumeration0 = hashtable0.keys();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) priorityQueue1);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("3ck/(*!kI^");
      IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) transformer1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer integer0 = new Integer((-1565));
      Integer integer1 = new Integer((-1320));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer1);
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer(">q%##");
      IteratorUtils.transformedIterator((Iterator<? extends Integer>) singletonIterator0, (Transformer<? super Integer, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientException[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(mapIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack0.add(properties0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedIterator0);
      OrderedIterator<Stack<SQLRecoverableException>> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.matchesAll((Iterator<Stack<SQLRecoverableException>>) orderedIterator1, (Predicate<? super Stack<SQLRecoverableException>>) predicate0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLTimeoutException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(mapIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) stack0);
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) null);
      OrderedIterator<Stack<SQLRecoverableException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.matchesAll((Iterator<Stack<SQLRecoverableException>>) orderedIterator0, (Predicate<? super Stack<SQLRecoverableException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(mapIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack0.add(properties0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedIterator0);
      OrderedIterator<Stack<SQLRecoverableException>> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.matchesAll((Iterator<Stack<SQLRecoverableException>>) orderedIterator1, (Predicate<? super Stack<SQLRecoverableException>>) predicate0);
      IteratorUtils.matchesAll((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(512);
      IteratorUtils.singletonIterator(integer0);
      Hashtable<SQLTransactionRollbackException, Locale.FilteringMode> hashtable0 = new Hashtable<SQLTransactionRollbackException, Locale.FilteringMode>();
      hashtable0.elements();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      linkedHashSet0.iterator();
      Integer integer0 = new Integer((-1565));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      InvokerTransformer.invokerTransformer("");
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      IteratorUtils.getIterator(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.filteredIterator((Iterator<?>) zippingIterator0, (Predicate<? super Object>) anyPredicate0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      Iterator<Properties>[] iteratorArray1 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("(iW{G4MYnE |0$A1");
      IteratorUtils.emptyIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.getIterator("(iW{G4MYnE |0$A1");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dis bq9+~hA{#]iM^^");
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = stack0.listIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      ListIterator<SQLNonTransientException> listIterator2 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator1, (Iterator<? extends SQLNonTransientException>) listIterator2, (Iterator<? extends SQLNonTransientException>) listIterator2);
      IteratorUtils.isEmpty(listIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>(sQLTransientConnectionException0, 3686, (-300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("+D{IXw$_%");
      iIOMetadataNode0.item(0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 0);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) resettableListIterator0, (Object) locale_FilteringMode0);
      IteratorUtils.size(resettableListIterator0);
      Iterator<ComparatorPredicate.Criterion> iterator0 = EmptyIterator.emptyIterator();
      SkippingIterator<ComparatorPredicate.Criterion> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, (long) 0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IdentityPredicate.identityPredicate((Object) null);
      Iterator<ComparatorPredicate.Criterion> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedHashSet0.add(locale_FilteringMode0);
      Iterator<SQLNonTransientException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dis bq9+~hA{#]iM^^");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("dis bq9+~hA{#]iM^^", "dis bq9+~hA{#]iM^^", true);
      stringTokenizer0.nextElement();
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.filteredIterator((Iterator<?>) zippingIterator0, (Predicate<? super Object>) anyPredicate0);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedHashSet0.spliterator();
      linkedHashSet0.add(locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = linkedHashSet0.iterator();
      IteratorUtils.contains(iterator0, (Object) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<IIOMetadataNode, IIOMetadataNode> hashMap0 = new HashMap<IIOMetadataNode, IIOMetadataNode>();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Hashtable<SQLTransactionRollbackException, Locale.FilteringMode> hashtable0 = new Hashtable<SQLTransactionRollbackException, Locale.FilteringMode>();
      Enumeration<Locale.FilteringMode> enumeration0 = hashtable0.elements();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.contains(iterator0, (Object) instanceofPredicate0);
      IteratorUtils.size(nodeListIterator0);
      Iterator<ComparatorPredicate.Criterion> iterator1 = EmptyIterator.emptyIterator();
      SkippingIterator<ComparatorPredicate.Criterion> skippingIterator0 = IteratorUtils.skippingIterator(iterator1, (long) 0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableListIterator<ArrayDeque<LinkedHashSet>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      HashMap<IIOMetadataNode, IIOMetadataNode> hashMap0 = new HashMap<IIOMetadataNode, IIOMetadataNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(entrySetMapIterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(iterable0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(0, sQLInvalidAuthorizationSpecExceptionArray0.length);
      
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0);
      assertNotNull(zippingIterator0);
      assertEquals(0, sQLInvalidAuthorizationSpecExceptionArray0.length);
      
      IteratorUtils.isEmpty(resettableListIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) null, (Object) resettableIterator0);
      IteratorUtils.size(entrySetMapIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.filteredIterator((Iterator<?>) zippingIterator0, (Predicate<? super Object>) anyPredicate0);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedHashSet0.add(locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = linkedHashSet0.iterator();
      IteratorUtils.contains(iterator0, (Object) zippingIterator0);
      Integer integer0 = new Integer((-1565));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      IteratorUtils.contains(iterator0, (Object) null);
      IteratorUtils.size(singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IteratorUtils.getIterator("<%FBGhIFi");
      IteratorUtils.emptyIterator();
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("delimiter may not be null", (String) null, sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("delimiter may not be null", (String) null);
      Hashtable<SQLTransactionRollbackException, Locale.FilteringMode> hashtable0 = new Hashtable<SQLTransactionRollbackException, Locale.FilteringMode>();
      Enumeration<Locale.FilteringMode> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("D# ~kuMF+IgH=EV%");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends SQLTransientConnectionException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, SQLTimeoutException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLTimeoutException>) mapIterator0);
      long long0 = 0L;
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) mapIterator1, 0L);
      IteratorUtils.size(skippingIterator0);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(arrayList0);
      String string0 = "aSG<:l=o*a7=8mi";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("aSG<:l=o*a7=8mi", "aSG<:l=o*a7=8mi", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        reverseListIterator0.set(sQLTransientConnectionException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(mapIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) stack0);
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<IIOMetadataNode, IIOMetadataNode> hashMap0 = new HashMap<IIOMetadataNode, IIOMetadataNode>();
      HashMap<Object, SQLFeatureNotSupportedException> hashMap1 = new HashMap<Object, SQLFeatureNotSupportedException>();
      int int0 = 519;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) hashMap0, 519, 1013);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator";
      String string0 = ").";
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("V6&+:yi)YE,EFA6", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator", (-1));
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(").", "EQUAL", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Predicate must not be null", "V6&+:yi)YE,EFA6", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1, 1);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JFA%");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("k><p*tIM:Y6_x{#", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("k><p*tIM:Y6_x{#", "JFA%", 3258);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientConnectionException3);
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("Invalid map index: ", sQLWarning0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("Hs #h0@.g\"j[$Z2L", (String) null, 3258);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 3258);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.getIterator("<%FBGhIFi");
      IteratorUtils.emptyIterator();
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      IdentityPredicate.identityPredicate((Object) "<%FBGhIFi");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "<%FBGhIFi", 1, (Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      OrderedMapIterator<SQLTimeoutException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[4] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[5] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[7] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[8] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      IteratorUtils.toString(iterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("uF*g^<I", ".;JW1GL{7mL");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Array class must not be null", "prefix may not be null", (-378), sQLFeatureNotSupportedException0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      int int0 = 2200;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", ", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("#43ABi", "#43ABi", 2200, sQLIntegrityConstraintViolationException0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 7);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      Class<DataTruncation> class6 = DataTruncation.class;
      classArray0[6] = class6;
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLNonTransientException0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 2200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLNonTransientException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 9, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Integer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer>(orderedMapIterator1);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0, (Transformer<? super Object, ? extends SQLTransientConnectionException>) transformer0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null, 1652, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException("ZubbTT<|)U )92z", "|dN9iE]YKx4i4a%k3", 1);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("|dN9iE]YKx4i4a%k3", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(" must be Comparable", "ZubbTT<|)U )92z", 3686, sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "|dN9iE]YKx4i4a%k3");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("|dN9iE]YKx4i4a%k3", "|,X", 3686);
      sQLDataExceptionArray0[4] = sQLDataException4;
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) stack0);
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer>(orderedMapIterator0);
      IteratorUtils.toString((Iterator<SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) zippingIterator0, (Predicate<? super Object>) anyPredicate0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super LinkedList<Vector<SQLDataException>>>>) stack0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      Iterator<InstanceofPredicate>[] iteratorArray1 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 8);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ListIterator<InstanceofPredicate> listIterator0 = arrayList0.listIterator();
      iteratorArray1[0] = (Iterator<InstanceofPredicate>) listIterator0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray1[1] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      BoundedIterator<InstanceofPredicate> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends InstanceofPredicate>) listIterator0, 1L);
      iteratorArray1[2] = (Iterator<InstanceofPredicate>) boundedIterator0;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      iteratorArray1[3] = (Iterator<InstanceofPredicate>) singletonIterator0;
      OrderedMapIterator<InstanceofPredicate, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLSyntaxErrorException>(orderedMapIterator0);
      iteratorArray1[4] = (Iterator<InstanceofPredicate>) abstractOrderedMapIteratorDecorator0;
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) abstractOrderedMapIteratorDecorator0);
      iteratorArray1[5] = iterator1;
      ListIterator<InstanceofPredicate> listIterator1 = arrayList0.listIterator();
      iteratorArray1[6] = (Iterator<InstanceofPredicate>) listIterator1;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>((InstanceofPredicate[]) null, 1762);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("+{HtgA_^<)|K>Z(", " RpJYd~m[", 706, sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, 706, sQLInvalidAuthorizationSpecException1);
      iIOMetadataNode0.hasAttributes();
      SQLDataException sQLDataException1 = new SQLDataException("", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator");
      SQLDataException sQLDataException2 = new SQLDataException("", "", 3686);
      SQLDataException sQLDataException3 = new SQLDataException("Collection must not be null", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLDataException2);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      sQLDataExceptionArray0[0] = sQLDataException2;
      sQLDataExceptionArray0[1] = sQLDataException2;
      sQLDataExceptionArray0[2] = sQLDataException3;
      sQLDataExceptionArray0[3] = sQLDataException2;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) objectArrayListIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) nodeListIterator0, 3686);
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(list0);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getNodeName();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, (-558));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException("ZubbTT<|)U )92z", "|dN9iE]YKx4i4a%k3", 1);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("|dN9iE]YKx4i4a%k3", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("ZubbTT<|)U )92z", "ZubbTT<|)U )92z", 3686, sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "|dN9iE]YKx4i4a%k3");
      sQLDataExceptionArray0[3] = sQLDataException3;
      OrderedMapIterator<SQLTimeoutException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, String> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends String>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) mapIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) linkedList0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(orderedMapIterator1);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException>) orderedMapIterator1);
      Stack<Properties> stack0 = new Stack<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) stack0);
      ArrayListIterator<PriorityQueue<SQLTransactionRollbackException>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<PriorityQueue<SQLTransactionRollbackException>>(mapIterator1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<SQLTransientException> predicate0 = new UniquePredicate<SQLTransientException>();
      NullIsExceptionPredicate<SQLTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLTransientException>(predicate0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) nullIsExceptionPredicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientConnectionException>) nullIsExceptionPredicate0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) zippingIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) iterator1);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      MapIterator<SQLTimeoutException, String> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends String>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) iterator1, (Iterator<? extends SQLTimeoutException>) mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(mapIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) stack0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedIterator0);
      OrderedIterator<Stack<SQLRecoverableException>> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.matchesAll((Iterator<Stack<SQLRecoverableException>>) orderedIterator1, (Predicate<? super Stack<SQLRecoverableException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      Locale.FilteringMode locale_FilteringMode8 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[8] = locale_FilteringMode8;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) locale_FilteringMode7, comparator0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<SQLTransientException> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<SQLTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLTransientException>(predicate0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) nullIsExceptionPredicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientConnectionException>) nullIsExceptionPredicate0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) zippingIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) iterator1);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode5;
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends String>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) linkedList0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(orderedMapIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) stack0);
      IteratorUtils.toString((Iterator<SQLTimeoutException>) mapIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Enumeration<SQLDataException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      Iterator<SQLDataException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration1, (Collection<? super SQLDataException>) priorityQueue0);
      ZippingIterator<SQLDataException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) iterator2, (Iterator<? extends SQLDataException>) iterator2, (Iterator<? extends SQLDataException>) resettableIterator0);
      IteratorUtils.toString((Iterator<SQLDataException>) zippingIterator1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.hasChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableListIterator0, (Iterator<? extends SQLTransientException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("Estimated size must be greater than 0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      assertNotNull(resettableIterator0);
      assertEquals(5, locale_FilteringModeArray0.length);
      
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      assertEquals(5, locale_FilteringModeArray0.length);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Transformer must not be null", "gcn}2Qs|<WboWxn$</B", (-1), (Throwable) null);
      assertEquals("java.sql.SQLRecoverableException: Transformer must not be null", sQLRecoverableException0.toString());
      assertEquals((-1), sQLRecoverableException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getMessage());
      assertEquals("gcn}2Qs|<WboWxn$</B", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      assertNotNull(factoryTransformer0);
      
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("&0T::r*]5", "I;)wrMI9nB9e2");
      assertEquals("java.sql.SQLFeatureNotSupportedException: &0T::r*]5", sQLFeatureNotSupportedException0.toString());
      assertEquals("&0T::r*]5", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("I;)wrMI9nB9e2", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "9#$$9{Ln", (-52), sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: &0T::r*]5", sQLFeatureNotSupportedException0.toString());
      assertEquals("&0T::r*]5", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("I;)wrMI9nB9e2", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("9#$$9{Ln", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals((-52), sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      assertNotNull(factoryTransformer0);
      
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      assertNotNull(predicate0);
      
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      assertNotNull(instanceofPredicate2);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[2] = instanceofPredicate2;
      PredicateTransformer<SQLRecoverableException> predicateTransformer0 = new PredicateTransformer<SQLRecoverableException>(instanceofPredicate2);
      assertNotNull(predicateTransformer0);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "&0T::r*]5");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("&0T::r*]5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("uF*g^<I", "uF*g^<I", (-378), sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("&0T::r*]5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLRecoverableException: uF*g^<I", sQLRecoverableException0.toString());
      assertEquals("uF*g^<I", sQLRecoverableException0.getMessage());
      assertEquals((-378), sQLRecoverableException0.getErrorCode());
      assertEquals("uF*g^<I", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      Boolean boolean0 = predicateTransformer0.transform(sQLRecoverableException0);
      assertFalse(boolean0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("&0T::r*]5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLRecoverableException: uF*g^<I", sQLRecoverableException0.toString());
      assertEquals("uF*g^<I", sQLRecoverableException0.getMessage());
      assertEquals((-378), sQLRecoverableException0.getErrorCode());
      assertEquals("uF*g^<I", sQLRecoverableException0.getSQLState());
      assertNotSame(instanceofPredicate2, instanceofPredicate1);
      assertNotSame(instanceofPredicate2, instanceofPredicate0);
      assertNotNull(boolean0);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("&0T::r*]5", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLRecoverableException: uF*g^<I", sQLRecoverableException0.toString());
      assertEquals("uF*g^<I", sQLRecoverableException0.getMessage());
      assertEquals((-378), sQLRecoverableException0.getErrorCode());
      assertEquals("uF*g^<I", sQLRecoverableException0.getSQLState());
      assertNotNull(constantTransformer0);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 3);
      transformerArray0[0] = (Transformer<Object, Boolean>) constantTransformer0;
      transformerArray0[1] = (Transformer<Object, Boolean>) constantTransformer0;
      transformerArray0[2] = (Transformer<Object, Boolean>) constantTransformer0;
      Transformer<Object, Boolean> transformer0 = SwitchTransformer.switchTransformer((Predicate<? super Object>[]) instanceofPredicateArray0, (Transformer<? super Object, ? extends Boolean>[]) transformerArray0, (Transformer<? super Object, ? extends Boolean>) transformerArray0[0]);
      assertNotNull(transformer0);
      assertEquals(3, transformerArray0.length);
      assertEquals(3, instanceofPredicateArray0.length);
      
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      assertNotNull(factoryTransformer0);
      
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      assertNotNull(predicate0);
      
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      assertNotNull(iterator0);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ListIterator<SQLNonTransientException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) instanceofPredicate1);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertSame(class1, class0);
      assertNotSame(instanceofPredicate1, instanceofPredicate0);
      assertNotSame(instanceofPredicate1, instanceofPredicate2);
      assertNotNull(listIterator1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate2));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode1;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode2;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      assertNotNull(resettableIterator0);
      assertEquals(5, locale_FilteringModeArray0.length);
      
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResettableListIterator<ArrayDeque<LinkedHashSet>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      HashMap<IIOMetadataNode, IIOMetadataNode> hashMap0 = new HashMap<IIOMetadataNode, IIOMetadataNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(iterable0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(0, sQLInvalidAuthorizationSpecExceptionArray0.length);
      
      HashMap<Object, SQLFeatureNotSupportedException> hashMap1 = new HashMap<Object, SQLFeatureNotSupportedException>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      EntrySetMapIterator<Object, SQLFeatureNotSupportedException> entrySetMapIterator1 = new EntrySetMapIterator<Object, SQLFeatureNotSupportedException>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(entrySetMapIterator1);
      
      MapIterator<Object, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLFeatureNotSupportedException>) entrySetMapIterator1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<Object, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, SQLFeatureNotSupportedException>(mapIterator0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(abstractMapIteratorDecorator0);
      
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<ArrayDeque<LinkedHashSet>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      HashMap<IIOMetadataNode, IIOMetadataNode> hashMap0 = new HashMap<IIOMetadataNode, IIOMetadataNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, IIOMetadataNode>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(iterable0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(0, sQLInvalidAuthorizationSpecExceptionArray0.length);
      
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0);
      assertNotNull(zippingIterator0);
      assertEquals(0, sQLInvalidAuthorizationSpecExceptionArray0.length);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>((Object) null, 2332, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "";
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
      
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      MapIterator<Locale.FilteringMode, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      long long0 = 1251L;
      long long1 = (-2339L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, 1251L, (-2339L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 5);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      iteratorArray0[0] = (Iterator<SQLWarning>) orderedIterator0;
      BoundedIterator<SQLWarning> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) iteratorArray0[0], 0L, 2221L);
      assertNotNull(boundedIterator0);
      assertEquals(5, iteratorArray0.length);
      
      iteratorArray0[1] = (Iterator<SQLWarning>) boundedIterator0;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      int int0 = 743;
      int int1 = 100;
      DataTruncation dataTruncation0 = new DataTruncation(743, true, true, 743, 100);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      Transformer<SQLException, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(transformer0);
      
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super SQLException>) null, (Transformer<? super SQLException, ? extends DataTruncation>) transformer0, (Transformer<? super SQLException, ? extends DataTruncation>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      String string0 = "ZubbTT<|)U )92z";
      int int0 = 1;
      SQLDataException sQLDataException0 = new SQLDataException("ZubbTT<|)U )92z", "|dN9iE]YKx4i4a%k3", 1);
      assertEquals("ZubbTT<|)U )92z", sQLDataException0.getMessage());
      assertEquals(1, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ZubbTT<|)U )92z", sQLDataException0.toString());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("|dN9iE]YKx4i4a%k3", sQLDataException0);
      assertEquals("ZubbTT<|)U )92z", sQLDataException0.getMessage());
      assertEquals(1, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ZubbTT<|)U )92z", sQLDataException0.toString());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: |dN9iE]YKx4i4a%k3", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException1.getMessage());
      assertNotNull(sQLDataException1);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      String string1 = " must be Comparable";
      SQLDataException sQLDataException2 = new SQLDataException(" must be Comparable", "ZubbTT<|)U )92z", 3686, sQLDataException1);
      assertEquals("ZubbTT<|)U )92z", sQLDataException0.getMessage());
      assertEquals(1, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ZubbTT<|)U )92z", sQLDataException0.toString());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: |dN9iE]YKx4i4a%k3", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException1.getMessage());
      assertEquals(" must be Comparable", sQLDataException2.getMessage());
      assertEquals("java.sql.SQLDataException:  must be Comparable", sQLDataException2.toString());
      assertEquals(3686, sQLDataException2.getErrorCode());
      assertEquals("ZubbTT<|)U )92z", sQLDataException2.getSQLState());
      assertNotNull(sQLDataException2);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ZubbTT<|)U )92z", " must be Comparable", 787, sQLDataException2);
      assertEquals("ZubbTT<|)U )92z", sQLDataException0.getMessage());
      assertEquals(1, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ZubbTT<|)U )92z", sQLDataException0.toString());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: |dN9iE]YKx4i4a%k3", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException1.getMessage());
      assertEquals(" must be Comparable", sQLDataException2.getMessage());
      assertEquals("java.sql.SQLDataException:  must be Comparable", sQLDataException2.toString());
      assertEquals(3686, sQLDataException2.getErrorCode());
      assertEquals("ZubbTT<|)U )92z", sQLDataException2.getSQLState());
      assertEquals(787, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" must be Comparable", sQLTransientConnectionException0.getSQLState());
      assertEquals("ZubbTT<|)U )92z", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ZubbTT<|)U )92z", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException2));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      assertEquals("ZubbTT<|)U )92z", sQLDataException0.getMessage());
      assertEquals(1, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ZubbTT<|)U )92z", sQLDataException0.toString());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: |dN9iE]YKx4i4a%k3", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException1.getMessage());
      assertEquals(" must be Comparable", sQLDataException2.getMessage());
      assertEquals("java.sql.SQLDataException:  must be Comparable", sQLDataException2.toString());
      assertEquals(3686, sQLDataException2.getErrorCode());
      assertEquals("ZubbTT<|)U )92z", sQLDataException2.getSQLState());
      assertEquals(787, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" must be Comparable", sQLTransientConnectionException0.getSQLState());
      assertEquals("ZubbTT<|)U )92z", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ZubbTT<|)U )92z", sQLTransientConnectionException0.toString());
      assertNotSame(sQLDataException0, sQLDataException2);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(sQLDataException1, sQLDataException2);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertNotSame(sQLDataException2, sQLDataException1);
      assertNotSame(sQLDataException2, sQLDataException0);
      assertNotNull(resettableIterator0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException2));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<InstanceofPredicate> arrayDeque1 = arrayDeque0.clone();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(predicate0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertEquals("ZubbTT<|)U )92z", sQLDataException0.getMessage());
      assertEquals(1, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ZubbTT<|)U )92z", sQLDataException0.toString());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: |dN9iE]YKx4i4a%k3", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("|dN9iE]YKx4i4a%k3", sQLDataException1.getMessage());
      assertEquals(" must be Comparable", sQLDataException2.getMessage());
      assertEquals("java.sql.SQLDataException:  must be Comparable", sQLDataException2.toString());
      assertEquals(3686, sQLDataException2.getErrorCode());
      assertEquals("ZubbTT<|)U )92z", sQLDataException2.getSQLState());
      assertEquals(787, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" must be Comparable", sQLTransientConnectionException0.getSQLState());
      assertEquals("ZubbTT<|)U )92z", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ZubbTT<|)U )92z", sQLTransientConnectionException0.toString());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(sQLDataException0, sQLDataException2);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(sQLDataException1, sQLDataException2);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertNotSame(sQLDataException2, sQLDataException1);
      assertNotSame(sQLDataException2, sQLDataException0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(iterator0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException2));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (long) 787, (-2596L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Predicate<SQLTransientException> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      NullIsExceptionPredicate<SQLTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLTransientException>(predicate0);
      assertNotNull(nullIsExceptionPredicate0);
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) nullIsExceptionPredicate0);
      assertNotNull(iterator0);
      
      Predicate<SQLTransientConnectionException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientConnectionException>) nullIsExceptionPredicate0);
      assertNotNull(predicate1);
      
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      assertNotNull(zippingIterator0);
      
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) zippingIterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Iterator<SQLTimeoutException> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) iterator1);
      assertNotNull(iterator2);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator1));
      assertFalse(iterator2.equals((Object)iterator0));
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode6;
      MapIterator<SQLTimeoutException, String> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends String>) mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      ZippingIterator<SQLTimeoutException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      assertNotSame(zippingIterator1, zippingIterator0);
      assertNotNull(zippingIterator1);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator0.equals((Object)iterator2));
      assertFalse(zippingIterator1.equals((Object)zippingIterator0));
      
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      assertNotNull(enumeration0);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator0.equals((Object)iterator2));
      
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<SQLTimeoutException> iterator3 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator3);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator0.equals((Object)iterator2));
      assertFalse(iterator3.equals((Object)iterator2));
      assertFalse(iterator3.equals((Object)iterator1));
      assertFalse(iterator3.equals((Object)iterator0));
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator2 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(mapIterator2);
      
      Stack<Properties> stack0 = new Stack<Properties>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      boolean boolean0 = stack0.add(properties0);
      assertTrue(boolean0);
      assertTrue(stack0.contains(properties0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[{}]", stack0.toString());
      
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      assertTrue(stack0.contains(properties0));
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[{}]", stack0.toString());
      assertNotNull(resettableListIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) mapIterator0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
      
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(anyPredicate0);
      
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) zippingIterator0, (Predicate<? super Object>) anyPredicate0);
      assertNotNull(iterator0);
      assertEquals(0, iteratorArray0.length);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = linkedHashSet0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(locale_FilteringMode0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Iterator<Locale.FilteringMode> iterator1 = linkedHashSet0.iterator();
      assertTrue(linkedHashSet0.contains(locale_FilteringMode0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertNotNull(iterator1);
      
      boolean boolean1 = IteratorUtils.contains(iterator1, (Object) zippingIterator0);
      assertFalse(boolean1);
      assertTrue(linkedHashSet0.contains(locale_FilteringMode0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, iteratorArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) zippingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertNotNull(loopingListIterator0);
      
      DataTruncation dataTruncation0 = new DataTruncation(5, true, false, 5, (-888));
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      boolean boolean0 = arrayList0.add(dataTruncation0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(dataTruncation0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      int int0 = 0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 0, 0);
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertNotNull(dataTruncation1);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      
      Spliterator<Throwable> spliterator0 = dataTruncation1.spliterator();
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertNotSame(dataTruncation1, dataTruncation0);
      assertNotNull(spliterator0);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      
      // Undeclared exception!
      try { 
        loopingListIterator0.set(dataTruncation1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ArrayDeque<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Throwable[] throwableArray0 = sQLTransientConnectionException0.getSuppressed();
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertEquals("", string0);
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(string0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) listIterator0, (Object) sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      HashSet<SQLSyntaxErrorException> hashSet0 = new HashSet<SQLSyntaxErrorException>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean1 = arrayDeque0.retainAll(hashSet0);
      assertFalse(boolean1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray1 = arrayDeque0.toArray(sQLInvalidAuthorizationSpecExceptionArray0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertSame(sQLInvalidAuthorizationSpecExceptionArray0, sQLInvalidAuthorizationSpecExceptionArray1);
      assertSame(sQLInvalidAuthorizationSpecExceptionArray1, sQLInvalidAuthorizationSpecExceptionArray0);
      assertNotNull(sQLInvalidAuthorizationSpecExceptionArray1);
      assertEquals(1, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertEquals(1, sQLInvalidAuthorizationSpecExceptionArray1.length);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(resettableIterator0);
      
      OrderedMapIterator<Boolean, SQLTransactionRollbackException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "null values not allowed", (-645), sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals((-645), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("null values not allowed", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNotNull(sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("\"J", "", (-645));
      assertEquals("java.sql.SQLSyntaxErrorException: \"J", sQLSyntaxErrorException2.toString());
      assertEquals("\"J", sQLSyntaxErrorException2.getMessage());
      assertEquals((-645), sQLSyntaxErrorException2.getErrorCode());
      assertEquals("", sQLSyntaxErrorException2.getSQLState());
      assertNotNull(sQLSyntaxErrorException2);
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", sQLSyntaxErrorException1);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException3.toString());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals("", sQLSyntaxErrorException3.getMessage());
      assertNotNull(sQLSyntaxErrorException3);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecExceptionArray0[0]);
      assertNull(sQLSyntaxErrorException4.getMessage());
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException4.toString());
      assertNotNull(sQLSyntaxErrorException4);
      assertEquals(1, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("null values not allowed");
      assertNull(sQLSyntaxErrorException5.getSQLState());
      assertEquals("null values not allowed", sQLSyntaxErrorException5.getMessage());
      assertEquals(0, sQLSyntaxErrorException5.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: null values not allowed", sQLSyntaxErrorException5.toString());
      assertNotNull(sQLSyntaxErrorException5);
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("", (String) null);
      assertEquals(0, sQLSyntaxErrorException6.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException6.toString());
      assertNull(sQLSyntaxErrorException6.getSQLState());
      assertEquals("", sQLSyntaxErrorException6.getMessage());
      assertNotNull(sQLSyntaxErrorException6);
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException2));
      
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, (-318), (-3283));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("&0T::r*]5", "I;)wrMI9nB9e2");
      assertEquals("java.sql.SQLFeatureNotSupportedException: &0T::r*]5", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("I;)wrMI9nB9e2", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("&0T::r*]5", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      int int0 = (-52);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "9#$$9{Ln", (-52), sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: &0T::r*]5", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("I;)wrMI9nB9e2", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("&0T::r*]5", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("9#$$9{Ln", sQLRecoverableException0.getSQLState());
      assertEquals((-52), sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      assertNotNull(factoryTransformer0);
      
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      assertNotNull(predicate0);
      
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<Properties>) resettableIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(iterator0);
      
      iteratorArray0[1] = iterator0;
      MapIterator<Properties, LinkedList<SQLTransientConnectionException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[2] = (Iterator<Properties>) mapIterator0;
      Collection<Properties> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<Boolean, SQLNonTransientException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLNonTransientException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      Iterable<Boolean> iterable0 = IteratorUtils.asIterable((Iterator<? extends Boolean>) mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterable0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate2);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate3);
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate2));
      
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<Properties> class2 = Properties.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class2);
      assertNotNull(instanceofPredicate4);
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate2));
      
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class3);
      assertNotNull(instanceofPredicate5);
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate2));
      
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Class<Properties> class4 = Properties.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class4);
      assertNotNull(instanceofPredicate6);
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate5));
      
      instanceofPredicateArray0[6] = instanceofPredicate6;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(7, instanceofPredicateArray0.length);
      
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      assertTrue(list0.contains(instanceofPredicate1));
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(7, instanceofPredicateArray0.length);
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      assertTrue(list0.contains(instanceofPredicate1));
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(predicate0);
      assertEquals(7, instanceofPredicateArray0.length);
      
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      assertTrue(list0.contains(instanceofPredicate1));
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(predicate1);
      assertEquals(7, instanceofPredicateArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[0] = predicate1;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) uniquePredicate0);
      assertTrue(list0.contains(instanceofPredicate1));
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(predicate2);
      assertEquals(7, instanceofPredicateArray0.length);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      predicateArray0[2] = predicate2;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class4);
      assertNotNull(instanceofPredicate7);
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate6));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate2));
      
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate7;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate((Object) predicate2, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertTrue(list0.contains(instanceofPredicate1));
      assertFalse(list0.contains(instanceofPredicate7));
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(predicate3);
      assertEquals(7, instanceofPredicateArray0.length);
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      predicateArray0[4] = predicate3;
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stringTokenizer0, defaultEquator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      predicateArray0[5] = (Predicate<Object>) equalPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate7, instanceofPredicate7);
      assertNotNull(andPredicate0);
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate6));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate2));
      
      predicateArray0[6] = (Predicate<Object>) andPredicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(predicateArray0, (-1390), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, (-246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Transformer must not be null", (String) null);
      assertEquals("java.sql.SQLTransactionRollbackException: Transformer must not be null", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("Transformer must not be null", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNotNull(sQLTransactionRollbackException1);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("r");
      assertEquals("r", sQLTransactionRollbackException2.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: r", sQLTransactionRollbackException2.toString());
      assertNull(sQLTransactionRollbackException2.getSQLState());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertNotNull(sQLTransactionRollbackException2);
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", sQLTransactionRollbackException2);
      assertEquals("r", sQLTransactionRollbackException2.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: r", sQLTransactionRollbackException2.toString());
      assertNull(sQLTransactionRollbackException2.getSQLState());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException3.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException3.toString());
      assertNull(sQLTransactionRollbackException3.getSQLState());
      assertEquals("", sQLTransactionRollbackException3.getMessage());
      assertNotNull(sQLTransactionRollbackException3);
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException((String) null, "");
      assertEquals("", sQLTransactionRollbackException4.getSQLState());
      assertNull(sQLTransactionRollbackException4.getMessage());
      assertEquals(0, sQLTransactionRollbackException4.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException4.toString());
      assertNotNull(sQLTransactionRollbackException4);
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException1));
      
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, (-1337), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.singletonIterator(integer0);
      assertNotNull(resettableIterator1);
      
      Integer integer1 = IteratorUtils.get((Iterator<Integer>) resettableIterator1, 0);
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 512;
      Integer integer0 = new Integer(512);
      assertEquals(512, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      assertNotNull(resettableIterator0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) resettableIterator0, 512);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 511
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = new Integer(512);
      assertEquals(512, (int)integer0);
      assertNotNull(integer0);
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) resettableIterator0, 512);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 511
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
      
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(3580, 3580);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("2I\"tl&$CKW,", "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", 0, hashMap0, batchUpdateException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("2I\"tl&$CKW,", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: 2I\"tl&$CKW,", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("-2t;u4s0o#|=I$K^mX", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(" AyW2}N>1+0 wf`#;", "-2t;u4s0o#|=I$K^mX", 115, hashMap0, batchUpdateException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(115, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException:  AyW2}N>1+0 wf`#;", sQLClientInfoException1.toString());
      assertEquals("-2t;u4s0o#|=I$K^mX", sQLClientInfoException1.getSQLState());
      assertEquals(" AyW2}N>1+0 wf`#;", sQLClientInfoException1.getMessage());
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("2I\"tl&$CKW,", "", hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("2I\"tl&$CKW,", sQLClientInfoException2.getMessage());
      assertEquals("", sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: 2I\"tl&$CKW,", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNotNull(sQLClientInfoException2);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      assertNull(sQLClientInfoException3.getMessage());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException3.toString());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertNotNull(sQLClientInfoException3);
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", "dm<Rk>K,m`{F@", 1833, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException4.toString());
      assertEquals(1833, sQLClientInfoException4.getErrorCode());
      assertEquals("dm<Rk>K,m`{F@", sQLClientInfoException4.getSQLState());
      assertEquals("", sQLClientInfoException4.getMessage());
      assertNotNull(sQLClientInfoException4);
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashMap0);
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException5.toString());
      assertNull(sQLClientInfoException5.getSQLState());
      assertNull(sQLClientInfoException5.getMessage());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(sQLClientInfoException5);
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, 563);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("n:");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: n:", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("n:", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      int int0 = 2791;
      StackTraceElement stackTraceElement0 = new StackTraceElement("E6y`ww", "Closure must not be null", "e,", 2791);
      assertEquals("E6y`ww.Closure must not be null(e,:2791)", stackTraceElement0.toString());
      assertEquals("E6y`ww", stackTraceElement0.getClassName());
      assertEquals("e,", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(2791, stackTraceElement0.getLineNumber());
      assertEquals("Closure must not be null", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: n:", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("n:", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1, stackTraceElementArray0.length);
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertEquals("n:", string0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: n:", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("n:", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(string0);
      
      int int1 = (-578);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, (-578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      
      Predicate<Object>[] predicateArray0 = null;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(anyPredicate0);
      
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) zippingIterator0, (Predicate<? super Object>) anyPredicate0);
      assertNotNull(iterator0);
      assertEquals(0, iteratorArray0.length);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Iterator<Locale.FilteringMode> iterator1 = linkedHashSet0.iterator();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(iterator1);
      
      boolean boolean0 = IteratorUtils.contains(iterator1, (Object) zippingIterator0);
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, iteratorArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) zippingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      String string1 = iIOMetadataNode0.getNodeName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      int int0 = (-558);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringTokenizerArray0, (-558));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      assertNotNull(instanceofPredicate2);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      
      instanceofPredicateArray0[2] = instanceofPredicate2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, (-378), (-378));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = ":OC,Ivw-";
      int int0 = (-1006);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":OC,Ivw-", ":OC,Ivw-", (-1006));
      assertEquals(":OC,Ivw-", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: :OC,Ivw-", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1006), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(":OC,Ivw-", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLFeatureNotSupportedException0, (Transformer<? super Object, ?>) transformer0);
      assertEquals(":OC,Ivw-", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: :OC,Ivw-", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1006), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(":OC,Ivw-", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(iterator0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1006));
      assertEquals((-1006), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1006), (int)integer1);
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1006));
      assertEquals((-1006), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("(iW{G4MYnE |0$A1");
      assertNotNull(iterator0);
      
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains("(iW{G4MYnE |0$A1"));
      assertNotNull(treeSet0);
      
      Hashtable<Object, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Object, SQLFeatureNotSupportedException>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<Object, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLFeatureNotSupportedException>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      MapIterator<Object, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLFeatureNotSupportedException>) entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<Object, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, SQLFeatureNotSupportedException>(entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(abstractMapIteratorDecorator0);
      
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MapIterator<SQLClientInfoException, HashSet<ServiceLoader>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLClientInfoException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends IIOMetadataNode>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      MapIterator<SQLSyntaxErrorException, PriorityQueue<LinkedHashSet>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, PriorityQueue<LinkedHashSet>>) orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ResettableIterator<Vector<SQLTimeoutException>> resettableIterator0 = IteratorUtils.singletonIterator((Vector<SQLTimeoutException>) stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(resettableIterator0);
      
      ArrayIterator<Integer> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Integer>(orderedMapIterator1, (-560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      int[] intArray0 = new int[19];
      intArray0[0] = 511;
      intArray0[1] = 1450;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("No value can be removed at present", "No value can be removed at present", 511, intArray0);
      assertEquals("java.sql.BatchUpdateException: No value can be removed at present", batchUpdateException0.toString());
      assertEquals("No value can be removed at present", batchUpdateException0.getMessage());
      assertEquals("No value can be removed at present", batchUpdateException0.getSQLState());
      assertEquals(511, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertEquals(19, intArray0.length);
      
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) nodeListIterator0);
      assertFalse(list0.contains(1450));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(list0);
      assertFalse(list0.contains(1450));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertNotNull(loopingListIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      assertFalse(list0.contains(1450));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException("ZubbTT<|)U )92z", "|dN9iE]YKx4i4a%k3", 1);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("|dN9iE]YKx4i4a%k3", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(" must be Comparable", "ZubbTT<|)U )92z", 3686, sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "|dN9iE]YKx4i4a%k3");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("|dN9iE]YKx4i4a%k3", "|,X", 3686);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "o&-={\"rPVx962cmtv", sQLDataException3);
      sQLDataExceptionArray0[5] = sQLDataException5;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) objectArrayListIterator0, (Iterator<? extends SQLDataException>) objectArrayListIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) iterator0, 1);
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(list0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      instanceofPredicateArray0[0] = instanceofPredicate2;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      instanceofPredicateArray0[3] = instanceofPredicate2;
      instanceofPredicateArray0[4] = instanceofPredicate1;
      instanceofPredicateArray0[5] = instanceofPredicate0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) resettableListIterator0, (Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) resettableIterator0, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 48
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagNameNS((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      int int0 = (-3270);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, (-3270), (-3270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OrderedMapIterator<String, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<String, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends DataTruncation>) orderedMapIterator0);
      OrderedMapIterator<String, SQLDataException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLDataException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLDataException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<String, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLDataException>(orderedMapIterator2);
      MapIterator<String, SQLDataException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLDataException>) abstractOrderedMapIteratorDecorator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) abstractOrderedMapIteratorDecorator0);
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) stack0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = null;
      int int0 = 1896;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1896, 1896);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLNonTransientException>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      iteratorArray0[1] = (Iterator<BatchUpdateException>) zippingIterator0;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" ", "", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      iteratorArray0[2] = (Iterator<BatchUpdateException>) objectArrayListIterator0;
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[3] = (Iterator<BatchUpdateException>) orderedIterator0;
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      iteratorArray0[4] = (Iterator<BatchUpdateException>) singletonListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "", 2248, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLNonTransientException>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator1;
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      iteratorArray0[1] = (Iterator<BatchUpdateException>) zippingIterator0;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" ", "", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      iteratorArray0[2] = (Iterator<BatchUpdateException>) objectArrayListIterator0;
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[3] = (Iterator<BatchUpdateException>) orderedIterator0;
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      iteratorArray0[4] = (Iterator<BatchUpdateException>) singletonListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "", 2248, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTimeoutException, String> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends String>) mapIterator0);
      Predicate<SQLTransientException> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<SQLTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLTransientException>(predicate0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) nullIsExceptionPredicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientConnectionException>) nullIsExceptionPredicate0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) mapIterator1, (Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) zippingIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) iterator1);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("d$'", "d$'", (-3682), (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null, sQLDataException0);
      MockThrowable mockThrowable0 = new MockThrowable("", batchUpdateException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0, mockThrowable0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Integer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer>(orderedMapIterator1);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0, (Transformer<? super Object, ? extends SQLTransientConnectionException>) transformer0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) iterator0);
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Enumeration<String> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 1013, 1013);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (-9));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("YPuAsEn?fAACF-Y`j@*", "\"BA\"q0WT5@~ZKCs8", hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("YPuAsEn?fAACF-Y`j@*", "YPuAsEn?fAACF-Y`j@*", hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "\"BA\"q0WT5@~ZKCs8", 1, hashtable0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", "YPuAsEn?fAACF-Y`j@*", (-9), hashtable0, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, (-3942), (-3942));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      IteratorUtils.getIterator("");
      IteratorUtils.emptyIterator();
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      String string0 = "=(Yx%ylx^V8jJ?eO";
      String string1 = null;
      int int0 = (-4166);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?kGM)]", ") greater than the size of the ", (-4166), (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      String string2 = "$-D+R@Ib%26iO,2^";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("?kGM)]", "$-D+R@Ib%26iO,2^");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // $-D+R@Ib%26iO,2^
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
