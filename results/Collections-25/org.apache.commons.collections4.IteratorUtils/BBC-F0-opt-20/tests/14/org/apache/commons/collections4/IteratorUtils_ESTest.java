/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 12:32:52 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[16];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 2);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableListIterator0);
      IteratorUtils.get((Iterator<SQLException>) zippingIterator0, 2);
      IteratorUtils.toListIterator((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[16];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 2);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", (String) null, 2);
      SQLException sQLException0 = new SQLException("Estimated size must be greater than 0", "Estimated size must be greater than 0", (-1363), sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("X`M5VDH", "X`M5VDH", (Map<String, ClientInfoStatus>) null, sQLException0);
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 3);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      classArray0[0] = class0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      classArray0[1] = class1;
      Class<SQLTransientException> class2 = SQLTransientException.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<Object, SQLClientInfoException>((String) null, classArray0, sQLFeatureNotSupportedExceptionArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) invokerTransformer0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator1);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) priorityQueue0);
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) iterator1, class3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TreeSet<Locale.Category>[] treeSetArray0 = (TreeSet<Locale.Category>[]) Array.newInstance(TreeSet.class, 9);
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Locale.Category> treeSet1 = new TreeSet<Locale.Category>();
      treeSetArray0[1] = treeSet1;
      TreeSet<Locale.Category> treeSet2 = new TreeSet<Locale.Category>();
      treeSetArray0[2] = treeSet2;
      TreeSet<Locale.Category> treeSet3 = new TreeSet<Locale.Category>();
      treeSetArray0[3] = treeSet3;
      TreeSet<Locale.Category> treeSet4 = new TreeSet<Locale.Category>();
      treeSetArray0[4] = treeSet4;
      TreeSet<Locale.Category> treeSet5 = new TreeSet<Locale.Category>();
      treeSetArray0[5] = treeSet5;
      TreeSet<Locale.Category> treeSet6 = new TreeSet<Locale.Category>();
      treeSetArray0[6] = treeSet6;
      TreeSet<Locale.Category> treeSet7 = new TreeSet<Locale.Category>();
      treeSetArray0[7] = treeSet7;
      TreeSet<Locale.Category> treeSet8 = new TreeSet<Locale.Category>();
      treeSetArray0[8] = treeSet8;
      IteratorUtils.arrayListIterator(treeSetArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(locale_Category0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("list (", "@*56=F(V`.>M", (-673));
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("9", "9", 9, sQLTransactionRollbackException0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException1, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("prefix may not be null", "prefix may not be null", (-907));
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      DataTruncation dataTruncation0 = new DataTruncation((-907), false, false, (-2975), 0, sQLNonTransientException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(dataTruncation0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLNonTransientException0);
      predicateArray0[2] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      ConstantTransformer<Object, Object> constantTransformer0 = new ConstantTransformer<Object, Object>(predicate0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      closureArray0[0] = closure0;
      SwitchClosure<SQLException> switchClosure0 = new SwitchClosure<SQLException>(predicateArray0, closureArray0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientException>) resettableIterator0, (Closure<? super SQLNonTransientException>) switchClosure0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedIterator<Locale.LanguageRange> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.LanguageRange>) orderedIterator0, (Class<Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MapIterator<ClientInfoStatus, ArrayList<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 7);
      Class<SQLNonTransientException>[] classArray0 = null;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", (Class<?>[]) null, (Object[]) null);
      transformerArray0[0] = (Transformer<Object, String>) invokerTransformer0;
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) predicateArray0[0];
      objectArray0[1] = (Object) nonePredicate0;
      objectArray0[2] = (Object) invokerTransformer0;
      objectArray0[3] = (Object) predicateArray0[0];
      objectArray0[4] = (Object) invokerTransformer0;
      objectArray0[5] = (Object) mapIterator0;
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicateArray0[0]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      List<Object> list0 = IteratorUtils.toList(iterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Jc^Ajk Dl_Y", "t", (-1751), hashtable0);
      stack0.add(sQLClientInfoException0);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(stack0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) loopingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Iterator must not be null");
      Factory<SQLSyntaxErrorException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<Object, SQLSyntaxErrorException>(factory0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.getIterator(class0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      String string0 = "QA;Gs";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("QA;Gs", "", (-1168), hashtable0, sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("QA;Gs", "QA;Gs", sQLClientInfoException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", (-1168));
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "", sQLInvalidAuthorizationSpecException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, 1124);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) resettableListIterator1);
      Hashtable<Object, String> hashtable1 = null;
      try {
        hashtable1 = new Hashtable<Object, String>(1056, (-1168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load: -1168.0
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) listIterator0, (Transformer<? super ClientInfoStatus, String>) null, "", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Transformer<ClientInfoStatus, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) null, (Transformer<? super ClientInfoStatus, String>) transformer0, "i-FCC+ZHz", "Array class must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EmptyIterator.emptyIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "i-FCC+ZHz";
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.singletonIterator(clientInfoStatus0);
      SkippingIterator<ClientInfoStatus> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<ClientInfoStatus>) resettableIterator0, 0L);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 2);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Array class must not be null", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) skippingIterator0, (Transformer<? super ClientInfoStatus, String>) invokerTransformer0, "i-FCC+ZHz", "Array class must not be null", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Array class must not be null' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayDeque<ClientInfoStatus> arrayDeque0 = new ArrayDeque<ClientInfoStatus>();
      Iterator<ClientInfoStatus> iterator0 = arrayDeque0.descendingIterator();
      Iterator<ClientInfoStatus> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString(iterator1, (Transformer<? super ClientInfoStatus, String>) transformer0, "", "", "");
      Properties properties0 = new Properties();
      LinkedList<Vector<Integer>> linkedList0 = new LinkedList<Vector<Integer>>();
      ReverseListIterator<Vector<Integer>> reverseListIterator0 = new ReverseListIterator<Vector<Integer>>(linkedList0);
      reverseListIterator0.previousIndex();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Vector<Integer>>) reverseListIterator0, 42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 42
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[15];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableListIterator0);
      IteratorUtils.get(iterator0, 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null", "", 2381);
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      Predicate<SQLTransientConnectionException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLTransientConnectionException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-161);
      Vector<Integer>[] vectorArray0 = (Vector<Integer>[]) Array.newInstance(Vector.class, 4);
      Stack<Integer> stack0 = new Stack<Integer>();
      vectorArray0[0] = (Vector<Integer>) stack0;
      Vector<Integer> vector0 = new Vector<Integer>();
      vectorArray0[1] = vector0;
      Stack<Integer> stack1 = new Stack<Integer>();
      vectorArray0[2] = (Vector<Integer>) stack1;
      Integer integer0 = new Integer((-2673));
      stack1.add(integer0);
      Stack<Integer> stack2 = new Stack<Integer>();
      vectorArray0[3] = (Vector<Integer>) stack2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(vectorArray0, 2, (-161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<Boolean> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Boolean> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Boolean>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Boolean>) listIterator0, (Transformer<? super Boolean, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends Boolean>) orderedIterator0, (Transformer<? super Boolean, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 3);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, ClientInfoStatus> invokerTransformer0 = new InvokerTransformer<Object, ClientInfoStatus>("FilterListIterator.set(Object) is not supported.", classArray0, classArray0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) invokerTransformer0);
      InvokerTransformer.invokerTransformer("FilterListIterator.set(Object) is not supported.");
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) iterator0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'FilterListIterator.set(Object) is not supported.' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "-N", 100);
      Transformer<SQLException, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("-N");
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator(sQLWarning0, (Transformer<? super SQLWarning, ? extends SQLWarning>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '-N' on 'class java.sql.SQLWarning' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ExceptionFactory.exceptionFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Boolean>) orderedIterator0, (Transformer<? super Boolean, ? extends String>) transformer1);
      IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 0, (-1494));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<Locale.Category> class0 = Locale.Category.class;
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class1);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      SkippingIterator<InstanceofPredicate> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) objectArrayListIterator0, 1L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) class1, comparator0);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) skippingIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IteratorUtils.emptyMapIterator();
      Integer integer0 = new Integer(1436);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.contains((Iterator<Integer>) resettableIterator0, (Object) integer0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0);
      LoopingIterator<Object> loopingIterator1 = new LoopingIterator<Object>(stack0);
      IteratorUtils.unmodifiableIterator((Iterator<Object>) loopingIterator1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZE)?e/", "ZE)?e/", 2515);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("(this Collection)", "", (-2047), sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("Closure must not be null", "", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("", "", (-2047), sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      objectArrayIterator0.reset();
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "L+_2-jNf", "F)OWevz|>x6J`s", "");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLDataException>(mapIterator0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      int int0 = 1206;
      Integer integer0 = new Integer(1206);
      IteratorUtils.getIterator(integer0);
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<Properties>> mapIterator1 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, LinkedHashSet<Properties>> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, LinkedHashSet<Properties>>(mapIterator1);
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) abstractMapIteratorDecorator1, (long) 1206, (long) 1206);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) boundedIterator0);
      OrderedIterator<ClientInfoStatus> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.toString((Iterator<ClientInfoStatus>) orderedIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, "", "", "]");
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) zippingIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "]", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "p7 O6s,d7x]", "iterator", "iterator");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) objectArrayListIterator0, 1L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "X'p*", (-748), sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("peek() or element() called before remove()", "No value has been returned yet", (-748));
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("h0", "No value has been returned yet");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("3&m3WTM_L264bud", "");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      ExceptionFactory.exceptionFactory();
      Factory<String> factory0 = ConstantFactory.constantFactory("3&m3WTM_L264bud");
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, (String) null, "Transformer must not be null", "prefix may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      EmptyOrderedIterator.emptyOrderedIterator();
      ConstantTransformer.nullTransformer();
      ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class1);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) objectArrayListIterator0, 1L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "Predicate must not be null", "L+_2-jNf", "Predicate must not be null");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("m|4kDw ^");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stack0);
      stack0.add((SQLWarning) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<Hashtable>>) iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.singletonIterator(vector0);
      MapIterator<StringTokenizer, ClientInfoStatus> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) mapIterator0, (Iterator<? extends StringTokenizer>) mapIterator0, (Iterator<? extends StringTokenizer>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<StringTokenizer>) zippingIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Boolean>) null, (Transformer<? super Boolean, ? extends String>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) treeSet0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Estimated size must be greater than 0");
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.singletonIterator(vector0);
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLException sQLException0 = new SQLException((String) null, (String) null);
      sQLExceptionArray0[1] = sQLException0;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0);
      sQLExceptionArray0[2] = (SQLException) batchUpdateException0;
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "", sQLExceptionArray0[2]);
      sQLExceptionArray0[3] = (SQLException) sQLWarning0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLExceptionArray0[4] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";#4mC17j^2", (String) null, 1);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 1);
      IteratorUtils.get((Iterator<SQLException>) resettableIterator0, 1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      IteratorUtils.getIterator(batchUpdateException1);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=org.apache.commons.collections4.multimap.abstractmultivaluedmap$multivaluedmapiterator
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Factory<ClientInfoStatus> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, ClientInfoStatus> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends ClientInfoStatus>) factory0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) transformer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("prefix may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super ClientInfoStatus, String>) constantTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      Class<StringTokenizer> class2 = StringTokenizer.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      instanceofPredicateArray0[3] = instanceofPredicate0;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) objectArrayListIterator0, 0L);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Vector<Integer>>) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Boolean>) orderedIterator0, (Transformer<? super Boolean, ? extends String>) transformer1);
      IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.getIterator(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 5);
      int int0 = (-2736);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, (-2736));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) listIterator1, (Iterator<? extends IIOMetadataNode>) listIterator1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*bc", sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      OrderedMapIterator<EnumSet<Locale.Category>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ?>) orderedMapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.size(resettableListIterator0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, class0);
      IteratorUtils.emptyMapIterator();
      NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<TreeSet<SQLException>>) null, (Predicate<? super TreeSet<SQLException>>) predicate0);
      ResettableIterator<StringTokenizer> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableIterator1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Predicate<InstanceofPredicate> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) predicate1);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLDataException>(mapIterator0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      Integer integer0 = new Integer(1206);
      IteratorUtils.getIterator(integer0);
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<Properties>> mapIterator1 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, LinkedHashSet<Properties>> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, LinkedHashSet<Properties>>(mapIterator1);
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) abstractMapIteratorDecorator1, (long) 1206, (long) 1206);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) boundedIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      InvokerTransformer.invokerTransformer("]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]");
      OrPredicate<InstanceofPredicate> orPredicate0 = new OrPredicate<InstanceofPredicate>((Predicate<? super InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) null);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ExceptionPredicate.exceptionPredicate();
      EmptyListIterator.resettableEmptyListIterator();
      ExceptionFactory.exceptionFactory();
      IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      instanceofPredicateArray0[1] = instanceofPredicate2;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      instanceofPredicateArray0[3] = instanceofPredicate1;
      instanceofPredicateArray0[4] = instanceofPredicate0;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) objectArrayListIterator0, 0L);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) objectArrayListIterator0, (Predicate<? super InstanceofPredicate>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      EmptyListIterator.resettableEmptyListIterator();
      ExceptionFactory.exceptionFactory();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Boolean>) orderedIterator0, (Transformer<? super Boolean, ? extends String>) transformer1);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) list0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[6] = instanceofPredicate6;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[7] = instanceofPredicate7;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      SkippingIterator<InstanceofPredicate> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) objectArrayListIterator0, 0L);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) instanceofPredicate5);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) skippingIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate7);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 9);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      classArray0[0] = class0;
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      classArray0[1] = class1;
      Class<InstanceofPredicate> class2 = InstanceofPredicate.class;
      classArray0[2] = class2;
      Class<InstanceofPredicate> class3 = InstanceofPredicate.class;
      classArray0[3] = class3;
      Class<InstanceofPredicate> class4 = InstanceofPredicate.class;
      classArray0[4] = class4;
      Class<InstanceofPredicate> class5 = InstanceofPredicate.class;
      classArray0[5] = class5;
      Class<InstanceofPredicate> class6 = InstanceofPredicate.class;
      classArray0[6] = class6;
      Class<InstanceofPredicate> class7 = InstanceofPredicate.class;
      classArray0[7] = class7;
      Class<InstanceofPredicate> class8 = InstanceofPredicate.class;
      classArray0[8] = class8;
      InvokerTransformer<SQLException, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<SQLException, BatchUpdateException>("", classArray0, classArray0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) batchUpdateException0, (Transformer<? super SQLException, ? extends SQLException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLClientInfoException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      ExceptionFactory.exceptionFactory();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.list.CursorableLinkedList");
      StringTokenizer stringTokenizer1 = new StringTokenizer("org.apache.commons.collections4.list.CursorableLinkedList");
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      StringTokenizer stringTokenizer3 = new StringTokenizer("Fe6+-qW");
      StringTokenizer stringTokenizer4 = new StringTokenizer("", "+?guv)|-", false);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      StringTokenizer stringTokenizer5 = new StringTokenizer("", "equator may not be null");
      stringTokenizerArray0[0] = stringTokenizer5;
      stringTokenizerArray0[1] = stringTokenizer3;
      stringTokenizerArray0[2] = stringTokenizer0;
      stringTokenizerArray0[3] = stringTokenizer4;
      stringTokenizerArray0[4] = stringTokenizer2;
      stringTokenizerArray0[5] = stringTokenizer3;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) objectArrayIterator0);
      IteratorUtils.find((Iterator<StringTokenizer>) objectArrayIterator0, (Predicate<? super StringTokenizer>) predicate0);
      ExceptionFactory.exceptionFactory();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformer0, defaultEquator0);
      Predicate<SQLException> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) equalPredicate0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) objectArrayListIterator0, (Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.singletonIterator((Predicate<Object>) equalPredicate0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) resettableIterator0, (Predicate<? super Predicate<Object>>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.emptyOrderedIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".nY1p", ".nY1p", 1, (Throwable) null);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 100, 349, (Throwable) null);
      ListIterator<DataTruncation> listIterator2 = IteratorUtils.singletonListIterator(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<DataTruncation>) listIterator2, (-2129L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      List<SQLFeatureNotSupportedException> list0 = new Vector<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyListIterator.resettableEmptyListIterator();
      ExceptionFactory.exceptionFactory();
      TruePredicate.truePredicate();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("Fe6+-qW");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("", "Fe6+-qW", false);
      stringTokenizerArray0[4] = stringTokenizer4;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super StringTokenizer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector<Integer> vector0 = new Stack<Integer>();
      IteratorUtils.singletonIterator(vector0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Fe6+-qW");
      StringTokenizer stringTokenizer1 = new StringTokenizer("uuVkpv#j.j{L{?k1x#");
      StringTokenizer stringTokenizer2 = new StringTokenizer("uuVkpv#j.j{L{?k1x#");
      StringTokenizer stringTokenizer3 = new StringTokenizer("uuVkpv#j.j{L{?k1x#", "\"TQ", false);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      stringTokenizerArray0[0] = stringTokenizer2;
      stringTokenizerArray0[1] = stringTokenizer1;
      stringTokenizerArray0[2] = stringTokenizer2;
      stringTokenizerArray0[3] = stringTokenizer1;
      stringTokenizerArray0[4] = stringTokenizer0;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) objectArrayIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find(iterator0, (Predicate<? super StringTokenizer>) predicate0);
      ExceptionFactory.exceptionFactory();
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>("uuVkpv#j.j{L{?k1x#", (-21), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(instanceofPredicate0);
      IteratorUtils.toArray(iterator0);
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.singletonIterator((Predicate<Object>) instanceofPredicate0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) resettableIterator0, (Predicate<? super Predicate<Object>>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      EmptyListIterator.emptyListIterator();
      int int0 = 0;
      int int1 = 0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.ComparatorPredicate", "org.apache.commons.collections4.functors.ComparatorPredicate", 0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("M[y21WD}6V`jf1", "Transformer collection must not be null", "M[y21WD}6V`jf1", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElement0;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) singletonIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.singletonListIterator((Vector<SQLDataException>) null);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) singletonIterator0, 3230L, 1284L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) iterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayDeque<IIOMetadataNode>[]) null, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) iterator0);
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("UD,V,aC\u0002");
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      EmptyListIterator.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableListIterator0);
      IteratorUtils.get(iterator0, 0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      OrderedMapIterator<SQLRecoverableException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, Properties>) orderedMapIterator0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator1, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      HashMap<SQLNonTransientConnectionException, Object> hashMap0 = new HashMap<SQLNonTransientConnectionException, Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("6T5[E0>+[Y_Se2", "");
      hashMap0.put(sQLNonTransientConnectionException0, iterator0);
      EntrySetMapIterator<SQLNonTransientConnectionException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Object>(hashMap0);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0, (Object) iterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("D{d4R2$>ZG.");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("U'l<?HiD!VkD9");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      iIOMetadataNode2.getFirstChild();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1);
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("UD,V,aC\u0002");
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.add("D{d4R2$>ZG.");
      IteratorUtils.loopingIterator((Collection<? extends String>) arrayDeque0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLClientInfoException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLClientInfoException>(orderedMapIterator1);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      EmptyListIterator.emptyListIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("?}0/st", "b", 0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLRecoverableException>) singletonIterator0, (Closure<? super SQLRecoverableException>) closure0);
      IteratorUtils.emptyOrderedIterator();
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(arrayList0);
      arrayList0.removeAll(linkedHashSet0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      Stack<SQLRecoverableException> stack1 = new Stack<SQLRecoverableException>();
      MockThrowable mockThrowable0 = new MockThrowable();
      OrderedMapIterator<Object, ServiceLoader<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      Object object0 = new Object();
      mockThrowable0.getLocalizedMessage();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException0;
      batchUpdateExceptionArray0[3] = batchUpdateException0;
      batchUpdateExceptionArray0[4] = batchUpdateException0;
      batchUpdateExceptionArray0[5] = batchUpdateException0;
      batchUpdateExceptionArray0[6] = batchUpdateException0;
      batchUpdateExceptionArray0[7] = batchUpdateException0;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) objectArrayIterator0);
      batchUpdateException0.getUpdateCounts();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) arrayList0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) objectArrayIterator0, (Iterator<? extends BatchUpdateException>) objectArrayIterator0, (Iterator<? extends BatchUpdateException>) iterator0);
      Enumeration<BatchUpdateException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) objectArrayIterator0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration1, (Collection<? super BatchUpdateException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      iteratorArray0[1] = (Iterator<DataTruncation>) entrySetMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, HashMap>>) vector0);
      EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLRecoverableException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableListIterator0, (long) 0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLClientInfoException>) orderedMapIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException>(orderedMapIterator2);
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator3);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator1, (-586L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      Stack<SQLRecoverableException> stack1 = new Stack<SQLRecoverableException>();
      Stack<SQLRecoverableException> stack2 = new Stack<SQLRecoverableException>();
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLClientInfoException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLClientInfoException>(orderedMapIterator0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<InstanceofPredicate>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.LanguageRange>) null, (Iterator<? extends Locale.LanguageRange>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "Enumeration must not be null", 1);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) listIterator0);
      IteratorUtils.isEmpty(iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator1 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      OrderedMapIterator<EnumSet<Locale.Category>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ?>) orderedMapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.size(listIterator0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator1, class0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Enumeration must not be null");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("List must not be null", "List must not be null", false);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
      MapIterator<SQLNonTransientConnectionException, HashSet<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) mapIterator0, (Transformer<? super Object, ?>) transformer0);
      IteratorUtils.toArray(iterator0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends Predicate<Object>>) resettableIterator0, 99);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      EmptyListIterator.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.ComparatorPredicate", "org.apache.commons.collections4.functors.ComparatorPredicate", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("OW-G\"", "org.apache.commons.collections4.functors.ComparatorPredicate", "org.apache.commons.collections4.functors.ComparatorPredicate", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableListIterator0);
      IteratorUtils.get(iterator0, 0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.singletonListIterator((Vector<SQLDataException>) stack0);
      Iterator<Properties> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, (long) 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      IteratorUtils.singletonIterator(clientInfoStatus0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 8);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) stack0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<Properties, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<Properties>) mapIterator0;
      iteratorArray0[1] = (Iterator<Properties>) mapIterator0;
      iteratorArray0[2] = (Iterator<Properties>) mapIterator0;
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) zippingIterator0);
      IteratorUtils.toList((Iterator<? extends Properties>) iterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("prefix may not be null");
      iIOMetadataNode0.getAttributeNodeNS("A{UITY<%", "prefix may not be null");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.removeAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      MapIterator<SQLRecoverableException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) mapIterator0, 1254L);
      ExceptionClosure.exceptionClosure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedIterator();
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(arrayList0);
      arrayList0.removeAll(linkedList0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("yTMM2xVd0S?y[g", (int[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 3);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      linkedHashSetArray0[2] = linkedHashSet2;
      ResettableListIterator<LinkedHashSet<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedHashSetArray0);
      IteratorUtils.toString((Iterator<LinkedHashSet<Integer>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) listIterator1, (Iterator<? extends IIOMetadataNode>) listIterator1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*bc", sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      OrderedMapIterator<EnumSet<Locale.Category>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ?>) orderedMapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.size(resettableListIterator0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, class0);
      IteratorUtils.emptyMapIterator();
      NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<TreeSet<SQLException>>) null, (Predicate<? super TreeSet<SQLException>>) predicate0);
      ResettableIterator<StringTokenizer> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableIterator1);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.singletonIterator(vector0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("i'yQURf&ZvpwHXDO", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      OrderedMapIterator<EnumSet<Locale.Category>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ?>) orderedMapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.size(orderedMapIterator0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, class0);
      MapIterator<TreeSet<SQLException>, Class<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<TreeSet<SQLException>>) mapIterator0, (Predicate<? super TreeSet<SQLException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<Integer> vector0 = new Vector<Integer>();
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      Hashtable<DataTruncation, SQLDataException> hashtable0 = new Hashtable<DataTruncation, SQLDataException>();
      SQLException sQLException0 = new SQLException("mG", "]");
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 10, 0, sQLException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) listIterator0, (Iterator<? extends DataTruncation>) listIterator0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0);
      IteratorUtils.loopingListIterator(list0);
      HashMap<DataTruncation, SQLDataException> hashMap1 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<DataTruncation>) entrySetMapIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) listIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) listIterator0;
      iteratorArray0[3] = iterator0;
      iteratorArray0[4] = (Iterator<DataTruncation>) listIterator0;
      iteratorArray0[5] = (Iterator<DataTruncation>) entrySetMapIterator0;
      iteratorArray0[6] = (Iterator<DataTruncation>) entrySetMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      ResettableListIterator<HashMap<SQLRecoverableException, HashMap>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, HashMap>>) list0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<Integer> vector0 = new Vector<Integer>();
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      Hashtable<DataTruncation, SQLDataException> hashtable0 = new Hashtable<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashtable0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<DataTruncation>) entrySetMapIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) entrySetMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, HashMap>>) vector0);
      MapIterator<SQLRecoverableException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) mapIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0);
      IteratorUtils.skippingIterator(iterator0, 0L);
      Closure<SQLRecoverableException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply(iterator0, (Closure<? super SQLRecoverableException>) closure0);
      IteratorUtils.emptyOrderedIterator();
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(arrayList0);
      arrayList0.removeAll(vector0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("yTMM2xVd0S?y[g", (int[]) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("AupwSOjV", "remove() method not supported for a NodeListIterator.");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) vector0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) loopingIterator0, (Predicate<? super Properties>) predicate0);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("remove() method not supported for a NodeListIterator.", "GB9QJr[y1MjvVd?");
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableListIterator0);
      IteratorUtils.get(iterator0, 0);
      DataTruncation dataTruncation0 = new DataTruncation(43, false, false, 833, 0, (Throwable) null);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(dataTruncation0);
      IteratorUtils.toString((Iterator<SQLWarning>) singletonIterator0);
      HashMap<SQLDataException, SQLRecoverableException> hashMap0 = new HashMap<SQLDataException, SQLRecoverableException>();
      Hashtable<SQLNonTransientException, SQLRecoverableException> hashtable0 = new Hashtable<SQLNonTransientException, SQLRecoverableException>(hashMap0);
      EntrySetMapIterator<SQLNonTransientException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientException, SQLRecoverableException>(hashtable0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0, (Iterator<? extends IIOMetadataNode>) objectArrayListIterator0, (Iterator<? extends IIOMetadataNode>) objectArrayListIterator0);
      IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) zippingIterator0, (Iterator<? extends IIOMetadataNode>) objectArrayListIterator0);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0, 0L, (long) 43);
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap1 = new HashMap<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap1);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) boundedIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableListIterator0, (long) 0);
      ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "org.apache.commons.collections4.functors.ExceptionPredicate";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Array class must not be null";
      stringArray0[5] = "}G}ER}MBuf!KJMXo+f";
      stringArray0[6] = "ListIterator must not be null";
      IteratorUtils.arrayListIterator(stringArray0, 0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) transformerPredicate0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, HashMap>>) linkedList0);
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "(O;vc4x1y", (-581));
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) entrySetMapIterator0);
      Object object0 = new Object();
      MockThrowable mockThrowable0 = new MockThrowable("(O;vc4x1y");
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      mockThrowable0.getLocalizedMessage();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("g3$I(Z}|pc", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      ArrayListIterator<String> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<String>(sQLNonTransientConnectionException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.contains((Iterator<IIOMetadataNode>) orderedMapIterator0, (Object) instanceofPredicate0);
      Iterator<PriorityQueue<Integer>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<PriorityQueue<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<Integer> vector0 = new Vector<Integer>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*n[";
      stringArray0[1] = "org.apache.commons.collections4.functors.ExceptionPredicate";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Array class must not be null";
      stringArray0[5] = "}G}ER}MBuf!KJMXo+f";
      stringArray0[6] = "ListIterator must not be null";
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) objectArrayIterator0, (Iterator<? extends BatchUpdateException>) listIterator0, (Iterator<? extends BatchUpdateException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "", 16, 2771);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      String[] stringArray0 = new String[0];
      IteratorUtils.arrayListIterator(stringArray0, 0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) transformerPredicate0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5PN|vWNT1", "", 0, sQLRecoverableException0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, (-329), 0, sQLRecoverableException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, false, 0, (-2722), sQLNonTransientConnectionException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, true, (-329), 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(100, false, false, (-2722), 0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-22), false, true, 3400, (-2120));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(16, true, true, 169, 735);
      dataTruncationArray0[5] = dataTruncation5;
      IteratorUtils.arrayListIterator(dataTruncationArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, HashMap>>) linkedList0);
      MapIterator<SQLRecoverableException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) mapIterator0, 1254L);
      Closure<SQLRecoverableException> closure0 = ExceptionClosure.exceptionClosure();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null, true);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) singletonIterator0, (Closure<? super SQLRecoverableException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SkippingIterator<InstanceofPredicate> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableListIterator0, (long) 0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Closure<SQLRecoverableException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) closure0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) skippingIterator0;
      objectArray0[1] = (Object) transformerPredicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, (-272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "List must not be null";
      stringArray0[1] = "xO:";
      stringArray0[2] = "xO:";
      stringArray0[3] = "xO:";
      stringArray0[4] = "xO:";
      IteratorUtils.arrayListIterator(stringArray0, 0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Transformer<SQLRecoverableException, Transformer<Properties, Transformer<Object, String>>> transformer1 = InvokerTransformer.invokerTransformer("suffix may not be null");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) transformer1, (Equator<Object>) null);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("xO:", "xO:", 0);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("List must not be null", "List must not be null", intArray0, sQLFeatureNotSupportedException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 174;
      intArray1[2] = (-1);
      intArray1[3] = 0;
      intArray1[4] = 1;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("k*ReZ&", "xO:", 1, intArray1);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("`", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0, (-5013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<Integer> vector0 = new Vector<Integer>();
      IteratorUtils.singletonIterator(vector0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.collections4.iterators.IteratorChain";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 1499);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      stringArray0[1] = "xO:";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      ExceptionFactory.exceptionFactory();
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Predicate<InstanceofPredicate> predicate0 = new UniquePredicate<InstanceofPredicate>();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLException sQLException0 = new SQLException("xO:", "xO:");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("xO:", "5", 0, (Map<String, ClientInfoStatus>) null, sQLException0);
      sQLClientInfoException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("xO:", "", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-1892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<Integer> vector0 = new Vector<Integer>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*n[";
      stringArray0[1] = "org.apache.commons.collections4.functors.ExceptionPredicate";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Array class must not be null";
      stringArray0[5] = "}G}ER}MBuf!KJMXo+f";
      stringArray0[6] = "ListIterator must not be null";
      IteratorUtils.arrayListIterator(stringArray0, 0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) transformerPredicate0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      iteratorArray0[1] = (Iterator<DataTruncation>) entrySetMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, HashMap>>) vector0);
      MapIterator<SQLRecoverableException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) mapIterator0, 1254L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) objectArrayIterator0, (Iterator<? extends BatchUpdateException>) objectArrayIterator0, (Iterator<? extends BatchUpdateException>) objectArrayIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      Vector<BatchUpdateException> vector1 = new Vector<BatchUpdateException>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) vector1);
      IteratorUtils.toList((Iterator<?>) zippingIterator0, 16);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iteratorArray0[0], (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterator<Locale.LanguageRange>[] iteratorArray0 = (Iterator<Locale.LanguageRange>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Locale.LanguageRange> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.LanguageRange>) null, (Iterator<? extends Locale.LanguageRange>[]) iteratorArray0);
      long long0 = 0L;
      IteratorUtils.boundedIterator((Iterator<? extends Locale.LanguageRange>) iterator0, 0L, 0L);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      String string0 = "ListIteratorWrapper does not support optional operations of ListIterator.";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("ListIteratorWrapper does not support optional operations of ListIterator.", "ListIteratorWrapper does not support optional operations of ListIterator.", (-1328), map0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, (-1328), 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, HashMap>>) vector0);
      MapIterator<SQLRecoverableException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) mapIterator0, 1254L);
      Closure<SQLRecoverableException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLRecoverableException>) skippingIterator0, (Closure<? super SQLRecoverableException>) closure0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray1 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray1);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, 1);
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) list0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "xO:";
      IteratorUtils.arrayListIterator(stringArray0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      SQLException sQLException0 = new SQLException("", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "xO:", sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLTransactionRollbackException0);
      batchUpdateException0.printStackTrace();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("", classArray0, classArray0);
      sQLException0.initCause(sQLTransactionRollbackException0);
      InvokerTransformer.invokerTransformer("xO:");
      IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) invokerTransformer0);
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I?, Y= X>3", "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("I?, Y= X>3", "org.apace.commons.colectins4.funcrs.SwitchClosure", 36);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("I?, Y= X>3");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("I?, Y= X>3");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("I?, Y= X>3", sQLRecoverableExceptionArray0[1]);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("$IZQd3Jy8pj;S;~jA");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("org.apace.commons.colectins4.funcrs.SwitchClosure", "I?, Y= X>3", 36);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException6;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toList((Iterator<?>) resettableListIterator0, 36);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      iteratorArray0[1] = (Iterator<DataTruncation>) entrySetMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, HashMap>>) vector0);
      MapIterator<SQLRecoverableException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) mapIterator0, 1254L);
      Closure<SQLRecoverableException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLRecoverableException>) skippingIterator0, (Closure<? super SQLRecoverableException>) closure0);
      IteratorUtils.emptyOrderedIterator();
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(arrayList0);
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 98;
      intArray0[2] = (-2284);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("yTMM2xVd0S?y[g", intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(batchUpdateException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) loopingIterator0, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Stack<DataTruncation>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("v!{YQ\ruQ", sQLIntegrityConstraintViolationException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator1 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      OrderedMapIterator<EnumSet<Locale.Category>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ?>) orderedMapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.size((Iterator<?>) null);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator1, class0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) listIterator1, (Iterator<? extends IIOMetadataNode>) listIterator1);
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<DataTruncation>) entrySetMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("BN", "BN", 0, sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException((String) null, "NodeList must not be null", 1812, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("The list must not be null");
      ExceptionFactory.exceptionFactory();
      Hashtable<SQLRecoverableException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<SQLRecoverableException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException>(hashtable0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) entrySetMapIterator0, 0L);
      Closure<SQLRecoverableException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLRecoverableException>) skippingIterator0, (Closure<? super SQLRecoverableException>) closure0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<PriorityQueue<Stack>, IIOMetadataNode>) entrySetMapIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0, true);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) singletonIterator0, 4063L, (long) 0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("d>=S7c6?");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("The list must not be null");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, "");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "", (Throwable) null);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.loopingListIterator((List<HashSet<Stack>>) stack0);
      OrderedMapIterator<SQLDataException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2861, 2861);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      stringArray0[1] = "xO:";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableListIterator1, (long) 0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) transformerPredicate0);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableListIterator1, (Predicate<? super InstanceofPredicate>) transformerPredicate0);
      IteratorUtils.getIterator(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "xO:", 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "xO:";
      IteratorUtils.arrayListIterator(stringArray0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableListIterator0, (long) 0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) transformerPredicate0);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 4, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.loopingListIterator((List<HashSet<Stack>>) stack0);
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableIterator<Vector<Integer>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Vector<Integer>>) resettableIterator0, 44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 43
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, (-511), 237);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector<SQLRecoverableException>[] vectorArray0 = (Vector<SQLRecoverableException>[]) Array.newInstance(Vector.class, 5);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      vectorArray0[0] = (Vector<SQLRecoverableException>) stack0;
      Stack<SQLRecoverableException> stack1 = new Stack<SQLRecoverableException>();
      vectorArray0[1] = (Vector<SQLRecoverableException>) stack1;
      Stack<SQLRecoverableException> stack2 = new Stack<SQLRecoverableException>();
      vectorArray0[2] = (Vector<SQLRecoverableException>) stack2;
      Stack<SQLRecoverableException> stack3 = new Stack<SQLRecoverableException>();
      vectorArray0[3] = (Vector<SQLRecoverableException>) stack3;
      Stack<SQLRecoverableException> stack4 = new Stack<SQLRecoverableException>();
      stack4.clone();
      vectorArray0[4] = (Vector<SQLRecoverableException>) stack4;
      IteratorUtils.arrayIterator(vectorArray0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("]");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".", ".", 0, sQLNonTransientException0);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      Vector<PriorityQueue<SQLFeatureNotSupportedException>> vector0 = new Vector<PriorityQueue<SQLFeatureNotSupportedException>>();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      vector0.add(priorityQueue0);
      IteratorUtils.loopingListIterator((List<PriorityQueue<SQLFeatureNotSupportedException>>) vector0);
      MapIterator<SQLRecoverableException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) mapIterator0, (long) 0);
      Closure<SQLRecoverableException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLRecoverableException>) skippingIterator0, (Closure<? super SQLRecoverableException>) closure0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("]", ".", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException1);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-576);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("tA<^xs1", "remove() can not be called before calling next()", 0, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("remove() can not be called before calling next()", "", intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(".", sQLTimeoutException1);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("\bg&~7('m){o%D", intArray0, sQLTransientConnectionException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(intArray0, sQLTimeoutException0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("tA<^xs1", "\bg&~7('m){o%D", (-1556), intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, batchUpdateException0);
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("\bg&~7('m){o%D", intArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0, 0);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "xO:";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      SQLException sQLException0 = new SQLException("", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "xO:", sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLTransactionRollbackException0);
      batchUpdateException0.printStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ZbJ*pM", "xO:", 0, batchUpdateException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      OrderedMapIterator<EnumSet<Locale.Category>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ?>) orderedMapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator1 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) resettableListIterator1, (Iterator<? extends DataTruncation>) resettableListIterator1);
      IteratorUtils.size(resettableListIterator0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I?, Y= X>3", "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      String string0 = "org.apache.commons.collections4.functors.SwitchClosure";
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("\"M}c5rf.]!SvJ/tM", "org.apache.commons.collections4.functors.SwitchClosure", 0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("I?, Y= X>3");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("I?, Y= X>3");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("I?, Y= X>3", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("I?, Y= X>3", sQLRecoverableException3);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("$IZQd3Jy8pj;S;~jA");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("org.apache.commons.collections4.functors.SwitchClosure", "\"M}c5rf.]!SvJ/tM", 0);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-1), 0, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      MockThrowable mockThrowable0 = new MockThrowable("~ +[u", sQLTimeoutException0);
      assertNotNull(mockThrowable0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~ +[u", (String) null, 895);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("~ +[u", sQLTransactionRollbackException0.getMessage());
      assertEquals(895, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ~ +[u", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(2, false, false, (-1034), 2, sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("~ +[u", sQLTransactionRollbackException0.getMessage());
      assertEquals(895, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ~ +[u", sQLTransactionRollbackException0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("~ +[u", sQLTransactionRollbackException0.getMessage());
      assertEquals(895, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ~ +[u", sQLTransactionRollbackException0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      MapIterator<Boolean, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Boolean>) mapIterator0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      assertNotNull(transformer0);
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      assertNotNull(transformerPredicate0);
      
      Predicate<InstanceofPredicate> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) transformerPredicate0);
      assertNotNull(predicate0);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) listIterator0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("~ +[u", sQLTransactionRollbackException0.getMessage());
      assertEquals(895, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ~ +[u", sQLTransactionRollbackException0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(iterator0);
      assertFalse(vector0.contains(dataTruncation0));
      
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 3);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(0, locale_CategoryArray0.length);
      
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet1.size());
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      enumSetArray0[1] = enumSet1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet2 = EnumSet.of(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertEquals(2, enumSet2.size());
      assertNotNull(enumSet2);
      assertTrue(enumSet2.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      
      enumSetArray0[2] = enumSet2;
      ObjectArrayIterator<EnumSet<Locale.Category>> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<EnumSet<Locale.Category>>(enumSetArray0, 1, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector<SQLRecoverableException>[] vectorArray0 = (Vector<SQLRecoverableException>[]) Array.newInstance(Vector.class, 5);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      vectorArray0[0] = (Vector<SQLRecoverableException>) stack0;
      Stack<SQLRecoverableException> stack1 = new Stack<SQLRecoverableException>();
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      vectorArray0[1] = (Vector<SQLRecoverableException>) stack1;
      Stack<SQLRecoverableException> stack2 = new Stack<SQLRecoverableException>();
      assertTrue(stack2.empty());
      assertTrue(stack2.isEmpty());
      assertEquals(0, stack2.size());
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertNotNull(stack2);
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2866);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      assertNotNull(mockPrintStream0);
      
      OrderedMapIterator<Object, ServiceLoader<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) zippingIterator0, 1456);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1456
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      iteratorArray0[1] = (Iterator<DataTruncation>) entrySetMapIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(2, iteratorArray0.length);
      
      ResettableListIterator<HashMap<SQLRecoverableException, HashMap>> resettableListIterator1 = IteratorUtils.loopingListIterator((List<HashMap<SQLRecoverableException, HashMap>>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      MapIterator<SQLRecoverableException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) mapIterator0, 1254L);
      assertNotNull(skippingIterator0);
      
      Closure<SQLRecoverableException> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<SQLRecoverableException>) skippingIterator0, (Closure<? super SQLRecoverableException>) closure0);
      TreeSet<SQLSyntaxErrorException>[] treeSetArray0 = (TreeSet<SQLSyntaxErrorException>[]) Array.newInstance(TreeSet.class, 0);
      ObjectArrayListIterator<TreeSet<SQLSyntaxErrorException>> objectArrayListIterator0 = new ObjectArrayListIterator<TreeSet<SQLSyntaxErrorException>>(treeSetArray0);
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, treeSetArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<TreeSet<SQLSyntaxErrorException>>) objectArrayListIterator0, (Closure<? super TreeSet<SQLSyntaxErrorException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I?, Y= X>3", "");
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("\"M}c5rf.]!SvJ/tM", "org.apache.commons.collections4.functors.SwitchClosure", 0);
      assertEquals("org.apache.commons.collections4.functors.SwitchClosure", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \"M}c5rf.]!SvJ/tM", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("\"M}c5rf.]!SvJ/tM", sQLRecoverableException1.getMessage());
      assertNotNull(sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("I?, Y= X>3");
      assertNull(sQLRecoverableException2.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException2.toString());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException2.getMessage());
      assertNotNull(sQLRecoverableException2);
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("I?, Y= X>3");
      assertNull(sQLRecoverableException3.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException3.toString());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException3.getMessage());
      assertNotNull(sQLRecoverableException3);
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("I?, Y= X>3", sQLRecoverableException1);
      assertEquals("org.apache.commons.collections4.functors.SwitchClosure", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \"M}c5rf.]!SvJ/tM", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("\"M}c5rf.]!SvJ/tM", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException4.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException4.getMessage());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException4.toString());
      assertNull(sQLRecoverableException4.getSQLState());
      assertNotNull(sQLRecoverableException4);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException1));
      
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("I?, Y= X>3", sQLRecoverableException3);
      assertNull(sQLRecoverableException3.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException3.toString());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException3.getMessage());
      assertNull(sQLRecoverableException5.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException5.toString());
      assertEquals(0, sQLRecoverableException5.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException5.getMessage());
      assertNotNull(sQLRecoverableException5);
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException3));
      
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("$IZQd3Jy8pj;S;~jA");
      assertEquals("java.sql.SQLRecoverableException: $IZQd3Jy8pj;S;~jA", sQLRecoverableException6.toString());
      assertNull(sQLRecoverableException6.getSQLState());
      assertEquals("$IZQd3Jy8pj;S;~jA", sQLRecoverableException6.getMessage());
      assertEquals(0, sQLRecoverableException6.getErrorCode());
      assertNotNull(sQLRecoverableException6);
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException3));
      
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("org.apache.commons.collections4.functors.SwitchClosure", "\"M}c5rf.]!SvJ/tM", 0);
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.SwitchClosure", sQLRecoverableException7.toString());
      assertEquals(0, sQLRecoverableException7.getErrorCode());
      assertEquals("\"M}c5rf.]!SvJ/tM", sQLRecoverableException7.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.SwitchClosure", sQLRecoverableException7.getMessage());
      assertNotNull(sQLRecoverableException7);
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException6));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException0));
      
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(8, sQLRecoverableExceptionArray0.length);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterable<DataTruncation> iterable0 = new TreeSet<DataTruncation>();
      assertNotNull(iterable0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      int int0 = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", (String) null, 0, sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException2.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException2.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException3.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException3.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException3.toString());
      assertNull(sQLInvalidAuthorizationSpecException3.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException3);
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException2));
      
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", "NodeList must not be null", 0, sQLInvalidAuthorizationSpecException1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException4.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException4.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException4.getErrorCode());
      assertEquals("NodeList must not be null", sQLInvalidAuthorizationSpecException4.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException4);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException1));
      
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("2~$u~");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 2~$u~", sQLInvalidAuthorizationSpecException5.toString());
      assertEquals("2~$u~", sQLInvalidAuthorizationSpecException5.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException5.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException5.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException5);
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException2));
      
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("", (String) null, 0, sQLInvalidAuthorizationSpecException3);
      assertNull(sQLInvalidAuthorizationSpecException3.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException3.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException3.toString());
      assertNull(sQLInvalidAuthorizationSpecException3.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException6.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException6.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException6.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException6.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException6);
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException3));
      
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      int int1 = 3484;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("", "2~$u~", 3484);
      assertEquals("", sQLInvalidAuthorizationSpecException7.getMessage());
      assertEquals("2~$u~", sQLInvalidAuthorizationSpecException7.getSQLState());
      assertEquals(3484, sQLInvalidAuthorizationSpecException7.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException7.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException7);
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException6));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException2));
      
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(8, sQLInvalidAuthorizationSpecExceptionArray0.length);
      
      OrderedMapIterator<EnumSet<Locale.Category>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<EnumSet<Locale.Category>, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ?>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, Object>(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      BoundedIterator<EnumSet<Locale.Category>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.Category>>) abstractOrderedMapIteratorDecorator0, (long) 0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(boundedIterator0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException4);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLInvalidAuthorizationSpecException: ", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException4.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException4.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException4.getErrorCode());
      assertEquals("NodeList must not be null", sQLInvalidAuthorizationSpecException4.getSQLState());
      assertNotNull(sQLRecoverableException0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException7));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException6));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException6));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException7));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException6));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException7));
      
      ArrayListIterator<EnumSet<Locale.Category>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<EnumSet<Locale.Category>>(sQLRecoverableException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = ConstantTransformer.constantTransformer(enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertNotNull(transformer0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) transformer0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      
      ServiceLoader<SQLFeatureNotSupportedException>[] serviceLoaderArray0 = (ServiceLoader<SQLFeatureNotSupportedException>[]) Array.newInstance(ServiceLoader.class, 7);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.sql.SQLFeatureNotSupportedException]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader1 = ServiceLoader.loadInstalled(class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.sql.SQLFeatureNotSupportedException]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      
      serviceLoaderArray0[1] = serviceLoader1;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader2 = ServiceLoader.load(class1, classLoader1);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertSame(class1, class0);
      assertEquals("java.util.ServiceLoader[java.sql.SQLFeatureNotSupportedException]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      serviceLoaderArray0[2] = serviceLoader2;
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader3 = ServiceLoader.load(class0);
      assertNotSame(serviceLoader3, serviceLoader2);
      assertNotSame(serviceLoader3, serviceLoader0);
      assertNotSame(serviceLoader3, serviceLoader1);
      assertSame(class0, class1);
      assertEquals("java.util.ServiceLoader[java.sql.SQLFeatureNotSupportedException]", serviceLoader3.toString());
      assertNotNull(serviceLoader3);
      assertFalse(serviceLoader3.equals((Object)serviceLoader2));
      assertFalse(serviceLoader3.equals((Object)serviceLoader0));
      assertFalse(serviceLoader3.equals((Object)serviceLoader1));
      
      serviceLoaderArray0[3] = serviceLoader3;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader4 = ServiceLoader.load(class2, classLoader0);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(serviceLoader4, serviceLoader3);
      assertNotSame(serviceLoader4, serviceLoader0);
      assertNotSame(serviceLoader4, serviceLoader2);
      assertNotSame(serviceLoader4, serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.sql.SQLFeatureNotSupportedException]", serviceLoader4.toString());
      assertNotNull(serviceLoader4);
      assertFalse(serviceLoader4.equals((Object)serviceLoader3));
      assertFalse(serviceLoader4.equals((Object)serviceLoader0));
      assertFalse(serviceLoader4.equals((Object)serviceLoader2));
      assertFalse(serviceLoader4.equals((Object)serviceLoader1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      serviceLoaderArray0[4] = serviceLoader4;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader5 = ServiceLoader.loadInstalled(class3);
      assertSame(class3, class2);
      assertSame(class3, class1);
      assertSame(class3, class0);
      assertNotSame(serviceLoader5, serviceLoader2);
      assertNotSame(serviceLoader5, serviceLoader4);
      assertNotSame(serviceLoader5, serviceLoader1);
      assertNotSame(serviceLoader5, serviceLoader0);
      assertNotSame(serviceLoader5, serviceLoader3);
      assertEquals("java.util.ServiceLoader[java.sql.SQLFeatureNotSupportedException]", serviceLoader5.toString());
      assertNotNull(serviceLoader5);
      assertFalse(serviceLoader5.equals((Object)serviceLoader2));
      assertFalse(serviceLoader5.equals((Object)serviceLoader4));
      assertFalse(serviceLoader5.equals((Object)serviceLoader1));
      assertFalse(serviceLoader5.equals((Object)serviceLoader0));
      assertFalse(serviceLoader5.equals((Object)serviceLoader3));
      
      serviceLoaderArray0[5] = serviceLoader5;
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader6 = ServiceLoader.load(class0, classLoader0);
      assertSame(class0, class2);
      assertSame(class0, class3);
      assertSame(class0, class1);
      assertNotSame(serviceLoader6, serviceLoader3);
      assertNotSame(serviceLoader6, serviceLoader5);
      assertNotSame(serviceLoader6, serviceLoader0);
      assertNotSame(serviceLoader6, serviceLoader1);
      assertNotSame(serviceLoader6, serviceLoader2);
      assertNotSame(serviceLoader6, serviceLoader4);
      assertEquals("java.util.ServiceLoader[java.sql.SQLFeatureNotSupportedException]", serviceLoader6.toString());
      assertNotNull(serviceLoader6);
      assertFalse(serviceLoader6.equals((Object)serviceLoader3));
      assertFalse(serviceLoader6.equals((Object)serviceLoader5));
      assertFalse(serviceLoader6.equals((Object)serviceLoader0));
      assertFalse(serviceLoader6.equals((Object)serviceLoader1));
      assertFalse(serviceLoader6.equals((Object)serviceLoader2));
      assertFalse(serviceLoader6.equals((Object)serviceLoader4));
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      serviceLoaderArray0[6] = serviceLoader6;
      ResettableIterator<ServiceLoader<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(serviceLoaderArray0, 0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(7, serviceLoaderArray0.length);
      
      MapIterator<SQLTimeoutException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTimeoutException, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = null;
      SQLException sQLException0 = new SQLException((String) null);
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      Spliterator<Throwable> spliterator0 = sQLException0.spliterator();
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(spliterator0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-162), true, false, (-162), 2793, sQLException0);
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      dataTruncation0.addSuppressed(sQLException0);
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      int int0 = dataTruncation0.getDataSize();
      assertEquals((-162), int0);
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2793);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I?, Y= X>3", "");
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("\"M}c5rf.]!SvJ/tM", "org.apache.commons.collections4.functors.SwitchClosure", 0);
      assertEquals("org.apache.commons.collections4.functors.SwitchClosure", sQLRecoverableException1.getSQLState());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \"M}c5rf.]!SvJ/tM", sQLRecoverableException1.toString());
      assertEquals("\"M}c5rf.]!SvJ/tM", sQLRecoverableException1.getMessage());
      assertNotNull(sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("I?, Y= X>3");
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException2.getMessage());
      assertNull(sQLRecoverableException2.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException2.toString());
      assertNotNull(sQLRecoverableException2);
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("I?, Y= X>3");
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException3.toString());
      assertNull(sQLRecoverableException3.getSQLState());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException3.getMessage());
      assertNotNull(sQLRecoverableException3);
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("I?, Y= X>3", sQLRecoverableException1);
      assertEquals("org.apache.commons.collections4.functors.SwitchClosure", sQLRecoverableException1.getSQLState());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \"M}c5rf.]!SvJ/tM", sQLRecoverableException1.toString());
      assertEquals("\"M}c5rf.]!SvJ/tM", sQLRecoverableException1.getMessage());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException4.toString());
      assertEquals(0, sQLRecoverableException4.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException4.getMessage());
      assertNull(sQLRecoverableException4.getSQLState());
      assertNotNull(sQLRecoverableException4);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException0));
      
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("I?, Y= X>3", sQLRecoverableException3);
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException3.toString());
      assertNull(sQLRecoverableException3.getSQLState());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException3.getMessage());
      assertEquals(0, sQLRecoverableException5.getErrorCode());
      assertEquals("I?, Y= X>3", sQLRecoverableException5.getMessage());
      assertNull(sQLRecoverableException5.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: I?, Y= X>3", sQLRecoverableException5.toString());
      assertNotNull(sQLRecoverableException5);
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException1));
      
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("$IZQd3Jy8pj;S;~jA");
      assertEquals(0, sQLRecoverableException6.getErrorCode());
      assertEquals("$IZQd3Jy8pj;S;~jA", sQLRecoverableException6.getMessage());
      assertEquals("java.sql.SQLRecoverableException: $IZQd3Jy8pj;S;~jA", sQLRecoverableException6.toString());
      assertNull(sQLRecoverableException6.getSQLState());
      assertNotNull(sQLRecoverableException6);
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException3));
      
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("org.apache.commons.collections4.functors.SwitchClosure", "\"M}c5rf.]!SvJ/tM", 0);
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.SwitchClosure", sQLRecoverableException7.toString());
      assertEquals(0, sQLRecoverableException7.getErrorCode());
      assertEquals("\"M}c5rf.]!SvJ/tM", sQLRecoverableException7.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.SwitchClosure", sQLRecoverableException7.getMessage());
      assertNotNull(sQLRecoverableException7);
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException6));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException2));
      
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(8, sQLRecoverableExceptionArray0.length);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) listIterator1, (Iterator<? extends IIOMetadataNode>) listIterator1);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      String string0 = "org.apache.commons.collections4.functors.ComparatorPredicate";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.ComparatorPredicate", "org.apache.commons.collections4.functors.ComparatorPredicate", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      String string1 = "OW-\"";
      String string2 = "*rf`ciYz<'v{XiW`2";
      StackTraceElement stackTraceElement0 = new StackTraceElement("OW-\"", "org.apache.commons.collections4.functors.ComparatorPredicate", "*rf`ciYz<'v{XiW`2", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableListIterator0);
      IteratorUtils.get(iterator0, 0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.singletonListIterator((Vector<SQLDataException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, (long) 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = null;
      Transformer<BatchUpdateException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) orderedIterator0, (-1901L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("ExceptionTransformer invoked");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "ExceptionTransformer invoked", 0, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ResettableListIterator<TreeSet<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<TreeSet<SQLRecoverableException>>) resettableListIterator0);
      String string0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<TreeSet<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<TreeSet<SQLRecoverableException>>) resettableListIterator0);
      String string0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableListIterator0, 0L);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Predicate<InstanceofPredicate> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super InstanceofPredicate>) transformerPredicate0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "xO:";
      IteratorUtils.arrayListIterator(stringArray0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      SQLException sQLException0 = new SQLException("", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "xO:", sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLTransactionRollbackException0);
      batchUpdateException0.printStackTrace();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("", classArray0, classArray0);
      sQLException0.initCause(sQLTransactionRollbackException0);
      InvokerTransformer.invokerTransformer("xO:");
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) invokerTransformer0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) iterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-1), 0, (Throwable) null);
      IteratorUtils.singletonListIterator(dataTruncation0);
      MapIterator<Boolean, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<Boolean>) mapIterator0);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableListIterator0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedHashSet<SQLRecoverableException>[] linkedHashSetArray0 = (LinkedHashSet<SQLRecoverableException>[]) Array.newInstance(LinkedHashSet.class, 4);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLRecoverableException> linkedHashSet1 = new LinkedHashSet<SQLRecoverableException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLRecoverableException> linkedHashSet2 = new LinkedHashSet<SQLRecoverableException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      linkedHashSet2.containsAll(linkedHashSet2);
      LinkedHashSet<SQLRecoverableException> linkedHashSet3 = new LinkedHashSet<SQLRecoverableException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      IteratorUtils.arrayIterator(linkedHashSetArray0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 5);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category1, locale_Category0, locale_Category0, locale_Category2);
      enumSetArray0[1] = enumSet1;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet2 = EnumSet.allOf(class0);
      enumSetArray0[2] = enumSet2;
      EnumSet<Locale.Category> enumSet3 = EnumSet.of(locale_Category0);
      enumSetArray0[3] = enumSet3;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet4 = EnumSet.of(locale_Category3);
      enumSetArray0[4] = enumSet4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(enumSetArray0, (-1668), (-534));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Object object0 = new Object();
      MockThrowable mockThrowable0 = new MockThrowable("");
      mockThrowable0.getLocalizedMessage();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockThrowable0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Class<IIOMetadataNode>>) null, (Collection<? super Class<IIOMetadataNode>>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) instanceofPredicate0);
      IteratorUtils.find((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      int int0 = 4;
      ArrayIterator<SQLWarning> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLWarning>((Object) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "0{>z~Xq[2;oB=wKKP,Q";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("0{>z~Xq[2;oB=wKKP,Q");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&@9@(%;", "&@9@(%;", 0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.isEmpty(listIterator0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "&@9@(%;");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // &@9@(%;
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      Stack<SQLRecoverableException> stack1 = new Stack<SQLRecoverableException>();
      Stack<SQLRecoverableException> stack2 = new Stack<SQLRecoverableException>();
      MockThrowable mockThrowable0 = new MockThrowable();
      OrderedMapIterator<Object, ServiceLoader<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      Object object0 = new Object();
      mockThrowable0.getLocalizedMessage();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockThrowable0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      ArrayListIterator<String> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<String>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "The prototype must be cloneable via a public clone method", 1);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) listIterator0);
      IteratorUtils.isEmpty(iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = 504L;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("PHl!s", "F69^@m!", 1405, longArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 1430;
      intArray1[2] = (-1412);
      intArray1[3] = 1;
      intArray1[4] = 1430;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "", 1430, intArray1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) objectArrayIterator0, (Iterator<? extends BatchUpdateException>) objectArrayIterator0, (Iterator<? extends BatchUpdateException>) objectArrayIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) vector0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("B=SWUkGbJ/sHVB");
      arrayDeque0.add(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = arrayDeque0.pollFirst();
      Iterator<SQLTransientConnectionException> iterator0 = arrayDeque0.iterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 4);
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashMap0);
      MapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>) entrySetMapIterator0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("B=SWUkGbJ/sHVB", sQLTransientConnectionException1);
      InvokerTransformer<Object, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<Object, SQLInvalidAuthorizationSpecException>("xnsn`t0", (Class<?>[]) null, iteratorArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      iteratorArray0[1] = iterator1;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(orderedMapIterator0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(orderedMapIterator1);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException>) abstractMapIteratorDecorator0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) abstractMapIteratorDecorator0, 0, 746);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", hashMap0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("!|jpqB;c.)9~", "", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      MockFile mockFile0 = new MockFile("= JQ-<6m=~6eZ`{", "!|jpqB;c.)9~");
      MockFile mockFile1 = new MockFile(mockFile0, "!|jpqB;c.)9~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "!|jpqB;c.)9~", 0, 0);
      sQLClientInfoException4.printStackTrace(printWriter0);
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("!|jpqB;c.)9~", "", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException5;
      sQLClientInfoException3.addSuppressed(sQLClientInfoException4);
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", "", 100, map0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", map0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("", "", hashMap0);
      sQLClientInfoException8.fillInStackTrace();
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedMapIterator<Class<IIOMetadataNode>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLClientInfoException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLClientInfoException>(orderedMapIterator1);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 123;
      Integer integer0 = new Integer(123);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) listIterator0, 1L);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) skippingIterator0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(vector0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLWarning>) orderedIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) transformedPredicate0);
      transformedPredicate0.evaluate(transformer0);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) listIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "q1Zu";
      SQLException sQLException0 = new SQLException("q1Zu", (String) null);
      sQLException0.fillInStackTrace();
      sQLException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      Hashtable<SQLTimeoutException, HashMap<SQLClientInfoException, SQLRecoverableException>> hashtable0 = new Hashtable<SQLTimeoutException, HashMap<SQLClientInfoException, SQLRecoverableException>>();
      EntrySetMapIterator<SQLTimeoutException, HashMap<SQLClientInfoException, SQLRecoverableException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, HashMap<SQLClientInfoException, SQLRecoverableException>>(hashtable0);
      MapIterator<SQLTimeoutException, HashMap<SQLClientInfoException, SQLRecoverableException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, HashMap<SQLClientInfoException, SQLRecoverableException>>) entrySetMapIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) mapIterator0);
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(list0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) reverseListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      String string0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      transformerArray0[0] = transformer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(transformerArray0, (-3056), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, (-541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = (-1462);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<SQLDataException>[]) null, (-1462), (-17));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Vector<SQLRecoverableException>[] vectorArray0 = (Vector<SQLRecoverableException>[]) Array.newInstance(Vector.class, 5);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      vectorArray0[0] = (Vector<SQLRecoverableException>) stack0;
      Stack<SQLRecoverableException> stack1 = new Stack<SQLRecoverableException>();
      vectorArray0[1] = (Vector<SQLRecoverableException>) stack1;
      Stack<SQLRecoverableException> stack2 = new Stack<SQLRecoverableException>();
      vectorArray0[2] = (Vector<SQLRecoverableException>) stack2;
      Stack<SQLRecoverableException> stack3 = new Stack<SQLRecoverableException>();
      vectorArray0[3] = (Vector<SQLRecoverableException>) stack3;
      Stack<SQLRecoverableException> stack4 = new Stack<SQLRecoverableException>();
      stack4.clone();
      vectorArray0[4] = (Vector<SQLRecoverableException>) stack4;
      IteratorUtils.arrayIterator(vectorArray0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      int int0 = 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("]");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".", ".", 0, sQLNonTransientException0);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      Vector<PriorityQueue<SQLFeatureNotSupportedException>> vector0 = new Vector<PriorityQueue<SQLFeatureNotSupportedException>>();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      vector0.add(priorityQueue0);
      IteratorUtils.loopingListIterator((List<PriorityQueue<SQLFeatureNotSupportedException>>) vector0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) arrayDeque0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("7oqKe", "bI/41MM|>-@24z @5", (-648), sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLNonTransientConnectionException0);
      int int0 = 1911;
      SQLException sQLException0 = new SQLException();
      sQLException0.initCause(sQLIntegrityConstraintViolationException0);
      sQLException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.setNextException(sQLException0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 1911, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Properties properties0 = new Properties();
      int int0 = (-139);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, (-139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
