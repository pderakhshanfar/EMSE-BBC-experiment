/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 12:44:59 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      listIteratorWrapper0.nextIndex();
      OrderedIterator<Class<SQLSyntaxErrorException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Class<SQLSyntaxErrorException>>) orderedIterator0, (Predicate<? super Class<SQLSyntaxErrorException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.FilteringMode[]) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EmptyIterator.emptyIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      IteratorUtils.matchesAny((Iterator<Class<SQLSyntaxErrorException>>) null, (Predicate<? super Class<SQLSyntaxErrorException>>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" l8l0\"-o1=C&mY", "e!qykTj@`D3~4");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("prefix may not be null", "");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("e!qykTj@`D3~4");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(list0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) loopingListIterator0);
      Class<SQLException> class0 = SQLException.class;
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<Class<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<Class<SQLSyntaxErrorException>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Class<SQLSyntaxErrorException>>) resettableListIterator0, (Iterator<? extends Class<SQLSyntaxErrorException>>) resettableListIterator0, (Iterator<? extends Class<SQLSyntaxErrorException>>) resettableListIterator0);
      IteratorUtils.matchesAny((Iterator<Class<SQLSyntaxErrorException>>) zippingIterator0, (Predicate<? super Class<SQLSyntaxErrorException>>) uniquePredicate0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      listIteratorWrapper0.nextIndex();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) listIteratorWrapper0, class0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "InstantiateFactory: Constructor must be public";
      stringArray0[3] = "";
      stringArray0[4] = "6{.=:e_(Y6!Yvagb";
      stringArray0[5] = "Collection must not be null";
      stringArray0[6] = "org.apache.commons.collections4.iterators.AbstractEmptyIterator";
      stringArray0[7] = "!O9QX7z<LS6R)3d|77y";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 0, (-1433));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      IteratorUtils.loopingListIterator((List<SQLException>) linkedList0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      IteratorUtils.find((Iterator<Vector<SQLWarning>>) null, (Predicate<? super Vector<SQLWarning>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      IteratorUtils.getIterator(equalPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (Throwable) null);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, false);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, 1003);
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(list0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) loopingListIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      // Undeclared exception!
      IteratorUtils.get((Iterator<SQLNonTransientException>) listIterator0, 1003);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      EmptyListIterator.resettableEmptyListIterator();
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 1);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      ResettableListIterator<Class<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<Class<SQLSyntaxErrorException>>) resettableListIterator0, (Predicate<? super Class<SQLSyntaxErrorException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EmptyIterator.emptyIterator();
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The predicate collection must not contain a null predicate, index ", "The predicate collection must not contain a null predicate, index ", (-1657), mockThrowable0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("The predicate collection must not contain a null predicate, index ", "");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.getIterator(iterator0);
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 6);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      classArray0[1] = class1;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      classArray0[2] = class2;
      Class<SQLSyntaxErrorException> class3 = SQLSyntaxErrorException.class;
      classArray0[3] = class3;
      Class<SQLSyntaxErrorException> class4 = SQLSyntaxErrorException.class;
      classArray0[4] = class4;
      Class<SQLSyntaxErrorException> class5 = SQLSyntaxErrorException.class;
      classArray0[5] = class5;
      ResettableListIterator<Class<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class4);
      IteratorUtils.matchesAny((Iterator<Class<SQLSyntaxErrorException>>) resettableListIterator0, (Predicate<? super Class<SQLSyntaxErrorException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.getIterator(sQLTransientConnectionException0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) singletonListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("r_^0`[1wfF}?Lzn{W", "r_^0`[1wfF}?Lzn{W");
      arrayList0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableIterator0, (Object) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      IteratorUtils.getIterator(equalPredicate0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("r_^0`[1wfF}?Lzn{W", "r_^0`[1wfF}?Lzn{W");
      arrayList0.add(sQLRecoverableException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null, (Collection<? super SQLRecoverableException>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("7o.S\"s?&^_!hcVmBJ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLTransientConnectionException1);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 7);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      classArray0[4] = class4;
      Class<SQLTransientConnectionException> class5 = SQLTransientConnectionException.class;
      classArray0[5] = class5;
      Class<SQLTransientConnectionException> class6 = SQLTransientConnectionException.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "", "7o.S\"s?&^_!hcVmBJ", "i)GwetB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TruePredicate.truePredicate();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      listIteratorWrapper0.nextIndex();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIteratorWrapper0, (Iterator<? extends SQLException>) singletonListIterator0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.toString((Iterator<SQLException>) zippingIterator0, (Transformer<? super SQLException, String>) transformer0, "", "org.apache.commons.collections4.functors.InstantiateTransformer", "");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("JHpC&EML", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "", "JHpC&EML", "");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TruePredicate.truePredicate();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("Array class must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) transformer0, "@Kx,i^[", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("r_^0`[1wfF}?Lzn{W", "r_^0`[1wfF}?Lzn{W", 22);
      arrayList0.add(sQLRecoverableException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLRecoverableException0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("r_^0`[1wfF}?Lzn{W");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLIntegrityConstraintViolationException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 2);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("5:=p:r6)z(:k@Cm", classArray0, classArray0);
      Transformer<Object, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) invokerTransformer0, (Transformer<? super Object, ? extends String>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) singletonIterator0, (Transformer<? super SQLException, String>) transformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) transformer0, (String) null, (String) null, "Node must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      listIteratorWrapper0.nextIndex();
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      SingletonIterator<Vector<SQLWarning>> singletonIterator0 = new SingletonIterator<Vector<SQLWarning>>(vector0);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 6);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      classArray0[0] = class0;
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      classArray0[1] = class1;
      Class<InstanceofPredicate> class2 = InstanceofPredicate.class;
      classArray0[2] = class2;
      Class<InstanceofPredicate> class3 = InstanceofPredicate.class;
      classArray0[3] = class3;
      Class<InstanceofPredicate> class4 = InstanceofPredicate.class;
      classArray0[4] = class4;
      Class<InstanceofPredicate> class5 = InstanceofPredicate.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("org.apache.commons.collections4.functors.NullPredicate", classArray0, classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Vector<SQLWarning>>) singletonIterator0, (Predicate<? super Vector<SQLWarning>>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.NullPredicate' on 'class java.util.Vector' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<HashSet<SQLNonTransientException>>) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) singletonListIterator0);
      MapIterator<Boolean, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Boolean, SQLDataException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Boolean, ? extends SQLDataException>) mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      int int0 = (-5716);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-5716));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@Kx,i^[", "[{N", 22);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      arrayList0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayList0);
      arrayList0.add(sQLRecoverableException0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableIterator0, (Object) "[{N");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("r_^0`[1wfF}?Lzn{W", "r_^0`[1wfF}?Lzn{W", 22);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      HashMap<Locale.FilteringMode, String> hashMap0 = new HashMap<Locale.FilteringMode, String>();
      EntrySetMapIterator<Locale.FilteringMode, String> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, String>(hashMap0);
      MapIterator<Locale.FilteringMode, String> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends String>) entrySetMapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AbstractMapIteratorDecorator<Locale.FilteringMode, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, String>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Locale.FilteringMode>) abstractMapIteratorDecorator0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      listIteratorWrapper0.nextIndex();
      IteratorUtils.get((Iterator<SQLNonTransientException>) listIteratorWrapper0, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("r_^0`[1wfF}?Lzn{W", "r_^0`[1wfF}?Lzn{W", 22);
      arrayList0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableIterator0, (Object) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) singletonIterator0, (Iterator<? extends SQLDataException>) singletonIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<Locale.FilteringMode, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[3] = (Iterator<Locale.FilteringMode>) orderedMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iteratorArray0[0], (Iterator<? extends Locale.FilteringMode>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<Locale.FilteringMode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLDataException>(orderedMapIterator0);
      TruePredicate.truePredicate();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) transformer0, "4`1f)B5?:7{H%#TWc\"", "", "&Wj?KL.tC");
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<Locale.FilteringMode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLDataException>(orderedMapIterator0);
      TruePredicate.truePredicate();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) transformer0, "4`1f)B5?:7{H%#TWc\"", "", "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      HashMap<SQLRecoverableException, SQLException> hashMap0 = new HashMap<SQLRecoverableException, SQLException>();
      EntrySetMapIterator<SQLRecoverableException, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLException>(hashMap0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) entrySetMapIterator0, 0L, 0L);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      SingletonIterator<Vector<SQLWarning>> singletonIterator0 = new SingletonIterator<Vector<SQLWarning>>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Vector<SQLWarning>>) singletonIterator0, (Predicate<? super Vector<SQLWarning>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("@Kx,i^[", "", 2439);
      SQLDataException sQLDataException0 = new SQLDataException("", "@Kx,i^[", 2439);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      listIteratorWrapper0.reset();
      listIteratorWrapper0.nextIndex();
      IteratorUtils.get((Iterator<SQLNonTransientException>) listIteratorWrapper0, 0);
      OrderedMapIterator<Class<SQLSyntaxErrorException>, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Class<SQLSyntaxErrorException>, Locale.FilteringMode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Class<SQLSyntaxErrorException>, Locale.FilteringMode>(orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<Class<SQLSyntaxErrorException>>) abstractMapIteratorDecorator0, (Predicate<? super Class<SQLSyntaxErrorException>>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLDataException>(orderedMapIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<Locale.FilteringMode>) abstractOrderedMapIteratorDecorator0, (Predicate<? super Locale.FilteringMode>) andPredicate0);
      IteratorUtils.pushbackIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.emptyIterator();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.collections4.iterators.PeekingIterator";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0, 1);
      IteratorUtils.find((Iterator<String>) objectArrayIterator0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", 3893, 3893);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[4];
      SQLException sQLException0 = new SQLException("Estimated size must be greater than 0");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation(10, true, false, 10, 920, sQLException0);
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLWarning sQLWarning1 = new SQLWarning("", (String) null, sQLWarning0);
      sQLWarningArray0[2] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning((String) null, "Estimated size must be greater than 0", 10, dataTruncation0);
      sQLWarningArray0[3] = sQLWarning2;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) objectArrayIterator0);
      Iterator<SQLWarning> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) iterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLClientInfoException0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(identityPredicate0);
      IteratorUtils.find(iterator1, (Predicate<? super SQLWarning>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) singletonIterator0, (Iterator<? extends SQLDataException>) singletonIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      IteratorUtils.size(zippingIterator0);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) transformer0, "List must not be null", "List must not be null", "Collection must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(arrayList0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) loopingListIterator0, 199L, 199L);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) boundedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) arrayList0);
      ResettableListIterator<SQLException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) null, "", "", "O~*O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("@Kx,i^[", "", 2439);
      Vector<Integer> vector0 = new Vector<Integer>(579);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      Integer integer0 = new Integer(100);
      vector0.add(integer0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(vector0);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) singletonIterator0, (Iterator<? extends SQLDataException>) singletonIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      SingletonIterator<Vector<SQLWarning>> singletonIterator1 = new SingletonIterator<Vector<SQLWarning>>(vector0);
      IteratorUtils.find((Iterator<Vector<SQLWarning>>) singletonIterator1, (Predicate<? super Vector<SQLWarning>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) resettableListIterator0);
      ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<LinkedList<Iterator>>) iterator0, (Closure<? super LinkedList<Iterator>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("@Kx,i^[", "", 2439);
      Vector<Integer> vector0 = new Vector<Integer>(579);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(vector0);
      IteratorUtils.size(loopingListIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Object) "");
      IteratorUtils.size(resettableListIterator0);
      ResettableListIterator<SQLException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator1, (Transformer<? super SQLException, String>) transformer0, "@Kx,i^[", "", "BI HniS8/g+5");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      stack0.add(properties0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<Properties> listIterator0 = stack0.listIterator();
      IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 999);
      IteratorUtils.isEmpty(listIterator0);
      HashSet<Integer>[] hashSetArray0 = (HashSet<Integer>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      hashSetArray0[0] = (HashSet<Integer>) linkedHashSet0;
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      hashSetArray0[1] = hashSet0;
      int int0 = (-806);
      HashSet<Integer> hashSet1 = null;
      try {
        hashSet1 = new HashSet<Integer>((-806), 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -806
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("");
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      OrderedMapIterator<Locale.FilteringMode, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLDataException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "List must not be null");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("List must not be null");
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedIterator<LinkedList<Properties>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("List must not be null");
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) orderedIterator0, (Transformer<? super LinkedList<Properties>, String>) constantTransformer0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("b", "Iterator remove() can only be called once after next()", mockThrowable0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, 1, intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", (String) null, 1, batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("0Z|y@bmvKa", sQLTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(mockThrowable0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("g0]");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 1);
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (long) 1);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) andPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("EJB", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", sQLFeatureNotSupportedException2);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "RQ3`w@?c6!nA[pM5^", 2439);
      SQLDataException sQLDataException0 = new SQLDataException("RQ3`w@?c6!nA[pM5^", "Set must not be null", 2439);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.size(singletonListIterator0);
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) linkedHashSet0);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedMapIterator<Boolean, ServiceLoader<SQLTimeoutException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) orderedMapIterator0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P`8;t6<RaBh|Rr");
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("@Kx,i^[", "", 2439);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2439);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      IteratorUtils.emptyListIterator();
      Hashtable<SQLNonTransientConnectionException, EnumSet<Locale.FilteringMode>> hashtable0 = new Hashtable<SQLNonTransientConnectionException, EnumSet<Locale.FilteringMode>>();
      IteratorUtils.size(singletonListIterator0);
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) linkedHashSet0);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) iterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(stack0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      stack0.add(locale_FilteringMode0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      chainedClosure0.execute(closure0);
      IteratorUtils.isEmpty(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      stack0.retainAll(vector0);
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("FilterListIterator.add(Object) is not supported.", "delimiter may not be null", sQLFeatureNotSupportedException0);
      sQLTimeoutException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NodeList must not be null", "", sQLFeatureNotSupportedException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator("Y5ND|Cg2A~,I{ba$d#X");
      Vector<LinkedList<Properties>> vector0 = new Vector<LinkedList<Properties>>();
      LoopingListIterator<LinkedList<Properties>> loopingListIterator0 = new LoopingListIterator<LinkedList<Properties>>(vector0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) loopingListIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
      Vector<Integer> vector1 = new Vector<Integer>(22);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SN!{dCDSVD/i");
      LoopingListIterator<Integer> loopingListIterator1 = new LoopingListIterator<Integer>(vector1);
      IteratorUtils.size(iterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Object) "");
      Iterator<IIOMetadataNode> iterator1 = EmptyIterator.emptyIterator();
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator(iterator1, (long) 22);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) skippingIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      stack0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) null, 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Integer integer0 = new Integer(576);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) resettableIterator0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ExceptionPredicate.exceptionPredicate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      SQLDataException sQLDataException0 = new SQLDataException("Entry does not exist: ");
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      SingletonIterator<SQLDataException> singletonIterator1 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) singletonIterator0, (Iterator<? extends SQLDataException>) singletonIterator1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      UniquePredicate.uniquePredicate();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(priorityQueue0);
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) loopingIterator0);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) loopingIterator0, 0L);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) boundedIterator0);
      ExceptionPredicate.exceptionPredicate();
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.objectGraphIterator(predicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("@Kx,i^[", "@Kx,i^[", 2439);
      SQLDataException sQLDataException0 = new SQLDataException("", "@Kx,i^[", 2439);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (long) 2439, (long) 2439);
      iteratorArray0[0] = (Iterator<DataTruncation>) boundedIterator0;
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) orderedMapIterator0);
      iteratorArray0[1] = (Iterator<DataTruncation>) listIterator0;
      ListIteratorWrapper<DataTruncation> listIteratorWrapper1 = new ListIteratorWrapper<DataTruncation>(orderedMapIterator0);
      iteratorArray0[2] = (Iterator<DataTruncation>) listIteratorWrapper1;
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "delimiter may not be null", sQLFeatureNotSupportedException0);
      sQLTimeoutException0.getLocalizedMessage();
      Stack<Properties> stack0 = new Stack<Properties>();
      ListIterator<Properties> listIterator0 = stack0.listIterator();
      stack0.add((Properties) null);
      int int0 = 1193;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 1193);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedIterator<LinkedList<SQLFeatureNotSupportedException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      String string0 = "Sp,~(E<]TZqQ";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Sp,~(E<]TZqQ", "Sp,~(E<]TZqQ", hashMap0);
      sQLClientInfoException0.getSuppressed();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLClientInfoException0);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 512, (-243));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<Properties> listIterator0 = stack0.listIterator();
      IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 999);
      IteratorUtils.isEmpty(listIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) resettableListIterator0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      SingletonIterator<LinkedList<Properties>> singletonIterator0 = new SingletonIterator<LinkedList<Properties>>(linkedList0, false);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedList<Properties>>) singletonIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.LinkedList' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0, 0);
      int int0 = (-129);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, (-129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(stack0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      stack0.add(locale_FilteringMode0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      chainedClosure0.execute(closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<LinkedList<Iterator>>) resettableListIterator0, (Closure<? super LinkedList<Iterator>>) chainedClosure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("FilterListIterator.add(Object) is not supported.", "delimiter may not be null", sQLFeatureNotSupportedException0);
      sQLTimeoutException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NodeList must not be null", "", sQLFeatureNotSupportedException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator("Y5ND|Cg2A~,I{ba$d#X");
      Vector<LinkedList<Properties>> vector0 = new Vector<LinkedList<Properties>>();
      LoopingListIterator<LinkedList<Properties>> loopingListIterator0 = new LoopingListIterator<LinkedList<Properties>>(vector0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) loopingListIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
      Vector<Integer> vector1 = new Vector<Integer>(22);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      LoopingListIterator<Integer> loopingListIterator1 = new LoopingListIterator<Integer>(vector1);
      IteratorUtils.size(iterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Object) "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("FilterListIterator.add(Object) is not supported.", "delimiter may not be null", sQLFeatureNotSupportedException0);
      sQLTimeoutException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NodeList must not be null", "", sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator("Y5ND|Cg2A~,I{ba$d#X");
      int int0 = 0;
      Vector<LinkedList<Properties>> vector0 = new Vector<LinkedList<Properties>>();
      LoopingListIterator<LinkedList<Properties>> loopingListIterator0 = new LoopingListIterator<LinkedList<Properties>>(vector0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) loopingListIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
      sQLFeatureNotSupportedException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "0MYI>");
      Object object0 = null;
      int int1 = (-2360);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, (-2360));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(arrayList0);
      Stack<Properties> stack0 = new Stack<Properties>();
      ListIterator<Properties> listIterator0 = stack0.listIterator();
      IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 999);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) loopingIterator0, (Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.emptyListIterator();
      Vector<SQLIntegrityConstraintViolationException> vector1 = new Vector<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) vector1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) singletonIterator0, (Iterator<? extends SQLDataException>) singletonIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(priorityQueue0);
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) loopingIterator0, (Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) iterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      ExceptionPredicate.exceptionPredicate();
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) iterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      String string1 = "FilterListIterator.add(Object) is not supported.";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("FilterListIterator.add(Object) is not supported.", "delimiter may not be null", sQLFeatureNotSupportedException0);
      sQLTimeoutException0.getLocalizedMessage();
      String string2 = "NodeList must not be null";
      String string3 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NodeList must not be null", "", sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator("Y5ND|Cg2A~,I{ba$d#X");
      Vector<LinkedList<Properties>> vector0 = new Vector<LinkedList<Properties>>();
      LoopingListIterator<LinkedList<Properties>> loopingListIterator0 = new LoopingListIterator<LinkedList<Properties>>(vector0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      loopingListIterator0.add(linkedList0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) loopingListIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedList<Properties>[]) null, 2814);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      IteratorUtils.emptyListIterator();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(linkedHashSet0);
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      ExceptionPredicate.exceptionPredicate();
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) loopingIterator0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      Iterator<Integer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) loopingIterator0, (Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) iterator1);
      Iterable<Integer> iterable0 = new TreeSet<Integer>();
      ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Locale.FilteringMode> iterator2 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator2, (Iterator<? extends Locale.FilteringMode>) iterator2);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) zippingIterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      Vector<SQLIntegrityConstraintViolationException> vector1 = new Vector<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) vector1);
      Vector<Iterator<SQLTimeoutException>> vector2 = new Vector<Iterator<SQLTimeoutException>>();
      IteratorUtils.loopingListIterator((List<Iterator<SQLTimeoutException>>) vector2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(stack0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) vector0);
      Vector<Iterator<SQLTimeoutException>> vector1 = new Vector<Iterator<SQLTimeoutException>>();
      IteratorUtils.loopingListIterator((List<Iterator<SQLTimeoutException>>) vector1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyListIterator();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayList0);
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(resettableIterator0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 9);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[5] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[6] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[7] = class7;
      Class<SQLDataException> class8 = SQLDataException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransactionRollbackException>(",!hM*xz%65=F:e4r4?", classArray0, classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) listIteratorWrapper0, (Transformer<? super Properties, ? extends SQLTransactionRollbackException>) invokerTransformer0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 625);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      stack0.retainAll(vector0);
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      IteratorUtils.emptyListIterator();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(stack0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      WhileClosure.whileClosure((Predicate<? super Object>) comparatorPredicate0, (Closure<? super Object>) closure0, false);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 7;
      Integer integer0 = new Integer(7);
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1756);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      Iterator<Integer> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) iterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      ExceptionPredicate.exceptionPredicate();
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) iterator1);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      Integer integer5 = new Integer(22);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer5, int1, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyListIterator();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayList0);
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getParentNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) resettableListIterator0);
      ExceptionPredicate.exceptionPredicate();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      SingletonIterator<LinkedList<Properties>> singletonIterator0 = new SingletonIterator<LinkedList<Properties>>(linkedList0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>(";!p6_cy8)@t!@4O=Z\"i");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) singletonIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) zippingIterator0, (-1L), (-2636L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      OrderedIterator<LinkedList<Properties>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classArray0[0] = class0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      int int0 = 7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 7, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyOrderedIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException0 = new SQLDataException("List must not be null", "List must not be null", (-1), sQLWarning0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      locale_FilteringModeArray0[0] = locale_FilteringMode1;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0, 0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_FilteringMode1, defaultEquator0);
      OrPredicate.orPredicate((Predicate<? super Locale.FilteringMode>) equalPredicate0, (Predicate<? super Locale.FilteringMode>) equalPredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<Locale.FilteringMode>) objectArrayListIterator0;
      iteratorArray0[1] = (Iterator<Locale.FilteringMode>) objectArrayListIterator0;
      iteratorArray0[2] = (Iterator<Locale.FilteringMode>) objectArrayListIterator0;
      iteratorArray0[3] = (Iterator<Locale.FilteringMode>) objectArrayListIterator0;
      iteratorArray0[4] = (Iterator<Locale.FilteringMode>) objectArrayListIterator0;
      iteratorArray0[5] = (Iterator<Locale.FilteringMode>) objectArrayListIterator0;
      iteratorArray0[6] = (Iterator<Locale.FilteringMode>) objectArrayListIterator0;
      iteratorArray0[7] = (Iterator<Locale.FilteringMode>) objectArrayListIterator0;
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Locale.FilteringMode>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(arrayList0);
      long long0 = 199L;
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) loopingListIterator0, 199L, 199L);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) boundedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) arrayList0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      EqualPredicate<Locale.FilteringMode> equalPredicate0 = new EqualPredicate<Locale.FilteringMode>(locale_FilteringMode3, (Equator<Locale.FilteringMode>) null);
      IteratorUtils.matchesAll((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) equalPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("F", "z$0_\"%Zj<");
      ArrayListIterator<SQLNonTransientException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientException>(stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("FilterListIterator.add(Object) is not supported.", "delimiter may not be null", sQLFeatureNotSupportedException0);
      sQLTimeoutException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NodeList must not be null", "", sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator("Y5ND|Cg2A~,I{ba$d#X");
      Vector<LinkedList<Properties>> vector0 = new Vector<LinkedList<Properties>>();
      LoopingListIterator<LinkedList<Properties>> loopingListIterator0 = new LoopingListIterator<LinkedList<Properties>>(vector0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) loopingListIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (long) 0, (-2732L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      int int0 = (-1);
      Vector<LinkedList<Properties>> vector0 = new Vector<LinkedList<Properties>>();
      LoopingListIterator<LinkedList<Properties>> loopingListIterator0 = new LoopingListIterator<LinkedList<Properties>>(vector0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      SingletonIterator<LinkedList<Properties>> singletonIterator0 = new SingletonIterator<LinkedList<Properties>>(linkedList0);
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) singletonIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (long) 2439, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      stack0.retainAll(vector0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      stack0.add(locale_FilteringMode0);
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      IteratorUtils.emptyListIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(512, true, false, 0, 0);
      dataTruncationArray0[0] = dataTruncation0;
      Stack<Integer> stack1 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack1);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(arrayList0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) loopingListIterator0, 199L, 199L);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) boundedIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) arrayList0);
      MapIterator<DataTruncation, PriorityQueue<SQLDataException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, PriorityQueue<SQLDataException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, PriorityQueue<SQLDataException>>(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) abstractMapIteratorDecorator0, 1899L);
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>((Locale.FilteringMode[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.constantTransformer(properties0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, ifClosure0, true);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(predicate0, whileClosure0, ifClosure0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) whileClosure0, true);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      predicateArray0[5] = (Predicate<Object>) equalPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure2 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IfClosure<Object> ifClosure2 = new IfClosure<Object>(predicate0, closure2, ifClosure1);
      IfClosure.ifClosure((Predicate<? super Object>) nonePredicate0, (Closure<? super Object>) ifClosure2);
      Closure<Object> closure3 = ForClosure.forClosure((-1), (Closure<? super Object>) closure1);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      closureArray0[0] = closure3;
      closureArray0[1] = (Closure<Object>) transformerClosure0;
      closureArray0[2] = (Closure<Object>) ifClosure1;
      closureArray0[3] = (Closure<Object>) ifClosure1;
      closureArray0[4] = (Closure<Object>) whileClosure0;
      closureArray0[5] = (Closure<Object>) transformerClosure0;
      closureArray0[6] = (Closure<Object>) ifClosure0;
      ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<Iterator<SQLTimeoutException>>>) null, (Transformer<? super ServiceLoader<Iterator<SQLTimeoutException>>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("@Kx,i^[", "", 2439);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2439);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) vector0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 3, sQLSyntaxErrorException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0, (Equator<Object>) defaultEquator0);
      Predicate<SQLException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate1);
      IteratorUtils.size(listIterator0);
      IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "]#e46?^Kw'g)%x>";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y5ND|Cg2A~,I{ba$d#X");
      sQLFeatureNotSupportedException0.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "]#e46?^Kw'g)%x>", sQLFeatureNotSupportedException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) null, (Transformer<? super LinkedList<Properties>, String>) constantTransformer0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (-3371L), (-3371L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.toString((Iterator<ArrayDeque<LinkedList>>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "List must not be null";
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "List must not be null");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[1] = class0;
      InvokerTransformer.invokerTransformer("List must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) zippingIterator0, (long) 0, 1L);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, false);
      closureArray0[0] = closure1;
      ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      Closure<Object> closure2 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<LinkedList<Iterator>>) null, (Closure<? super LinkedList<Iterator>>) closure2);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Stack<Properties> stack0 = new Stack<Properties>();
      ListIterator<Properties> listIterator0 = stack0.listIterator();
      IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 999);
      DataTruncation dataTruncation0 = new DataTruncation(999, true, true, 1732, 1732);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.clear();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) loopingIterator0, (Iterator<? extends Integer>) loopingIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E*U'8");
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      MapIterator<Integer, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransactionRollbackException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Boolean>) null, (Transformer<? super Boolean, ? extends SQLTransactionRollbackException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Stack<Properties> stack0 = new Stack<Properties>();
      ListIterator<Properties> listIterator0 = stack0.listIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      DataTruncation dataTruncation0 = new DataTruncation(1193, true, true, 1193, 4318);
      properties0.put(listIterator0, dataTruncation0);
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      MockThrowable.getDefaultStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) listIterator0, (Transformer<? super Properties, ? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y5ND|Cg2A~,I{ba$d#X");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "]#e46?^Kw'g)%x>", sQLFeatureNotSupportedException0);
      Throwable throwable0 = sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLTimeoutException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fs%'5hGHPux}hsv7U", "fs%'5hGHPux}hsv7U", sQLTimeoutException0);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation(1189, false, true, (-1), (-2482), throwable0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-2482), false, false, (-1), 0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      dataTruncation1.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) zippingIterator0, 3620L, (-321L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) iterator0);
      int int0 = 1493;
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 1493);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1493
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      stack0.retainAll(vector0);
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      IteratorUtils.emptyListIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(512, true, false, 0, 0);
      dataTruncationArray0[0] = dataTruncation0;
      Stack<Integer> stack1 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack1);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      stack0.retainAll(vector0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      Iterator<SQLNonTransientConnectionException> iterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      IteratorUtils.emptyListIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(512, true, false, 0, 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 896, 1961);
      dataTruncationArray0[1] = dataTruncation1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NodeList must not be null");
      SQLException sQLException0 = new SQLException("", "", 1961, dataTruncation0);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<Locale.FilteringMode> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Locale.FilteringMode>) nullIsTruePredicate0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) nullIsTruePredicate0);
      OrPredicate.orPredicate((Predicate<? super Locale.FilteringMode>) predicate1, (Predicate<? super Locale.FilteringMode>) predicate2);
      IteratorUtils.matchesAll((Iterator<Locale.FilteringMode>) resettableListIterator0, (Predicate<? super Locale.FilteringMode>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyListIterator();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 2233, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("sBQh],hfN*", "Array class must not be null", 0, (Map<String, ClientInfoStatus>) null);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(":.", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "List must not be null");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[1] = class0;
      InvokerTransformer.invokerTransformer("List must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) zippingIterator0, (long) 0, 1L);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, false);
      closureArray0[0] = closure1;
      ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      Closure<Object> closure2 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<LinkedList<Iterator>>) null, (Closure<? super LinkedList<Iterator>>) closure2);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "\\@Kx,i^[";
      String string1 = "J";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("J", "", 2);
      SQLDataException sQLDataException0 = new SQLDataException("@Kx,i^[", "", 2439, sQLSyntaxErrorException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      listIteratorWrapper0.nextIndex();
      IteratorUtils.get((Iterator<SQLNonTransientException>) listIteratorWrapper0, 0);
      OrderedMapIterator<Predicate<Object>, Integer> orderedMapIterator0 = null;
      AbstractOrderedMapIteratorDecorator<Predicate<Object>, Integer> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Predicate<Object>, Integer>((OrderedMapIterator<Predicate<Object>, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyListIterator();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayList0);
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      ExceptionPredicate.exceptionPredicate();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      IteratorUtils.size(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      stack0.retainAll(vector0);
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      IteratorUtils.objectGraphIterator((SQLNonTransientConnectionException) null, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) null);
      IteratorUtils.emptyListIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(512, true, false, 0, 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, false, 932, 1961);
      dataTruncationArray0[1] = dataTruncation1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NodeList must not be null");
      Integer integer0 = new Integer(932);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      int int0 = (-942);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()");
      SQLException sQLException0 = new SQLException("B", ",fA^==AlaC,y", (-942), sQLSyntaxErrorException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("A2!z~B");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("4h!%EtMhw_");
      SQLException sQLException0 = new SQLException("P^", "n=BA=dJt!rU.)=CJ", 28, sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NodeList must not be null", sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Array class must not be null", "", (-3053), sQLRecoverableException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("J", "", 2);
      SQLDataException sQLDataException0 = new SQLDataException("@Kx,i^[", "", 2439, sQLSyntaxErrorException0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) loopingIterator0, (Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) iterator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      Iterator<Integer> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator1);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIteratorWrapper<Integer> listIteratorWrapper0 = new ListIteratorWrapper<Integer>(loopingIterator0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) listIteratorWrapper0);
      Integer integer0 = new Integer(2);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      ResettableListIterator<Vector<SQLWarning>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.find((Iterator<Vector<SQLWarning>>) resettableListIterator0, (Predicate<? super Vector<SQLWarning>>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLClientInfoException0);
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", sQLDataException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("1e1Y=^PC(f'Fpc", sQLException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("B", ",fA^==AlaC,y", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      Iterator<Integer> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator1);
      ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("_?w", "_?w");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException0;
      int int0 = (-901);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 498, (-901));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Array class must not be null");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException((String) null, "Array class must not be null", sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.CloneTransformer");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) singletonIterator0, (Iterator<? extends SQLDataException>) singletonIterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate1;
      predicateArray0[5] = predicate1;
      predicateArray0[7] = predicate1;
      Transformer<Object, Locale.FilteringMode>[] transformerArray0 = (Transformer<Object, Locale.FilteringMode>[]) Array.newInstance(Transformer.class, 1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ConstantTransformer<Object, Locale.FilteringMode> constantTransformer0 = new ConstantTransformer<Object, Locale.FilteringMode>(locale_FilteringMode0);
      transformerArray0[0] = (Transformer<Object, Locale.FilteringMode>) constantTransformer0;
      Transformer<Object, Locale.FilteringMode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends Locale.FilteringMode>) transformerArray0[0], (Transformer<? super Object, ? extends Locale.FilteringMode>) constantTransformer0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate1, closure0);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(predicate0, ifClosure0, ifClosure0);
      closureArray0[0] = (Closure<Object>) ifClosure1;
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformerArray0[0]);
      closureArray0[1] = (Closure<Object>) transformerClosure0;
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) ifClosure0, true);
      closureArray0[2] = closure1;
      Closure<Object> closure2 = ForClosure.forClosure(0, (Closure<? super Object>) closure1);
      closureArray0[3] = closure2;
      Closure<Object> closure3 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      IteratorUtils.apply((Iterator<LinkedList<Iterator>>) zippingIterator0, (Closure<? super LinkedList<Iterator>>) closure3);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("No more elements in the iteration", "bqyJ~g6_}$`+", (-243), (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("bqyJ~g6_}$`+", "bqyJ~g6_}$`+", 0, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(", ", "", 0, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("/JeHGTK69vI2*+`o~:Y", (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      OrderedIterator<LinkedList<Properties>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("List must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) orderedIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) zippingIterator0, (long) 0, 1L);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, false);
      closureArray0[0] = closure1;
      ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      Closure<Object> closure2 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<LinkedList<Iterator>>) null, (Closure<? super LinkedList<Iterator>>) closure2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException0;
      int[] intArray0 = new int[3];
      intArray0[0] = 125;
      intArray0[1] = 125;
      intArray0[2] = 5;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "", intArray0, batchUpdateExceptionArray0[0]);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", "", 451, intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[1] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      IteratorUtils.singletonIterator((LinkedList<PriorityQueue>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-1001);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "!tE3";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 3433, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      ListIterator<Properties> listIterator0 = stack0.listIterator();
      IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 1526);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      Comparator<Object> comparator0 = null;
      Iterator<BatchUpdateException>[] iteratorArray1 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()");
      SQLException sQLException0 = new SQLException("", ",fA^==AlaC,y", (-942), sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("b}&>C#~'+", sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("b}&>C#~'+", "", (-942), sQLRecoverableException0);
      Iterator<SQLNonTransientConnectionException> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.unmodifiableIterator(iterator1);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyListIterator();
      List<Integer> list0 = new ArrayList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(list0);
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) loopingIterator0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) iterator0);
      ExceptionPredicate.exceptionPredicate();
      ListIterator<Integer> listIterator0 = new LoopingListIterator<Integer>(list0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) null, 2119L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[8];
      intArray0[0] = 1662;
      intArray0[1] = (-270);
      intArray0[2] = (-243);
      intArray0[3] = (-883);
      intArray0[4] = 9;
      intArray0[5] = (-1600);
      intArray0[6] = 1;
      intArray0[7] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      Iterator<SQLNonTransientConnectionException> iterator2 = EmptyIterator.emptyIterator();
      IteratorUtils.unmodifiableIterator(iterator2);
      IteratorUtils.emptyIterator();
      IteratorUtils.toArray(iterator1);
      Stack<Properties> stack0 = new Stack<Properties>();
      ListIterator<Properties> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y5ND|Cg2A~,I{ba$d#X");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "]#e46?^Kw'g)%x>", sQLFeatureNotSupportedException0);
      Throwable throwable0 = sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLTimeoutException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fs%'5hGHPux}hsv7U", "fs%'5hGHPux}hsv7U", sQLTimeoutException0);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation(1189, false, true, (-1), (-2482), throwable0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-2482), false, false, (-1), 0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(91, false, false, (-3319), (-2482));
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(12, false, false, 9, 0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-2691), false, true, 851, (-1));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(91, false, true, 12, 100, dataTruncation2);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, false, false, 1189, 0, dataTruncation5);
      dataTruncationArray0[6] = dataTruncation6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 1189, (-2438));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      IteratorUtils.arrayIterator(locale_FilteringModeArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("X3j!");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("]J+C", "]J+C", (-2089));
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("]J+C", "org.apache.commons.collections4.IteratorUtils", (-2089), sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("org.apache.commons.collections4.functors.ExceptionClosure", "]J+C", (-2089), sQLRecoverableException0);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("org.apache.commons.collections4.IteratorUtils");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLRecoverableException4);
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException(", ", sQLClientInfoException0);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, 0);
      IteratorUtils.unmodifiableIterator((Iterator<Vector<Hashtable>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0, (-270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = (-1001);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null, (-1001));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.getSuppressed();
      sQLTransactionRollbackException0.fillInStackTrace();
      sQLTransactionRollbackException0.getStackTrace();
      int int0 = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("<De3*{_&%.VUh>yl5G", "D%y-#3\"Tn{", 0, sQLTransactionRollbackException0);
      sQLTransientConnectionException0.getStackTrace();
      sQLTransactionRollbackException0.initCause(sQLTransientConnectionException0);
      sQLTransactionRollbackException0.getSuppressed();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      OrderedIterator<LinkedList<Properties>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      String string0 = "List must not be null";
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("List must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<LinkedList<Properties>>) orderedIterator0, (Transformer<? super LinkedList<Properties>, String>) transformer0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) zippingIterator0, (long) 0, 1L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boundedIterator0, 2464, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      int int0 = 877;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 877, 877);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedList0.add(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) loopingIterator0, 2236L);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) singletonIterator0, (Iterator<? extends SQLDataException>) singletonIterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate1;
      predicateArray0[5] = predicate1;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate1;
      Transformer<Object, Locale.FilteringMode>[] transformerArray0 = (Transformer<Object, Locale.FilteringMode>[]) Array.newInstance(Transformer.class, 1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ConstantTransformer<Object, Locale.FilteringMode> constantTransformer0 = new ConstantTransformer<Object, Locale.FilteringMode>(locale_FilteringMode0);
      transformerArray0[0] = (Transformer<Object, Locale.FilteringMode>) constantTransformer0;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends Locale.FilteringMode>[]) transformerArray0, (Transformer<? super Object, ? extends Locale.FilteringMode>) constantTransformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.unmodifiableIterator(iterator0);
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator1);
      Stack<Properties> stack0 = new Stack<Properties>();
      ListIterator<Properties> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLNonTransientException>) orderedMapIterator0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLDataException sQLDataException0 = null;
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(singletonListIterator0);
      listIteratorWrapper0.nextIndex();
      int int0 = 9;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) listIteratorWrapper0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 8
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "$w~q!}S?");
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      stack0.retainAll(vector0);
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      IteratorUtils.objectGraphIterator((SQLNonTransientConnectionException) null, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) null);
      IteratorUtils.emptyListIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(512, true, false, 0, 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, false, 932, 1961);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, false, false, 10, 1961, (Throwable) null);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-1137), false, false, 1961, 512, (Throwable) null);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1679), false, false, 10, 0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, true, false, (-524), 1376, dataTruncation3);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(3758, true, true, 512, 1376);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(1261, true, false, (-542), 3758);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(1261, true, false, (-412), (-542), dataTruncation6);
      dataTruncationArray0[8] = dataTruncation8;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IteratorUtils.emptyIterator();
      int int0 = 0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("wdVucR}hb..o,2U$9", "wdVucR}hb..o,2U$9", 0);
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(sQLRecoverableException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[3];
      intArray0[0] = 125;
      intArray0[1] = (-4298);
      intArray0[2] = 5;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", "", 451, intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MapIterator<LinkedHashSet<SQLInvalidAuthorizationSpecException>, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      ArrayListIterator<SQLNonTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientConnectionException>(mapIterator0, 462, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator setValue() can only be called after next() and before remove()");
      SQLException sQLException0 = new SQLException("", ",fA^==AlaC,y", (-942), sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("b}&>C#~'+", sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("b}&>C#~'+", "", (-942), sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-942));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.functors.CloneTransformer";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.CloneTransformer");
      iIOMetadataNode0.getOwnerDocument();
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      properties2.put(properties0, properties1);
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      String string0 = "";
      String string1 = "ak+F\"de_zX!";
      int int0 = (-639);
      properties4.clone();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "ak+F\"de_zX!", (-639), (Map<String, ClientInfoStatus>) null);
      properties1.put(sQLClientInfoException0, properties3);
      properties4.replace((Object) properties0, (Object) "toIndex = ");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, (-611), 1073741824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientException0.addSuppressed(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", 0, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException1.getMessage());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("");
      assertNotNull(sQLNonTransientConnectionException2);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("", sQLNonTransientConnectionException2.getMessage());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException3);
      assertNull(sQLNonTransientConnectionException3.getMessage());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.toString());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException2.initCause(sQLNonTransientConnectionException1);
      assertNotNull(sQLNonTransientConnectionException4);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException2);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException3);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException4);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException4);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException2);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException3);
      assertNotSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException3);
      assertNotSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException4);
      assertNotSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException0);
      assertNotSame(sQLNonTransientConnectionException4, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException4, sQLNonTransientConnectionException0);
      assertNotSame(sQLNonTransientConnectionException4, sQLNonTransientConnectionException3);
      assertSame(sQLNonTransientConnectionException4, sQLNonTransientConnectionException2);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException1.getMessage());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("", sQLNonTransientConnectionException2.getMessage());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException4.getMessage());
      assertNull(sQLNonTransientConnectionException4.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException4.toString());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("u^*M5XmfVlZC", "", 0);
      assertNotNull(sQLNonTransientConnectionException5);
      assertEquals(0, sQLNonTransientConnectionException5.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: u^*M5XmfVlZC", sQLNonTransientConnectionException5.toString());
      assertEquals("", sQLNonTransientConnectionException5.getSQLState());
      assertEquals("u^*M5XmfVlZC", sQLNonTransientConnectionException5.getMessage());
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      
      String string1 = sQLNonTransientConnectionException5.getLocalizedMessage();
      assertEquals("u^*M5XmfVlZC", string1);
      assertNotNull(string1);
      assertNotSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException3);
      assertNotSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException4);
      assertNotSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException2);
      assertNotSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException5.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: u^*M5XmfVlZC", sQLNonTransientConnectionException5.toString());
      assertEquals("", sQLNonTransientConnectionException5.getSQLState());
      assertEquals("u^*M5XmfVlZC", sQLNonTransientConnectionException5.getMessage());
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(string1.equals((Object)string0));
      
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException3);
      assertNotNull(sQLNonTransientConnectionException6);
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException6.toString());
      assertNull(sQLNonTransientConnectionException6.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException6.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException6.getMessage());
      assertNull(sQLNonTransientConnectionException3.getMessage());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.toString());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException6;
      sQLNonTransientConnectionException5.getLocalizedMessage();
      sQLNonTransientConnectionException1.setNextException(sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("u^*M5XmfVlZC", "", 100);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException7;
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 1446, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("|ZOj, Xtt@", "NU.SEH|t9", (-579), sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("|ZOj, Xtt@", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: |ZOj, Xtt@", sQLSyntaxErrorException0.toString());
      assertEquals("NU.SEH|t9", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-579), sQLSyntaxErrorException0.getErrorCode());
      
      sQLSyntaxErrorException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("|ZOj, Xtt@", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: |ZOj, Xtt@", sQLSyntaxErrorException0.toString());
      assertEquals("NU.SEH|t9", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-579), sQLSyntaxErrorException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("T n-,EI3", "", "", (-579));
      assertNotNull(stackTraceElement0);
      assertEquals((-579), stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals("T n-,EI3.()", stackTraceElement0.toString());
      assertEquals("T n-,EI3", stackTraceElement0.getClassName());
      assertEquals("", stackTraceElement0.getFileName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("|ZOj, Xtt@", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: |ZOj, Xtt@", sQLSyntaxErrorException0.toString());
      assertEquals("NU.SEH|t9", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-579), sQLSyntaxErrorException0.getErrorCode());
      assertEquals(1, stackTraceElementArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, (-579));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      assertNotNull(equalPredicate0);
      
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      assertNotNull(loopingIterator0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Iterator<Integer> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) loopingIterator0, (Iterator<? extends Integer>) loopingIterator0);
      assertNotNull(iterator2);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Iterator<Integer> iterator3 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) iterator2);
      assertNotNull(iterator3);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(iterator3.equals((Object)iterator2));
      
      Iterable<Integer> iterable0 = IteratorUtils.asIterable((Iterator<? extends Integer>) loopingIterator0);
      assertNotNull(iterable0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) iterator2);
      assertNotNull(listIterator0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(iterator2.equals((Object)iterator3));
      
      ListIterator<Integer> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
      assertNotNull(listIterator1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(iterator2.equals((Object)iterator3));
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NF", "[", (-1));
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-1), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: NF", sQLNonTransientConnectionException0.toString());
      assertEquals("NF", sQLNonTransientConnectionException0.getMessage());
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(4, integerArray0.length);
      
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "", int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) resettableListIterator0);
      assertNotNull(listIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      int int0 = 0;
      ArrayListIterator<String> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<String>(iterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ArrayListIterator<Locale.FilteringMode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Locale.FilteringMode>(comparator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNodeNS("", "");
      assertNull(attr0);
      
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNodeNS((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("MiP[&/q#f'b}", "MiP[&/q#f'b}", sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("MiP[&/q#f'b}", sQLTransactionRollbackException1.getSQLState());
      assertEquals("MiP[&/q#f'b}", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: MiP[&/q#f'b}", sQLTransactionRollbackException1.toString());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException2);
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException2.toString());
      assertNull(sQLTransactionRollbackException2.getSQLState());
      assertNull(sQLTransactionRollbackException2.getMessage());
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException3);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException3.toString());
      assertNull(sQLTransactionRollbackException3.getSQLState());
      assertNull(sQLTransactionRollbackException3.getMessage());
      assertEquals(0, sQLTransactionRollbackException3.getErrorCode());
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("MiP[&/q#f'b}", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException4);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("MiP[&/q#f'b}", sQLTransactionRollbackException4.getMessage());
      assertEquals(0, sQLTransactionRollbackException4.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: MiP[&/q#f'b}", sQLTransactionRollbackException4.toString());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransactionRollbackException4.getSQLState());
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("add() not supported for empty Iterator", "MiP[&/q#f'b}");
      assertNotNull(sQLTransactionRollbackException5);
      assertEquals("add() not supported for empty Iterator", sQLTransactionRollbackException5.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: add() not supported for empty Iterator", sQLTransactionRollbackException5.toString());
      assertEquals("MiP[&/q#f'b}", sQLTransactionRollbackException5.getSQLState());
      assertEquals(0, sQLTransactionRollbackException5.getErrorCode());
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException2));
      
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", " Mu-FH}N&hg72", sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException6);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(" Mu-FH}N&hg72", sQLTransactionRollbackException6.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransactionRollbackException6.toString());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", sQLTransactionRollbackException6.getMessage());
      assertEquals(0, sQLTransactionRollbackException6.getErrorCode());
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException5));
      
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("", "\"Z/", (-194));
      assertNotNull(sQLTransactionRollbackException7);
      assertEquals("", sQLTransactionRollbackException7.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException7.toString());
      assertEquals((-194), sQLTransactionRollbackException7.getErrorCode());
      assertEquals("\"Z/", sQLTransactionRollbackException7.getSQLState());
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException3));
      
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, (-194));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0, (-529));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      assertNotNull(enumeration0);
      
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedHashSet0);
      assertNotNull(iterator1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(iterator1.equals((Object)iterator0));
      
      ArrayList<SQLException>[] arrayListArray0 = (ArrayList<SQLException>[]) Array.newInstance(ArrayList.class, 3);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLException> arrayList2 = new ArrayList<SQLException>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      
      arrayListArray0[2] = arrayList2;
      int int0 = 278;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 278);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(arrayList0);
      assertNotNull(loopingListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) loopingListIterator0, 199L, 199L);
      assertNotNull(boundedIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) boundedIterator0);
      assertNotNull(enumeration0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) arrayList0);
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(boundedIterator0, defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(equalPredicate0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      
      Predicate<Locale.FilteringMode> predicate0 = OrPredicate.orPredicate((Predicate<? super Locale.FilteringMode>) equalPredicate0, (Predicate<? super Locale.FilteringMode>) equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(predicate0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }
}
