/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:12:37 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException("3[]e", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-14), sQLDataException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(list0);
      loopingListIterator0.next();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 1);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 1);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<EnumSet>>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.getIterator("<r<");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" reD%Y?E:,", "The collections must not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (-1), sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The collections must not be null", sQLFeatureNotSupportedException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) singletonIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "Transformer must not be null", "prefix may not be null", "hV|br\u0003m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(123);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1481));
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 3, (-741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<?> iterator0 = new SingletonListIterator<String>("S");
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iterator0, comparator0);
      NullIsExceptionPredicate<IIOMetadataNode> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<IIOMetadataNode>(predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) nullIsExceptionPredicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("S", "S");
      sQLTransactionRollbackException0.getSuppressed();
      Transformer<SQLTransientException, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.getIterator("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 4);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      iteratorArray0[0] = (Iterator<Properties>) resettableListIterator0;
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      iteratorArray0[1] = (Iterator<Properties>) listIterator0;
      ListIterator<Properties> listIterator1 = EmptyListIterator.emptyListIterator();
      iteratorArray0[2] = (Iterator<Properties>) listIterator1;
      OrderedMapIterator<Properties, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[3] = (Iterator<Properties>) orderedMapIterator0;
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<Properties, String> ifTransformer0 = new IfTransformer<Properties, String>((Predicate<? super Properties>) null, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) stack0);
      stack0.add(locale_FilteringMode0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_FilteringMode0);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) null);
      IteratorUtils.emptyIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "[]", sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 1);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[1] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[2] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[3] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[4] = (Predicate<Object>) transformerPredicate0;
      Transformer<Object, SQLTimeoutException>[] transformerArray0 = (Transformer<Object, SQLTimeoutException>[]) Array.newInstance(Transformer.class, 5);
      Transformer<Object, SQLTimeoutException> transformer0 = InvokerTransformer.invokerTransformer("1>`Bi");
      Transformer<Object, SQLTimeoutException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicateArray0[2], (Transformer<? super Object, ? extends SQLTimeoutException>) transformer0, (Transformer<? super Object, ? extends SQLTimeoutException>) transformer0);
      transformerArray0[0] = transformer1;
      Transformer<Object, SQLTimeoutException> transformer2 = InvokerTransformer.invokerTransformer("7<7)g_KR");
      transformerArray0[1] = transformer2;
      HashMap<Object, SQLTimeoutException> hashMap0 = new HashMap<Object, SQLTimeoutException>();
      Transformer<Object, SQLTimeoutException> transformer3 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTimeoutException>) hashMap0);
      transformerArray0[2] = transformer3;
      Transformer<Object, SQLTimeoutException> transformer4 = IfTransformer.ifTransformer((Predicate<? super Object>) predicateArray0[2], (Transformer<? super Object, ? extends SQLTimeoutException>) transformer1, (Transformer<? super Object, ? extends SQLTimeoutException>) transformer2);
      transformerArray0[3] = transformer4;
      IfTransformer<Object, SQLTimeoutException> ifTransformer0 = new IfTransformer<Object, SQLTimeoutException>(predicateArray0[4], transformer4, transformer2);
      transformerArray0[4] = (Transformer<Object, SQLTimeoutException>) ifTransformer0;
      Transformer<Object, SQLTransientException> transformer5 = SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends SQLTransientException>[]) transformerArray0, (Transformer<? super Object, ? extends SQLTransientException>) transformer1);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer5);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) transformerPredicate0, (Closure<? super Object>) transformerClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<HashMap<Transformer, SQLIntegrityConstraintViolationException>>) iterator0, (Closure<? super HashMap<Transformer, SQLIntegrityConstraintViolationException>>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-43);
      byteArray0[0] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nonePredicate0);
      predicateArray0[1] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) onePredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) anyPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[7];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 1);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 1);
      IteratorUtils.toListIterator((Iterator<?>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      properties0.put(object0, object0);
      IteratorUtils.getIterator(properties0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("C?w", (Throwable) null);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("iterator", (Class<?>[]) null, sQLRecoverableExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "C?w", "\"h~", "oJ<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("qJB*C-85 Z", "qJB*C-85 Z");
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientConnectionException>("qJB*C-85 Z", classArray0, objectArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'qJB*C-85 Z' on 'class java.sql.SQLNonTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 2);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 2);
      IteratorUtils.getIterator(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 128;
      intArray0[1] = 1;
      intArray0[2] = 61;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("O~Ya|j-b[IRutQ1]A", "Closure must not be null", intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      ExceptionTransformer.exceptionTransformer();
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) null);
      IteratorUtils.apply((Iterator<BatchUpdateException>) singletonListIterator0, (Closure<? super BatchUpdateException>) closure0);
      IteratorUtils.size(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<Iterator<DataTruncation>> iterator0 = EmptyIterator.emptyIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      Closure<Iterator<DataTruncation>> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Iterator<DataTruncation>>>) priorityQueue0);
      IteratorUtils.apply(iterator0, (Closure<? super Iterator<DataTruncation>>) closure0);
      int[] intArray0 = new int[6];
      intArray0[0] = 468;
      intArray0[1] = 1;
      intArray0[2] = 61;
      intArray0[3] = 128;
      intArray0[4] = 61;
      intArray0[5] = 2313;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Closure<SQLException> closure1 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) singletonListIterator0, (Closure<? super BatchUpdateException>) closure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.iterators.EntrySetMapIterator", "iQVM[KO", true);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) null);
      ArrayDeque<SQLClientInfoException>[] arrayDequeArray0 = (ArrayDeque<SQLClientInfoException>[]) Array.newInstance(ArrayDeque.class, 9);
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLClientInfoException> arrayDeque1 = arrayDeque0.clone();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLClientInfoException> arrayDeque2 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLClientInfoException> arrayDeque3 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLClientInfoException> arrayDeque4 = new ArrayDeque<SQLClientInfoException>(arrayDeque2);
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLClientInfoException> arrayDeque5 = arrayDeque0.clone();
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<SQLClientInfoException> arrayDeque6 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[6] = arrayDeque6;
      ArrayDeque<SQLClientInfoException> arrayDeque7 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[7] = arrayDeque7;
      ArrayDeque<SQLClientInfoException> arrayDeque8 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[8] = arrayDeque8;
      ObjectArrayIterator<ArrayDeque<SQLClientInfoException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<SQLClientInfoException>>(arrayDequeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<SQLClientInfoException>>) objectArrayIterator0, (Transformer<? super ArrayDeque<SQLClientInfoException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.emptyMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("HahSKZY<je|xS;%D7");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, transformerClosure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1031, ifClosure0);
      IteratorUtils.apply((Iterator<Iterator<DataTruncation>>) null, (Closure<? super Iterator<DataTruncation>>) forClosure0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 4);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Map.Entry.setValue is not supported", "Map.Entry.setValue is not supported", (-4049));
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) treeSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(treeSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("MMkicSFBV:q8CO");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator1, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, (String) null, (String) null, "MMkicSFBV:q8CO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = ForClosure.forClosure(78, (Closure<? super Object>) closure0);
      MapIterator<Iterator<DataTruncation>, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.apply((Iterator<Iterator<DataTruncation>>) mapIterator0, (Closure<? super Iterator<DataTruncation>>) closure1);
      Comparator<Object> comparator0 = null;
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MapIterator<Iterator<DataTruncation>, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Iterator<DataTruncation>>) mapIterator0, (Closure<? super Iterator<DataTruncation>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("WvrSU|");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      sQLTimeoutException0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) singletonListIterator0, (Class<SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EqualPredicate.equalPredicate((Object) resettableIterator0);
      Hashtable<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>> hashtable0 = new Hashtable<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>>();
      EntrySetMapIterator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>>(hashtable0);
      AbstractMapIteratorDecorator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>>(entrySetMapIterator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure.forClosure((-1299), (Closure<? super Object>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      String string0 = "Gl|1)WA*yu";
      int int0 = 0;
      SQLWarning sQLWarning0 = new SQLWarning("Gl|1)WA*yu", "Estimated size must be greater than 0");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Estimated size must be greater than 0", "Estimated size must be greater than 0", sQLWarning0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Gl|1)WA*yu", "", 0, sQLNonTransientException0);
      sQLNonTransientException0.getLocalizedMessage();
      sQLTransientConnectionException0.printStackTrace();
      IdentityPredicate<SQLTransientException> identityPredicate0 = new IdentityPredicate<SQLTransientException>(sQLTransientConnectionException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) identityPredicate0);
      OrderedMapIterator<SQLSyntaxErrorException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLSyntaxErrorException, String> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLSyntaxErrorException, ? extends String>) orderedMapIterator0);
      MapIterator<SQLSyntaxErrorException, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.asIterable((Iterator<?>) mapIterator1);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) singletonIterator0);
      String string1 = "org.apache.commons.collections4.bidimap.AbstractDualBidiMap";
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.bidimap.AbstractDualBidiMap");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.bidimap.AbstractDualBidiMap' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EqualPredicate.equalPredicate((Object) resettableIterator0);
      Hashtable<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>> hashtable0 = new Hashtable<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>>();
      EntrySetMapIterator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>, PriorityQueue<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      EqualPredicate.equalPredicate((Object) mapIterator0);
      Hashtable<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>> hashtable0 = new Hashtable<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>>();
      EntrySetMapIterator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>>(hashtable0);
      AbstractMapIteratorDecorator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Iterator<DataTruncation>, PriorityQueue<IIOMetadataNode>>(entrySetMapIterator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure((-1299), (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<Iterator<DataTruncation>>) abstractMapIteratorDecorator0, (Closure<? super Iterator<DataTruncation>>) closure1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.size(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 3096, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) uniquePredicate0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) orderedMapIterator0, class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonIterator0);
      Object object0 = new Object();
      IteratorUtils.size(listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*vrSU!");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NOPClosure.nopClosure();
      ForClosure.forClosure(19, (Closure<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) resettableIterator0);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 168);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) resettableIterator0);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) linkedHashSet0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) resettableIterator1, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) resettableIterator0);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ListIterator must not be null");
      SQLException sQLException0 = new SQLException(sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", "[]", sQLIntegrityConstraintViolationException0);
      linkedHashSet0.add(sQLNonTransientConnectionException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableListIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[13];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) list0);
      IteratorUtils.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableListIterator0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>((Predicate<? super SQLException>[]) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2686), (-2686));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableListIterator0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>((Predicate<? super SQLException>[]) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) anyPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) listIterator0, comparator0);
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) orderedMapIterator0, class0);
      String string0 = "@<M1SX<[~=g";
      Class<DataTruncation>[] classArray0 = null;
      Object[] objectArray0 = new Object[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("@<M1SX<[~=g", "@<M1SX<[~=g", 35);
      objectArray0[0] = (Object) sQLInvalidAuthorizationSpecException1;
      objectArray0[1] = (Object) "@<M1SX<[~=g";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) listIterator0;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 262);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 261
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Vector<ClientInfoStatus> vector0 = new Vector<ClientInfoStatus>();
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(vector0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(mockThrowable0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("e,TV2#,^qKwr", "e,TV2#,^qKwr", 2413);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 2413);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2412
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2395).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) listIterator0, comparator0);
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) orderedMapIterator0, class0);
      String string0 = "@<M1SX<[~=g";
      Class<DataTruncation>[] classArray0 = null;
      Object[] objectArray0 = new Object[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonIterator0);
      IteratorUtils.find((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate0);
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "@<M1SX<[~=g";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 2395);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2395
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator";
      stringArray0[1] = "1Eip#1v!+lo&>%/";
      stringArray0[2] = "";
      stringArray0[3] = "prefix may not be null";
      stringArray0[4] = "!40-9t/!U?s)";
      stringArray0[5] = "";
      stringArray0[6] = "rd[FCUCx!1YlkZG~";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayListIterator0);
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ClientInfoStatus>) stack0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableListIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
      IteratorUtils.isEmpty(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Hashtable<DataTruncation, SQLRecoverableException> hashtable0 = new Hashtable<DataTruncation, SQLRecoverableException>();
      EntrySetMapIterator<DataTruncation, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLRecoverableException>(hashtable0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) entrySetMapIterator0);
      IteratorUtils.size(entrySetMapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) resettableIterator0);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Pte<3k=?G", "", 1410);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientException0);
      uniquePredicate0.evaluate(sQLTimeoutException0);
      linkedHashSet0.add((SQLNonTransientConnectionException) null);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) linkedHashSet0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) resettableIterator1, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) treeSet0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) listIterator1, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      EqualPredicate.equalPredicate((Object) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(treeSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*vrSU!");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      sQLTimeoutException0.spliterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("*vrSU!", "*vrSU!", sQLTimeoutException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransientException0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) transformedPredicate0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableListIterator0);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) listIterator0, comparator0);
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) orderedMapIterator0, class0);
      String string0 = "@<M1SX<[~=g";
      Class<DataTruncation>[] classArray0 = null;
      Object[] objectArray0 = new Object[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonIterator0);
      Object object0 = IteratorUtils.find((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate0);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "@<M1SX<[~=g";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) listIterator0;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 262);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 262
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      IteratorUtils.singletonListIterator((SQLDataException) null);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) orderedIterator0, class0);
      String string0 = "@<M1SX<[~=g";
      Class<DataTruncation>[] classArray0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(orderedIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) hashSet0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      int int0 = 1552;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 1552);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1552
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 1296;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ServiceLoader<SQLDataException>[]) null, 1296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      IteratorUtils.singletonListIterator((SQLDataException) null);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>((Predicate<? super SQLException>[]) null);
      AnyPredicate<Object> anyPredicate1 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.matchesAny((Iterator<Boolean>) null, (Predicate<? super Boolean>) anyPredicate1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableListIterator0);
      IteratorUtils.singletonListIterator((SQLDataException) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLTimeoutException0.spliterator();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(95).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) iterator0, class0);
      IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTransientConnectionException> serviceLoader0 = ServiceLoader.load(class1, classLoader0);
      SingletonListIterator<ServiceLoader<SQLTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<ServiceLoader<SQLTransientConnectionException>>(serviceLoader0);
      Iterator<ServiceLoader<SQLTransientConnectionException>> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<ServiceLoader<SQLTransientConnectionException>>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super ServiceLoader<SQLTransientConnectionException>, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ConstantTransformer.constantTransformer("org.apache.commons.collections4.functors.SwitchClosure");
      OrderedMapIterator<IIOMetadataNode, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, SQLTimeoutException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLTimeoutException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) mapIterator0, (Transformer<? super IIOMetadataNode, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>, PriorityQueue<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0);
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<String> predicate0 = EqualPredicate.equalPredicate("Load factor must be greater than 0");
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>, PriorityQueue<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<String, Properties> mapIterator1 = IteratorUtils.emptyMapIterator();
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) mapIterator1, (Iterator<? extends String>) mapIterator1);
      IteratorUtils.skippingIterator(iterator0, 1792L);
      IteratorUtils.zippingIterator((Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) mapIterator1, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Hashtable<Locale.FilteringMode, Class<Integer>> hashtable0 = new Hashtable<Locale.FilteringMode, Class<Integer>>();
      EntrySetMapIterator<Locale.FilteringMode, Class<Integer>> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, Class<Integer>>(hashtable0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) entrySetMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NC&J76ex");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode1);
      IteratorUtils.nodeListIterator(node0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) resettableIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "[]", (Equator<Object>) defaultEquator0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>, PriorityQueue<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(39, true, true, 39, 543, sQLNonTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(39, false, true, 39, 1365);
      dataTruncationArray0[1] = dataTruncation1;
      MockThrowable mockThrowable0 = new MockThrowable("");
      DataTruncation dataTruncation2 = new DataTruncation(1, true, true, (-1294), 39, mockThrowable0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(14, true, true, 678, 1);
      dataTruncationArray0[3] = dataTruncation3;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 217, 39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 1);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 1);
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 279, 460);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>, PriorityQueue<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      IteratorUtils.matchesAny((Iterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>>) mapIterator0, (Predicate<? super Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>>) predicate2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) resettableIterator0);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLSyntaxErrorException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      int int0 = 18;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator1, 18, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) resettableListIterator0, (-204));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -204
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 6);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) vector0);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) iteratorArray0[0]);
      ListIteratorWrapper<InstanceofPredicate> listIteratorWrapper0 = new ListIteratorWrapper<InstanceofPredicate>(iterator0);
      EmptyIterator.emptyIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ClientInfoStatus>) loopingIterator0, 2413);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2413
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) linkedHashSet0);
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(stack0);
      int int0 = 2413;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ClientInfoStatus>) loopingIterator0, 2413);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2413
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) linkedHashSet0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<DataTruncation, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      int int0 = 2485;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 2485);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[10];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.ZippingIterator", "org.apache.commons.collections4.iterators.ZippingIterator", 1090);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("org.apache.commons.collections4.iterators.ZippingIterator", "ListIterator must not be null", 35, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ListIterator must not be null", "", (Map<String, ClientInfoStatus>) null);
      IteratorUtils.getIterator(resettableIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLException sQLException0 = new SQLException("NrJxs", (String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("ListIterator must not be null");
      sQLSyntaxErrorException0.addSuppressed(sQLNonTransientException0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableIterator0, (Object) sQLRecoverableException1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      InvokerTransformer.invokerTransformer(")=F");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")=F", ")=F", (-1908));
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "2si", (Map<String, ClientInfoStatus>) null);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLException sQLException0 = new SQLException("2si", "Xryp&XG+2#vA9");
      sQLSyntaxErrorException0.addSuppressed(sQLRecoverableException0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Integer integer0 = new Integer((-1908));
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableIterator0, (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) resettableListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>((Predicate<? super SQLException>[]) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      OrderedMapIterator<SQLTransientConnectionException, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, Boolean> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends Boolean>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) orderedMapIterator1, (Transformer<? super SQLTransientException, ? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 7);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) objectArrayListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "O`)o[W~uK?ybw>l";
      StringTokenizer stringTokenizer0 = new StringTokenizer("O`)o[W~uK?ybw>l", "9u6yY.#+ju/E@", false);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) null, (Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[10];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      String string0 = "[]7dCF";
      ConstantTransformer.constantTransformer("[]7dCF");
      String string1 = "transformer may not be null";
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, ? extends IIOMetadataNode>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("IE-", "Z#J-h");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Iterator must not be null", (String) null);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, "NHC=|V", 25);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException2;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Z#J-h", "", (Map<String, ClientInfoStatus>) null);
      IteratorUtils.getIterator("Z#J-h");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLException sQLException0 = new SQLException("IE-", "org.apache.commons.collections4.iterators.SkippingIterator");
      sQLSyntaxErrorException0.addSuppressed(sQLException0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableIterator0, (Object) locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) null);
      IteratorUtils.toString((Iterator<Boolean>) null, (Transformer<? super Boolean, String>) transformer0, "", "", "$/F}pg71e4_R%i");
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("$/F}pg71e4_R%i", "", 16, intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[5];
      intArray1[0] = 16;
      intArray1[1] = 16;
      intArray1[2] = 399;
      intArray1[3] = 964;
      intArray1[4] = 16;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray1);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, "", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", intArray1, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", intArray1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException((String) null, "", intArray0, batchUpdateException3);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      int[] intArray2 = new int[1];
      intArray2[0] = 16;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("", intArray2, batchUpdateException0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, (-1703));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>, PriorityQueue<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      IteratorUtils.matchesAny((Iterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>>) mapIterator0, (Predicate<? super Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>>) predicate2);
      IteratorUtils.contains((Iterator<SQLNonTransientException>) null, (Object) predicate0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[10];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.ZippingIterator");
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      InvokerTransformer.invokerTransformer("");
      TruePredicate.truePredicate();
      Vector<ClientInfoStatus> vector0 = new Vector<ClientInfoStatus>();
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) loopingIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*vrSU!");
      sQLTimeoutException0.printStackTrace();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      sQLTimeoutException0.spliterator();
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) hashSet0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>, PriorityQueue<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      IteratorUtils.singletonListIterator(locale_FilteringMode0);
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) iterator0, class0);
      IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      Iterator<Integer> iterator1 = null;
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 7);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class5;
      Class<SQLInvalidAuthorizationSpecException> class6 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class6;
      Class<SQLInvalidAuthorizationSpecException> class7 = SQLInvalidAuthorizationSpecException.class;
      classArray0[6] = class7;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("NodeList must not be null", (Class<?>[]) classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 6);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) vector0);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      ListIteratorWrapper<InstanceofPredicate> listIteratorWrapper0 = new ListIteratorWrapper<InstanceofPredicate>(iterator0);
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) listIteratorWrapper0;
      Iterator<InstanceofPredicate> iterator1 = EmptyIterator.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) instanceofPredicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Iterator<InstanceofPredicate> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) iterator1, (Predicate<? super InstanceofPredicate>) predicate1);
      iteratorArray0[3] = iterator2;
      ArrayIterator<InstanceofPredicate> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<InstanceofPredicate>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) linkedHashSet0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>(vector0);
      ExceptionPredicate.exceptionPredicate();
      ExceptionPredicate.exceptionPredicate();
      FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) objectArrayIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      ListIterator<SQLException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) anyPredicate0);
      Vector<ClientInfoStatus> vector0 = new Vector<ClientInfoStatus>();
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ClientInfoStatus>) vector0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableListIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
      IteratorUtils.getIterator(listIterator1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[10];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.ZippingIterator");
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Transformer<? super IIOMetadataNode, ? extends InstanceofPredicate>) transformer0);
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) iterator0, (Iterator<? extends Predicate<Object>>) iterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) objectArrayIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0);
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("IE-", "Z#J-h");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Iterator must not be null", (String) null);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("' does not exist", "NHC=|V", 25);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException2;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Z#J-h", "", (Map<String, ClientInfoStatus>) null);
      IteratorUtils.getIterator("Z#J-h");
      SQLDataException sQLDataException0 = new SQLDataException("Z#J-h", "org.apache.commons.collections4.iterators.SkippingIterator", sQLRecoverableException2);
      SQLDataException sQLDataException1 = new SQLDataException("", sQLTransactionRollbackException0);
      SQLDataException sQLDataException2 = new SQLDataException("suffix may not be null");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SQLDataException sQLDataException3 = new SQLDataException((String) null, "m8Ae5MNhK~L\"*>");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) linkedHashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) resettableIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      IteratorUtils.emptyIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.setNextException((SQLException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = (IIOMetadataNode)iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      iIOMetadataNode1.getChildNodes();
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableIterator0;
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>((InstanceofPredicate) null);
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) resettableIterator0;
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) resettableIterator0;
      iteratorArray0[4] = (Iterator<InstanceofPredicate>) resettableIterator0;
      iteratorArray0[5] = (Iterator<InstanceofPredicate>) resettableIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) linkedHashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) resettableIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      IteratorUtils.emptyIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.setNextException((SQLException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedList<SQLException>[] linkedListArray0 = (LinkedList<SQLException>[]) Array.newInstance(LinkedList.class, 7);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLException> linkedList2 = new LinkedList<SQLException>();
      linkedListArray0[2] = linkedList0;
      LinkedList<SQLException> linkedList3 = new LinkedList<SQLException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLException> linkedList4 = new LinkedList<SQLException>();
      linkedListArray0[4] = linkedList4;
      LinkedList<SQLException> linkedList5 = new LinkedList<SQLException>();
      linkedListArray0[5] = linkedList5;
      LinkedList<SQLException> linkedList6 = new LinkedList<SQLException>();
      linkedListArray0[6] = linkedList6;
      ObjectArrayIterator<LinkedList<SQLException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLException>>(linkedListArray0);
      ExceptionPredicate.exceptionPredicate();
      ExceptionPredicate.exceptionPredicate();
      FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      List<LinkedList<SQLException>> list0 = IteratorUtils.toList((Iterator<? extends LinkedList<SQLException>>) objectArrayIterator0);
      ResettableListIterator<LinkedList<SQLException>> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<LinkedList<SQLException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLException>>) allPredicate0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) null, 2065L, 2065L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<HashSet<Integer>>) null, (Transformer<? super HashSet<Integer>, String>) transformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Integer integer0 = new Integer((-68));
      Integer integer1 = new Integer(823);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer1);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      Integer integer2 = new Integer(823);
      IteratorUtils.objectGraphIterator(integer2, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 2286, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[10];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("**", "**", false);
      StringTokenizer stringTokenizer1 = new StringTokenizer("+p&:Tp@Cd&[}]!sgO");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) resettableListIterator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      StringTokenizer stringTokenizer0 = new StringTokenizer("O`)o[W~uK?ybw>l", "9u6yY.#+ju/E@", false);
      stringTokenizerArray0[1] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("");
      stringTokenizerArray0[1] = stringTokenizer1;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      stringTokenizer0.nextToken();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) resettableListIterator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 29;
      intArray0[2] = 1112;
      intArray0[3] = 29;
      intArray0[4] = 29;
      intArray0[5] = 29;
      intArray0[6] = 29;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 29, intArray0);
      IteratorUtils.singletonListIterator(batchUpdateException0);
      HashSet<SQLTransientConnectionException>[] hashSetArray0 = (HashSet<SQLTransientConnectionException>[]) Array.newInstance(HashSet.class, 1);
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      hashSetArray0[0] = (HashSet<SQLTransientConnectionException>) linkedHashSet0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<IIOMetadataNode, String> transformer0 = ConstantTransformer.constantTransformer("[]7dCF");
      IteratorUtils.toString((Iterator<IIOMetadataNode>) mapIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "transformer may not be null", "*vrSU!", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*vrSU!");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*vrSU!", "#8d>@.5H3");
      sQLIntegrityConstraintViolationException0.setNextException(sQLTimeoutException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = new StringTokenizer("D^deaC&z", "*vrSU!");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("D^deaC&z", "MMPHNb$3:OJV!91j");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("", "D^deaC&z");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("U)T3B^4IApo(NnkbL", "(sW4c;", true);
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("{)oETyZ<8zmY,FBTm");
      stringTokenizerArray0[4] = stringTokenizer4;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 1);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5LV!GYBJv_p.pa[UDp");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Transformer<IIOMetadataNode, String> transformer0 = ConstantTransformer.constantTransformer("5LV!GYBJv_p.pa[UDp");
      IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "", "Node must not be null", "Entry does not exist: ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("5LV!GYBJv_p.pa[UDp");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      sQLIntegrityConstraintViolationException0.setNextException(sQLTimeoutException0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLDataException sQLDataException0 = new SQLDataException("", "}l~Ihp");
      IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) hashSet0);
      SQLWarning sQLWarning0 = new SQLWarning("GqDc9HM_aL", "Collection must not be null");
      int int0 = 930;
      int int1 = (-2695);
      DataTruncation dataTruncation0 = new DataTruncation((-2695), true, true, (-2695), 930);
      dataTruncation0.getNextWarning();
      SQLWarning sQLWarning1 = new SQLWarning();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[4];
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[1] = sQLWarning0;
      sQLWarningArray0[2] = null;
      sQLWarningArray0[3] = (SQLWarning) dataTruncation0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 930);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayListIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      SQLWarning sQLWarning0 = new SQLWarning("Eq`6x_OKs", "Eq`6x_OKs");
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 100, 930);
      dataTruncation0.getNextWarning();
      SQLWarning sQLWarning1 = new SQLWarning();
      SQLWarning[] sQLWarningArray0 = null;
      int int0 = 1005;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null, 1005);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("O`)o[W~uK?ybw>l", "9u6yY.#+ju/E@", false);
      StringTokenizer stringTokenizer1 = new StringTokenizer("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("O`)o[W~uK?ybw>l");
      EmptyMapIterator.emptyMapIterator();
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(vector0);
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) hashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) resettableIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      IteratorUtils.emptyIterator();
      String string0 = "Z%<_JY]12gpl]cBeRV0";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Z%<_JY]12gpl]cBeRV0");
      sQLIntegrityConstraintViolationException0.setNextException((SQLException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) hashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) resettableIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      IteratorUtils.emptyIterator();
      String string0 = "Z%<_JY]12gpl]cBeRV0";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Z%<_JY]12gpl]cBeRV0");
      sQLIntegrityConstraintViolationException0.setNextException((SQLException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = (-433);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-433), (-433));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.singletonListIterator(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Array class must not be null");
      stack0.add(sQLFeatureNotSupportedException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z#J-h", "IE-");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableException0.fillInStackTrace();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Z#J-h", (String) null, 25);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Z#J-h", "IE-", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.addSuppressed(sQLRecoverableException1);
      IteratorUtils.getIterator(sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("in\"d:", "org.apache.commons.collections4.IteratorUtils", sQLRecoverableException1);
      SQLDataException sQLDataException1 = new SQLDataException("", sQLRecoverableException0);
      SQLDataException sQLDataException2 = new SQLDataException((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.IteratorUtils");
      SQLDataException sQLDataException3 = new SQLDataException("org.apache.commons.collections4.IteratorUtils", "Transformer must not be null");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException1.forEach(consumer0);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("JHE");
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) singletonIterator0, 25);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) list0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 488L);
      IteratorUtils.toString((Iterator<String>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLDataException sQLDataException0 = null;
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) anyPredicate0);
      String string0 = " <@k";
      String string1 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" <@k", (String) null);
      // Undeclared exception!
      try { 
        sQLSyntaxErrorException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Transformer<StringTokenizer, SQLIntegrityConstraintViolationException>, PriorityQueue<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.getIterator(predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate0;
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 7);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      classArray0[0] = class0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      classArray0[1] = class1;
      Class<SQLTransientException> class2 = SQLTransientException.class;
      classArray0[2] = class2;
      Class<SQLTransientException> class3 = SQLTransientException.class;
      classArray0[3] = class3;
      Class<SQLTransientException> class4 = SQLTransientException.class;
      classArray0[4] = class4;
      classArray0[5] = class1;
      Class<SQLTransientException> class5 = SQLTransientException.class;
      classArray0[6] = class5;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[2] = predicate2;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) null, (Predicate<? super SQLException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z#J-h", "IE-");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableException0.fillInStackTrace();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Z#J-h", (String) null, 25);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Z#J-h", "IE-", (Map<String, ClientInfoStatus>) null);
      IteratorUtils.getIterator(sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("in\"d:", "org.apache.commons.collections4.IteratorUtils", sQLRecoverableException1);
      SQLDataException sQLDataException1 = new SQLDataException("", sQLRecoverableException0);
      SQLDataException sQLDataException2 = new SQLDataException((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.IteratorUtils");
      SQLDataException sQLDataException3 = new SQLDataException("org.apache.commons.collections4.IteratorUtils", "Transformer must not be null");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException1.forEach(consumer0);
      SQLDataException sQLDataException4 = new SQLDataException();
      SQLDataException sQLDataException5 = new SQLDataException();
      SQLDataException sQLDataException6 = new SQLDataException("Transformer must not be null", sQLDataException0);
      SQLDataException sQLDataException7 = new SQLDataException("Transformer must not be null");
      Predicate<BatchUpdateException> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[10];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) list0);
      IteratorUtils.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList2 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList3 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList4 = new LinkedList<SQLException>(linkedList1);
      ExceptionPredicate.exceptionPredicate();
      ExceptionPredicate.exceptionPredicate();
      FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) null, (Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<Object>) orderedIterator0, (Predicate<? super Object>) predicate0);
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 5);
      int int0 = 1005;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0, 1005);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z#J-h", "IE-");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableException0.fillInStackTrace();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Z#J-h", (String) null, 25);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Z#J-h", "IE-", (Map<String, ClientInfoStatus>) null);
      IteratorUtils.getIterator(sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("in\"d:", "org.apache.commons.collections4.IteratorUtils", sQLRecoverableException1);
      SQLDataException sQLDataException1 = new SQLDataException("", sQLRecoverableException0);
      SQLDataException sQLDataException2 = new SQLDataException((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.IteratorUtils");
      SQLDataException sQLDataException3 = new SQLDataException("org.apache.commons.collections4.IteratorUtils", "Transformer must not be null");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException1.forEach(consumer0);
      SQLDataException sQLDataException4 = new SQLDataException();
      SQLDataException sQLDataException5 = new SQLDataException();
      SQLDataException sQLDataException6 = new SQLDataException("Transformer must not be null", sQLDataException0);
      SQLDataException sQLDataException7 = new SQLDataException("Transformer must not be null");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z#J-h", "IE-");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "IE-");
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("Z#J-h", (String) null, 25);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Z#J-h", "IE-", (Map<String, ClientInfoStatus>) null);
      IteratorUtils.getIterator(sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("in\"d:", "org.apache.commons.collections4.IteratorUtils", sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("", sQLRecoverableException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("6ItoXFBXl6");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName((String) null);
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      MapIterator<SQLNonTransientConnectionException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      ListIterator<Vector<Integer>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Vector<Integer>>) listIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, 10);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList2 = new LinkedList<SQLException>();
      LinkedList<SQLException> linkedList3 = new LinkedList<SQLException>();
      LinkedList<SQLException>[] linkedListArray0 = (LinkedList<SQLException>[]) Array.newInstance(LinkedList.class, 7);
      LinkedList<SQLException> linkedList4 = new LinkedList<SQLException>();
      linkedListArray0[0] = linkedList4;
      linkedListArray0[1] = linkedList0;
      LinkedList<SQLException> linkedList5 = new LinkedList<SQLException>();
      linkedListArray0[2] = linkedList5;
      linkedListArray0[3] = linkedList2;
      linkedListArray0[4] = linkedList1;
      linkedListArray0[5] = linkedList0;
      linkedListArray0[6] = linkedList3;
      ObjectArrayIterator<LinkedList<SQLException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLException>>(linkedListArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.matchesAll((Iterator<LinkedList<SQLException>>) null, (Predicate<? super LinkedList<SQLException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(34, true, false, 0, (-466));
      HashMap<Object, DataTruncation> hashMap0 = new HashMap<Object, DataTruncation>();
      StringWriter stringWriter0 = new StringWriter(485);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"-9P+-", "Ds'Rr4/ypY/tw10}8g", dataTruncation0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("\"-9P+-");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("\"-9P+-", "Ds'Rr4/ypY/tw10}8g", (-466), sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>(0, 1.0F);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"-9P+-", "#8d>@.5H3");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.setNextException(sQLTimeoutException0);
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) hashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) resettableIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) hashSet0, 14, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("9u6yY.#+ju/E@", "9u6yY.#+ju/E@", false);
      StringTokenizer stringTokenizer1 = new StringTokenizer("");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[17];
      stringTokenizerArray0[0] = stringTokenizer1;
      IteratorUtils.arrayListIterator(stringTokenizerArray0);
      Iterator<StringTokenizer> iterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, false);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<SQLException>[] linkedListArray0 = (LinkedList<SQLException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLException> linkedList2 = new LinkedList<SQLException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLException> linkedList3 = new LinkedList<SQLException>();
      linkedListArray0[3] = linkedList3;
      ObjectArrayIterator<LinkedList<SQLException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLException>>(linkedListArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      ExceptionPredicate.exceptionPredicate();
      ExceptionPredicate.exceptionPredicate();
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<LinkedList<SQLException>>) objectArrayIterator0, (Predicate<? super LinkedList<SQLException>>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "O`)o[W~uK?ybw>l";
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((TreeSet<SQLWarning>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<SQLException>[] linkedListArray0 = (LinkedList<SQLException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLException> linkedList2 = new LinkedList<SQLException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLException> linkedList3 = new LinkedList<SQLException>();
      linkedListArray0[3] = linkedList3;
      ObjectArrayIterator<LinkedList<SQLException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLException>>(linkedListArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<LinkedList<SQLException>>) objectArrayIterator0, (Predicate<? super LinkedList<SQLException>>) allPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) list0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0;
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((TreeSet<SQLWarning>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertNotNull(objectArrayListIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayListIterator0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertNotNull(enumeration0);
      
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertNotNull(iterator0);
      
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ClientInfoStatus>) stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableListIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
      assertTrue(boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      IteratorUtils.isEmpty(objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("OuTGZ", "", false);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("(_DhB");
      assertNotNull(transformer0);
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(iterator0);
      
      iteratorArray0[0] = iterator0;
      Iterator<StringTokenizer> iterator1 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertEquals(1, iteratorArray0.length);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertNotNull(loopingListIterator0);
      
      Predicate<Object>[] predicateArray0 = null;
      Transformer<Object, DataTruncation>[] transformerArray0 = (Transformer<Object, DataTruncation>[]) Array.newInstance(Transformer.class, 8);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(allPredicate0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      MockThrowable mockThrowable0 = new MockThrowable("", sQLTransactionRollbackException0);
      assertNotNull(mockThrowable0);
      
      DataTruncation dataTruncation0 = new DataTruncation(2481, false, true, 0, 0, mockThrowable0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>(dataTruncation0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(constantTransformer0);
      
      IfTransformer<Object, DataTruncation> ifTransformer0 = new IfTransformer<Object, DataTruncation>(allPredicate0, constantTransformer0, constantTransformer0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(ifTransformer0);
      
      transformerArray0[0] = (Transformer<Object, DataTruncation>) ifTransformer0;
      Transformer<Object, DataTruncation> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) allPredicate0, (Transformer<? super Object, ? extends DataTruncation>) transformerArray0[0], (Transformer<? super Object, ? extends DataTruncation>) ifTransformer0);
      assertEquals(8, transformerArray0.length);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(transformer1);
      
      transformerArray0[1] = transformer1;
      Transformer<Object, DataTruncation> transformer2 = ExceptionTransformer.exceptionTransformer();
      assertFalse(transformer2.equals((Object)transformer1));
      assertNotNull(transformer2);
      
      transformerArray0[2] = transformer2;
      Transformer<Object, DataTruncation> transformer3 = IfTransformer.ifTransformer((Predicate<? super Object>) allPredicate0, (Transformer<? super Object, ? extends DataTruncation>) transformerArray0[0], (Transformer<? super Object, ? extends DataTruncation>) transformer1);
      assertEquals(8, transformerArray0.length);
      assertFalse(transformer1.equals((Object)transformer2));
      assertFalse(transformer3.equals((Object)transformer1));
      assertFalse(transformer3.equals((Object)transformer2));
      assertNotSame(transformer1, transformer3);
      assertNotSame(transformer3, transformer1);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(transformer3);
      
      transformerArray0[3] = transformer3;
      IfTransformer<Object, DataTruncation> ifTransformer1 = new IfTransformer<Object, DataTruncation>(allPredicate0, ifTransformer0, transformer2);
      assertFalse(transformer2.equals((Object)transformer3));
      assertFalse(transformer2.equals((Object)transformer1));
      assertFalse(ifTransformer1.equals((Object)ifTransformer0));
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(ifTransformer1);
      
      transformerArray0[4] = (Transformer<Object, DataTruncation>) ifTransformer1;
      Transformer<Object, DataTruncation> transformer4 = ConstantTransformer.constantTransformer(dataTruncation0);
      assertFalse(transformer4.equals((Object)transformer1));
      assertFalse(transformer4.equals((Object)transformer3));
      assertFalse(transformer4.equals((Object)transformer2));
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(transformer4);
      
      transformerArray0[5] = transformer4;
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 3);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer(".)SotRNJe.o", (Class<?>[]) classArray0, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Transformer<IIOMetadataNode, String> transformer0 = ConstantTransformer.constantTransformer("[]7dCF");
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) mapIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "transformer may not be null", "*vrSU!", "");
      assertEquals("*vrSU!", string0);
      assertNotNull(string0);
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) mapIterator0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*vrSU!");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: *vrSU!", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("*vrSU!", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      int int0 = 93;
      ArrayListIterator<PriorityQueue<ClientInfoStatus>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<PriorityQueue<ClientInfoStatus>>(sQLIntegrityConstraintViolationException0, (-1974), 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 1;
      Object[] objectArray0 = new Object[7];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 1);
      assertEquals(7, objectArray0.length);
      assertEquals(1, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(objectArrayListIterator0);
      
      Object object0 = IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 1);
      assertEquals(7, objectArray0.length);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertNull(object0);
      
      Stack<SQLException> stack0 = new Stack<SQLException>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) reverseListIterator0);
      assertEquals("[]", string0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(string0);
      
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      assertNotNull(transformer0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<HashSet>>) reverseListIterator0, (Transformer<? super PriorityQueue<HashSet>, String>) transformer0, "[]", (String) null, "?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MapIterator<DataTruncation, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(resettableIterator0);
      
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) resettableIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(iterator0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "O/qu\"YhtWx<n:0$Q`9<");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("O/qu\"YhtWx<n:0$Q`9<", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("O/qu\"YhtWx<n:0$Q`9<", "O/qu\"YhtWx<n:0$Q`9<", 619);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("O/qu\"YhtWx<n:0$Q`9<", sQLTimeoutException1.getSQLState());
      assertEquals("O/qu\"YhtWx<n:0$Q`9<", sQLTimeoutException1.getMessage());
      assertEquals(619, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: O/qu\"YhtWx<n:0$Q`9<", sQLTimeoutException1.toString());
      assertNotNull(sQLTimeoutException1);
      
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("");
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException2.toString());
      assertNotNull(sQLTimeoutException2);
      
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException2;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException2;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException2;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException2;
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      assertEquals(9, sQLTimeoutExceptionArray0.length);
      assertNotNull(resettableIterator1);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      SQLTransientException[] sQLTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableIterator1, class0);
      assertEquals(9, sQLTransientExceptionArray0.length);
      assertEquals(9, sQLTimeoutExceptionArray0.length);
      assertNotNull(sQLTransientExceptionArray0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) resettableIterator1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Stack<Properties>[] stackArray0 = (Stack<Properties>[]) Array.newInstance(Stack.class, 7);
      Stack<Properties> stack0 = new Stack<Properties>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      stackArray0[0] = stack0;
      Stack<Properties> stack1 = new Stack<Properties>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      stackArray0[1] = stack1;
      Stack<Properties> stack2 = new Stack<Properties>();
      assertTrue(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(stack2.empty());
      assertTrue(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertNotNull(stack2);
      
      stackArray0[2] = stack2;
      Stack<Properties> stack3 = new Stack<Properties>();
      assertTrue(stack3.equals((Object)stack2));
      assertTrue(stack3.equals((Object)stack1));
      assertTrue(stack3.equals((Object)stack0));
      assertTrue(stack3.isEmpty());
      assertEquals("[]", stack3.toString());
      assertTrue(stack3.empty());
      assertEquals(0, stack3.size());
      assertEquals(10, stack3.capacity());
      assertNotNull(stack3);
      
      stackArray0[3] = stack3;
      Stack<Properties> stack4 = new Stack<Properties>();
      assertTrue(stack4.equals((Object)stack1));
      assertTrue(stack4.equals((Object)stack2));
      assertTrue(stack4.equals((Object)stack3));
      assertTrue(stack4.equals((Object)stack0));
      assertEquals(10, stack4.capacity());
      assertTrue(stack4.isEmpty());
      assertEquals("[]", stack4.toString());
      assertTrue(stack4.empty());
      assertEquals(0, stack4.size());
      assertNotNull(stack4);
      
      stackArray0[4] = stack4;
      Stack<Properties> stack5 = new Stack<Properties>();
      assertTrue(stack5.equals((Object)stack0));
      assertTrue(stack5.equals((Object)stack2));
      assertTrue(stack5.equals((Object)stack1));
      assertTrue(stack5.equals((Object)stack4));
      assertTrue(stack5.equals((Object)stack3));
      assertTrue(stack5.empty());
      assertTrue(stack5.isEmpty());
      assertEquals(0, stack5.size());
      assertEquals(10, stack5.capacity());
      assertEquals("[]", stack5.toString());
      assertNotNull(stack5);
      
      stackArray0[5] = stack5;
      Stack<Properties> stack6 = new Stack<Properties>();
      assertTrue(stack6.equals((Object)stack3));
      assertTrue(stack6.equals((Object)stack1));
      assertTrue(stack6.equals((Object)stack4));
      assertTrue(stack6.equals((Object)stack5));
      assertTrue(stack6.equals((Object)stack2));
      assertTrue(stack6.equals((Object)stack0));
      assertTrue(stack6.empty());
      assertEquals(0, stack6.size());
      assertEquals(10, stack6.capacity());
      assertTrue(stack6.isEmpty());
      assertEquals("[]", stack6.toString());
      assertNotNull(stack6);
      
      stackArray0[6] = stack6;
      ResettableIterator<Stack<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(stackArray0);
      assertEquals(7, stackArray0.length);
      assertNotNull(resettableIterator0);
      
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<Stack<Properties>>) resettableIterator0, (Transformer<? super Stack<Properties>, String>) transformer0);
      assertEquals("[[], [], [], [], [], [], []]", string0);
      assertEquals(7, stackArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLSyntaxErrorException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLSyntaxErrorException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      hashMap0.clear();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (Throwable) null);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = hashMap0.put((SQLNonTransientConnectionException) null, sQLSyntaxErrorException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException1);
      
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(entrySetMapIterator0);
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(iterable0);
      
      ListIterator<Vector<Integer>> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Vector<Integer>>) listIterator0);
      assertEquals("[]", string0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string0);
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, 4);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Iterable<IIOMetadataNode> iterable1 = IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(iterable1);
      
      LinkedList<SQLException>[] linkedListArray0 = (LinkedList<SQLException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLException> linkedList2 = new LinkedList<SQLException>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLException> linkedList3 = new LinkedList<SQLException>();
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertEquals(0, linkedList3.size());
      assertNotNull(linkedList3);
      
      linkedListArray0[3] = linkedList3;
      ObjectArrayIterator<LinkedList<SQLException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLException>>(linkedListArray0);
      assertEquals(4, linkedListArray0.length);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertNotNull(objectArrayIterator0);
      
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      assertSame(predicate1, predicate0);
      assertNotNull(predicate1);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      predicateArray0[1] = predicate2;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate1;
      predicateArray0[5] = predicate1;
      predicateArray0[6] = predicate1;
      predicateArray0[7] = predicate0;
      predicateArray0[8] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      assertEquals(9, predicateArray0.length);
      assertNotNull(allPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<LinkedList<SQLException>>) objectArrayIterator0, (Predicate<? super LinkedList<SQLException>>) predicate2);
      assertFalse(boolean0);
      assertEquals(4, linkedListArray0.length);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(4, objectArrayIterator0.getEndIndex());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLSyntaxErrorException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLSyntaxErrorException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      hashMap0.clear();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (Throwable) null);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = hashMap0.put((SQLNonTransientConnectionException) null, sQLSyntaxErrorException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException1);
      
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(entrySetMapIterator0);
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(iterable0);
      
      ListIterator<Vector<Integer>> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Vector<Integer>>) listIterator0);
      assertEquals("[]", string0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string0);
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      int int0 = 4;
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, 4);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Iterable<IIOMetadataNode> iterable1 = IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(iterable1);
      
      ArrayIterator<String> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<String>("[]", 4, 2495);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertNotNull(objectArrayListIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayListIterator0);
      assertEquals(0, stringArray0.length);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertNotNull(enumeration0);
      
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      assertEquals(0, stringArray0.length);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertNotNull(iterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, (-961), (-961));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("e", "e", sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: e", sQLTimeoutException0.toString());
      assertEquals("e", sQLTimeoutException0.getMessage());
      assertEquals("e", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      assertEquals("e", string0);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: e", sQLTimeoutException0.toString());
      assertEquals("e", sQLTimeoutException0.getMessage());
      assertEquals("e", sQLTimeoutException0.getSQLState());
      assertNotNull(string0);
      
      Spliterator<Throwable> spliterator0 = sQLTimeoutException0.spliterator();
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: e", sQLTimeoutException0.toString());
      assertEquals("e", sQLTimeoutException0.getMessage());
      assertEquals("e", sQLTimeoutException0.getSQLState());
      assertNotNull(spliterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      String string1 = sQLDataException0.getLocalizedMessage();
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-761), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MapIterator<Locale.FilteringMode, Vector<Boolean>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Array class must not be null", "!v*yR*!$^Mf");
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Array class must not be null", sQLRecoverableException0.getMessage());
      assertEquals("!v*yR*!$^Mf", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Array class must not be null", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Array class must not be null", "Array class must not be null", sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Array class must not be null", sQLRecoverableException0.getMessage());
      assertEquals("!v*yR*!$^Mf", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Array class must not be null", sQLRecoverableException0.toString());
      assertEquals("Array class must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Array class must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Array class must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Estimated size must be greater than 0", sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Array class must not be null", sQLRecoverableException0.getMessage());
      assertEquals("!v*yR*!$^Mf", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Array class must not be null", sQLRecoverableException0.toString());
      assertEquals("Array class must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Array class must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Array class must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Estimated size must be greater than 0", sQLInvalidAuthorizationSpecException1.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Array class must not be null", "Estimated size must be greater than 0", 0, sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Array class must not be null", sQLRecoverableException0.getMessage());
      assertEquals("!v*yR*!$^Mf", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Array class must not be null", sQLRecoverableException0.toString());
      assertEquals("Array class must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Array class must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Array class must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Estimated size must be greater than 0", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("Estimated size must be greater than 0", sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("Array class must not be null", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Array class must not be null", sQLInvalidAuthorizationSpecException2.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) abstractOrderedMapIteratorDecorator0;
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends StringTokenizer>) mapIterator1);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertFalse(mapIterator2.equals((Object)mapIterator0));
      assertSame(mapIterator1, mapIterator2);
      assertSame(mapIterator2, mapIterator1);
      assertNotNull(mapIterator2);
      
      boolean boolean0 = abstractOrderedMapIteratorDecorator0.hasNext();
      assertFalse(boolean0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) mapIterator2;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.put("Iterator must not be null", clientInfoStatus0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("1", "S=OIF>", hashtable0, sQLClientInfoException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("S=OIF>", sQLClientInfoException1.getSQLState());
      assertEquals("1", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: 1", sQLClientInfoException1.toString());
      assertNotNull(sQLClientInfoException1);
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("1", "S=OIF>", hashtable0);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertEquals("1", sQLClientInfoException2.getMessage());
      assertEquals("S=OIF>", sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: 1", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNotNull(sQLClientInfoException2);
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      int int0 = 21;
      Throwable[] throwableArray0 = sQLClientInfoException2.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotSame(sQLClientInfoException2, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException0);
      assertEquals("1", sQLClientInfoException2.getMessage());
      assertEquals("S=OIF>", sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: 1", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNotNull(throwableArray0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 21, (-1209));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLNonTransientConnectionException, SQLTransientException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLTransientException>) mapIterator0);
      assertNotNull(mapIterator1);
      
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientException>(mapIterator1);
      assertNotNull(abstractMapIteratorDecorator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      MapIterator<SQLNonTransientConnectionException, SQLTransientException> mapIterator2 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLTransientException>) abstractMapIteratorDecorator0);
      assertFalse(mapIterator2.equals((Object)mapIterator1));
      assertNotSame(mapIterator1, mapIterator2);
      assertNotSame(mapIterator2, mapIterator1);
      assertNotNull(mapIterator2);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      int int0 = 44;
      ArrayIterator<DataTruncation> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<DataTruncation>(zippingIterator0, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      Object object0 = properties0.put(sQLWarning0, sQLWarning0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(resettableIterator0);
      
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator0);
      
      Iterator<Predicate<Object>> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) iterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator1);
      
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      StringTokenizer stringTokenizer0 = new StringTokenizer("O`)o[W~uK?ybw>l", "9u6yY.#+ju/E@", true);
      assertEquals(5, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "@dNMogQ@ID9b2SHAk:W", true);
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      assertEquals(0, stringTokenizer1.countTokens());
      assertNotNull(stringTokenizer1);
      
      stringTokenizerArray0[1] = stringTokenizer1;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      assertEquals(2, stringTokenizerArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) resettableListIterator0);
      assertEquals(2, stringTokenizerArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray1 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
      assertEquals(2, stringTokenizerArray0.length);
      assertEquals(2, stringTokenizerArray1.length);
      assertFalse(stringTokenizerArray1.equals((Object)stringTokenizerArray0));
      assertNotSame(stringTokenizerArray0, stringTokenizerArray1);
      assertNotSame(stringTokenizerArray1, stringTokenizerArray0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(stringTokenizerArray1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 438);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(438, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(438, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.SQLNonTransientConnectionException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("End index must not be less than start index", "transformer may not be null", "End index must not be less than start index", 438);
      assertEquals("End index must not be less than start index.transformer may not be null(End index must not be less than start index:438)", stackTraceElement0.toString());
      assertEquals("End index must not be less than start index", stackTraceElement0.getFileName());
      assertEquals(438, stackTraceElement0.getLineNumber());
      assertEquals("End index must not be less than start index", stackTraceElement0.getClassName());
      assertEquals("transformer may not be null", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "End index must not be less than start index", 438);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("", stackTraceElement1.getClassName());
      assertEquals("", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(".(End index must not be less than start index:438)", stackTraceElement1.toString());
      assertEquals(438, stackTraceElement1.getLineNumber());
      assertEquals("End index must not be less than start index", stackTraceElement1.getFileName());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("transformer may not be null", "", ",2cMzeBU<mK/vZ7TN", 9);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertEquals(",2cMzeBU<mK/vZ7TN", stackTraceElement2.getFileName());
      assertEquals("", stackTraceElement2.getMethodName());
      assertEquals(9, stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("transformer may not be null", stackTraceElement2.getClassName());
      assertEquals("transformer may not be null.(,2cMzeBU<mK/vZ7TN:9)", stackTraceElement2.toString());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("[xs%?>", "c-z@H3[.DG}^13", ".0XP1=XZ", 438);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertEquals(438, stackTraceElement3.getLineNumber());
      assertEquals("[xs%?>.c-z@H3[.DG}^13(.0XP1=XZ:438)", stackTraceElement3.toString());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("[xs%?>", stackTraceElement3.getClassName());
      assertEquals("c-z@H3[.DG}^13", stackTraceElement3.getMethodName());
      assertEquals(".0XP1=XZ", stackTraceElement3.getFileName());
      assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("transformer may not be null", ")Y^Y*", "", 438);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertEquals(")Y^Y*", stackTraceElement4.getMethodName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("transformer may not be null.)Y^Y*(:438)", stackTraceElement4.toString());
      assertEquals("", stackTraceElement4.getFileName());
      assertEquals(438, stackTraceElement4.getLineNumber());
      assertEquals("transformer may not be null", stackTraceElement4.getClassName());
      assertNotNull(stackTraceElement4);
      
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      assertEquals(5, stackTraceElementArray0.length);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(438, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      
      SQLDataException sQLDataException1 = new SQLDataException("End index must not be less than start index", "remove() method is not supported for an ObjectArrayIterator");
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertEquals("java.sql.SQLDataException: End index must not be less than start index", sQLDataException1.toString());
      assertEquals("End index must not be less than start index", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("remove() method is not supported for an ObjectArrayIterator", sQLDataException1.getSQLState());
      assertNotNull(sQLDataException1);
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("remove() method is not supported for an ObjectArrayIterator", "End index must not be less than start index", 438);
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertEquals("remove() method is not supported for an ObjectArrayIterator", sQLDataException2.getMessage());
      assertEquals("java.sql.SQLDataException: remove() method is not supported for an ObjectArrayIterator", sQLDataException2.toString());
      assertEquals(438, sQLDataException2.getErrorCode());
      assertEquals("End index must not be less than start index", sQLDataException2.getSQLState());
      assertNotNull(sQLDataException2);
      
      sQLDataExceptionArray0[2] = sQLDataException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 438, 438);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(objectArrayListIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayListIterator0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(enumeration0);
      
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ClientInfoStatus>) stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableListIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
      assertTrue(boolean0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(resettableIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) singletonIterator0, (-3964L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(34, true, false, 0, (-466));
      HashMap<Object, DataTruncation> hashMap0 = new HashMap<Object, DataTruncation>();
      StringWriter stringWriter0 = new StringWriter(485);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"-9P+-", "Ds'Rr4/ypY/tw10}8g", dataTruncation0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("\"-9P+-");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("\"-9P+-", "Ds'Rr4/ypY/tw10}8g", (-466), sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("\"-9P+-", "\"-9P+-", 0);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("EQUAL", "1U\".OD'", 34, (Throwable) null);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", "\"-9P+-", 0, (Throwable) null);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException("; u#", sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      ConstantTransformer<SQLNonTransientException, String> constantTransformer0 = new ConstantTransformer<SQLNonTransientException, String>("prefix may not be null");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "[prefix may not be null, prefix may not be null, prefix may not be null, prefix may not be null, prefix may not be null, prefix may not be null, prefix may not be null, prefix may not be null, prefix may not be null]", 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      dataTruncation0.printStackTrace((PrintWriter) mockPrintWriter0);
      Transformer<Object, DataTruncation> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashMap0);
      IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("n-j'<@xYxbA{v%lYM", "n-j'<@xYxbA{v%lYM");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("org.apache.commons.collections4.map.AbstractHashedMap", (String) null, 0, sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.getIterator((Object) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "VgSv?", sQLRecoverableException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("VgSv?", sQLRecoverableException2);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("R#>");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", "");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException(";R\"phv7m", sQLDataException4);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("DgW-fiKsg");
      sQLDataExceptionArray0[7] = sQLDataException7;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0, 0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", ")", 100, sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 100, 100, sQLNonTransientException0);
      dataTruncationArray0[0] = dataTruncation0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1161);
      longArray0[1] = (long) 61;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 1737;
      longArray0[4] = (long) 100;
      longArray0[5] = (long) 1737;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(")", "+(?|p :$tT?l! !Pm", 61, longArray0, dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation((-1161), true, true, 1737, 61, batchUpdateException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-218), false, true, (-1), 100);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(3306, false, false, 0, 93);
      dataTruncationArray0[3] = dataTruncation3;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      iteratorArray0[1] = (Iterator<DataTruncation>) listIterator0;
      Iterator<SQLWarning> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      Iterator<SQLWarning> iterator2 = IteratorUtils.unmodifiableIterator(iterator1);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-749));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("%-A+t", sQLSyntaxErrorException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("ListIterator must not be null", "", "", (-1830));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "Q2!", "", (-1830));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("(i2^)b5x,Q9", "t,Zly9k", "ListIterator must not be null", (-1824));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "h^U:$", "Q2!", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      ListIteratorWrapper<SQLTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientException>(resettableIterator0);
      listIteratorWrapper0.reset();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransientException>) listIteratorWrapper0, (long) (-749));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-4347);
      Integer integer0 = new Integer((-4347));
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 0, (int) integerArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2Qp;[1");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("mYmG:\")7=1',SJ", "mYmG:\")7=1',SJ", 807, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("mYmG:\")7=1',SJ");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("!FN{rf", "org.apache.commons.collections4.functors.ExceptionFactory");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("!FN{rf", ">uk\"");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("mYmG:\")7=1',SJ", "org.apache.commons.collections4.functors.ExceptionFactory");
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("Entry does not exist: ", "2).+CN[2Ls2d");
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      EmptyListIterator.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Properties> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Properties, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Properties>) predicate0, (Closure<? super Properties>) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }
}
