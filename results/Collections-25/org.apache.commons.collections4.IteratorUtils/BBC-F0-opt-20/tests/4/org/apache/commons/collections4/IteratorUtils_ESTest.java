/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 19:20:01 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      IteratorUtils.toList((Iterator<? extends Properties>) singletonListIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<ArrayList>>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 1067);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 4);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Transformer<SQLException, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<LinkedList>>) iterator0, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MapIterator<SQLNonTransientConnectionException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      UniquePredicate.uniquePredicate();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      IteratorUtils.loopingListIterator((List<String>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Integer integer0 = new Integer(0);
      IteratorUtils.getIterator(integer0);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) iterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1378, 62);
      dataTruncationArray0[0] = dataTruncation0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "o-8@C s5", dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation(62, true, false, 27, 27, sQLNonTransientConnectionException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(62, false, true, 62, 2569);
      dataTruncationArray0[2] = dataTruncation2;
      int int0 = 108;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 108, 108, dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(1378, false, true, 62, 108);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-287), false, true, (-374), (-1482));
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(1, true, true, 1377, (-703), dataTruncation3);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(1940, true, true, 2371, (-374));
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(0, false, false, 0, 1378, dataTruncation6);
      dataTruncationArray0[8] = dataTruncation8;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLDataException sQLDataException0 = new SQLDataException("x[e,dKTr;'lSC>", sQLRecoverableException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) singletonIterator0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(list0);
      Hashtable<Object, BatchUpdateException> hashtable0 = new Hashtable<Object, BatchUpdateException>(108, 108);
      Transformer<Object, BatchUpdateException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends BatchUpdateException>) hashtable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("3,{BHv]=2PkKT```~p", (String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLTransientConnectionException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<SQLException> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLException>) predicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate1);
      IteratorUtils.find((Iterator<SQLDataException>) loopingIterator0, (Predicate<? super SQLDataException>) transformedPredicate0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Integer integer0 = new Integer(4847);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) transformer0, "List must not be null", "]", "");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.colVecMions4.bidimap.TreeBidiMap$Node", "The collections must not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The collections must not be null", "Entry does not exist: ", sQLDataException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("org.apache.commons.colVecMions4.bidimap.TreeBidiMap$Node", "Entry does not exist: ", (-2613));
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("org.apache.commons.colVecMions4.bidimap.TreeBidiMap$Node", "llT{5j>G_xo=tN8?35]", 1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("xUB3j,I(~)", "Entry does not exist: ", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException(sQLRecoverableException2);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("spN!$Lq|", sQLRecoverableException5);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException(sQLRecoverableException4);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException(sQLRecoverableException4);
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 1, (-2613));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      StringValueTransformer.stringValueTransformer();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException(batchUpdateException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLDataException0, comparator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("_|+", defaultEquator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.bidimap.TreeBidiMap$Node");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate0, constantTransformer0, constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) ifTransformer0, (String) null, "_|+", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Q4+8]!i", "<@8P;FM8[?NTl5[{M", 44, sQLTransientException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLTransientConnectionException, String> factoryTransformer0 = new FactoryTransformer<SQLTransientConnectionException, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIterator0, (Transformer<? super SQLTransientConnectionException, String>) factoryTransformer0, "Q4+8]!i", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) transformer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Iterator<TreeSet<SQLClientInfoException>>> predicate1 = AndPredicate.andPredicate((Predicate<? super Iterator<TreeSet<SQLClientInfoException>>>) predicate0, (Predicate<? super Iterator<TreeSet<SQLClientInfoException>>>) predicate0);
      IteratorUtils.matchesAll((Iterator<Iterator<TreeSet<SQLClientInfoException>>>) null, (Predicate<? super Iterator<TreeSet<SQLClientInfoException>>>) predicate1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5iS");
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newChild == null!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(class0, defaultEquator0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 3);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(instanceofPredicate0);
      predicateArray0[0] = (Predicate<SQLException>) nullIsFalsePredicate0;
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      predicateArray0[1] = (Predicate<SQLException>) uniquePredicate0;
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>((Transformer<? super SQLException, Boolean>) null);
      predicateArray0[2] = (Predicate<SQLException>) transformerPredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) onePredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      NOPClosure.nopClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) null, (Closure<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) listIterator0, (Transformer<? super Integer, String>) transformer0, "FZuQ3^=e", (String) null, "O~5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException0);
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      sQLExceptionArray0[0] = (SQLException) batchUpdateException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", "J8-d b:r");
      sQLExceptionArray0[1] = (SQLException) sQLSyntaxErrorException0;
      sQLExceptionArray0[2] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[3] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[4] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[5] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[6] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[7] = (SQLException) batchUpdateException0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 5);
      IteratorUtils.get((Iterator<LinkedHashSet<LinkedList>>) objectArrayListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Vector<Iterator>>) listIterator0, (Transformer<? super Vector<Iterator>, String>) transformer0);
      int int0 = 31;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-851), 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyListIterator.emptyListIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">wJdypvJ(D", "Node must not be null", (-801), (int[]) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) singletonListIterator0, (Closure<? super BatchUpdateException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<Object, DataTruncation> hashMap0 = new HashMap<Object, DataTruncation>();
      Transformer<Object, SQLWarning> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLWarning>) hashMap0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) reverseListIterator0);
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) listIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) listIterator1);
      IteratorUtils.apply(iterator0, (Closure<? super BatchUpdateException>) closure0);
      ExceptionTransformer.exceptionTransformer();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends HashSet<SQLTransactionRollbackException>>) null, (Iterator<? extends HashSet<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) transformer0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<SQLException> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) onePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Hashtable<StringTokenizer, SQLDataException> hashtable0 = new Hashtable<StringTokenizer, SQLDataException>();
      hashtable0.elements();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer((-1640));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, false);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0, class0);
      IteratorUtils.size(singletonIterator0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Hashtable<StringTokenizer, SQLDataException> hashtable0 = new Hashtable<StringTokenizer, SQLDataException>();
      hashtable0.elements();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("dS:\"{+^,aLZ=1.sSoQ", "dS:\"{+^,aLZ=1.sSoQ");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]", "]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException sQLDataException0 = new SQLDataException("dS:\"{+^,aLZ=1.sSoQ", sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("]");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException1);
      Stack<Boolean> stack0 = new Stack<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) resettableListIterator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.getIterator(",Zh@{%cp)");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IteratorUtils.apply((Iterator<BatchUpdateException>) null, (Closure<? super BatchUpdateException>) closure0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator((SQLNonTransientException) null, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(",Zh@{%cp)", hashMap0);
      Map<String, ClientInfoStatus> map0 = new Hashtable<String, ClientInfoStatus>();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", ",Zh@{%cp)", 0);
      DefaultEquator<String> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate("0vy!0^inD<yUR<8", (Equator<String>) defaultEquator0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) nonePredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("0vy!0^inD<yUR<8", "0vy!0^inD<yUR<8", (-1));
      DefaultEquator<String> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate("0vy!0^inD<yUR<8", (Equator<String>) defaultEquator1);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) equalPredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",Zh@{%cp)");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(",Zh@{%cp)", ",Zh@{%cp)", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 10);
      sQLExceptionArray0[6] = (SQLException) sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.getLocalizedMessage();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      singletonIterator0.reset();
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, DataTruncation>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, DataTruncation> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, DataTruncation>(abstractOrderedMapIteratorDecorator0);
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ClientInfoStatus[]) null, 777);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Hashtable<StringTokenizer, SQLDataException> hashtable0 = new Hashtable<StringTokenizer, SQLDataException>();
      hashtable0.elements();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("dS:\"{+^,aLZ=1.sSoQ", "dS:\"{+^,aLZ=1.sSoQ");
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EmptyListIterator.resettableEmptyListIterator();
      MapIterator<InstanceofPredicate, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(priorityQueue0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.functors.FalsePredicate");
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Integer, String> factoryTransformer0 = new FactoryTransformer<Integer, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) loopingIterator0, (Transformer<? super Integer, String>) factoryTransformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Hashtable<StringTokenizer, SQLDataException> hashtable0 = new Hashtable<StringTokenizer, SQLDataException>();
      hashtable0.elements();
      String string0 = "38z5";
      StringTokenizer stringTokenizer0 = new StringTokenizer("38z5", "WcUix>\"Q");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("38z5");
      SQLDataException sQLDataException0 = new SQLDataException("", sQLRecoverableException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      hashtable0.put(stringTokenizer0, sQLDataException0);
      Enumeration<SQLDataException> enumeration0 = hashtable0.elements();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedIterator0, class0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(clientInfoStatusArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Hashtable<StringTokenizer, SQLDataException> hashtable0 = new Hashtable<StringTokenizer, SQLDataException>();
      Enumeration<SQLDataException> enumeration0 = hashtable0.elements();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "dS:\"{+^,aLZ=1.sSoQ";
      StringTokenizer stringTokenizer0 = new StringTokenizer("dS:\"{+^,aLZ=1.sSoQ", "dS:\"{+^,aLZ=1.sSoQ");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]", "]");
      linkedList0.offerFirst("]");
      SQLDataException sQLDataException0 = new SQLDataException("dS:\"{+^,aLZ=1.sSoQ", sQLRecoverableException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      hashtable0.put(stringTokenizer0, sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.getIterator(",Zh@{%cp)");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IteratorUtils.apply((Iterator<BatchUpdateException>) null, (Closure<? super BatchUpdateException>) closure0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator((SQLNonTransientException) null, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      UniquePredicate.uniquePredicate();
      IteratorUtils.boundedIterator((Iterator<?>) resettableIterator0, 3948L, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 100, 903);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator(orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, true);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("");
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iIOMetadataNode0);
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      SQLWarning sQLWarning0 = new SQLWarning("*;Ia@|Y7e");
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "9 7:&u}VU\"UfCMmd-FL", sQLDataException0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.constantTransformer(sQLSyntaxErrorException0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicateArray0[1]);
      predicateArray0[3] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) predicateArray0[0], (Predicate<? super Object>) predicateArray0[1]);
      predicateArray0[4] = predicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) predicate1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      MapIterator<InstanceofPredicate, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0);
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) list0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack1);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IteratorUtils.apply((Iterator<BatchUpdateException>) null, (Closure<? super BatchUpdateException>) closure0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("T<DVt.YaO((");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("T<DVt.YaO((");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("?P;gSQM}ENtAR");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode();
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, 0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResettableListIterator<SQLException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("0Frq3Be", sQLFeatureNotSupportedException1);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IteratorUtils.apply((Iterator<BatchUpdateException>) null, (Closure<? super BatchUpdateException>) closure0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      MapIterator<InstanceofPredicate, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0);
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) list0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(priorityQueue0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<Integer, String> factoryTransformer0 = new FactoryTransformer<Integer, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Integer>) loopingIterator0, (Transformer<? super Integer, String>) factoryTransformer0, "*fxtXG", "", "lD^g((W8+X!ri\"@~");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",Zh@{%cp)");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(",Zh@{%cp)", ",Zh@{%cp)", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 10);
      sQLNonTransientConnectionException0.initCause(batchUpdateException0);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "");
      sQLNonTransientException1.initCause(sQLNonTransientConnectionException0);
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException1;
      sQLNonTransientConnectionException0.spliterator();
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      IteratorUtils.get((Iterator<LinkedHashSet<LinkedList>>) objectArrayListIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      MapIterator<InstanceofPredicate, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0);
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) list0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(priorityQueue0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<Integer, String> factoryTransformer0 = new FactoryTransformer<Integer, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Integer>) loopingIterator0, (Transformer<? super Integer, String>) factoryTransformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator(",Zh@{%cp)");
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class1);
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) objectArrayListIterator0, (Predicate<? super LinkedList<EnumSet>>) instanceofPredicate2);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) iterator1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hashtable<StringTokenizer, SQLDataException> hashtable0 = new Hashtable<StringTokenizer, SQLDataException>();
      Enumeration<SQLDataException> enumeration0 = hashtable0.elements();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("dS:\"{+^,aLZ=1.sSoQ", "dS:\"{+^,aLZ=1.sSoQ");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("oUnlbP=s", "oUnlbP=s");
      linkedList0.offerFirst("oUnlbP=s");
      SQLDataException sQLDataException0 = new SQLDataException("setValue() can only be called after next() and before remove()", sQLRecoverableException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      hashtable0.put(stringTokenizer0, sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) iterator0);
      long long0 = (-35L);
      long long1 = 1L;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) null, (-35L), 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class1);
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<?>) objectArrayListIterator0, (Predicate<? super Object>) instanceofPredicate1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLDataException sQLDataException0 = new SQLDataException("", "+Zn,GVAHK^sma?HRfH", (-1604));
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "0btR]0|eO:_['&^Wv1^");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("KYlU|/w,A]'", "");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", (-1604));
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException(sQLDataException3);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException();
      sQLDataExceptionArray0[6] = sQLDataException6;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException>(orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) resettableListIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class1);
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|3B<wHGJ)'");
      LinkedHashSet<LinkedList<Properties>> linkedHashSet0 = new LinkedHashSet<LinkedList<Properties>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      IteratorUtils.boundedIterator((Iterator<?>) objectArrayListIterator0, (long) 0, 1L);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-208), batchUpdateException0);
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) constantTransformer0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 32);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTimeoutException>) predicate2);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) orderedIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      UniquePredicate.uniquePredicate();
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate1, predicate2);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) orPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLFeatureNotSupportedException>) mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = (Enumeration<EnumSet<Locale.FilteringMode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0, (Collection<? super EnumSet<Locale.FilteringMode>>) arrayDeque0);
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration1, (Collection<? super EnumSet<Locale.FilteringMode>>) arrayDeque0);
      LinkedHashSet<SQLNonTransientConnectionException>[] linkedHashSetArray0 = (LinkedHashSet<SQLNonTransientConnectionException>[]) Array.newInstance(LinkedHashSet.class, 4);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet1 = new LinkedHashSet<SQLNonTransientConnectionException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet2 = new LinkedHashSet<SQLNonTransientConnectionException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet3 = new LinkedHashSet<SQLNonTransientConnectionException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      ObjectArrayIterator<LinkedHashSet<SQLNonTransientConnectionException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedHashSet<SQLNonTransientConnectionException>>(linkedHashSetArray0);
      IteratorUtils.contains((Iterator<LinkedHashSet<SQLNonTransientConnectionException>>) objectArrayIterator0, (Object) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      instanceofPredicateArray0[3] = instanceofPredicate0;
      instanceofPredicateArray0[4] = instanceofPredicate0;
      Class<SQLWarning> class1 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[5] = instanceofPredicate1;
      instanceofPredicateArray0[6] = instanceofPredicate0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) resettableListIterator0, (Predicate<? super LinkedList<EnumSet>>) instanceofPredicate0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 2081, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLFeatureNotSupportedException>) mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = (Enumeration<EnumSet<Locale.FilteringMode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0, (Collection<? super EnumSet<Locale.FilteringMode>>) arrayDeque0);
      arrayDeque0.add(iterator0);
      arrayDeque0.parallelStream();
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration1, (Collection<? super EnumSet<Locale.FilteringMode>>) arrayDeque0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("1v#RPc T/c", "1v#RPc T/c");
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTimeoutException0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class1);
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      UniquePredicate.uniquePredicate();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException>(orderedMapIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) instanceofPredicate1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLTimeoutException> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTimeoutException>) predicate1);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray1 = new SQLFeatureNotSupportedException[3];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray1);
      UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator1, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[10];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("B40M|");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      ReverseListIterator<SQLTransientException> reverseListIterator0 = new ReverseListIterator<SQLTransientException>(arrayList0);
      IteratorUtils.toString((Iterator<SQLTransientException>) reverseListIterator0, (Transformer<? super SQLTransientException, String>) factoryTransformer0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Hx");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Hx", sQLRecoverableException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientConnectionException0);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Hx", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Hx", "Hx", 10);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Hx");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Hx", "Hx", sQLRecoverableException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",Zh@{%cp)");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(",Zh@{%cp)", ",Zh@{%cp)", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 10);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "");
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException1;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      IteratorUtils.get((Iterator<LinkedHashSet<LinkedList>>) objectArrayListIterator0, 0);
      IteratorUtils.singletonIterator((Object) sQLExceptionArray0[1]);
      IteratorUtils.boundedIterator((Iterator<?>) objectArrayListIterator0, (long) 0, (long) 10);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[10];
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      InstanceofPredicate.instanceOfPredicate(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) zippingIterator0, (Iterator<? extends SQLTransientConnectionException>) zippingIterator0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory";
      stringArray0[3] = "SP1s~+14";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      iteratorArray0[0] = (Iterator<String>) objectArrayIterator0;
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) objectArrayIterator0, 1479L);
      iteratorArray0[1] = (Iterator<String>) skippingIterator0;
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[2] = (Iterator<String>) resettableListIterator0;
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("Q>`T", (Transformer<? super String, ? extends String>) transformer0);
      iteratorArray0[3] = iterator0;
      OrderedMapIterator<String, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[4] = (Iterator<String>) orderedMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      ConstantFactory<SQLTimeoutException> constantFactory0 = new ConstantFactory<SQLTimeoutException>(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      String string0 = "9<n|g|W#UOH|J=$T";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9<n|g|W#UOH|J=$T");
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLFeatureNotSupportedException>) mapIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (long) 0);
      SQLDataException sQLDataException0 = new SQLDataException("9<n|g|W#UOH|J=$T", "9<n|g|W#UOH|J=$T", 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, (-2476));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[10];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate1;
      instanceofPredicateArray0[2] = instanceofPredicate1;
      instanceofPredicateArray0[3] = instanceofPredicate0;
      instanceofPredicateArray0[4] = instanceofPredicate0;
      instanceofPredicateArray0[5] = instanceofPredicate0;
      instanceofPredicateArray0[6] = instanceofPredicate1;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) resettableListIterator0, (Predicate<? super LinkedList<EnumSet>>) instanceofPredicate0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",Zh@{%cp)");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(",Zh@{%cp)", ",Zh@{%cp)", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 10);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "");
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException1;
      SQLException[] sQLExceptionArray1 = new SQLException[0];
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray1, 0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The type to check instanceof must not be null", "", 0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = ",Zh@{%cp)";
      IteratorUtils.getIterator(",Zh@{%cp)");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",Zh@{%cp)");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 10);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 8);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.allOf(class0);
      enumSetArray0[0] = enumSet0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[6];
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[1] = clientInfoStatus0;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      clientInfoStatusArray0[3] = clientInfoStatus0;
      clientInfoStatusArray0[4] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[5] = clientInfoStatus1;
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.of(clientInfoStatus0, clientInfoStatusArray0);
      enumSetArray0[1] = enumSet1;
      EnumSet<ClientInfoStatus> enumSet2 = EnumSet.copyOf((Collection<ClientInfoStatus>) enumSet0);
      enumSetArray0[2] = enumSet2;
      EnumSet<ClientInfoStatus> enumSet3 = EnumSet.copyOf(enumSet2);
      enumSetArray0[3] = enumSet3;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet4 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus1, clientInfoStatus2);
      enumSetArray0[4] = enumSet4;
      EnumSet<ClientInfoStatus> enumSet5 = enumSet2.clone();
      enumSetArray0[5] = enumSet5;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet6 = EnumSet.of(clientInfoStatus3, clientInfoStatusArray0);
      enumSetArray0[6] = enumSet6;
      EnumSet<ClientInfoStatus> enumSet7 = EnumSet.of(clientInfoStatus0, clientInfoStatusArray0);
      enumSetArray0[7] = enumSet7;
      IteratorUtils.arrayIterator(enumSetArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<Iterator<TreeSet<SQLClientInfoException>>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<TreeSet<SQLClientInfoException>>, BatchUpdateException>) orderedMapIterator0);
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLNonTransientException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException>(orderedMapIterator2);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EntrySetMapIterator<Locale.FilteringMode, Stack<IIOMetadataNode>> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, Stack<IIOMetadataNode>>((Map<Locale.FilteringMode, Stack<IIOMetadataNode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.spliterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[10];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) resettableListIterator0, (Predicate<? super LinkedList<EnumSet>>) instanceofPredicate0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) zippingIterator0, (Iterator<? extends SQLTransientConnectionException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[10];
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) resettableListIterator0, (Predicate<? super LinkedList<EnumSet>>) instanceofPredicateArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.getIterator(",Zh@{%cp)");
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(", ");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", ", ", ", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(", ", ", ", 10);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "");
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException1;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      IteratorUtils.singletonIterator((Object) sQLExceptionArray0[1]);
      IteratorUtils.boundedIterator((Iterator<?>) objectArrayListIterator0, (long) 0, (long) 10);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLExceptionArray0[5], (-3515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",Zh@{%cp)");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(",Zh@{%cp)", ",Zh@{%cp)", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 10);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "");
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException1;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("b");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Invalid map index: ", "", (-4558));
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) singletonIterator0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientException, String>) factoryTransformer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Iterator<SQLTransientException> iterator0 = null;
      ConstantFactory.constantFactory((String) null);
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<LinkedList>>) null, 723);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",Zh@{%cp)");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(",Zh@{%cp)", ",Zh@{%cp)", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 10);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "");
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException1;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      String string0 = ",Zh@{%cp)";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",Zh@{%cp)");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(",Zh@{%cp)", ",Zh@{%cp)", 0);
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientException0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      sQLExceptionArray0[4] = (SQLException) batchUpdateException0;
      int int0 = 10;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 10);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      String string1 = "";
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException(",Zh@{%cp)", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 91, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "Node must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IterableUtils$5");
      sQLTimeoutException0.addSuppressed(sQLSyntaxErrorException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("tW");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) factoryTransformer0);
      IteratorUtils.contains((Iterator<Integer>) null, (Object) null);
      SingletonIterator<Boolean> singletonIterator0 = new SingletonIterator<Boolean>((Boolean) null, false);
      IteratorUtils.asEnumeration((Iterator<? extends Boolean>) singletonIterator0);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, DataTruncation>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, DataTruncation> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, DataTruncation>(orderedMapIterator0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) transformer0);
      IteratorUtils.getIterator(iterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null, (Collection<? super Object>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1417), false, false, (-1417), (-1417));
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLNonTransientException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException>(orderedMapIterator1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, ">'u@/'xR#^<", (-1417), dataTruncation0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<String> class1 = String.class;
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      instanceofPredicateArray0[3] = instanceofPredicate0;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) orderedMapIterator1, (Predicate<? super LinkedList<EnumSet>>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Transformer<Object, Boolean>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) priorityQueue0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      sQLFeatureNotSupportedException0.spliterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      String string0 = "L-iTPAP;e7%M";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException3);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException4;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException3;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) priorityQueue0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<Closure<Object>, SQLException> hashtable0 = new Hashtable<Closure<Object>, SQLException>();
      EntrySetMapIterator<Closure<Object>, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<Closure<Object>, SQLException>(hashtable0);
      IteratorUtils.collatedIterator((Comparator<? super Closure<Object>>) comparator0, (Iterator<? extends Closure<Object>>) entrySetMapIterator0, (Iterator<? extends Closure<Object>>) entrySetMapIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLWarning sQLWarning0 = new SQLWarning("Cannot use setValue() when the object being set is already in the map", ",8<.9", 1393);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 1097, 1393);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      int int0 = (-1426);
      stack0.clear();
      DataTruncation dataTruncation0 = new DataTruncation((-1426), false, false, (-1426), (-1426));
      stack0.add(dataTruncation0);
      SingletonIterator<Vector<DataTruncation>> singletonIterator0 = new SingletonIterator<Vector<DataTruncation>>(stack0, true);
      IteratorUtils.unmodifiableIterator((Iterator<Vector<DataTruncation>>) singletonIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLNonTransientException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException>(orderedMapIterator1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (-1426), dataTruncation0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<String> class1 = String.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      Class<Object> class3 = Object.class;
      InstanceofPredicate.instanceOfPredicate(class3);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "PXi;Fk]-jAH");
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[3] = (SQLException) sQLNonTransientException0;
      SQLDataException sQLDataException0 = new SQLDataException("Pntsl&2mt)", "IVs@gncp", 0, sQLExceptionArray0[3]);
      sQLExceptionArray0[4] = (SQLException) sQLDataException0;
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[7] = (SQLException) sQLDataException0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 6);
      LinkedHashSet<LinkedList<Properties>> linkedHashSet0 = new LinkedHashSet<LinkedList<Properties>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Pntsl&2mt)");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.filteredListIterator((ListIterator<?>) objectArrayListIterator0, (Predicate<? super Object>) instanceofPredicate2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("N#}> `(={k6;", "org.apache.commons.collections4.iterators.IteratorChain");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.iterators.IteratorChain", "Estimated size must be greater than 0", 6, sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.IteratorChain", sQLIntegrityConstraintViolationException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.IteratorChain", "org.apache.commons.collections4.iterators.IteratorChain", sQLTransactionRollbackException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.IteratorChain", "org.apache.commons.collections4.iterators.IteratorChain", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLSyntaxErrorException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Collection must not be null", "org.apache.commons.collections4.functors.PredicateTransformer");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("iVPKqu'^8JvreRQ-Cv", sQLTimeoutException2);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("N#}> `(={k6;", "org.apache.commons.collections4.functors.PredicateTransformer", (-94));
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("org.apache.commons.collections4.functors.PredicateTransformer", "Estimated size must be greater than 0", 1888, sQLTimeoutException4);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", "N#}> `(={k6;", sQLTimeoutException5);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator0);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<Object, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) mapIterator0, (-3515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableListIterator0, (-3515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation((-1417), false, false, (-1417), (-1417));
      stack0.add(dataTruncation0);
      SingletonIterator<Vector<DataTruncation>> singletonIterator0 = new SingletonIterator<Vector<DataTruncation>>(stack0, false);
      IteratorUtils.unmodifiableIterator((Iterator<Vector<DataTruncation>>) singletonIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLNonTransientException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException>(orderedMapIterator1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, ">'u@/'xR#^<", (-1417), dataTruncation0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<String> class1 = String.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate1;
      instanceofPredicateArray0[2] = instanceofPredicate1;
      instanceofPredicateArray0[3] = instanceofPredicate1;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) orderedMapIterator1, (Predicate<? super LinkedList<EnumSet>>) instanceofPredicate1);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 7);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.getIterator(batchUpdateException0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      enumSetArray0[0] = enumSet0;
      EnumSet.of(locale_FilteringMode0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Factory<SQLFeatureNotSupportedException> factory0 = ConstantFactory.constantFactory(sQLFeatureNotSupportedException0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLFeatureNotSupportedException>) factory0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(">'u@/'xR#^<", ">'u@/'xR#^<", (-1), batchUpdateException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<String> class1 = String.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) resettableListIterator0, (Predicate<? super LinkedList<EnumSet>>) instanceofPredicate0);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException((String) null, "", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("<Z\"[7Q@e*FC0n9");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("G", "ExceptionClosure invoked", (-416));
      SQLException sQLException0 = new SQLException("'Iji>)y!Oz~Bi{_", "", (-416));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      locale_FilteringModeArray0[7] = locale_FilteringMode0;
      locale_FilteringModeArray0[8] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      EnumSet.of(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode2, locale_FilteringMode3);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet.allOf(class0);
      EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode4);
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 4);
      enumSetArray0[0] = enumSet0;
      enumSetArray0[1] = enumSet1;
      enumSetArray0[2] = enumSet0;
      enumSetArray0[3] = enumSet0;
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0, 0, 0);
      IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("V7Ys5h!/U.O", "org.apache.commons.collections4.collection.AbstractCollectionDecorator", (-416));
      SQLException sQLException0 = new SQLException("", "ad];;B", 2392);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException3;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedException2.addSuppressed(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException2;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      sQLFeatureNotSupportedException0.spliterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator";
      String string1 = "Index cannot be negative: ";
      String string2 = "org.apache.commons.collections4.map.SingletonMap";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Index cannot be negative: ", "org.apache.commons.collections4.map.SingletonMap");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", sQLSyntaxErrorException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) listIterator0, 0L);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException(",Zh@{%cp)", "V%l#Jks*>BiD\"%");
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation((-1417), true, true, (-1417), (-1417));
      stack0.add(dataTruncation0);
      SingletonIterator<Vector<DataTruncation>> singletonIterator0 = new SingletonIterator<Vector<DataTruncation>>(stack0, true);
      IteratorUtils.unmodifiableIterator((Iterator<Vector<DataTruncation>>) singletonIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLNonTransientException>) orderedMapIterator0);
      NullPredicate.nullPredicate();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, ">'u@/'xR#^<", (-1417), dataTruncation0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", ">'u@/'xR#^<", 0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(">'u@/'xR#^<", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode1);
      EnumSet.of(locale_FilteringMode1, locale_FilteringMode0);
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet.allOf(class0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet.of(locale_FilteringMode2, locale_FilteringModeArray0);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet.of(locale_FilteringMode3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((EnumSet<Locale.FilteringMode>[]) null, 0, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Q>`T";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory";
      stringArray0[3] = "SP1s~+14";
      stringArray0[4] = "<Pi^)^q~(p0";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      iteratorArray0[0] = (Iterator<String>) objectArrayIterator0;
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) objectArrayIterator0, 1479L);
      iteratorArray0[1] = (Iterator<String>) skippingIterator0;
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[2] = (Iterator<String>) resettableListIterator0;
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("Q>`T", (Transformer<? super String, ? extends String>) transformer0);
      iteratorArray0[3] = iterator0;
      OrderedMapIterator<String, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[4] = (Iterator<String>) orderedMapIterator0;
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLSyntaxErrorException0);
      ConstantFactory<SQLTimeoutException> constantFactory0 = new ConstantFactory<SQLTimeoutException>(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(constantFactory0);
      IteratorUtils.transformedIterator((Iterator<? extends String>) iterator1, (Transformer<? super String, ? extends SQLTimeoutException>) factoryTransformer0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("SP1s~+14", sQLSyntaxErrorException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", "", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("", "KD(&Vaw)P',", (-444));
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 5);
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      closureArray0[0] = closure0;
      TransformerClosure<SQLException> transformerClosure0 = new TransformerClosure<SQLException>(transformer0);
      closureArray0[1] = (Closure<SQLException>) transformerClosure0;
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closureArray0[1]);
      closureArray0[2] = closure1;
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap1 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure2 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap1);
      closureArray0[3] = closure2;
      Closure<SQLException> closure3 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) factoryTransformer0);
      closureArray0[4] = closure3;
      ChainedClosure<SQLException> chainedClosure0 = new ChainedClosure<SQLException>(closureArray0);
      Closure<SQLException> closure4 = SwitchClosure.switchClosure((Predicate<? super SQLException>[]) predicateArray0, (Closure<? super SQLException>[]) closureArray0, (Closure<? super SQLException>) chainedClosure0);
      Closure<Object> closure5 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure5);
      Closure<SQLRecoverableException> closure6 = IfClosure.ifClosure((Predicate<? super SQLRecoverableException>) predicate0, (Closure<? super SQLRecoverableException>) closure4, (Closure<? super SQLRecoverableException>) ifClosure0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) resettableIterator0, (Closure<? super SQLRecoverableException>) closure6);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      sQLExceptionArray0[1] = (SQLException) sQLSyntaxErrorException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, ",Zh@{%cp)", 0);
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      sQLExceptionArray0[3] = (SQLException) sQLRecoverableException0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      sQLExceptionArray0[4] = (SQLException) batchUpdateException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 10);
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "");
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException1;
      MapIterator<IIOMetadataNode, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<?>) mapIterator0, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<Object, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      hashtable0.put("", serviceLoader0);
      EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>>(hashtable0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) entrySetMapIterator0, (Iterator<? extends String>) entrySetMapIterator0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IteratorUtils.isEmpty(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", "", 4);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      String string0 = "Collection must not be null";
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("Collection must not be null");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 4, 3196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLTimeoutException> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTimeoutException>) predicate1);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate2);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      int int0 = (-1232);
      Predicate<SQLException> predicate3 = NullPredicate.nullPredicate();
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("Iterator must not be null");
      IfTransformer<SQLException, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<SQLException, SQLFeatureNotSupportedException>(predicate3, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("tW");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      ConstantFactory<SQLTimeoutException> constantFactory0 = new ConstantFactory<SQLTimeoutException>(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer1 = new FactoryTransformer<Object, SQLTimeoutException>(constantFactory0);
      Iterator<String> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) null, (Transformer<? super String, ? extends SQLTimeoutException>) factoryTransformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLTimeoutException> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTimeoutException>) predicate1);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate2);
      int int0 = (-1232);
      Predicate<SQLException> predicate3 = NullPredicate.nullPredicate();
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("Iterator must not be null");
      IfTransformer<SQLException, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<SQLException, SQLFeatureNotSupportedException>(predicate3, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableListIterator0, 31);
      IteratorUtils.loopingListIterator(list0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyIterator();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      String string0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "prefix may not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("9l Y", sQLTimeoutException0);
      sQLTimeoutException0.addSuppressed(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("|.:ttp", sQLTimeoutException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException1;
      sQLTimeoutException0.getSuppressed();
      sQLTimeoutException0.addSuppressed(sQLTransientExceptionArray0[0]);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "wk1I<O#j3=?y", 8);
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      sQLTransientConnectionException1.getLocalizedMessage();
      SQLTransientException sQLTransientException1 = new SQLTransientException("wk1I<O#j3=?y", "wk1I<O#j3=?y", 31, sQLTransientConnectionException1);
      sQLTransientExceptionArray0[2] = sQLTransientException1;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(resettableListIterator0, 1086);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("ExceptionClosure invoked", "ExceptionClosure invoked", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("");
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<String>) objectArrayIterator0, (-3312L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]", "0,`d");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException sQLDataException0 = new SQLDataException("", sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("0,`d");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.getIterator(",Zh@{%cp)");
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) iterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, (-2073), (-2073));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("ExceptionClosure invoked", "ExceptionClosure invoked", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("", "ExceptionClosure invoked", (-416));
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException4;
      SQLException sQLException0 = new SQLException("ad];;B", "", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException5;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("InstantiateFactory: The constructor must exist and be public ", "Map is empty");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateFactory: The constructor must exist and be public ", "", sQLFeatureNotSupportedException3);
      ConstantFactory<SQLTimeoutException> constantFactory0 = new ConstantFactory<SQLTimeoutException>(sQLTimeoutException0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(constantFactory0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Q>`T";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory";
      stringArray0[3] = "SP1s~+14";
      stringArray0[4] = "<Pi^)^q~(p0";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      iteratorArray0[0] = (Iterator<String>) objectArrayIterator0;
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) objectArrayIterator0, 1479L);
      iteratorArray0[1] = (Iterator<String>) skippingIterator0;
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[2] = (Iterator<String>) resettableListIterator0;
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("Q>`T", (Transformer<? super String, ? extends String>) transformer0);
      iteratorArray0[3] = iterator0;
      OrderedMapIterator<String, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[3] = (Iterator<String>) orderedMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "PXi;Fk]-jAH");
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[3] = (SQLException) sQLNonTransientException0;
      SQLDataException sQLDataException0 = new SQLDataException("Pntsl&2mt)", "IVs@gncp", 0, sQLExceptionArray0[3]);
      sQLExceptionArray0[4] = (SQLException) sQLDataException0;
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[7] = (SQLException) sQLDataException0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 6);
      LinkedHashSet<LinkedList> linkedHashSet0 = new LinkedHashSet<LinkedList<Properties>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Pntsl&2mt)");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException0;
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) null, (Predicate<? super LinkedList<EnumSet>>) nonePredicate0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayList<LinkedList<IIOMetadataNode>> arrayList0 = new ArrayList<LinkedList<IIOMetadataNode>>();
      IteratorUtils.loopingListIterator((List<LinkedList<IIOMetadataNode>>) arrayList0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 6);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<SQLDataException>) resettableListIterator0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<SQLDataException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLDataException>) predicate0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate1);
      iteratorArray0[1] = iterator0;
      Hashtable<StringTokenizer, SQLDataException> hashtable0 = new Hashtable<StringTokenizer, SQLDataException>();
      hashtable0.elements();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.skippingIterator((Iterator<String>) objectArrayIterator0, 0L);
      IteratorUtils.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      hashtable0.put("Node must not be null", serviceLoader0);
      EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>>(hashtable0);
      IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) entrySetMapIterator0, (Iterator<? extends String>) entrySetMapIterator0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IteratorUtils.isEmpty(iterator0);
      ResettableListIterator<Object> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Object>) resettableListIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator1 = linkedList0.iterator();
      iteratorArray0[0] = iterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "Node must not be null");
      sQLTimeoutException0.getSuppressed();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("tW");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) factoryTransformer0);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) arrayList0);
      Iterator<SQLException>[] iteratorArray0 = (Iterator<SQLException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      PriorityQueue<SQLDataException>[] priorityQueueArray0 = (PriorityQueue<SQLDataException>[]) Array.newInstance(PriorityQueue.class, 5);
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLDataException> priorityQueue1 = new PriorityQueue<SQLDataException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLDataException> priorityQueue2 = new PriorityQueue<SQLDataException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLDataException> priorityQueue3 = new PriorityQueue<SQLDataException>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLDataException> priorityQueue4 = new PriorityQueue<SQLDataException>();
      priorityQueueArray0[4] = priorityQueue4;
      int int0 = (-3654);
      ObjectArrayListIterator<PriorityQueue<SQLDataException>> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<SQLDataException>>(priorityQueueArray0, (-3654));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLTimeoutException> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTimeoutException>) predicate1);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate2);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      int int0 = (-1232);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, (-1232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[2] = iIOMetadataNode1;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      iIOMetadataNode0.insertBefore(iIOMetadataNode1, iIOMetadataNode1);
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) instanceofPredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(transformerPredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super InstanceofPredicate, String>) null, (String) null, "X9_", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<Transformer<Object, Boolean>>) null, (Transformer<? super Transformer<Object, Boolean>, String>) ifTransformer0, "", "", "");
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Transformer must not be null", (String) null, 5);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLNonTransientException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("owr9,2iXqs2cp.T_s", "", (-6423));
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("", "", 5);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("InstantiateFactory: Constructor must be public", "InstantiateFactory: Constructor must be public", 0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      sQLExceptionArray0[1] = (SQLException) sQLSyntaxErrorException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "InstantiateFactory: Constructor must be public", 0);
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "InstantiateFactory: Constructor must be public", sQLNonTransientException0);
      Factory<String> factory0 = ConstantFactory.constantFactory("tW");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) factoryTransformer0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9<n|g|W#UOH|J=$T");
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLFeatureNotSupportedException>) mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (long) 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("0IrfR`E0e", ")1d~");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator", "", 0, sQLNonTransientException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("qEY_v/fl");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("GO");
      int int0 = 1809;
      int int1 = 813;
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(sQLTransactionRollbackException0, 1809, 813);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "Node must not be null");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("tW");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) factoryTransformer0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<InstanceofPredicate, Vector<DataTruncation>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ArrayList<LinkedList<IIOMetadataNode>> arrayList0 = new ArrayList<LinkedList<IIOMetadataNode>>();
      IteratorUtils.loopingListIterator((List<LinkedList<IIOMetadataNode>>) arrayList0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 6);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<SQLDataException>) resettableListIterator0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<SQLDataException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLDataException>) predicate0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate1);
      iteratorArray0[1] = iterator0;
      Hashtable<StringTokenizer, SQLDataException> hashtable0 = new Hashtable<StringTokenizer, SQLDataException>();
      Enumeration<SQLDataException> enumeration0 = hashtable0.elements();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) priorityQueue0);
      iteratorArray0[2] = iterator1;
      int int0 = 0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>((SQLDataException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      serviceLoader0.spliterator();
      String string0 = "transformer may not be null";
      hashtable0.put("transformer may not be null", serviceLoader0);
      EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>>(hashtable0);
      IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) entrySetMapIterator0, (Iterator<? extends String>) entrySetMapIterator0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IteratorUtils.isEmpty(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator0, (-1992L), (-1992L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation((-1417), false, false, (-1417), (-1417));
      stack0.add(dataTruncation0);
      SingletonIterator<Vector<DataTruncation>> singletonIterator0 = new SingletonIterator<Vector<DataTruncation>>(stack0, false);
      IteratorUtils.unmodifiableIterator((Iterator<Vector<DataTruncation>>) singletonIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLNonTransientException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException>(orderedMapIterator1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getAttributeNode("Shx");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(dataTruncation0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Shx", "Shx", (-175), sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException3);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException4;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException2;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 1497);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[10];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate0;
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OrderedMapIterator<Object, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(orderedMapIterator0);
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      hashtable0.put("", serviceLoader0);
      EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>>(hashtable0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IteratorUtils.isEmpty(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) loopingListIterator0, 522L, (-3324L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 7);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.getIterator(batchUpdateException0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode0);
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      enumSetArray0[2] = enumSet2;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet3 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      enumSetArray0[3] = enumSet3;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet4 = EnumSet.allOf(class0);
      enumSetArray0[4] = enumSet4;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet5 = EnumSet.of(locale_FilteringMode2, locale_FilteringModeArray0);
      enumSetArray0[5] = enumSet5;
      EnumSet<Locale.FilteringMode> enumSet6 = EnumSet.of(locale_FilteringMode1);
      enumSetArray0[6] = enumSet6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 0, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedMapIterator<Object, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      String string0 = "";
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      hashtable0.put("", serviceLoader0);
      EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>>(hashtable0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) entrySetMapIterator0, (Iterator<? extends String>) entrySetMapIterator0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IteratorUtils.isEmpty(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation((-1417), true, true, (-1417), (-1417));
      stack0.add(dataTruncation0);
      SingletonIterator<Vector<DataTruncation>> singletonIterator0 = new SingletonIterator<Vector<DataTruncation>>(stack0, false);
      IteratorUtils.unmodifiableIterator((Iterator<Vector<DataTruncation>>) singletonIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLNonTransientException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException>(orderedMapIterator1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, ">'u@/'xR#^<", (-1417), dataTruncation0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("AJ1]d<6azDNa:v");
      iIOMetadataNode0.getAttributeNode("o(");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 7);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.getIterator(batchUpdateException0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode0);
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      enumSetArray0[2] = enumSet2;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet3 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      enumSetArray0[3] = enumSet3;
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet4 = EnumSet.allOf(class0);
      enumSetArray0[4] = enumSet4;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet5 = EnumSet.of(locale_FilteringMode2, locale_FilteringModeArray0);
      enumSetArray0[5] = enumSet5;
      EnumSet<Locale.FilteringMode> enumSet6 = EnumSet.of(locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      enumSet0.add(locale_FilteringMode3);
      enumSetArray0[6] = enumSet6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 0, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLFeatureNotSupportedException>) mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BoundedIterator<EnumSet<Locale.FilteringMode>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (long) 0);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) boundedIterator0);
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0, (Collection<? super EnumSet<Locale.FilteringMode>>) arrayDeque0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) boundedIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0);
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 0);
      ObjectArrayIterator<EnumSet<Locale.FilteringMode>> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<EnumSet<Locale.FilteringMode>>(enumSetArray0, 750, (-2273));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory((String) null);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<String, ServiceLoader<SQLNonTransientConnectionException>>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      hashtable0.put("GH,.6QfFf", serviceLoader0);
      EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<String, ServiceLoader<SQLNonTransientConnectionException>>(hashtable0);
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) entrySetMapIterator0, (Iterator<? extends String>) entrySetMapIterator0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IteratorUtils.isEmpty(iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) iterator0, (-3324L), (-3324L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAny((Iterator<LinkedList<EnumSet>>) resettableListIterator0, (Predicate<? super LinkedList<EnumSet>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation((-1417), true, true, (-1417), (-1417));
      stack0.add(dataTruncation0);
      SingletonIterator<Vector<DataTruncation>> singletonIterator0 = new SingletonIterator<Vector<DataTruncation>>(stack0, false);
      IteratorUtils.unmodifiableIterator((Iterator<Vector<DataTruncation>>) singletonIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLNonTransientException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLNonTransientException>(orderedMapIterator1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, ">'u@/'xR#^<", (-1417), dataTruncation0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", ">'u@/'xR#^<", 0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(">'u@/'xR#^<", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-1417), (-1417));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "Array class must not be null";
      String string1 = ",CMFnq$|*%rYwL3#";
      int int0 = 0;
      SQLDataException sQLDataException0 = new SQLDataException(",CMFnq$|*%rYwL3#", ",CMFnq$|*%rYwL3#", 0, (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Array class must not be null", sQLDataException0);
      int int1 = (-476);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, (-476));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      assertNotNull(iterator0);
      
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = (-2728);
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 4;
      intArray0[5] = 91;
      SQLException sQLException0 = new SQLException("prefix may not be null", "I-73aRS</", 0);
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: prefix may not be null", sQLException0.toString());
      assertEquals("prefix may not be null", sQLException0.getMessage());
      assertEquals("I-73aRS</", sQLException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("prefix may not be null", "=;r-e", sQLException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: prefix may not be null", sQLException0.toString());
      assertEquals("prefix may not be null", sQLException0.getMessage());
      assertEquals("I-73aRS</", sQLException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("=;r-e", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: prefix may not be null", sQLTransientConnectionException0.toString());
      assertEquals("prefix may not be null", sQLTransientConnectionException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("=;r-e", intArray0, sQLTransientConnectionException0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: prefix may not be null", sQLException0.toString());
      assertEquals("prefix may not be null", sQLException0.getMessage());
      assertEquals("I-73aRS</", sQLException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("=;r-e", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: prefix may not be null", sQLTransientConnectionException0.toString());
      assertEquals("prefix may not be null", sQLTransientConnectionException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("=;r-e", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: =;r-e", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {10, (-2728), 1, 0, 4, 91}, intArray0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("I-73aRS</", intArray0, sQLException0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotNull(batchUpdateException1);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: prefix may not be null", sQLException0.toString());
      assertEquals("prefix may not be null", sQLException0.getMessage());
      assertEquals("I-73aRS</", sQLException0.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("I-73aRS</", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: I-73aRS</", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {10, (-2728), 1, 0, 4, 91}, intArray0);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("I-73aRS</", "org.apache.commons.collections4.IteratorUtils", 100, intArray0, batchUpdateException1);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotNull(batchUpdateException2);
      assertEquals("I-73aRS</", batchUpdateException2.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", batchUpdateException2.getSQLState());
      assertEquals(100, batchUpdateException2.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: I-73aRS</", batchUpdateException2.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: prefix may not be null", sQLException0.toString());
      assertEquals("prefix may not be null", sQLException0.getMessage());
      assertEquals("I-73aRS</", sQLException0.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("I-73aRS</", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: I-73aRS</", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {10, (-2728), 1, 0, 4, 91}, intArray0);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("=;r-e", ":~Ed8<C:.iSb.6", intArray0);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertNotNull(batchUpdateException3);
      assertEquals("java.sql.BatchUpdateException: =;r-e", batchUpdateException3.toString());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("=;r-e", batchUpdateException3.getMessage());
      assertEquals(":~Ed8<C:.iSb.6", batchUpdateException3.getSQLState());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {10, (-2728), 1, 0, 4, 91}, intArray0);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException();
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertNotNull(batchUpdateException4);
      assertNull(batchUpdateException4.getSQLState());
      assertNull(batchUpdateException4.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException4.toString());
      assertEquals(0, batchUpdateException4.getErrorCode());
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(intArray0, batchUpdateException0);
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertNotNull(batchUpdateException5);
      assertNull(batchUpdateException5.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: =;r-e", batchUpdateException5.toString());
      assertEquals("java.sql.BatchUpdateException: =;r-e", batchUpdateException5.getMessage());
      assertEquals(0, batchUpdateException5.getErrorCode());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: prefix may not be null", sQLException0.toString());
      assertEquals("prefix may not be null", sQLException0.getMessage());
      assertEquals("I-73aRS</", sQLException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("=;r-e", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: prefix may not be null", sQLTransientConnectionException0.toString());
      assertEquals("prefix may not be null", sQLTransientConnectionException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("=;r-e", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: =;r-e", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {10, (-2728), 1, 0, 4, 91}, intArray0);
      
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(batchUpdateException4);
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException0));
      assertNotNull(batchUpdateException6);
      assertNull(batchUpdateException4.getSQLState());
      assertNull(batchUpdateException4.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException4.toString());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertNull(batchUpdateException6.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException6.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException", batchUpdateException6.toString());
      assertEquals(0, batchUpdateException6.getErrorCode());
      
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException((String) null, (String) null, (-2728), intArray0, batchUpdateException6);
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException6));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException6));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException3));
      assertNotNull(batchUpdateException7);
      assertNull(batchUpdateException4.getSQLState());
      assertNull(batchUpdateException4.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException4.toString());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertNull(batchUpdateException6.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException6.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException", batchUpdateException6.toString());
      assertEquals(0, batchUpdateException6.getErrorCode());
      assertEquals((-2728), batchUpdateException7.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException7.toString());
      assertNull(batchUpdateException7.getMessage());
      assertNull(batchUpdateException7.getSQLState());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {10, (-2728), 1, 0, 4, 91}, intArray0);
      
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(8, batchUpdateExceptionArray0.length);
      
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableListIterator0;
      ResettableIterator<BatchUpdateException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      
      iteratorArray0[1] = (Iterator<BatchUpdateException>) resettableIterator1;
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) iteratorArray0[1]);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(3, iteratorArray0.length);
      
      iteratorArray0[2] = (Iterator<BatchUpdateException>) listIterator0;
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator1);
      assertEquals(3, iteratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[8];
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning((String) null, "", sQLWarning0);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNotNull(sQLWarning1);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      assertEquals("", sQLWarning1.getSQLState());
      assertNull(sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      
      sQLWarningArray0[1] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("", (Throwable) null);
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      assertFalse(sQLWarning2.equals((Object)sQLWarning1));
      assertNotNull(sQLWarning2);
      assertEquals(0, sQLWarning2.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning2.toString());
      assertEquals("", sQLWarning2.getMessage());
      assertNull(sQLWarning2.getSQLState());
      
      sQLWarningArray0[2] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning("q8j!219q9KU_!}G", "w4cX");
      assertFalse(sQLWarning3.equals((Object)sQLWarning1));
      assertFalse(sQLWarning3.equals((Object)sQLWarning2));
      assertFalse(sQLWarning3.equals((Object)sQLWarning0));
      assertNotNull(sQLWarning3);
      assertEquals("q8j!219q9KU_!}G", sQLWarning3.getMessage());
      assertEquals("java.sql.SQLWarning: q8j!219q9KU_!}G", sQLWarning3.toString());
      assertEquals("w4cX", sQLWarning3.getSQLState());
      assertEquals(0, sQLWarning3.getErrorCode());
      
      sQLWarningArray0[3] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning();
      assertFalse(sQLWarning4.equals((Object)sQLWarning1));
      assertFalse(sQLWarning4.equals((Object)sQLWarning3));
      assertFalse(sQLWarning4.equals((Object)sQLWarning0));
      assertFalse(sQLWarning4.equals((Object)sQLWarning2));
      assertNotNull(sQLWarning4);
      assertEquals(0, sQLWarning4.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning4.toString());
      assertNull(sQLWarning4.getSQLState());
      assertNull(sQLWarning4.getMessage());
      
      sQLWarningArray0[4] = sQLWarning4;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning1);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning0.equals((Object)sQLWarning3));
      assertFalse(sQLWarning0.equals((Object)sQLWarning4));
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning1.equals((Object)sQLWarning4));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(sQLWarning1.equals((Object)sQLWarning2));
      assertFalse(sQLWarning1.equals((Object)sQLWarning3));
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      assertEquals("", sQLWarning1.getSQLState());
      assertNull(sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTransactionRollbackException0.toString());
      
      SQLWarning sQLWarning5 = new SQLWarning("", sQLTransactionRollbackException0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning0.equals((Object)sQLWarning3));
      assertFalse(sQLWarning0.equals((Object)sQLWarning4));
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning1.equals((Object)sQLWarning4));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(sQLWarning1.equals((Object)sQLWarning2));
      assertFalse(sQLWarning1.equals((Object)sQLWarning3));
      assertFalse(sQLWarning5.equals((Object)sQLWarning1));
      assertFalse(sQLWarning5.equals((Object)sQLWarning0));
      assertFalse(sQLWarning5.equals((Object)sQLWarning2));
      assertFalse(sQLWarning5.equals((Object)sQLWarning4));
      assertFalse(sQLWarning5.equals((Object)sQLWarning3));
      assertNotNull(sQLWarning5);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      assertEquals("", sQLWarning1.getSQLState());
      assertNull(sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLWarning: ", sQLWarning5.toString());
      assertNull(sQLWarning5.getSQLState());
      assertEquals("", sQLWarning5.getMessage());
      assertEquals(0, sQLWarning5.getErrorCode());
      
      sQLWarningArray0[5] = sQLWarning5;
      SQLWarning sQLWarning6 = new SQLWarning("", "mswKw9^]7i", (-1177), sQLWarning0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning0.equals((Object)sQLWarning3));
      assertFalse(sQLWarning0.equals((Object)sQLWarning5));
      assertFalse(sQLWarning0.equals((Object)sQLWarning4));
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning6.equals((Object)sQLWarning0));
      assertFalse(sQLWarning6.equals((Object)sQLWarning2));
      assertFalse(sQLWarning6.equals((Object)sQLWarning3));
      assertFalse(sQLWarning6.equals((Object)sQLWarning4));
      assertFalse(sQLWarning6.equals((Object)sQLWarning1));
      assertFalse(sQLWarning6.equals((Object)sQLWarning5));
      assertNotNull(sQLWarning6);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals((-1177), sQLWarning6.getErrorCode());
      assertEquals("", sQLWarning6.getMessage());
      assertEquals("mswKw9^]7i", sQLWarning6.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning6.toString());
      
      sQLWarningArray0[6] = sQLWarning6;
      SQLWarning sQLWarning7 = new SQLWarning("w4cX", "mswKw9^]7i", (-1098), sQLWarning1);
      assertFalse(sQLWarning7.equals((Object)sQLWarning1));
      assertFalse(sQLWarning7.equals((Object)sQLWarning6));
      assertFalse(sQLWarning7.equals((Object)sQLWarning4));
      assertFalse(sQLWarning7.equals((Object)sQLWarning3));
      assertFalse(sQLWarning7.equals((Object)sQLWarning0));
      assertFalse(sQLWarning7.equals((Object)sQLWarning5));
      assertFalse(sQLWarning7.equals((Object)sQLWarning2));
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning0.equals((Object)sQLWarning3));
      assertFalse(sQLWarning0.equals((Object)sQLWarning5));
      assertFalse(sQLWarning0.equals((Object)sQLWarning6));
      assertFalse(sQLWarning0.equals((Object)sQLWarning4));
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning1.equals((Object)sQLWarning4));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(sQLWarning1.equals((Object)sQLWarning2));
      assertFalse(sQLWarning1.equals((Object)sQLWarning6));
      assertFalse(sQLWarning1.equals((Object)sQLWarning3));
      assertFalse(sQLWarning1.equals((Object)sQLWarning5));
      assertNotNull(sQLWarning7);
      assertEquals("w4cX", sQLWarning7.getMessage());
      assertEquals("java.sql.SQLWarning: w4cX", sQLWarning7.toString());
      assertEquals("mswKw9^]7i", sQLWarning7.getSQLState());
      assertEquals((-1098), sQLWarning7.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      assertEquals("", sQLWarning1.getSQLState());
      assertNull(sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation((-1098), false, false, (-1098), 1, sQLWarning7);
      assertFalse(sQLWarning7.equals((Object)sQLWarning1));
      assertFalse(sQLWarning7.equals((Object)sQLWarning6));
      assertFalse(sQLWarning7.equals((Object)sQLWarning4));
      assertFalse(sQLWarning7.equals((Object)sQLWarning3));
      assertFalse(sQLWarning7.equals((Object)sQLWarning0));
      assertFalse(sQLWarning7.equals((Object)sQLWarning5));
      assertFalse(sQLWarning7.equals((Object)sQLWarning2));
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning0.equals((Object)sQLWarning3));
      assertFalse(sQLWarning0.equals((Object)sQLWarning5));
      assertFalse(sQLWarning0.equals((Object)sQLWarning6));
      assertFalse(sQLWarning0.equals((Object)sQLWarning4));
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning0.equals((Object)sQLWarning7));
      assertFalse(sQLWarning1.equals((Object)sQLWarning7));
      assertFalse(sQLWarning1.equals((Object)sQLWarning4));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(sQLWarning1.equals((Object)sQLWarning2));
      assertFalse(sQLWarning1.equals((Object)sQLWarning6));
      assertFalse(sQLWarning1.equals((Object)sQLWarning3));
      assertFalse(sQLWarning1.equals((Object)sQLWarning5));
      assertNotNull(dataTruncation0);
      assertEquals("w4cX", sQLWarning7.getMessage());
      assertEquals("java.sql.SQLWarning: w4cX", sQLWarning7.toString());
      assertEquals("mswKw9^]7i", sQLWarning7.getSQLState());
      assertEquals((-1098), sQLWarning7.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      assertEquals("", sQLWarning1.getSQLState());
      assertNull(sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      
      SQLWarning sQLWarning8 = dataTruncation0.getNextWarning();
      assertFalse(sQLWarning7.equals((Object)sQLWarning1));
      assertFalse(sQLWarning7.equals((Object)sQLWarning6));
      assertFalse(sQLWarning7.equals((Object)sQLWarning4));
      assertFalse(sQLWarning7.equals((Object)sQLWarning3));
      assertFalse(sQLWarning7.equals((Object)sQLWarning0));
      assertFalse(sQLWarning7.equals((Object)sQLWarning5));
      assertFalse(sQLWarning7.equals((Object)sQLWarning2));
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning0.equals((Object)sQLWarning3));
      assertFalse(sQLWarning0.equals((Object)sQLWarning5));
      assertFalse(sQLWarning0.equals((Object)sQLWarning6));
      assertFalse(sQLWarning0.equals((Object)sQLWarning4));
      assertFalse(sQLWarning0.equals((Object)sQLWarning2));
      assertFalse(sQLWarning0.equals((Object)sQLWarning7));
      assertFalse(sQLWarning1.equals((Object)sQLWarning7));
      assertFalse(sQLWarning1.equals((Object)sQLWarning4));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(sQLWarning1.equals((Object)sQLWarning2));
      assertFalse(sQLWarning1.equals((Object)sQLWarning6));
      assertFalse(sQLWarning1.equals((Object)sQLWarning3));
      assertFalse(sQLWarning1.equals((Object)sQLWarning5));
      assertNull(sQLWarning8);
      assertNotSame(sQLWarning7, sQLWarning1);
      assertNotSame(sQLWarning7, sQLWarning6);
      assertNotSame(sQLWarning7, sQLWarning4);
      assertNotSame(sQLWarning7, sQLWarning3);
      assertNotSame(sQLWarning7, sQLWarning0);
      assertNotSame(sQLWarning7, sQLWarning5);
      assertNotSame(sQLWarning7, sQLWarning2);
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning0, sQLWarning3);
      assertNotSame(sQLWarning0, sQLWarning5);
      assertNotSame(sQLWarning0, sQLWarning6);
      assertNotSame(sQLWarning0, sQLWarning4);
      assertNotSame(sQLWarning0, sQLWarning2);
      assertNotSame(sQLWarning0, sQLWarning7);
      assertNotSame(sQLWarning1, sQLWarning7);
      assertNotSame(sQLWarning1, sQLWarning4);
      assertNotSame(sQLWarning1, sQLWarning0);
      assertNotSame(sQLWarning1, sQLWarning2);
      assertNotSame(sQLWarning1, sQLWarning6);
      assertNotSame(sQLWarning1, sQLWarning3);
      assertNotSame(sQLWarning1, sQLWarning5);
      assertEquals("w4cX", sQLWarning7.getMessage());
      assertEquals("java.sql.SQLWarning: w4cX", sQLWarning7.toString());
      assertEquals("mswKw9^]7i", sQLWarning7.getSQLState());
      assertEquals((-1098), sQLWarning7.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      assertEquals("", sQLWarning1.getSQLState());
      assertNull(sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      
      sQLWarningArray0[7] = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLWarningArray0, (-2671));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      HashMap<Object, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Object, String>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      Throwable[] throwableArray0 = sQLSyntaxErrorException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, throwableArray0.length);
      
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(13, stackTraceElementArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      int int0 = 2743;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.replace("", clientInfoStatus0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 2743, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "d2W";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("d2W");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("d2W", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: d2W", sQLInvalidAuthorizationSpecException0.toString());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "&@lf4ONC1A", (-607), 755);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",Zh@{%cp)", ",Zh@{%cp)", 0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: ,Zh@{%cp)", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(",Zh@{%cp)", sQLTransientConnectionException0.getMessage());
      assertEquals(",Zh@{%cp)", sQLTransientConnectionException0.getSQLState());
      
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      sQLExceptionArray0[1] = (SQLException) sQLSyntaxErrorException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, ",Zh@{%cp)", 0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(",Zh@{%cp)", sQLNonTransientException0.getSQLState());
      
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      sQLExceptionArray0[3] = (SQLException) sQLRecoverableException0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLExceptionArray0[0]);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.SQLTransientConnectionException: ,Zh@{%cp)", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientConnectionException: ,Zh@{%cp)", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(7, sQLExceptionArray0.length);
      
      sQLExceptionArray0[4] = (SQLException) batchUpdateException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 10);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(10, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "");
      assertFalse(sQLNonTransientException1.equals((Object)sQLNonTransientException0));
      assertNotNull(sQLNonTransientException1);
      assertEquals("", sQLNonTransientException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException1.toString());
      assertEquals("", sQLNonTransientException1.getMessage());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException1;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(7, sQLExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<LinkedList>>) objectArrayListIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackException0.getStackTrace();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (-1648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLDataException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int int0 = (-1335);
      SQLDataException sQLDataException1 = new SQLDataException("", "Entry does not exist: ", (-1335));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", sQLDataException1);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "Entry does not exist: ", (-1335));
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLDataException1);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      int int1 = 16;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "Entry does not exist: ", 16, sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedException1.spliterator();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      String string0 = "s;";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s;", "Entry does not exist: ", sQLDataException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "(UZuAW'#H");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      int int0 = (-1);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(iIOMetadataNode1, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("ExceptionClosure invoked", "ExceptionClosure invoked", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("", "ExceptionClosure invoked", (-416));
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException4;
      SQLException sQLException0 = new SQLException("ad];;B", "", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException6;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }
}
