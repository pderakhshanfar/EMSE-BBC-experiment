/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 11:05:15 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      singletonListIterator0.reset();
      IteratorUtils.get((Iterator<SQLWarning>) singletonListIterator0, 0);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedHashSet0.add(locale_FilteringMode0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLWarning0);
      IteratorUtils.singletonListIterator(sQLDataException0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      SQLException sQLException0 = new SQLException("");
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", "", 189, sQLException0);
      sQLDataExceptionArray0[4] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap");
      sQLDataExceptionArray0[5] = sQLDataException2;
      sQLDataExceptionArray0[6] = sQLDataException0;
      sQLDataExceptionArray0[7] = sQLDataException0;
      sQLDataExceptionArray0[8] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 2, 4);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(vector0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 8);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      vector0.addElement(locale_FilteringMode0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) loopingListIterator0, (Transformer<? super Locale.FilteringMode, String>) invokerTransformer0, "1WA%pO,\"W^Lv`/)", "1WA%pO,\"W^Lv`/)", "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "CjwLaL-";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("CjwLaL-", "CjwLaL-", 3547, sQLNonTransientConnectionException0);
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) factoryTransformer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Transformer must not be null", "G)O5>rc.X8y");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("]");
      IteratorUtils.toArray(iterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("]");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("}C");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("]");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("}C");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("]");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode();
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 475);
      Boolean[] booleanArray0 = new Boolean[6];
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate2);
      PredicateTransformer<Vector<SQLDataException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLDataException>>(nullIsExceptionPredicate0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      Boolean boolean0 = predicateTransformer0.transform(vector0);
      booleanArray0[0] = boolean0;
      PredicateTransformer<Vector<SQLDataException>> predicateTransformer1 = new PredicateTransformer<Vector<SQLDataException>>(predicate1);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      Boolean boolean1 = predicateTransformer1.transform(stack0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer1.transform(stack0);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(stack0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer1.transform(stack0);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer1.transform(stack0);
      booleanArray0[5] = boolean5;
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0, 3);
      Transformer<Boolean, String> transformer0 = InvokerTransformer.invokerTransformer("=@@wZR7e");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Boolean>) resettableIterator0, (Transformer<? super Boolean, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '=@@wZR7e' on 'class java.lang.Boolean' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = (-1131);
      int int1 = (-1);
      DataTruncation dataTruncation0 = new DataTruncation((-1131), true, true, (-1131), (-1));
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Transformer<SQLWarning, SQLIntegrityConstraintViolationException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Class<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableListIterator0, class0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("_t=m94s", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("){<Ts(tQiIg", "){<Ts(tQiIg");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Transformer<BatchUpdateException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      int[] intArray0 = new int[8];
      intArray0[0] = 19;
      intArray0[1] = 19;
      intArray0[2] = 19;
      intArray0[3] = 19;
      intArray0[4] = 19;
      intArray0[5] = 19;
      intArray0[6] = 1202;
      intArray0[7] = 19;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, 19, intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "NodeList must not be null", "");
      Hashtable<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>(hashtable0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.toString((Iterator<ClientInfoStatus>) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) null, (Closure<? super SQLFeatureNotSupportedException>) closure0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = arrayDeque0.descendingIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(arrayList0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) reverseListIterator0, (Predicate<? super BatchUpdateException>) andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EmptyOrderedIterator.emptyOrderedIterator();
      StringValueTransformer.stringValueTransformer();
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 1, 1);
      dataTruncation0.getNextWarning();
      IteratorUtils.singletonListIterator((SQLWarning) dataTruncation0);
      IteratorUtils.getIterator((Object) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLException sQLException0 = new SQLException("\"0cp~n&HPNUEEP46@f");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("\"0cp~n&HPNUEEP46@f", "e49kIr)", (-295), sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("e49kIr)", "", (-295), sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 1, (-2007));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("PGA~vvJKY'?*afwto$");
      IteratorUtils.getIterator(iIOMetadataNode0);
      Integer integer0 = new Integer(893);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 107, 6791);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.getIterator("");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) null, 1208);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      Hashtable<Object, SQLDataException> hashtable0 = new Hashtable<Object, SQLDataException>();
      Transformer<Object, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) hashtable0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("y9|%iPcJ4'(B");
      ConstantFactory.constantFactory(iIOMetadataNode0);
      Transformer<Object, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0, (Transformer<? super SQLException, String>) transformer1);
      OrderedMapIterator<SQLTransientConnectionException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<Vector>, StringTokenizer>) orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("y9|%iPcJ4'(B");
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) singletonListIterator0, 0L);
      IteratorUtils.get((Iterator<String>) skippingIterator0, 0);
      HashSet<SQLNonTransientException>[] hashSetArray0 = (HashSet<SQLNonTransientException>[]) Array.newInstance(HashSet.class, 6);
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      hashSetArray0[0] = hashSet0;
      HashSet<SQLNonTransientException> hashSet1 = new HashSet<SQLNonTransientException>();
      hashSetArray0[1] = hashSet1;
      HashSet<SQLNonTransientException> hashSet2 = new HashSet<SQLNonTransientException>();
      hashSetArray0[2] = hashSet2;
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      hashSetArray0[3] = (HashSet<SQLNonTransientException>) linkedHashSet0;
      HashSet<SQLNonTransientException> hashSet3 = new HashSet<SQLNonTransientException>();
      OrderedMapIterator<Properties, SQLDataException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends SQLDataException>) orderedMapIterator1);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) linkedHashSet0);
      IteratorUtils.matchesAny((Iterator<ArrayDeque<LinkedHashSet>>) listIterator0, (Predicate<? super ArrayDeque<LinkedHashSet>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.size((Iterator<?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.size((Iterator<?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 1149, 1149);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-544), true, true, 18, (-544), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(630, true, true, 91, 18, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(10, true, true, 869, (-544), dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(91, false, true, 0, 3474);
      dataTruncationArray0[4] = dataTruncation4;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) objectArrayListIterator0, class0);
      UniquePredicate<SQLException> uniquePredicate1 = new UniquePredicate<SQLException>();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("NodeList must not be null");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iterator0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.arrayIterator(objectArray0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("K_Es$Ma~e!", batchUpdateException0);
      batchUpdateException0.setNextException(sQLNonTransientConnectionException0);
      singletonIterator0.next();
      IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "]l9d!zYbhW&MX^=", "]l9d!zYbhW&MX^=", "JFyDam} UGS>r");
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      OrPredicate<ClientInfoStatus> orPredicate1 = new OrPredicate<ClientInfoStatus>(predicate1, orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("|R!NpRs@ ^3Jv+\b1", "|R!NpRs@ ^3Jv+\b1", 2514);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyOrderedIterator();
      DataTruncation dataTruncation0 = new DataTruncation(2631, false, true, (-708), (-439));
      dataTruncation0.getNextWarning();
      IteratorUtils.singletonListIterator((SQLWarning) null);
      DataTruncation dataTruncation1 = new DataTruncation(191, false, true, (-708), 5);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 1);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      InvokerTransformer<SQLException, SQLWarning> invokerTransformer0 = new InvokerTransformer<SQLException, SQLWarning>("|R!NpRs@ ^3Jv+\b1", classArray0, classArray0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator((SQLWarning) dataTruncation1, (Transformer<? super SQLWarning, ? extends SQLWarning>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 3209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '|R!NpRs@ ^3Jv+\b1' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.arrayIterator(objectArray0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = "4ZY 3rHKq\"A";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "4ZY 3rHKq\"A", "]l9d!zYbhW&MX^=", "]l9d!zYbhW&MX^=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<ClientInfoStatus, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<ClientInfoStatus> listIteratorWrapper0 = new ListIteratorWrapper<ClientInfoStatus>(mapIterator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate<ClientInfoStatus> orPredicate0 = new OrPredicate<ClientInfoStatus>(predicate0, predicate0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) listIteratorWrapper0, (Predicate<? super ClientInfoStatus>) orPredicate0);
      IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>) listIterator0, (Iterator<? extends ClientInfoStatus>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator1, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      arrayDeque0.push(sQLTransactionRollbackException0);
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) arrayDeque1);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("(?", "(?");
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("(?");
      ConstantTransformer.constantTransformer(sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) mapIterator0, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "The closure array must not be null";
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) stack0);
      SkippingIterator<SQLTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) resettableListIterator0, 1320L);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) skippingIterator0, (Transformer<? super SQLTransientException, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = 1L;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "org.apache.commons.collections4.IteratorUtils", 3, longArray0, sQLRecoverableException0);
      IteratorUtils.getIterator(batchUpdateException0);
      EmptyListIterator.resettableEmptyListIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      IteratorUtils.singletonIterator(clientInfoStatus0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.SwitchClosure", (Throwable) null);
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(sQLIntegrityConstraintViolationException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.SwitchClosure", "FF#~e3\"n");
      sQLIntegrityConstraintViolationException0.setNextException(sQLRecoverableException0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orPredicate0, 2434, 2434);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("^&g44nS#QY", "The collection must not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("The collection must not be null", sQLNonTransientConnectionException1);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException2);
      SQLTransientException sQLTransientException0 = new SQLTransientException(">)lJ_C\\n[}XL");
      ConstantTransformer.constantTransformer(sQLTransientException0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) mapIterator0, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 2410, 2410);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1437);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(326);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      Iterator<Integer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) resettableIterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      Closure<Integer> closure1 = ChainedClosure.chainedClosure((Closure<? super Integer>[]) closureArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super Integer>) closure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<ClientInfoStatus> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.singletonIterator(clientInfoStatus0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("");
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.getIterator("xS`r|OiJg_lWvX");
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<ClientInfoStatus> listIteratorWrapper0 = new ListIteratorWrapper<ClientInfoStatus>(orderedIterator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) listIteratorWrapper0, (Predicate<? super ClientInfoStatus>) notPredicate0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<ClientInfoStatus, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<ClientInfoStatus> listIteratorWrapper0 = new ListIteratorWrapper<ClientInfoStatus>(mapIterator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate<ClientInfoStatus> orPredicate0 = new OrPredicate<ClientInfoStatus>(predicate0, predicate0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) listIteratorWrapper0, (Predicate<? super ClientInfoStatus>) orPredicate0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>) listIterator0, (Iterator<? extends ClientInfoStatus>) mapIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) iterator0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      sQLTimeoutException0.printStackTrace();
      EmptyMapIterator.emptyMapIterator();
      sQLTimeoutException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException1);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator1 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) iterator1);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null, (Collection<? super String>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) null, (Collection<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) uniquePredicate0;
      objectArray0[2] = (Object) uniquePredicate0;
      objectArray0[3] = (Object) uniquePredicate0;
      objectArray0[4] = (Object) predicate0;
      objectArray0[5] = (Object) uniquePredicate0;
      objectArray0[6] = (Object) null;
      IteratorUtils.arrayIterator(objectArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 93;
      intArray0[1] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      singletonIterator0.next();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) orderedIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "Eya$(r+m(4AM|u/-b ", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      IteratorUtils.getIterator(hashMap0);
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      IteratorUtils.singletonListIterator(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("NodeList must not be nuGl");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iterator0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.arrayIterator(objectArray0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("NodeList must not be nuGl");
      singletonIterator0.next();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, (String) null, "]l9d!zYbhW&MX^=", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("");
      String[] stringArray0 = new String[10];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.size((Iterator<?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]l9d!zYbhW&MX^=", (String) null, 0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", "", 4161);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer1 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Iterator<Properties> iterator0 = linkedList0.descendingIterator();
      iteratorArray0[0] = iterator0;
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, 1254L);
      iteratorArray0[1] = (Iterator<Properties>) boundedIterator0;
      Iterator<Properties> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
      Iterator<SQLNonTransientConnectionException> iterator2 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator1, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) constantTransformer1);
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) iterator2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>("xa`r|OiJg_lWvX");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      orPredicate0.evaluate(uniquePredicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Z;7hIB Dgbv`qvg0", "Bz!ayMF:co)_Z)1l1O", sQLNonTransientConnectionException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLTimeoutException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IterableUtils$5", "Bz!ayMF:co)_Z)1l1O", sQLWarning0);
      IteratorUtils.singletonListIterator(sQLNonTransientConnectionException1);
      Locale.LanguageRange[] locale_LanguageRangeArray0 = new Locale.LanguageRange[0];
      ResettableListIterator<Locale.LanguageRange> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_LanguageRangeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ListIterator<Locale.LanguageRange> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.LanguageRange>) resettableListIterator0, (Predicate<? super Locale.LanguageRange>) predicate0);
      IteratorUtils.toListIterator((Iterator<? extends Locale.LanguageRange>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<ClientInfoStatus, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<ClientInfoStatus> listIteratorWrapper0 = new ListIteratorWrapper<ClientInfoStatus>(mapIterator0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      int[] intArray0 = new int[5];
      intArray0[0] = 51;
      intArray0[1] = 628;
      intArray0[2] = 10;
      intArray0[3] = 1;
      intArray0[4] = (-2121);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("C)kxJRxO", intArray0, batchUpdateException0);
      orPredicate0.evaluate(batchUpdateException1);
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.find((Iterator<Object>) orderedIterator0, (Predicate<? super Object>) orPredicate0);
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(":-\"rttk(>0sy4", ":-\"rttk(>0sy4");
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("&ig");
      ConstantTransformer.constantTransformer(sQLTransientException0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) mapIterator1, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator1, (Iterator<? extends Properties>) mapIterator1);
      SingletonListIterator<Iterator<Properties>> singletonListIterator0 = new SingletonListIterator<Iterator<Properties>>(zippingIterator0);
      IteratorUtils.matchesAll((Iterator<Iterator<Properties>>) singletonListIterator0, (Predicate<? super Iterator<Properties>>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("");
      IteratorUtils.size((Iterator<?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]l9d!zYbhW&MX^=", (String) null, 0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyOrderedIterator();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 625, 0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<ClientInfoStatus, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<ClientInfoStatus> listIteratorWrapper0 = new ListIteratorWrapper<ClientInfoStatus>(mapIterator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate<ClientInfoStatus> orPredicate0 = new OrPredicate<ClientInfoStatus>(predicate0, predicate0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) listIteratorWrapper0, (Predicate<? super ClientInfoStatus>) orPredicate0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>) listIterator0, (Iterator<? extends ClientInfoStatus>) mapIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) iterator0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      sQLTimeoutException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException1);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) mapIterator1, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) iterator1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTimeoutException0);
      EmptyMapIterator.emptyMapIterator();
      sQLTimeoutException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      String string0 = "";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.IteratorUtils");
      ConstantTransformer<BatchUpdateException, String> constantTransformer1 = new ConstantTransformer<BatchUpdateException, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.getIterator("NodeList must not be null");
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z-!/9#o", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLTransactionRollbackException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("NodeList must not be null", sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("NodeList must not be null", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "NodeList must not be null", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "", (-1055), sQLTransactionRollbackException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "p>x%<#{CE7f_='", 710, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Z-!/9#o", "", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) uniquePredicate0);
      UniquePredicate<SQLException> uniquePredicate1 = new UniquePredicate<SQLException>();
      PredicateTransformer<SQLWarning> predicateTransformer0 = new PredicateTransformer<SQLWarning>(uniquePredicate1);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(sQLTransientException0, (-864), 710);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      orPredicate0.evaluate(uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) uniquePredicate0);
      UniquePredicate<SQLException> uniquePredicate1 = new UniquePredicate<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.IteratorUtils");
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(nullIsExceptionPredicate0, (Predicate<? super Object>) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) constantTransformer0;
      objectArray0[1] = (Object) constantTransformer0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "t^hN_S";
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Iterator<BatchUpdateException> iterator0 = null;
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.IteratorUtils");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.IteratorUtils");
      ConstantTransformer<BatchUpdateException, String> constantTransformer1 = new ConstantTransformer<BatchUpdateException, String>("set() is not supported");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "org.apache.commons.collections4.IteratorUtils", (String) null, "set() is not supported");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("NodeList must not be null");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iterator0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.arrayIterator(objectArray0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      singletonIterator0.next();
      IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "]l9d!zYbhW&MX^=", "]l9d!zYbhW&MX^=", "JFyDam} UGS>r");
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      linkedHashSet0.add(sQLFeatureNotSupportedException0);
      HashSet<SQLNonTransientException> hashSet1 = new HashSet<SQLNonTransientException>();
      HashSet<SQLNonTransientException> hashSet2 = new HashSet<SQLNonTransientException>(hashSet1);
      SingletonIterator<HashSet<SQLNonTransientException>> singletonIterator1 = new SingletonIterator<HashSet<SQLNonTransientException>>(linkedHashSet0);
      IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator0, class0);
      IteratorUtils.size(singletonIterator1);
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.arrayIterator(propertiesArray0, 1);
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator1, (Iterator<? extends Properties>) resettableIterator1);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super Properties>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) hashSet0);
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      TransformerPredicate<SQLTransientException> transformerPredicate0 = new TransformerPredicate<SQLTransientException>(transformer0);
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 1655);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Vector<ClientInfoStatus> vector0 = new Vector<ClientInfoStatus>();
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends ClientInfoStatus>) vector0);
      ListIteratorWrapper<ClientInfoStatus> listIteratorWrapper0 = new ListIteratorWrapper<ClientInfoStatus>(resettableIterator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate<ClientInfoStatus> orPredicate0 = new OrPredicate<ClientInfoStatus>(predicate0, predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) listIteratorWrapper0, (Predicate<? super ClientInfoStatus>) predicate1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>) listIterator0, (Iterator<? extends ClientInfoStatus>) listIteratorWrapper0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) listIteratorWrapper0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Cannot add to list until next() or previous() called", sQLTransientConnectionException0);
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException1);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Class<Boolean> class0 = Boolean.class;
      ServiceLoader<Boolean> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ConstantTransformer.constantTransformer(serviceLoader0);
      ConstantTransformer.constantTransformer((SQLTransientException) sQLTimeoutException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) mapIterator0, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      SingletonListIterator<Iterator<Properties>> singletonListIterator0 = new SingletonListIterator<Iterator<Properties>>(zippingIterator0);
      IteratorUtils.matchesAll((Iterator<Iterator<Properties>>) singletonListIterator0, (Predicate<? super Iterator<Properties>>) predicate0);
      ZippingIterator<SQLNonTransientException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("}8\"");
      Transformer<SQLNonTransientException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) zippingIterator1, (Transformer<? super SQLNonTransientException, String>) transformer0, "}8\"", "Cannot add to list until next() or previous() called", "Cannot add to list until next() or previous() called");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot add to list until next() or previous() called");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.IteratorUtils");
      ConstantTransformer<BatchUpdateException, String> constantTransformer1 = new ConstantTransformer<BatchUpdateException, String>("");
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "]l9d!zYbhW&MX^=", "org.apache.commons.collections4.IteratorUtils", "t^hN_S");
      String[] stringArray0 = new String[1];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.size((Iterator<?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]l9d!zYbhW&MX^=", (String) null, 0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyOrderedIterator();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 625, 0);
      dataTruncation0.getNextWarning();
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator((SQLWarning) null);
      IteratorUtils.get((Iterator<SQLWarning>) listIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) uniquePredicate0);
      DataTruncation dataTruncation0 = new DataTruncation(5, true, true, 5, (-1421));
      SQLDataException sQLDataException0 = new SQLDataException("F{<zHZm,z:?FK,nO,S", "w|&6UN[XCIr{<:", dataTruncation0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("w|&6UN[XCIr{<:", (int[]) null, dataTruncation0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Cannot use setValue() when the object being set is already in the map", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", (int[]) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException1);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      sQLDataException0.getStackTrace();
      Iterator<Integer> iterator0 = arrayList0.iterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<ServiceLoader<SQLFeatureNotSupportedException>> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator1, defaultEquator0);
      Iterator<SQLWarning> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (Predicate<? super SQLWarning>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) iterator1, (Iterator<?>) resettableListIterator1, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<ClientInfoStatus, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<ClientInfoStatus> listIteratorWrapper0 = new ListIteratorWrapper<ClientInfoStatus>(mapIterator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate<ClientInfoStatus> orPredicate0 = new OrPredicate<ClientInfoStatus>(predicate0, predicate0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) listIteratorWrapper0, (Predicate<? super ClientInfoStatus>) orPredicate0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>) listIterator0, (Iterator<? extends ClientInfoStatus>) mapIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) iterator0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException1);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      ConstantTransformer.constantTransformer((SQLTransientException) sQLTransientConnectionException1);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) mapIterator1, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator1, (Iterator<? extends Properties>) mapIterator1);
      SingletonListIterator<Iterator<Properties>> singletonListIterator0 = new SingletonListIterator<Iterator<Properties>>(zippingIterator0);
      IteratorUtils.matchesAll((Iterator<Iterator<Properties>>) singletonListIterator0, (Predicate<? super Iterator<Properties>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>("xa`r|OiJg_lWvX");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      orPredicate0.evaluate(uniquePredicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) orPredicate0);
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("(?", "(?");
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("predicate must not be null.");
      ConstantTransformer.constantTransformer(sQLTransientException0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) mapIterator0, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      SingletonListIterator<Iterator<Properties>> singletonListIterator1 = new SingletonListIterator<Iterator<Properties>>((Iterator<Properties>) null);
      IteratorUtils.matchesAll((Iterator<Iterator<Properties>>) singletonListIterator1, (Predicate<? super Iterator<Properties>>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 568;
      intArray0[1] = 2;
      intArray0[2] = 899;
      intArray0[3] = 1;
      intArray0[4] = 910;
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate1);
      OrPredicate<Object> orPredicate1 = new OrPredicate<Object>(orPredicate0, orPredicate0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) orPredicate0;
      objectArray0[1] = (Object) 2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) orPredicate0;
      objectArray0[4] = (Object) 910;
      IteratorUtils.arrayIterator(objectArray0);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      AndPredicate.andPredicate((Predicate<? super Object>) onePredicate0, (Predicate<? super Object>) predicate1);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) onePredicate0);
      IteratorUtils.toString((Iterator<Boolean>) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation(547, false, false, 1227, 1227);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-813), false, false, 547, (-196), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(3, true, true, 3, 4007, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      SQLDataException sQLDataException0 = new SQLDataException(dataTruncation2);
      DataTruncation dataTruncation3 = new DataTruncation((-1667), true, false, 547, 0, sQLDataException0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, true, true, (-1667), 5, sQLDataException0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-522), false, true, 93, 4007, dataTruncation0);
      dataTruncationArray0[5] = dataTruncation5;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (long) (-522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<ClientInfoStatus, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<ClientInfoStatus> listIteratorWrapper0 = new ListIteratorWrapper<ClientInfoStatus>(mapIterator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate<ClientInfoStatus> orPredicate0 = new OrPredicate<ClientInfoStatus>(predicate0, predicate0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) listIteratorWrapper0, (Predicate<? super ClientInfoStatus>) orPredicate0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>) listIterator0, (Iterator<? extends ClientInfoStatus>) mapIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) iterator0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0, true);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) singletonIterator0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("NodeList must not be null");
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) iterator0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S9im2]\"R:hc");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(orPredicate0);
      MapIterator<SQLTimeoutException, TreeSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) nullIsExceptionPredicate0);
      IteratorUtils.zippingIterator(iterator0, (Iterator<?>) mapIterator0, iterator0);
      ArrayListIterator<ArrayDeque<DataTruncation>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<ArrayDeque<DataTruncation>>((Object) null, (-1001), (-364));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) uniquePredicate0);
      UniquePredicate<SQLException> uniquePredicate1 = new UniquePredicate<SQLException>();
      PredicateTransformer<SQLWarning> predicateTransformer0 = new PredicateTransformer<SQLWarning>((Predicate<? super SQLWarning>) null);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(closure0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("t^hN_S");
      Transformer<BatchUpdateException, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super BatchUpdateException>) uniquePredicate0, (Transformer<? super BatchUpdateException, ? extends String>) transformer0, (Transformer<? super BatchUpdateException, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer1, "<3S3u(", "t^hN_S", "t^hN_S");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Predicate must not be null";
      stringArray0[1] = "Predicate must not be null";
      stringArray0[2] = "Predicate must not be null";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.size((Iterator<?>) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Predicate must not be null", "rJBRGn6i");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientException0);
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      Hashtable<Object, SQLDataException> hashtable0 = new Hashtable<Object, SQLDataException>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) hashtable0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) singletonIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      SQLException sQLException0 = new SQLException("", "7:|*\"L", 568);
      DataTruncation dataTruncation0 = new DataTruncation(568, true, true, 125, 512, sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", dataTruncation0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      arrayDeque0.offerFirst(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("7:|*\"L", (String) null);
      arrayDeque0.push(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "o", sQLTransactionRollbackException0);
      arrayDeque0.add(sQLTransactionRollbackException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (long) 348, (long) 512);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) boundedIterator0, (Iterator<? extends SQLException>) listIterator0);
      IteratorUtils.size(listIterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E(Uesxo");
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(nullIsFalsePredicate0);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) nullIsExceptionPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.getIterator("xa`r|OiJg_lWvX");
      SQLException sQLException0 = new SQLException(";)G$", ";)G$", 1117);
      DataTruncation dataTruncation0 = new DataTruncation(348, true, true, 348, 512, sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("kO0gy?dpX@NIj4.67", dataTruncation0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("bI`6>cFn", (String) null, sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("xa`r|OiJg_lWvX", "3r^NUxpfW", sQLNonTransientException0);
      arrayDeque0.offerFirst(sQLTransactionRollbackException1);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("m", "bI`6>cFn");
      arrayDeque0.push(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "xa`r|OiJg_lWvX", sQLTransactionRollbackException1);
      arrayDeque0.add(sQLTransactionRollbackException1);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, 1792L, 1001L);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) boundedIterator0, (Iterator<? extends SQLException>) boundedIterator0);
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLTransactionRollbackException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      SQLException sQLException0 = new SQLException("", "org.apache.commons.collections4.iterators.SingletonListIterator", 1284);
      DataTruncation dataTruncation0 = new DataTruncation(1284, false, false, 125, 348, sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, dataTruncation0);
      arrayDeque0.offerFirst(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, (String) null);
      arrayDeque0.push(sQLTransactionRollbackException1);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("NodeList must not be null", (String) null, sQLTransactionRollbackException1);
      arrayDeque0.add(sQLTransactionRollbackException1);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0, 224L, 1792L);
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 568;
      intArray0[1] = 2;
      intArray0[2] = 899;
      intArray0[3] = 1;
      intArray0[4] = 910;
      intArray0[5] = 1235;
      intArray0[6] = 2939;
      DataTruncation dataTruncation0 = new DataTruncation(2939, false, false, 5, 568);
      SQLDataException sQLDataException0 = new SQLDataException("w|&6UN[XCIr{<:", "org.apache.commons.collections4.list.TreeList$TreeListIterator", dataTruncation0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("suffix may not be null", intArray0, sQLDataException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<Integer> iterator0 = arrayList0.iterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) listIterator0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (Predicate<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 568;
      intArray0[0] = 568;
      intArray0[1] = 2;
      intArray0[2] = 899;
      intArray0[3] = 1;
      intArray0[4] = 910;
      intArray0[5] = 1235;
      intArray0[6] = 2939;
      DataTruncation dataTruncation0 = new DataTruncation(2939, false, false, 5, 568);
      SQLDataException sQLDataException0 = new SQLDataException("w|&6UN[XCIr{<:", "org.apache.commons.collections4.list.TreeList$TreeListIterator", dataTruncation0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("suffix may not be null", intArray0, sQLDataException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      sQLDataException0.getStackTrace();
      Iterator<Integer> iterator0 = arrayList0.iterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) listIterator0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (Predicate<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 93);
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(list0);
      EmptyMapIterator.emptyMapIterator();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", ".9z(]IR[", sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apawhe.commons.collections4.iterators.ObjectArrayListIterator", "");
      String[] stringArray0 = new String[5];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) objectArrayListIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) skippingIterator0, 630);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 625
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale.FilteringMode.values();
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("S$g+L_$o(@fQ_8c", sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) uniquePredicate0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Predicate must not be null";
      stringArray0[1] = "uk'9,1";
      stringArray0[2] = "uk'9,1";
      stringArray0[4] = "uk'9,1";
      stringArray0[5] = "uk'9,1";
      stringArray0[6] = "Predicate must not be null";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.size(objectArrayIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientException0);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<Boolean>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("t^hN_S");
      Transformer<BatchUpdateException, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super BatchUpdateException>) uniquePredicate0, (Transformer<? super BatchUpdateException, ? extends String>) transformer0, (Transformer<? super BatchUpdateException, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer1, "<3S3u(", "t^hN_S", "t^hN_S");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Predicate must not be null";
      stringArray0[1] = "Predicate must not be null";
      stringArray0[2] = "Predicate must not be null";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.size((Iterator<?>) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Predicate must not be null", "rJBRGn6i");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientException0);
      EmptyIterator.resettableEmptyIterator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Cannot use setValue() when the object being set is already in the map");
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Cannot use setValue() when the object being set is already in the map");
      ConstantFactory.constantFactory(iIOMetadataNode0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0, (Transformer<? super SQLException, String>) transformer0);
      OrderedMapIterator<SQLTransientConnectionException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<Vector>, StringTokenizer>) orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("Cannot use setValue() when the object being set is already in the map");
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<String>) singletonListIterator0, (-1761L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      Hashtable<Object, SQLDataException> hashtable0 = new Hashtable<Object, SQLDataException>();
      Transformer<Object, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) hashtable0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("y9|%iPcJ4'(B");
      ConstantFactory.constantFactory(iIOMetadataNode0);
      Transformer<Object, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0, (Transformer<? super SQLException, String>) transformer1);
      OrderedMapIterator<SQLTransientConnectionException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<Vector>, StringTokenizer>) orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("y9|%iPcJ4'(B");
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) singletonListIterator0, 0L);
      IteratorUtils.get((Iterator<String>) skippingIterator0, 0);
      HashSet<SQLNonTransientException>[] hashSetArray0 = (HashSet<SQLNonTransientException>[]) Array.newInstance(HashSet.class, 6);
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      hashSetArray0[0] = hashSet0;
      HashSet<SQLNonTransientException> hashSet1 = new HashSet<SQLNonTransientException>();
      hashSetArray0[1] = hashSet1;
      HashSet<SQLNonTransientException> hashSet2 = new HashSet<SQLNonTransientException>();
      hashSetArray0[2] = hashSet2;
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      hashSetArray0[3] = (HashSet<SQLNonTransientException>) linkedHashSet0;
      HashSet<SQLNonTransientException> hashSet3 = new HashSet<SQLNonTransientException>();
      hashSetArray0[4] = hashSet3;
      HashSet<SQLNonTransientException> hashSet4 = new HashSet<SQLNonTransientException>(hashSet0);
      hashSetArray0[5] = hashSet4;
      IteratorUtils.arrayIterator(hashSetArray0);
      IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.emptyIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.isEmpty(listIterator0);
      IteratorUtils.isEmpty(listIterator0);
      int int0 = 0;
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Boolean>) null, (Predicate<? super Boolean>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 93);
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(list0);
      EmptyMapIterator.emptyMapIterator();
      FactoryTransformer<SQLException, SQLDataException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLDataException>((Factory<? extends SQLDataException>) null);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(arrayList0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("", "Offset parameter must not be negative.", 1505);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-1), sQLDataException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 1505);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IteratorUtils.isEmpty(orderedIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\"?j@MNFiPrbQ'", "U6Xi(E@xT", 4007);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 4007);
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(list0);
      EmptyMapIterator.emptyMapIterator();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("<$*cr$ifK$", "<$*cr$ifK$", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("<$*cr$ifK$", "");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "U6Xi(E@xT";
      stringArray0[1] = "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory";
      stringArray0[2] = ".9z(]IR[";
      stringArray0[3] = "\"?j@MNFiPrbQ'";
      stringArray0[4] = "U6Xi(E@xT";
      stringArray0[5] = "\"?j@MNFiPrbQ'";
      stringArray0[6] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      IteratorUtils.skippingIterator((Iterator<String>) objectArrayListIterator0, (long) 93);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) objectArrayListIterator0, 472);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 472
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("xa`r|OiJg_lWvX");
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) iterator0;
      ResettableListIterator<Object> resettableListIterator0 = new SingletonListIterator<Object>("xa`r|OiJg_lWvX");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) orPredicate0);
      objectArray0[1] = (Object) "xa`r|OiJg_lWvX";
      IteratorUtils.arrayIterator(objectArray0);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) orPredicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) predicate1);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("eMr][\t", "xa`r|OiJg_lWvX");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      Hashtable<Object, SQLDataException> hashtable0 = new Hashtable<Object, SQLDataException>();
      Transformer<Object, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) hashtable0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("y9|%iPcJ4'(B");
      ConstantFactory.constantFactory(iIOMetadataNode0);
      Transformer<Object, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0, (Transformer<? super SQLException, String>) transformer1);
      OrderedMapIterator<SQLTransientConnectionException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<Vector>, StringTokenizer>) orderedMapIterator0);
      ResettableListIterator<String> resettableListIterator0 = new SingletonListIterator<String>("y9|%iPcJ4'(B");
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator0, 0L);
      IteratorUtils.get((Iterator<String>) skippingIterator0, 0);
      HashSet<SQLNonTransientException>[] hashSetArray0 = (HashSet<SQLNonTransientException>[]) Array.newInstance(HashSet.class, 6);
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      hashSetArray0[0] = hashSet0;
      HashSet<SQLNonTransientException> hashSet1 = new HashSet<SQLNonTransientException>();
      hashSetArray0[1] = hashSet1;
      HashSet<SQLNonTransientException> hashSet2 = new HashSet<SQLNonTransientException>();
      hashSetArray0[2] = hashSet2;
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      hashSetArray0[3] = (HashSet<SQLNonTransientException>) linkedHashSet0;
      HashSet<SQLNonTransientException> hashSet3 = new HashSet<SQLNonTransientException>();
      hashSetArray0[4] = hashSet3;
      HashSet<SQLNonTransientException> hashSet4 = new HashSet<SQLNonTransientException>(hashSet0);
      hashSetArray0[5] = hashSet4;
      IteratorUtils.arrayIterator(hashSetArray0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("xa`r|OiJg_lWvX");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iterator0;
      ResettableListIterator<Object> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) orPredicate0);
      objectArray0[1] = null;
      IteratorUtils.arrayIterator(objectArray0);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) orPredicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) predicate1);
      int int0 = 10;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("eMr][\t", "", 10);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) uniquePredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null");
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException0);
      FactoryTransformer<SQLException, SQLDataException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLDataException>(constantFactory0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(arrayList0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) reverseListIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLDataException>) factoryTransformer0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLDataException0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0);
      OrderedMapIterator<SQLTransientConnectionException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<Vector>, StringTokenizer>) orderedMapIterator0);
      ResettableListIterator<String> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator1, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableListIterator1, (-3237));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -3237
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S9im2]\"R:hc");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(orPredicate0);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>(1);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(arrayList0);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) loopingListIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) skippingIterator0, (Transformer<? super BatchUpdateException, String>) null, "S9im2]\"R:hc", "NodeList must not be null", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("EJ|Au?(R6?#*A{Gni");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("EJ|Au?(R6?#*A{Gni");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, String>) null, "", "EJ|Au?(R6?#*A{Gni", "EJ|Au?(R6?#*A{Gni");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) mapIterator0);
      int int0 = 4477;
      EmptyOrderedIterator.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("I3ft{");
      FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      Node node0 = iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      Node node1 = iIOMetadataNode0.appendChild(node0);
      IteratorUtils.nodeListIterator(node1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.singletonIterator(clientInfoStatus0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.singletonIterator(clientInfoStatus0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IteratorUtils.emptyMapIterator();
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("S$g+L_$o(@fQ_8c", sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("xa`r|OiJg_lWvX");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iterator0;
      ResettableListIterator<Object> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) orPredicate0);
      objectArray0[1] = null;
      IteratorUtils.arrayIterator(objectArray0);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) orPredicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) predicate1);
      int int0 = 10;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(31);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1073741824);
      integerArray0[7] = integer7;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      IteratorUtils.contains((Iterator<Integer>) objectArrayIterator0, (Object) integer2);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) uniquePredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null");
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException0);
      FactoryTransformer<SQLException, SQLDataException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLDataException>(constantFactory0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(arrayList0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) reverseListIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLDataException>) factoryTransformer0);
      reverseListIterator0.reset();
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>("Predicate must not be null", (-3237), 1143);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 6);
      OrderedMapIterator<SQLTransactionRollbackException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      int int0 = 630;
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 630);
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(list0);
      iteratorArray0[0] = (Iterator<SQLTransientException>) loopingIterator0;
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", ".9z(]IR[", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      MapIterator<SQLDataException, SQLDataException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(mapIterator1);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) mapIterator1);
      Iterator<SQLDataException>[] iteratorArray1 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 15);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("noSDcw!jiAZ;YS,O", ".9z(]IR[", 630);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 630);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) uniquePredicate0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Predicate must not be null";
      stringArray0[1] = "uk'9,1";
      stringArray0[2] = "uk'9,1";
      OrderedMapIterator<SQLClientInfoException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) orderedMapIterator0;
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) listIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "Predicate must not be null", (-209), (-2507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) uniquePredicate0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Predicate must not be null";
      stringArray0[1] = "uk'9,1";
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer3;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      IteratorUtils.contains((Iterator<Integer>) objectArrayIterator0, (Object) null);
      HashSet<SQLClientInfoException>[] hashSetArray0 = (HashSet<SQLClientInfoException>[]) Array.newInstance(HashSet.class, 2);
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      hashSetArray0[0] = hashSet0;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Predicate must not be null", (String) null, 1, hashMap1, (Throwable) null);
      hashSet0.add(sQLClientInfoException0);
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      hashSetArray0[1] = (HashSet<SQLClientInfoException>) linkedHashSet0;
      IteratorUtils.arrayListIterator(hashSetArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", ".9z(]IR[", sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.ObjectArrayListIterator", "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", ".9z(]IR[");
      sQLNonTransientConnectionException0.addSuppressed(sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("[189fB-LA]46+593", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<String> class0 = String.class;
      int int0 = 0;
      InstanceofPredicate.instanceOfPredicate(class0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("remove() method is not supported for an ObjectArrayIterator", "pD;t]L<)lvzY");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "remove() method is not supported for an ObjectArrayIterator", 0, hashMap0, sQLDataException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      sQLDataException0.getLocalizedMessage();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("pD;t]L<)lvzY", hashMap0, sQLDataException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("$R[jJa Sj|G|T", map0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("$R[jJa Sj|G|T", "pD;t]L<)lvzY", hashMap0);
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("GREATER", map0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("GREATER", hashMap0, sQLClientInfoException5);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      String string0 = null;
      String string1 = "remove() method is not supported for an ObjectArrayIterator";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Comparator<SQLException> comparator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IteratorUtils.isEmpty(orderedIterator0);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 6);
      List<Boolean> list0 = new LinkedList<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(list0);
      iteratorArray0[1] = (Iterator<Boolean>) loopingIterator0;
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      PredicateTransformer<SQLWarning> predicateTransformer0 = new PredicateTransformer<SQLWarning>(uniquePredicate0);
      SQLWarning sQLWarning0 = new SQLWarning("B:~TffgoCj\".NT*Cj]U", "}||=0s3n");
      Boolean boolean0 = predicateTransformer0.transform(sQLWarning0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      iteratorArray0[2] = iterator0;
      SkippingIterator<Boolean> skippingIterator0 = IteratorUtils.skippingIterator(iteratorArray0[1], (long) 0);
      iteratorArray0[3] = (Iterator<Boolean>) skippingIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 14, (-2988));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 6);
      OrderedMapIterator<SQLTransactionRollbackException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 630);
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(list0);
      iteratorArray0[0] = (Iterator<SQLTransientException>) loopingIterator0;
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) iteratorArray0[0], (long) 630, 0L);
      iteratorArray0[1] = (Iterator<SQLTransientException>) boundedIterator0;
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      ReverseListIterator<SQLTransientException> reverseListIterator0 = new ReverseListIterator<SQLTransientException>(arrayList0);
      iteratorArray0[2] = (Iterator<SQLTransientException>) reverseListIterator0;
      Hashtable<SQLTransientException, Properties> hashtable0 = new Hashtable<SQLTransientException, Properties>();
      EntrySetMapIterator<SQLTransientException, Properties> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, Properties>(hashtable0);
      iteratorArray0[3] = (Iterator<SQLTransientException>) entrySetMapIterator0;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[4] = (Iterator<SQLTransientException>) resettableListIterator0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("", "", 10, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException2;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException1;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IteratorUtils.isEmpty(orderedIterator0);
      int int0 = 0;
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) iteratorArray0[0], 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      Hashtable<Object, SQLDataException> hashtable0 = new Hashtable<Object, SQLDataException>();
      Transformer<Object, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) hashtable0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.functors.CatchAndRethrowClosure", (Throwable) null);
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.functors.CatchAndRethrowClosure", sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.CatchAndRethrowClosure", "suffix may not be null", 100, sQLWarning0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2912;
      intArray0[1] = 100;
      intArray0[2] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Sw&XhoP:O@9", intArray0, (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 2912);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.getIterator("xa`r|OiJg_lWvX");
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", "qasv$;-9;0q?:cg3", 0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "B", sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("qasv$;-9;0q?:cg3", (String) null, hashtable0, sQLTransientException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) singletonIterator0);
      IteratorUtils.loopingListIterator(list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<String> class0 = String.class;
      int int0 = 0;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 6);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) iteratorArray0[0], (long) 630, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "xa`r\\|OiJg_lWvX";
      Object[] objectArray0 = new Object[19];
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>("xa`r|OiJg_lWvX");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) orPredicate0);
      objectArray0[1] = (Object) "xa`r|OiJg_lWvX";
      AndPredicate.andPredicate((Predicate<? super Object>) orPredicate0, (Predicate<? super Object>) predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("eMr][\t", "xa`r|OiJg_lWvX");
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableListIterator<ArrayList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6Yw[FE=NIS8d/=#";
      IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.getIterator(resettableListIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("6Yw[FE=NIS8d/=#", (String) null);
      DataTruncation dataTruncation0 = new DataTruncation((-1800), false, true, (-1), (-1), sQLTransientException0);
      IteratorUtils.singletonIterator(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      int int0 = 93;
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 93);
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(list0);
      EmptyMapIterator.emptyMapIterator();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      String string0 = ".9z(]IR[";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", ".9z(]IR[", sQLInvalidAuthorizationSpecException0);
      String string1 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.ObjectArrayListIterator", "");
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<SQLDataException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Locale.FilteringMode>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Object> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Object>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Object>(hashMap0);
      entrySetMapIterator0.reset();
      entrySetMapIterator0.hasNext();
      hashMap0.values();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.getIterator(listIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      Hashtable<Object, SQLDataException> hashtable0 = new Hashtable<Object, SQLDataException>();
      Transformer<Object, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) hashtable0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("y9|%iPcJ4'(B");
      ConstantFactory.constantFactory(iIOMetadataNode0);
      Transformer<Object, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0, (Transformer<? super SQLException, String>) transformer1);
      OrderedMapIterator<SQLTransientConnectionException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<Vector>, StringTokenizer>) orderedMapIterator0);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) skippingIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      TreeSet<Locale.LanguageRange> treeSet0 = new TreeSet<Locale.LanguageRange>();
      String string0 = "S\"tX%A/u#1";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("S\"tX%A/u#1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=s\"tx%a/u#1
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      properties1.clear();
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      IteratorUtils.arrayIterator(propertiesArray0, 0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M6;FCT)8", "M6;FCT)8");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      ArrayListIterator<BatchUpdateException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<BatchUpdateException>(sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("S$g+L_$o(@fQ_8c", sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MapIterator<SQLClientInfoException, Vector<SQLSyntaxErrorException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.loopingListIterator(list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MapIterator<SQLClientInfoException, Vector<SQLSyntaxErrorException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.loopingListIterator(list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      PredicateTransformer<SQLWarning> predicateTransformer0 = new PredicateTransformer<SQLWarning>(uniquePredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(stringTokenizer0, 70, (-1632));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MapIterator<SQLClientInfoException, Vector<SQLSyntaxErrorException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.loopingListIterator(list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 6);
      OrderedMapIterator<SQLTransactionRollbackException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 630);
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(list0);
      iteratorArray0[0] = (Iterator<SQLTransientException>) loopingIterator0;
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) iteratorArray0[0], (long) 630, 0L);
      iteratorArray0[1] = (Iterator<SQLTransientException>) boundedIterator0;
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      ReverseListIterator<SQLTransientException> reverseListIterator0 = new ReverseListIterator<SQLTransientException>(arrayList0);
      iteratorArray0[2] = (Iterator<SQLTransientException>) reverseListIterator0;
      Hashtable<SQLTransientException, Properties> hashtable0 = new Hashtable<SQLTransientException, Properties>();
      EntrySetMapIterator<SQLTransientException, Properties> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, Properties>(hashtable0);
      iteratorArray0[3] = (Iterator<SQLTransientException>) entrySetMapIterator0;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[4] = (Iterator<SQLTransientException>) resettableListIterator0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientConnectionException0);
      iteratorArray0[5] = (Iterator<SQLTransientException>) singletonListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.emptyIterator();
      int int0 = 9;
      Vector<SQLWarning> vector0 = null;
      try {
        vector0 = new Vector<SQLWarning>((-239), 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -239
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = (-671);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 16;
      intArray0[4] = (-1708);
      intArray0[5] = 0;
      intArray0[6] = 2585;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      singletonIterator0.reset();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) singletonIterator0, (long) 0, 0L);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) boundedIterator0, (Iterator<? extends BatchUpdateException>) singletonIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "G^kNo2.y", batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-205), 2029);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrPredicate<ClientInfoStatus> orPredicate0 = new OrPredicate<ClientInfoStatus>(predicate0, predicate0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[0];
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) resettableListIterator0, (Predicate<? super ClientInfoStatus>) orPredicate0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) resettableListIterator0, (Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) listIterator0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) list0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      sQLTimeoutException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException1);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer1 = new ConstantTransformer<Object, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) mapIterator0, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) constantTransformer1);
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) iterator1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, DataTruncation>) orderedMapIterator0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>((String) null, classArray0, classArray0);
      Predicate<SQLException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) invokerTransformer0);
      IteratorUtils.find((Iterator<SQLClientInfoException>) mapIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "Enumeration must not be null";
      String string1 = "qasv$;-9;0q?:cg3";
      int int0 = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", "qasv$;-9;0q?:cg3", 0);
      sQLTransientConnectionException0.getLocalizedMessage();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) listIterator0, (Iterator<? extends SQLTransientException>) listIterator0, (Iterator<? extends SQLTransientException>) listIterator0);
      Comparator<Object> comparator0 = null;
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      // Undeclared exception!
      try { 
        ComparatorPredicate.comparatorPredicate((Object) "Enumeration must not be null", (Comparator<Object>) null, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator must not be null.
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<String>[] linkedListArray0 = (LinkedList<String>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedListArray0[0] = linkedList0;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedListArray0[1] = linkedList1;
      LinkedList<String> linkedList2 = new LinkedList<String>();
      String string0 = "";
      linkedList0.add("");
      linkedListArray0[2] = linkedList2;
      int int0 = 10;
      int int1 = 195;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedListArray0, 10, 195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNamespaceURI();
      iIOMetadataNode0.getNamespaceURI();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      MapIterator<SQLTimeoutException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) mapIterator0);
      int int0 = 4477;
      ArrayListIterator<PriorityQueue<Predicate<Object>>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<PriorityQueue<Predicate<Object>>>((Object) null, 4477);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("xa`r|OiJg_lWvX");
      assertNotNull(iterator0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iterator0;
      ResettableListIterator<Object> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      assertNotNull(orPredicate0);
      
      Object object0 = IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) orPredicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNull(object0);
      
      objectArray0[1] = null;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(resettableIterator0);
      
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) orPredicate0, (Predicate<? super Object>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(boolean0);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("eMr][\t", "", 10);
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("eMr][\t", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: eMr][\t", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("eMr][\t", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: eMr][\t", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: eMr][\t", sQLSyntaxErrorException1.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: eMr][\t", sQLSyntaxErrorException1.getMessage());
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("eMr][\t", "remove() method is not supported for an ObjectArrayIterator", sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertEquals("java.sql.SQLSyntaxErrorException: eMr][\t", sQLSyntaxErrorException2.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("remove() method is not supported for an ObjectArrayIterator", sQLSyntaxErrorException2.getSQLState());
      assertEquals("eMr][\t", sQLSyntaxErrorException2.getMessage());
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("eMr][\t", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: eMr][\t", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException2);
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("remove() method is not supported for an ObjectArrayIterator", "(l_", sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertEquals("(l_", sQLSyntaxErrorException3.getSQLState());
      assertEquals("remove() method is not supported for an ObjectArrayIterator", sQLSyntaxErrorException3.getMessage());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: remove() method is not supported for an ObjectArrayIterator", sQLSyntaxErrorException3.toString());
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("eMr][\t", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: eMr][\t", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException3);
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      assertEquals(4, sQLSyntaxErrorExceptionArray0.length);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertNotNull(objectArrayListIterator0);
      
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0);
      assertEquals(4, sQLSyntaxErrorExceptionArray0.length);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      String string0 = "t^hN_S";
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("t^hN_S");
      assertNotNull(transformer0);
      
      Transformer<BatchUpdateException, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super BatchUpdateException>) predicate0, (Transformer<? super BatchUpdateException, ? extends String>) transformer0, (Transformer<? super BatchUpdateException, ? extends String>) transformer0);
      assertNotNull(transformer1);
      
      String string1 = IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer1, "<3S3u(", "t^hN_S", "t^hN_S");
      assertFalse(string1.equals((Object)string0));
      assertEquals("t^hN_St^hN_S", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<SQLTransientException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 1);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertEquals(1, classArray0.length);
      assertNotNull(transformer0);
      
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      assertEquals(1, classArray0.length);
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<SQLTransientException>) mapIterator0, (Closure<? super SQLTransientException>) closure0);
      assertEquals(1, classArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 1083, 1879);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      assertTrue(boolean0);
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      int[] intArray0 = new int[1];
      intArray0[0] = (-2507);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Predicate must not be null", "uk'9,1", intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2507)}, intArray0);
      assertEquals("uk'9,1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: Predicate must not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Predicate must not be null", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2507);
      intArray1[1] = (-2507);
      intArray1[2] = (-2507);
      intArray1[3] = (-2507);
      intArray1[4] = (-2507);
      intArray1[5] = 0;
      intArray1[6] = (-2507);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray1, batchUpdateException0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-2507)}, intArray0);
      assertArrayEquals(new int[] {(-2507), (-2507), (-2507), (-2507), (-2507), 0, (-2507)}, intArray1);
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: Predicate must not be null", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: Predicate must not be null", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("uk'9,1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: Predicate must not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Predicate must not be null", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException1);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertNull(batchUpdateException2.getMessage());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertNotNull(batchUpdateException2);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray1);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-2507), (-2507), (-2507), (-2507), (-2507), 0, (-2507)}, intArray1);
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException3.toString());
      assertNull(batchUpdateException3.getSQLState());
      assertNull(batchUpdateException3.getMessage());
      assertNotNull(batchUpdateException3);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2507)}, intArray0);
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException4.toString());
      assertNull(batchUpdateException4.getSQLState());
      assertEquals("", batchUpdateException4.getMessage());
      assertNotNull(batchUpdateException4);
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException2));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2507)}, intArray0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException5.toString());
      assertEquals(0, batchUpdateException5.getErrorCode());
      assertNull(batchUpdateException5.getSQLState());
      assertNull(batchUpdateException5.getMessage());
      assertNotNull(batchUpdateException5);
      
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException((String) null, "", intArray1, batchUpdateException4);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException2));
      assertEquals(1, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-2507)}, intArray0);
      assertArrayEquals(new int[] {(-2507), (-2507), (-2507), (-2507), (-2507), 0, (-2507)}, intArray1);
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException4.toString());
      assertNull(batchUpdateException4.getSQLState());
      assertEquals("", batchUpdateException4.getMessage());
      assertEquals(0, batchUpdateException6.getErrorCode());
      assertNull(batchUpdateException6.getMessage());
      assertEquals("", batchUpdateException6.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException6.toString());
      assertNotNull(batchUpdateException6);
      
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException(intArray0, batchUpdateException3);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException6));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException6));
      assertEquals(1, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-2507)}, intArray0);
      assertArrayEquals(new int[] {(-2507), (-2507), (-2507), (-2507), (-2507), 0, (-2507)}, intArray1);
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException3.toString());
      assertNull(batchUpdateException3.getSQLState());
      assertNull(batchUpdateException3.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException7.getMessage());
      assertEquals(0, batchUpdateException7.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException", batchUpdateException7.toString());
      assertNull(batchUpdateException7.getSQLState());
      assertNotNull(batchUpdateException7);
      
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      BatchUpdateException batchUpdateException8 = new BatchUpdateException("", intArray0, batchUpdateException3);
      assertFalse(batchUpdateException8.equals((Object)batchUpdateException7));
      assertFalse(batchUpdateException8.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException8.equals((Object)batchUpdateException6));
      assertFalse(batchUpdateException8.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException8.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException8.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException8.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException8.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException6));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException7));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-2507)}, intArray0);
      assertArrayEquals(new int[] {(-2507), (-2507), (-2507), (-2507), (-2507), 0, (-2507)}, intArray1);
      assertNull(batchUpdateException8.getSQLState());
      assertEquals("", batchUpdateException8.getMessage());
      assertEquals(0, batchUpdateException8.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException8.toString());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException3.toString());
      assertNull(batchUpdateException3.getSQLState());
      assertNull(batchUpdateException3.getMessage());
      assertNotNull(batchUpdateException8);
      
      batchUpdateExceptionArray0[8] = batchUpdateException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1564);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1770, 1770);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("F50Y1$mAxA8;`?QJ+@", "F50Y1$mAxA8;`?QJ+@", 914);
      assertEquals("F50Y1$mAxA8;`?QJ+@", sQLTimeoutException0.getMessage());
      assertEquals("F50Y1$mAxA8;`?QJ+@", sQLTimeoutException0.getSQLState());
      assertEquals(914, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: F50Y1$mAxA8;`?QJ+@", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      Spliterator<Throwable> spliterator0 = sQLTransientException0.spliterator();
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNotNull(spliterator0);
      
      sQLTimeoutException0.addSuppressed(sQLTransientException0);
      assertEquals("F50Y1$mAxA8;`?QJ+@", sQLTimeoutException0.getMessage());
      assertEquals("F50Y1$mAxA8;`?QJ+@", sQLTimeoutException0.getSQLState());
      assertEquals(914, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: F50Y1$mAxA8;`?QJ+@", sQLTimeoutException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, ")", 1566, sQLTimeoutException0);
      assertEquals("F50Y1$mAxA8;`?QJ+@", sQLTimeoutException0.getMessage());
      assertEquals("F50Y1$mAxA8;`?QJ+@", sQLTimeoutException0.getSQLState());
      assertEquals(914, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: F50Y1$mAxA8;`?QJ+@", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(1566, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(")", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 914, 1566);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 8);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Node must not be null";
      stringArray0[1] = "%~>5_Wq41P";
      stringArray0[2] = "Predicate must not be null";
      stringArray0[3] = "Predicate must not be null";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-3134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      MapIterator<SQLIntegrityConstraintViolationException, Locale.LanguageRange> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(predicate0);
      assertFalse(priorityQueue0.contains(predicate0));
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(predicate0));
      
      OrderedIterator<String> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      Object[] objectArray1 = IteratorUtils.toArray((Iterator<?>) orderedIterator1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      assertNotNull(zippingIterator0);
      
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      OrderedMapIterator<SQLClientInfoException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) listIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      SingletonIterator<HashSet<SQLNonTransientException>> singletonIterator0 = new SingletonIterator<HashSet<SQLNonTransientException>>(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      OrderedMapIterator<ArrayList<SQLTransientConnectionException>, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      int int0 = IteratorUtils.size(orderedMapIterator0);
      assertEquals(0, int0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotNull(properties1);
      
      Properties properties2 = new Properties();
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      assertNotNull(properties2);
      
      Properties[] propertiesArray0 = new Properties[5];
      propertiesArray0[0] = properties1;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = properties2;
      propertiesArray0[4] = properties0;
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.arrayIterator(propertiesArray0, 0);
      assertEquals(5, propertiesArray0.length);
      assertNotNull(resettableIterator1);
      
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator1, (Iterator<? extends Properties>) resettableIterator1);
      assertEquals(5, propertiesArray0.length);
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super Properties>) uniquePredicate0);
      assertTrue(boolean0);
      assertEquals(5, propertiesArray0.length);
      
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Locale.LanguageRange> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("EJ|Au?(R6?#*A{Gni");
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertNotNull(singletonListIterator0);
      
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) singletonListIterator0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      assertNotNull(nullIsFalsePredicate0);
      
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) nullIsFalsePredicate0);
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator1);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("EJ|Au?(R6?#*A{Gni");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Locale.LanguageRange> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      String string0 = "EJ|Au\\?(R6?#*A{Gni";
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("EJ|Au?(R6?#*A{Gni");
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertNotNull(singletonListIterator0);
      
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) singletonListIterator0);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      assertNotNull(nullIsFalsePredicate0);
      
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) nullIsFalsePredicate0);
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator1);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("EJ|Au?(R6?#*A{Gni");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<IIOMetadataNode>) orderedMapIterator0, (Object) orderedMapIterator0);
      assertFalse(boolean0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<Locale.FilteringMode, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<Locale.FilteringMode, StringTokenizer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      int int0 = 123;
      HashMap<SQLTransactionRollbackException, StringTokenizer> hashMap0 = new HashMap<SQLTransactionRollbackException, StringTokenizer>(123);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLWarning sQLWarning0 = new SQLWarning("##D#72NKod}Oaxay", "", 10);
      assertEquals("java.sql.SQLWarning: ##D#72NKod}Oaxay", sQLWarning0.toString());
      assertEquals("##D#72NKod}Oaxay", sQLWarning0.getMessage());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(10, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 10, sQLWarning0);
      assertEquals("java.sql.SQLWarning: ##D#72NKod}Oaxay", sQLWarning0.toString());
      assertEquals("##D#72NKod}Oaxay", sQLWarning0.getMessage());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(10, sQLWarning0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(10, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 10, sQLRecoverableException0);
      assertEquals("java.sql.SQLWarning: ##D#72NKod}Oaxay", sQLWarning0.toString());
      assertEquals("##D#72NKod}Oaxay", sQLWarning0.getMessage());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(10, sQLWarning0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(10, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals(10, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      StringTokenizer stringTokenizer1 = hashMap0.put(sQLTransactionRollbackException0, stringTokenizer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("java.sql.SQLWarning: ##D#72NKod}Oaxay", sQLWarning0.toString());
      assertEquals("##D#72NKod}Oaxay", sQLWarning0.getMessage());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(10, sQLWarning0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(10, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals(10, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, stringTokenizer0.countTokens());
      assertNull(stringTokenizer1);
      
      EntrySetMapIterator<SQLTransactionRollbackException, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, StringTokenizer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(entrySetMapIterator0);
      
      // Undeclared exception!
      try { 
        entrySetMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 2);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      ResettableListIterator<Class<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0, 0, 0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Class<SQLInvalidAuthorizationSpecException>>) resettableListIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 0, hashMap0, sQLInvalidAuthorizationSpecException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NodeList must not be null", (String) null, 2455, sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NodeList must not be null", "S>(s}'9x\"B", sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[4];
      intArray0[0] = 2455;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2455;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ListIterator<Iterator<BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator((Iterator<BatchUpdateException>) resettableListIterator1);
      Iterator<Iterator<BatchUpdateException>> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Iterator<BatchUpdateException>>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = "Z>I\\ulhX_,ruih";
      stringArray0[1] = string0;
      stringArray0[2] = "Cannot remove from list until next() or previous() called";
      stringArray0[3] = "";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.size(objectArrayIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("gos6y!", "", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(":J)y&<To*[0", intArray0, batchUpdateException0);
      batchUpdateException2.getUpdateCounts();
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) resettableListIterator0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IteratorUtils.isEmpty(orderedIterator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MapIterator<Integer, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      int int0 = (-522);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) mapIterator0, (-522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.Flat3Map$KeySet");
      int[] intArray0 = new int[7];
      intArray0[0] = 100;
      intArray0[1] = 363;
      intArray0[2] = 144;
      intArray0[3] = (-97);
      intArray0[4] = 0;
      intArray0[5] = 1418;
      intArray0[6] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("P_", " .33%(1\"mX'd", intArray0);
      sQLIntegrityConstraintViolationException0.initCause(batchUpdateException0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.getSuppressed();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
