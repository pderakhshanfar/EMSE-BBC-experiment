/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 16:49:42 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Class<SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, class0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(765);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2360);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(132);
      integerArray0[2] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      objectArrayListIterator0.next();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<TreeSet>>) iterator0, (Transformer<? super ArrayList<TreeSet>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedIterator<Hashtable<Object, Closure>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) orderedIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) listIterator0, (Closure<? super Object>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", (-4261), sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", (-4261), sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("List must not be null", "");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("List must not be null", "List must not be null");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException((String) null);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 4, (-4261));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      IteratorUtils.getIterator(locale0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "", true);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("", "", false);
      stringTokenizerArray0[2] = stringTokenizer2;
      IteratorUtils.arrayListIterator(stringTokenizerArray0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      IteratorUtils.getIterator(locale0);
      HashMap<SQLTimeoutException, Integer> hashMap0 = new HashMap<SQLTimeoutException, Integer>(1666);
      EntrySetMapIterator<SQLTimeoutException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, Integer>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 609, (-4181));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      NOPClosure.nopClosure();
      DataTruncation dataTruncation0 = new DataTruncation(12, true, true, 12, 12, (Throwable) null);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.get((Iterator<Closure<ArrayList>>) singletonIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      NOPClosure.nopClosure();
      DataTruncation dataTruncation0 = new DataTruncation(12, true, true, 12, 12, (Throwable) null);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object object0 = null;
      IteratorUtils.getIterator((Object) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) loopingIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      IteratorUtils.getIterator("");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("@8=f.Bk(M", sQLNonTransientConnectionException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) listIterator0, 288L);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) boundedIterator0, (Transformer<? super SQLDataException, String>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OrderedMapIterator<Stack<Properties>, Vector<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Stack<Properties>>) orderedMapIterator0, (Transformer<? super Stack<Properties>, ? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Closure<SQLTransientException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLTransientException>>) treeSet0);
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) null, (Closure<? super SQLTransactionRollbackException>) closure0);
      IteratorUtils.emptyMapIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector<Transformer<Object, String>> vector0 = new Vector<Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      int int0 = 13;
      vector0.setSize(13);
      vector0.add(transformer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T@]$G(");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<Transformer<Object, String>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Transformer<Object, String>>) vector0);
      IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, String>>) resettableIterator0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "suffix may not be null";
      String string0 = "";
      stringArray0[1] = "";
      IteratorUtils.arrayIterator(stringArray0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ExceptionPredicate.exceptionPredicate();
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) null, 1560L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      int[] intArray0 = new int[5];
      intArray0[0] = 16;
      intArray0[1] = 2;
      intArray0[2] = 3162;
      intArray0[3] = 123;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@6xf>Y``E*Qq\"j=D", intArray0, (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 14, 14, batchUpdateException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataTruncation dataTruncation1 = new DataTruncation(14, true, true, (-1742), (-2138), dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation1);
      dataTruncation1.getParameter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.get((Iterator<DataTruncation>) singletonListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      IteratorUtils.get((Iterator<Closure<ArrayList>>) singletonIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantTransformer.constantTransformer((Properties) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "C[lcIJ io*e,EsTz", "C[lcIJ io*e,EsTz", "y_>~emcUI(-");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = new TreeSet<String>();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("9", "", 3044);
      int int0 = (-199);
      DataTruncation dataTruncation0 = new DataTruncation((-2934), true, true, (-199), 100, sQLTransientException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleAttributes();
      ConstantTransformer<Integer, String> constantTransformer0 = new ConstantTransformer<Integer, String>((String) null);
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLDataException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<Integer, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLDataException>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) abstractMapIteratorDecorator0, (Transformer<? super Integer, String>) constantTransformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.size((Iterator<?>) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(orderedMapIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Integer>(orderedMapIterator1);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, ArrayList<SQLDataException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) treeSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableIterator0);
      Transformer<Integer, String> transformer0 = InvokerTransformer.invokerTransformer("XzMe;I k:1;6}&)C'P'", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "XzMe;I k:1;6}&)C'P'", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(orderedMapIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Integer>(orderedMapIterator1);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack0);
      IteratorUtils.emptyMapIterator();
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientException sQLTransientException0 = new SQLTransientException("transformer may not be null", "O", (-1768));
      DataTruncation dataTruncation0 = new DataTruncation((-1742), false, false, (-1768), 874, sQLTransientException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 4155);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4154
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      vector0.add(iIOMetadataNode0);
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) reverseListIterator0, 3535);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3534
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, true);
      Closure<SQLTransactionRollbackException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) nullIsTruePredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      Iterator<Object> iterator1 = IteratorUtils.objectGraphIterator((Object) sQLNonTransientConnectionException0, (Transformer<? super Object, ?>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator1, (Predicate<? super Object>) predicate2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLNonTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, true);
      Closure<SQLTransactionRollbackException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MapIterator<SQLTransactionRollbackException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransactionRollbackException, SQLWarning> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLWarning>(mapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLWarning>) abstractMapIteratorDecorator0);
      HashMap<DataTruncation, InstanceofPredicate> hashMap0 = new HashMap<DataTruncation, InstanceofPredicate>();
      Transformer<DataTruncation, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super DataTruncation, ? extends InstanceofPredicate>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends InstanceofPredicate>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 0);
      Transformer<Integer, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) transformer0, "", "", "");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-1235));
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("^Vs)OOW$V[t=?;yL4", "");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("H", sQLDataException3);
      sQLDataException1.spliterator();
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("", sQLDataException1);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("org.apache.commons.collections4.functors.PrototypeFactory", sQLDataException5);
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException(sQLDataException5);
      sQLDataExceptionArray0[8] = sQLDataException8;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) objectArrayIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 0);
      Transformer<Integer, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) transformer0, "", "", "");
      Transformer<BatchUpdateException, String> transformer1 = ConstantTransformer.constantTransformer("V:;B)e");
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0, (Transformer<? super BatchUpdateException, String>) transformer1);
      IteratorUtils.emptyListIterator();
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) stack0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "[]", 1092);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("|75Dz~M", "V:;B)e", hashMap0, sQLSyntaxErrorException0);
      stack0.add(sQLClientInfoException0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(notPredicate0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) resettableListIterator1, (Predicate<? super SQLClientInfoException>) nullIsExceptionPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, true);
      Closure<SQLTransactionRollbackException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNode1.getAttributeNode("");
      // Undeclared exception!
      try { 
        iIOMetadataNode1.removeAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) set0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableIterator0);
      OrderedMapIterator<Stack<Properties>, Vector<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends Stack<Properties>>) orderedMapIterator0, (Transformer<? super Stack<Properties>, ? extends SQLNonTransientConnectionException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      IteratorUtils.loopingIterator((Collection<? extends String>) set0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ArrayDeque<ArrayDeque>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(iterator0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) iterator1, (Iterator<? extends String>) iterator1);
      IteratorUtils.matchesAll((Iterator<String>) null, (Predicate<? super String>) uniquePredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) resettableIterator0, (Iterator<?>) iterator1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(orderedMapIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate1, defaultEquator0);
      IteratorUtils.find((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) equalPredicate0);
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) loopingIterator0, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<DdT&uP", "<DdT&uP");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("<DdT&uP", "<DdT&uP", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("<DdT&uP");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("tMVyvm", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("", "remove() is not supported");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("add() not supported for empty Iterator", (String) null, 612, sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("lFk+hIp-u", "NodeList must not be null");
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("x,Njs:Z{2M", "", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      sQLSyntaxErrorException8.printStackTrace();
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 0);
      Transformer<Integer, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) transformer0, "", "", "");
      HashMap<SQLSyntaxErrorException, SQLDataException> hashMap0 = new HashMap<SQLSyntaxErrorException, SQLDataException>();
      EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) entrySetMapIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "[");
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-1), 0, sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, dataTruncation0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("[", defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byte byte0 = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "*W.1G#,vg";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*W.1G#,vg");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-790));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLIntegrityConstraintViolationException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLIntegrityConstraintViolationException, Object> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Object>(mapIterator1);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(locale0);
      SQLWarning sQLWarning0 = new SQLWarning("e_DFuC; ", (String) null);
      DataTruncation dataTruncation0 = new DataTruncation(61, true, true, 61, (-1), sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("e_DFuC; ", dataTruncation0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("~;0C", "GvN");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.getIterator(enumeration0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, (-4129));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) priorityQueue0);
      Transformer<Properties, String> transformer0 = ConstantTransformer.constantTransformer(";4ZyjI865[ C%uGBy");
      String string0 = "o";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "I_A?ZltT\"UGIB7", "o", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Object) null);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory";
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      int int0 = 12;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-1225), 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack0);
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<Locale.FilteringMode>) resettableListIterator0, 2132L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.emptyIterator();
      int int0 = (-381);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-381), (-381));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) singletonIterator0);
      IteratorUtils.toList((Iterator<?>) iterator0);
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.item(1034);
      IteratorUtils.getIterator(iIOMetadataNode0);
      PredicateTransformer<Iterator<Properties>> predicateTransformer0 = new PredicateTransformer<Iterator<Properties>>((Predicate<? super Iterator<Properties>>) null);
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(iterator0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      PredicateTransformer<Iterator<Properties>> predicateTransformer0 = new PredicateTransformer<Iterator<Properties>>(uniquePredicate0);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) arrayList0);
      Boolean boolean0 = predicateTransformer0.transform(resettableIterator0);
      SingletonIterator<Boolean> singletonIterator0 = new SingletonIterator<Boolean>(boolean0, true);
      IteratorUtils.size(singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("mKAi", "mKAi");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("mKAi", sQLTransientException0);
      stack0.add(sQLTransientConnectionException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(iterator0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 2);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      InvokerTransformer.invokerTransformer(", ", (Class<?>[]) classArray0, (Object[]) classArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(enumeration0);
      Iterator<SQLRecoverableException> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLTimeoutException, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, 2416L, 0L);
      IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLException sQLException0 = new SQLException();
      int[] intArray0 = new int[5];
      intArray0[0] = (-859);
      intArray0[1] = (-3867);
      intArray0[2] = 2654;
      intArray0[3] = (-871);
      intArray0[4] = 1;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@A)-)yG+S$1tb2", intArray0, sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation((-3867), false, true, 491, (-871), sQLIntegrityConstraintViolationException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataTruncation dataTruncation1 = new DataTruncation((-859), true, true, 491, 2, sQLIntegrityConstraintViolationException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      dataTruncation0.getParameter();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) singletonListIterator0, (-543));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -543
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("?");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("?", sQLNonTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("]", "]", "?", 512);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("?", "]", "]", 512);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("?", "|)F.Lw}7.o-~LHJM~+", "]", 512);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("org.apache.commons.collections4.functors.FalsePredicate", "]", "org.apache.commons.collections4.functors.FalsePredicate", 100);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("7ia", "transformer may not be null", "", 100);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("]", "?", (String) null, 1019);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("a|ol|1t=*{+K$IJ;,0", "org.apache.commons.collections4.iterators.SingletonListIterator", "", 512);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLNonTransientConnectionException1.setStackTrace(stackTraceElementArray0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("?", sQLNonTransientConnectionException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("?", "Transformer must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Transformer must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.getIterator("?");
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.hasAttribute("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Array class must not be null", sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("m\n", "Transformer must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Array class must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) null, 1092);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.isEmpty(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 6);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class5;
      Transformer<Properties, String> transformer0 = InvokerTransformer.invokerTransformer(", ", (Class<?>[]) classArray0, (Object[]) classArray0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties1, false);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) singletonIterator0);
      IteratorUtils.toList((Iterator<?>) singletonIterator0);
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<Properties>) orderedIterator0, (Transformer<? super Properties, String>) transformer0, "d-=dOI", "", "");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EmptyIterator.emptyIterator();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(andPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator must not be null", "Iterator[]", (-773));
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Transformer must not be null", sQLSyntaxErrorException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException1);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((SQLException) sQLSyntaxErrorException1, (Equator<SQLException>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      MapIterator<SQLRecoverableException, LinkedList<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) andPredicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate.comparatorPredicate(locale_FilteringMode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ListIterator<Locale.FilteringMode> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) iterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate.comparatorPredicate(locale_FilteringMode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ListIterator<Locale.FilteringMode> listIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator1, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<SQLRecoverableException, LinkedList<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("pT!3u&Y;Y3{5]T", "org.apache.commons.collections4.iterators.LoopingIterator", sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException((String) null, sQLSyntaxErrorException1);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("$F~L");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.iterators.LoopingIterator");
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("pT!3u&Y;Y3{5]T");
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("pT!3u&Y;Y3{5]T", "i?+Hngd{E-VN&]haj", 0);
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("Predicate must not be null", sQLSyntaxErrorException5);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException6);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLSyntaxErrorException5, (Equator<SQLException>) defaultEquator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$F~L", "$F~L", 0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Predicate must not be null", "FHX{5cfvwaNLPD", (-1));
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "_G% _Dni", sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("$F~L", "", (-1225), sQLInvalidAuthorizationSpecException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(vector0);
      int int0 = 3535;
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) reverseListIterator0, (long) 3535, (long) 3535);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) boundedIterator0, 3535);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3535
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[2] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLExceptionArray0[2]);
      sQLExceptionArray0[3] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[4] = (SQLException) sQLInvalidAuthorizationSpecException0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/q}uFF^>'bl[II", hashtable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      sQLExceptionArray0[2] = (SQLException) sQLRecoverableException0;
      MapIterator<Properties, ArrayList<SQLTransientConnectionException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) mapIterator0, (Predicate<? super Properties>) anyPredicate0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      List<Properties> list0 = new ArrayList<Properties>();
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) list0);
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) orderedIterator0, (Transformer<? super Properties, String>) null, "iterator", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      PriorityQueue<SQLClientInfoException>[] priorityQueueArray0 = (PriorityQueue<SQLClientInfoException>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      priorityQueueArray0[0] = priorityQueue0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("cCAkz", "4)#xa!s+");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("&whSPN_O;Xym-", "&whSPN_O;Xym-");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      EqualPredicate<String> equalPredicate0 = new EqualPredicate<String>("&whSPN_O;Xym-");
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) equalPredicate0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) resettableListIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation((-1358), true, true, 1, (-1635));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1635), true, true, 1, 1, sQLNonTransientConnectionException2);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2056, true, true, 123, 2056, sQLNonTransientConnectionException1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1, true, false, (-1329), 2056);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1300), true, false, 25, 2056);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-105), false, true, 2056, 1, sQLNonTransientConnectionException1);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-1358), true, true, 0, (-1037));
      dataTruncationArray0[6] = dataTruncation6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, (-1300));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Throwable throwable0 = sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = new ConstantTransformer<Object, SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) throwable0);
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[2] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("N", "N", sQLExceptionArray0[2]);
      sQLExceptionArray0[3] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[4] = (SQLException) sQLInvalidAuthorizationSpecException0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/q}uFF^>'bl[II", hashtable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("N", sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      sQLExceptionArray0[2] = (SQLException) sQLRecoverableException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0, 5);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Enumeration mus& not be null", "", 5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(5, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLRecoverableException1, comparator0);
      IteratorUtils.find((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, true);
      Closure<SQLTransactionRollbackException> closure0 = NOPClosure.nopClosure();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 3044);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(closure0, defaultEquator0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonIterator0);
      IteratorUtils.find((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) equalPredicate0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("#9}\"n<!xK8Aj3 Y-%M", "lC DiS(QKm(b$[gv%");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "lC DiS(QKm(b$[gv%", sQLSyntaxErrorException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, true);
      Closure<SQLTransactionRollbackException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MapIterator<SQLTransactionRollbackException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLWarning>(mapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLWarning>) abstractMapIteratorDecorator0);
      MapIterator<Object, SQLDataException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<Object>) mapIterator1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      MapIterator<SQLRecoverableException, LinkedList<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) andPredicate0);
      MapIterator<SQLTimeoutException, SQLNonTransientException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) mapIterator1, (Iterator<? extends SQLTransientException>) mapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) mapIterator1, (Iterator<? extends SQLTimeoutException>) mapIterator1);
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>((Properties) null, false);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) singletonIterator0);
      IteratorUtils.toList((Iterator<?>) mapIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Properties>) singletonIterator0, (Transformer<? super Properties, String>) transformer0, "iterator", "", "X1Py,,*[j<");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ArrayDeque<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, ArrayDeque<SQLException>>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 2);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      InvokerTransformer.invokerTransformer(", ", (Class<?>[]) classArray0, (Object[]) classArray0);
      Properties properties0 = new Properties();
      IteratorUtils.toList((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) orderedMapIterator1, (Iterator<? extends SQLTransientException>) orderedMapIterator1);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.getSuppressed();
      Properties properties1 = new Properties();
      IteratorUtils.getIterator((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      IteratorUtils.toArray(iterator1);
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties1;
      propertiesArray0[1] = properties1;
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties1;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.toString((Iterator<Properties>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(iterator0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      IteratorUtils.peekingIterator((Iterator<? extends String>) resettableIterator0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(resettableIterator0);
      IteratorUtils.find((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[2] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLExceptionArray0[2]);
      sQLExceptionArray0[3] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[4] = (SQLException) sQLInvalidAuthorizationSpecException0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/q}uFF^>'bl[II", hashtable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      sQLExceptionArray0[2] = (SQLException) sQLRecoverableException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0, 5);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Enumeration mus& not be null", "XsxTEWo$", 5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLRecoverableException1, comparator0);
      IteratorUtils.find((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ArrayDeque<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, ArrayDeque<SQLException>>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 2);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      InvokerTransformer.invokerTransformer(", ", (Class<?>[]) classArray0, (Object[]) classArray0);
      Properties properties0 = new Properties();
      IteratorUtils.toList((Iterator<?>) orderedMapIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) orderedMapIterator1, (Iterator<? extends SQLTransientException>) orderedMapIterator1);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.getSuppressed();
      Properties properties1 = new Properties();
      IteratorUtils.getIterator(resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      iteratorArray0[4] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      iteratorArray0[5] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      iteratorArray0[6] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ArrayDeque<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      IteratorUtils.getIterator(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.ClosureTransformer", sQLWarning0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.functors.ClosureTransformer", sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.ClosureTransformer", sQLNonTransientException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.ClosureTransformer", "org.apache.commons.collections4.functors.ClosureTransformer", 4208);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.ClosureTransformer", "org.apache.commons.collections4.functors.ClosureTransformer");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) objectArrayListIterator0);
      ReverseListIterator<SQLTransientException> reverseListIterator0 = new ReverseListIterator<SQLTransientException>(list0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) onePredicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate1 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator1, comparatorPredicate_Criterion0);
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate1;
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) instanceofPredicate0, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[3] = predicate0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) iIOMetadataNode1);
      predicateArray0[4] = predicate1;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(instanceofPredicate0, predicateArray0[0]);
      predicateArray0[5] = (Predicate<Object>) orPredicate0;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(" cannot be null");
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate2 = new ComparatorPredicate<Object>(sQLTransactionRollbackException3, comparator3, comparatorPredicate_Criterion1);
      predicateArray0[6] = (Predicate<Object>) comparatorPredicate2;
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate2 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[7] = predicate2;
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      InstantiateFactory<Locale.FilteringMode> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<Locale.FilteringMode>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(vector0);
      int int0 = 3535;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) reverseListIterator0, 3535);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3535
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyIterator();
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) priorityQueue0);
      Transformer<Properties, String> transformer0 = ConstantTransformer.constantTransformer("um\"8M#");
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "o", "]", "]){F");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null, 128, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      MapIterator<SQLRecoverableException, LinkedList<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) andPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) orderedMapIterator0, class0);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'n?1Z,", "'n?1Z,");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("dA5n>E8MtU)]>31", "List must not be null", (Throwable) null);
      DefaultEquator.defaultEquator();
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string1 = "fH9PhJ{.1";
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 5);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      InvokerTransformer.invokerTransformer("fH9PhJ{.1", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator((StringTokenizer) null);
      EmptyIterator.emptyIterator();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 9);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pTz)G2;/R/t<X,G/>P");
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[6] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[7] = class5;
      Class<SQLFeatureNotSupportedException> class6 = SQLFeatureNotSupportedException.class;
      classArray0[8] = class6;
      InvokerTransformer.invokerTransformer("pTz)G2;/R/t<X,G/>P", (Class<?>[]) classArray0, (Object[]) classArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientConnectionException0, (Equator<SQLException>) defaultEquator0);
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator1, (Iterator<? extends SQLClientInfoException>) iterator1);
      IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) allPredicate0);
      predicateArray0[2] = predicate2;
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[3] = predicate3;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("", classArray0, predicateArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(transformerPredicate0);
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) predicate4);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[2] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLExceptionArray0[2]);
      sQLExceptionArray0[3] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[4] = (SQLException) sQLInvalidAuthorizationSpecException0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      sQLTransientException0.spliterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/q}uFF^>'bl[II", hashtable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0, sQLClientInfoException0);
      sQLExceptionArray0[5] = (SQLException) sQLRecoverableException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      sQLExceptionArray0[6] = (SQLException) sQLRecoverableException1;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0, 0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("Enumeration must not be null", "XsxTEWo$", 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLRecoverableException2, comparator0);
      IteratorUtils.find((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
      OrderedMapIterator<Iterator<SQLTransientConnectionException>, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Iterator<SQLTransientConnectionException>, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<SQLTransientConnectionException>, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLTransientConnectionException>>) orderedMapIterator1, (long) 0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1X=%&Elm~;^(ass&>w", "1X=%&Elm~;^(ass&>w", batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("1X=%&Elm~;^(ass&>w", "1X=%&Elm~;^(ass&>w", 3620);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("1X=%&Elm~;^(ass&>w");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("1X=%&Elm~;^(ass&>w", "1X=%&Elm~;^(ass&>w", sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("1X=%&Elm~;^(ass&>w", sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException5);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 2109L);
      IteratorUtils.singletonIterator((SQLSyntaxErrorException) null);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("1X=%&Elm~;^(ass&>w", sQLNonTransientConnectionException4);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("1X=%&Elm~;^(ass&>w", "", sQLNonTransientConnectionException3);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("1X=%&Elm~;^(ass&>w", "", 3620, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", sQLNonTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("1X=%&Elm~;^(ass&>w");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("", "", sQLNonTransientConnectionException5);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("1X=%&Elm~;^(ass&>w", "1X=%&Elm~;^(ass&>w", sQLNonTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(orderedMapIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ArrayDeque<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, ArrayDeque<SQLException>>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(orderedMapIterator0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      MapIterator<SQLRecoverableException, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.size(orderedMapIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("/sO!4XJ2zZ9ku9}w", "/sO!4XJ2zZ9ku9}w", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("/sO!4XJ2zZ9ku9}w", "/sO!4XJ2zZ9ku9}w", 0, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) resettableListIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLTransientConnectionException3);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", "Zdz4O[-@y9$xS<J+@O", 0, hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "Zdz4O[-@y9$xS<J+@O", 0, hashtable0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", "", 16, hashtable0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Predicate<SQLClientInfoException> predicate1 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) objectArrayListIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/bA-hvohP");
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/bA-hvohP", "/bA-hvohP", 965);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("add() is not supported by this iterator", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ResettableIterator<SQLClientInfoException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) resettableIterator1);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLSyntaxErrorException1, (Equator<SQLException>) defaultEquator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) resettableIterator1, (Predicate<? super SQLClientInfoException>) predicate0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator1, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator1);
      IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      ResettableIterator<BatchUpdateException> resettableIterator2 = IteratorUtils.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableIterator2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ArrayDeque<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, ArrayDeque<SQLException>>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 2);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      Transformer<Properties, String> transformer0 = InvokerTransformer.invokerTransformer(", ", (Class<?>[]) classArray0, (Object[]) classArray0);
      Properties properties0 = new Properties();
      boolean boolean0 = true;
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) singletonIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super Properties, String>) transformer0, "fromIndex(", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ', ' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.singletonIterator((StringTokenizer) null);
      EmptyIterator.emptyIterator();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 9);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pTz)G2;/R/t<X,G/>P");
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null, (Collection<? super SQLNonTransientConnectionException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.DefaultEquator");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.DefaultEquator", sQLNonTransientConnectionException0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null, (Collection<? super SQLNonTransientConnectionException>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyIterator.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("prefix may not be null");
      iIOMetadataNode0.hasAttribute("prefix may not be null");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ZC7ok5Jc(Ntc3*$p[", "", (-2242));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("In%N", "p", sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException0;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate.orPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      AndPredicate.andPredicate((Predicate<? super SQLException>) uniquePredicate0, (Predicate<? super SQLException>) uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      IteratorUtils.isEmpty(objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("pT!3u&Y;Y3{5]T", "org.apache.commons.collections4.iterators.LoopingIterator", sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException((String) null, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException((String) null, sQLSyntaxErrorException1);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("$F~L");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("V,Y3&", "l(`");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException((String) null);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException((String) null, (String) null, 0);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException("$F~L", sQLSyntaxErrorException6);
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLSyntaxErrorException2, (Equator<SQLException>) defaultEquator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(iterator1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLDataException, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Boolean> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends Boolean>) orderedMapIterator0);
      MapIterator<SQLDataException, Boolean> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, Boolean>) orderedMapIterator1);
      MapIterator<SQLDataException, Boolean> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends Boolean>) mapIterator0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator1, 11);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedMapIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) list0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Locale.FilteringMode> predicate0 = ComparatorPredicate.comparatorPredicate(locale_FilteringMode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) resettableListIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      MapIterator<SQLTimeoutException, SQLNonTransientException> mapIterator2 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) mapIterator2, (Iterator<? extends SQLTransientException>) mapIterator2);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) mapIterator2, (Iterator<? extends SQLTimeoutException>) mapIterator2);
      IteratorUtils.isEmpty(mapIterator1);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EmptyIterator.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionPredicate.exceptionPredicate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, 1663L, 1663L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("dA5n>E8MtU)]>31", "List must not be null", (Throwable) null);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLNonTransientConnectionException0, defaultEquator0);
      SQLWarning sQLWarning0 = new SQLWarning("Enumeration must not be null");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("dA5n>E8MtU)]>31", "List must not be null", "Iterator must not be null", 31);
      stackTraceElementArray0[0] = stackTraceElement0;
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) treeSet0);
      Properties properties0 = new Properties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientConnectionException0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.singletonIterator((StringTokenizer) null);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 9);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pTz)G2;/R/t<X,G/>P");
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      Class<SQLFeatureNotSupportedException> class6 = SQLFeatureNotSupportedException.class;
      classArray0[6] = class6;
      Class<SQLFeatureNotSupportedException> class7 = SQLFeatureNotSupportedException.class;
      classArray0[7] = class7;
      Class<SQLFeatureNotSupportedException> class8 = SQLFeatureNotSupportedException.class;
      classArray0[8] = class8;
      Transformer<Properties, String> transformer0 = InvokerTransformer.invokerTransformer("pTz)G2;/R/t<X,G/>P", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer0, "", "MK=_ZA)l&[", "");
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[10];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("T,`U]yq{i", "T,`U]yq{i");
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("qGb7D@-Sr", "T,`U]yq{i");
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("]", "h42[#0).&ks", sQLNonTransientConnectionException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("5_qo=O'x<k-7P", "h42[#0).&ks", 100);
      SQLNonTransientConnectionException sQLNonTransientConnectionException9 = new SQLNonTransientConnectionException("]");
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 1);
      Properties properties0 = new Properties();
      ArrayListIterator<InstanceofPredicate> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<InstanceofPredicate>(properties0, 224, 1614);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) treeSet0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.getSuppressed();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("Entry does not exist: ", true);
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(singletonIterator0);
      IteratorUtils.toList((Iterator<? extends String>) listIteratorWrapper0, 31);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("]", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      PriorityQueue<SQLClientInfoException> priorityQueue1 = new PriorityQueue<SQLClientInfoException>();
      PriorityQueue<SQLClientInfoException> priorityQueue2 = new PriorityQueue<SQLClientInfoException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((PriorityQueue<SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(zippingIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.emptyMapIterator();
      MapIterator<ArrayList<BatchUpdateException>, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<ArrayList<BatchUpdateException>>) mapIterator0, (Object) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("]", sQLNonTransientConnectionException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]", "Transformer must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Transformer must not be null");
      DataTruncation dataTruncation0 = new DataTruncation(93, false, true, 93, 93, sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.getIterator("]");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) iterator0);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator((String) null);
      IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0, (Iterator<? extends SQLClientInfoException>) singletonIterator0, (Iterator<? extends SQLClientInfoException>) singletonIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) treeSet0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("pT!3u&Y;Y3{5]T");
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) listIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/bA-hvohP");
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", true);
      EqualPredicate<String> equalPredicate0 = new EqualPredicate<String>("/bA-hvohP");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 100, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate.comparatorPredicate(locale_FilteringMode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode1;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 2, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("]", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      MapIterator<SQLRecoverableException, LinkedList<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("transformer may not be null", "T,`U]yq{i");
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(",:", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("0DD_", "0DD_", sQLNonTransientConnectionException2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException((Throwable) null);
      int int0 = (-498);
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("", "]", (-498));
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("transformer may not be null");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException8;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException7;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException6;
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException7;
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-498), (-498));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      DataTruncation dataTruncation0 = new DataTruncation((-1768), true, true, 0, (-1), sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("qBImFPXL=gm$fvNqw%D", "No more elements in the iteration", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Oi", "", (-488), sQLDataException0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) arrayList0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIteratorWrapper0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("]", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("cCAkz", "T,`U]yq{i");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("]", "&whSPN_O;Xym-");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("z8q]%R%^tI*R-7Jn", "org.apache.commons.collections4.functors.MapTransformer", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException6);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException7;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("p)Vm&9w)Od=1{QEGZ");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("cCAkz", sQLNonTransientConnectionException4);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException1;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("s[B-B_19?", "NVHf76_", 0);
      sQLWarning0.getSuppressed();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLWarning0);
      sQLTransactionRollbackException0.printStackTrace();
      Properties properties0 = new Properties((Properties) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 0, (-1834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ServiceLoader<StringTokenizer>[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.DefaultEquator");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.DefaultEquator", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.DefaultEquator", sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (String) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[2] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLExceptionArray0[2]);
      sQLExceptionArray0[3] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[4] = (SQLException) sQLInvalidAuthorizationSpecException0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/q}uFF^>'bl[II", hashtable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0, sQLClientInfoException0);
      sQLExceptionArray0[5] = (SQLException) sQLRecoverableException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      sQLExceptionArray0[6] = (SQLException) sQLRecoverableException1;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0, 0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("Enumeration must not be null", "XsxTEWo$", 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLRecoverableException2, comparator0);
      IteratorUtils.find((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyListIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      int int0 = 0;
      int int1 = (-235);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-235));
      dataTruncation0.getSuppressed();
      dataTruncationArray0[0] = dataTruncation0;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) objectArrayListIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) stack0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(priorityQueue0);
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(linkedList0);
      PriorityQueue<InstanceofPredicate> priorityQueue1 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue1);
      IteratorUtils.find((Iterator<Integer>) reverseListIterator0, (Predicate<? super Integer>) predicate0);
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(reverseListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("]", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("cCAkz", "T,`U]yq{i");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("]", "&whSPN_O;Xym-");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("z8q]%R%^tI*R-7Jn", "org.apache.commons.collections4.functors.MapTransformer", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException6);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("]", "p)Vm&9w)Od=1{QEGZ", 0);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException8;
      SQLNonTransientConnectionException sQLNonTransientConnectionException9 = new SQLNonTransientConnectionException("]");
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException9;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) orderedMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[0];
      IteratorUtils.arrayListIterator(stringArray0, 0);
      OrderedMapIterator<StringTokenizer, Class<SQLTimeoutException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setUserObject(orderedMapIterator0);
      iIOMetadataNode0.item(0);
      // Undeclared exception!
      try { 
        iIOMetadataNode0.removeAttribute("");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // No such attribute!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(andPredicate0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", sQLWarning0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", (String) null, 139);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("PrototypeCloneFactory: The clone method must exist and be public ", "", (String) null, 139);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "qaj", (String) null, (-1));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "K2)/", "org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", 139);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("Index ", "&Y&fFGfD|8+}rk%'l", "K2)/", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("o\"4I;0=f", "Predicate must not be null", "PrototypeCloneFactory: The clone method must exist and be public ", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("", "^B)*", "org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", 139);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("Predicate must not be null", ",(SB[nun;e_GkuL-%2", "3sU1dxF&:`", 3210);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("PrototypeCloneFactory: The clone method must exist and be public ", "PrototypeCloneFactory: The clone method must exist and be public ", "", 139);
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      linkedList0.push(sQLTransientConnectionException0);
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.hasAttribute("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        treeSet0.add((InstanceofPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "/bA-hvohP";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/bA-hvohP");
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      int int0 = (-1225);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1225));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-1834));
      sQLWarning0.getSuppressed();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "s[B-B_19?", sQLWarning0);
      sQLTransactionRollbackException0.printStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-1834), (-1834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(zippingIterator0);
      try { 
        listIteratorWrapper0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("]|cd:>m)w!_", "]|cd:>m)w!_", 0, sQLNonTransientException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("<!", "", (-612), hashtable0, sQLSyntaxErrorException1);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLClientInfoException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0, (-1291));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      DataTruncation dataTruncation0 = new DataTruncation((-1108), true, true, (-1108), 0, sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(dataTruncation0);
      IteratorUtils.getIterator(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<ArrayList<SQLWarning>, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0, (-2049), 1544);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("dA5n>E8MtU)]>31", "List must not be null", (Throwable) null);
      DefaultEquator.defaultEquator();
      SQLWarning sQLWarning0 = new SQLWarning("Enumeration must not be null");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("dA5n>E8MtU)]>31", "w^>ycbo*", "Iterator must not be null", 31);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Enumeration must not be null", "dA5n>E8MtU)]>31", "org.apache.commons.collections4.functors.IfClosure", (-1));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Iterator must not be null", "dA5n>E8MtU)]>31", "org.apache.commons.collections4.functors.IfClosure", (-1));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("dA5n>E8MtU)]>31", "W@py.J", "ad0L( Bi]FN%W+Zo", (-1));
      stackTraceElementArray0[3] = stackTraceElement3;
      EqualPredicate.equalPredicate(sQLWarning0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "dA5n>E8MtU)]>31");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NB;u-HqzIY?.hJ%", "NB;u-HqzIY?.hJ%", (-676), sQLTransactionRollbackException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, (-676));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "<U`PEV'}>5\"I";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("<U`PEV'}>5\"I");
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("pT!3u&Y;Y3{5]T", "org.apache.commons.collections4.iterators.LoopingIterator", sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.LoopingIterator", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertNotNull(sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("]m", sQLSyntaxErrorException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.LoopingIterator", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.toString());
      assertEquals("]m", sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]m", sQLSyntaxErrorException2.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertNotNull(sQLSyntaxErrorException2);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("]m", sQLSyntaxErrorException1);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ]m", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals("]m", sQLSyntaxErrorException3.getMessage());
      assertNotNull(sQLSyntaxErrorException3);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("$F~L");
      assertEquals("$F~L", sQLSyntaxErrorException4.getMessage());
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: $F~L", sQLSyntaxErrorException4.toString());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertNotNull(sQLSyntaxErrorException4);
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("V,Y3&", "l(`");
      assertEquals("l(`", sQLSyntaxErrorException5.getSQLState());
      assertEquals("V,Y3&", sQLSyntaxErrorException5.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: V,Y3&", sQLSyntaxErrorException5.toString());
      assertEquals(0, sQLSyntaxErrorException5.getErrorCode());
      assertNotNull(sQLSyntaxErrorException5);
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException((String) null);
      assertNull(sQLSyntaxErrorException6.getSQLState());
      assertNull(sQLSyntaxErrorException6.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException6.toString());
      assertEquals(0, sQLSyntaxErrorException6.getErrorCode());
      assertNotNull(sQLSyntaxErrorException6);
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException1));
      
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException((String) null, (String) null, 0);
      assertNull(sQLSyntaxErrorException7.getSQLState());
      assertNull(sQLSyntaxErrorException7.getMessage());
      assertEquals(0, sQLSyntaxErrorException7.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException7.toString());
      assertNotNull(sQLSyntaxErrorException7);
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException6));
      
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException("$F~L", sQLSyntaxErrorException6);
      assertEquals("$F~L", sQLSyntaxErrorException8.getMessage());
      assertNull(sQLSyntaxErrorException8.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: $F~L", sQLSyntaxErrorException8.toString());
      assertEquals(0, sQLSyntaxErrorException8.getErrorCode());
      assertNull(sQLSyntaxErrorException6.getSQLState());
      assertNull(sQLSyntaxErrorException6.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException6.toString());
      assertEquals(0, sQLSyntaxErrorException6.getErrorCode());
      assertNotNull(sQLSyntaxErrorException8);
      assertFalse(sQLSyntaxErrorException8.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException8.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException8.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException8.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException8.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException8.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException8.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException8.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException1));
      
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0);
      assertEquals(9, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLClientInfoException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) resettableIterator1);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLSyntaxErrorException2, (Equator<SQLException>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException4);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException8);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException7);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException5);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException6);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException8);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException5);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException7);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException6);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException4);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.LoopingIterator", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.toString());
      assertEquals("]m", sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]m", sQLSyntaxErrorException2.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertNotNull(predicate0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException8));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException8));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) resettableIterator1, (Predicate<? super SQLClientInfoException>) predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException4);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException8);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException7);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException5);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException6);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException8);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException5);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException7);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException6);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException4);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.LoopingIterator", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.toString());
      assertEquals("]m", sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]m", sQLSyntaxErrorException2.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertNotNull(iterator0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException8));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException8));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException4);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException8);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException7);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException5);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException6);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException8);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException5);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException7);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException6);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException4);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.LoopingIterator", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("]m", sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]m", sQLSyntaxErrorException2.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertNotNull(zippingIterator0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException8));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException8));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException4);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException8);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException7);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException5);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException6);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException8);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException5);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException7);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException6);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException4);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.LoopingIterator", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: pT!3u&Y;Y3{5]T", sQLSyntaxErrorException0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("]m", sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]m", sQLSyntaxErrorException2.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertNotNull(iterator1);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException8));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException8));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException7));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<LinkedList<BatchUpdateException>, ArrayList<String>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",[v+");
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,[v+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(",[v+", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      Transformer<SQLTransientException, SQLTimeoutException> transformer0 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,[v+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(",[v+", sQLTimeoutException0.getMessage());
      assertNotNull(transformer0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(g", sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,[v+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(",[v+", sQLTimeoutException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("(g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: (g", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLTimeoutException0.setNextException(sQLNonTransientConnectionException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,[v+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(",[v+", sQLTimeoutException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("(g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: (g", sQLNonTransientConnectionException0.toString());
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,[v+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(",[v+", sQLTimeoutException0.getMessage());
      assertNotNull(iterator0);
      
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) iterator0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ,[v+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(",[v+", sQLTimeoutException0.getMessage());
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      int int0 = (-43);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, (-43));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ArrayDeque<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C[lcIJ io*e,EsTz", "C[lcIJ io*e,EsTz");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("C[lcIJ io*e,EsTz", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: C[lcIJ io*e,EsTz", sQLTimeoutException0.toString());
      assertEquals("C[lcIJ io*e,EsTz", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator("C[lcIJ io*e,EjwsTz");
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) set0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(resettableIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(nodeListIterator0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, (-1203));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("%#>&", "%#>&");
      assertEquals("%#>&", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: %#>&", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("%#>&", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(", ", "%#>&", 302);
      assertEquals(302, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: , ", sQLTransientConnectionException0.toString());
      assertEquals("%#>&", sQLTransientConnectionException0.getSQLState());
      assertEquals(", ", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0, defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(302, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: , ", sQLTransientConnectionException0.toString());
      assertEquals("%#>&", sQLTransientConnectionException0.getSQLState());
      assertEquals(", ", sQLTransientConnectionException0.getMessage());
      assertNotNull(equalPredicate0);
      
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.constantTransformer(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(transformer0);
      
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(302, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: , ", sQLTransientConnectionException0.toString());
      assertEquals("%#>&", sQLTransientConnectionException0.getSQLState());
      assertEquals(", ", sQLTransientConnectionException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(predicate0);
      
      predicateArray0[1] = predicate0;
      OrderedMapIterator<InstanceofPredicate, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[2] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      assertEquals(3, predicateArray0.length);
      assertNotNull(allPredicate0);
      
      Factory<SQLTimeoutException> factory0 = ConstantFactory.constantFactory(sQLTimeoutException0);
      assertEquals("%#>&", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: %#>&", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("%#>&", sQLTimeoutException0.getMessage());
      assertNotNull(factory0);
      
      Transformer<SQLException, SQLTimeoutException> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) factory0);
      assertEquals("%#>&", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: %#>&", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("%#>&", sQLTimeoutException0.getMessage());
      assertNotNull(transformer1);
      
      Transformer<SQLTimeoutException, SQLTimeoutException> transformer2 = IfTransformer.ifTransformer((Predicate<? super SQLTimeoutException>) allPredicate0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer1, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer1);
      assertEquals("%#>&", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: %#>&", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("%#>&", sQLTimeoutException0.getMessage());
      assertEquals(3, predicateArray0.length);
      assertNotNull(transformer2);
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer2);
      assertEquals("%#>&", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: %#>&", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("%#>&", sQLTimeoutException0.getMessage());
      assertEquals(3, predicateArray0.length);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedHashSet<Properties>[] linkedHashSetArray0 = (LinkedHashSet<Properties>[]) Array.newInstance(LinkedHashSet.class, 6);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertNotNull(linkedHashSet2);
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<Properties> linkedHashSet3 = new LinkedHashSet<Properties>();
      assertEquals(0, linkedHashSet3.size());
      assertTrue(linkedHashSet3.isEmpty());
      assertNotNull(linkedHashSet3);
      assertTrue(linkedHashSet3.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet3.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet3.equals((Object)linkedHashSet2));
      
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<Properties> linkedHashSet4 = new LinkedHashSet<Properties>();
      assertTrue(linkedHashSet4.isEmpty());
      assertEquals(0, linkedHashSet4.size());
      assertNotNull(linkedHashSet4);
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet3));
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet2));
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet4.equals((Object)linkedHashSet0));
      
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<Properties> linkedHashSet5 = new LinkedHashSet<Properties>();
      assertTrue(linkedHashSet5.isEmpty());
      assertEquals(0, linkedHashSet5.size());
      assertNotNull(linkedHashSet5);
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet3));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet2));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet4));
      assertTrue(linkedHashSet5.equals((Object)linkedHashSet0));
      
      linkedHashSetArray0[5] = linkedHashSet5;
      ResettableIterator<LinkedHashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      assertEquals(6, linkedHashSetArray0.length);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      propertiesArray0[0] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      assertEquals(1, propertiesArray0.length);
      assertNotNull(resettableIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(resettableIterator0);
      assertEquals(1, propertiesArray0.length);
      assertNotNull(identityPredicate0);
      
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      assertNotNull(transformerPredicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLIntegrityConstraintViolationException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLIntegrityConstraintViolationException, Object> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Object>(mapIterator1);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(resettableIterator0);
      
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      assertEquals(2, iteratorArray0.length);
      assertNotNull(iterator0);
      
      SQLWarning sQLWarning0 = new SQLWarning("I)A{;l3m94_E,F8Ir.", "Closure must not be null");
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("Closure must not be null", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: I)A{;l3m94_E,F8Ir.", sQLWarning0.toString());
      assertEquals("I)A{;l3m94_E,F8Ir.", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, sQLExceptionArray0.length);
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, propertiesArray0.length);
      assertNotNull(resettableListIterator0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-759));
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-759), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string0 = "M@~sIG";
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, "M@~sIG", (-1445), sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-759), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("M@~sIG", sQLSyntaxErrorException1.getSQLState());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertEquals((-1445), sQLSyntaxErrorException1.getErrorCode());
      assertNotNull(sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorException1.addSuppressed(sQLSyntaxErrorException0);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-759), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("M@~sIG", sQLSyntaxErrorException1.getSQLState());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertEquals((-1445), sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorException0.addSuppressed(sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-759), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("M@~sIG", sQLSyntaxErrorException1.getSQLState());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertEquals((-1445), sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      String string1 = sQLSyntaxErrorException0.getLocalizedMessage();
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-759), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(string1);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLException sQLException0 = new SQLException("The prototype must be cloneable via a public clone method", "The prototype must be cloneable via a public clone method", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException0.toString());
      assertNotNull(sQLException0);
      
      SQLException sQLException1 = new SQLException(sQLException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException0.toString());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException1.getMessage());
      assertEquals("java.sql.SQLException: java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertNotNull(sQLException1);
      assertFalse(sQLException1.equals((Object)sQLException0));
      
      sQLException1.printStackTrace();
      assertNotSame(sQLException0, sQLException1);
      assertNotSame(sQLException1, sQLException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException0.toString());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException1.getMessage());
      assertEquals("java.sql.SQLException: java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertFalse(sQLException0.equals((Object)sQLException1));
      assertFalse(sQLException1.equals((Object)sQLException0));
      
      SQLException sQLException2 = (SQLException)sQLException0.fillInStackTrace();
      assertNotSame(sQLException0, sQLException1);
      assertSame(sQLException0, sQLException2);
      assertNotSame(sQLException2, sQLException1);
      assertSame(sQLException2, sQLException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException0.toString());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException2.getSQLState());
      assertEquals(0, sQLException2.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException2.getMessage());
      assertEquals("java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException2.toString());
      assertNotNull(sQLException2);
      assertFalse(sQLException0.equals((Object)sQLException1));
      assertFalse(sQLException2.equals((Object)sQLException1));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("The prototype must be cloneable via a public clone method", "The prototype must be cloneable via a public clone method", (-3551), sQLException1);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The prototype must be cloneable via a public clone method", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException0.toString());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException1.getMessage());
      assertEquals("java.sql.SQLException: java.sql.SQLException: The prototype must be cloneable via a public clone method", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: The prototype must be cloneable via a public clone method", sQLFeatureNotSupportedException0.toString());
      assertEquals("The prototype must be cloneable via a public clone method", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("The prototype must be cloneable via a public clone method", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-3551), sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      assertFalse(sQLException0.equals((Object)sQLException1));
      assertFalse(sQLException1.equals((Object)sQLException0));
      assertFalse(sQLException1.equals((Object)sQLException2));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      OrderedMapIterator<SQLTimeoutException, Stack<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ListIterator<SQLTimeoutException> listIterator0 = null;
      UniquePredicate<SQLTimeoutException> uniquePredicate0 = new UniquePredicate<SQLTimeoutException>();
      assertNotNull(uniquePredicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      assertNotNull(andPredicate0);
      
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      assertNotNull(predicateTransformer0);
      
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      assertNotNull(predicate0);
      
      MapIterator<SQLRecoverableException, LinkedList<Iterator>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) andPredicate0);
      assertFalse(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<SQLTransactionRollbackException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(mapIterator0);
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) listIteratorWrapper0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransactionRollbackException) null);
      assertNotNull(resettableIterator0);
      
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) resettableIterator0, (-523L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      assertNotNull(transformer0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(iterator0);
      
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(resettableIterator0);
      
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      sQLExceptionArray0[2] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLExceptionArray0[2]);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(7, sQLExceptionArray0.length);
      assertNotNull(sQLTransientException0);
      
      sQLExceptionArray0[3] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[4] = (SQLException) sQLInvalidAuthorizationSpecException0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Spliterator<Throwable> spliterator0 = sQLTransientException0.spliterator();
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(7, sQLExceptionArray0.length);
      assertNotNull(spliterator0);
      
      Predicate<Locale.FilteringMode> predicate0 = new UniquePredicate<Locale.FilteringMode>();
      assertNotNull(predicate0);
      
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) resettableListIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      MapIterator<SQLTimeoutException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTimeoutException, SQLNonTransientException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertSame(mapIterator1, mapIterator0);
      assertNotNull(mapIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) mapIterator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<SQLTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      ResettableIterator<ArrayDeque<Integer>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) reverseListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(enumeration0);
      
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(iterator1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("!oj/gx", "List must not be null", (-94));
      assertEquals("!oj/gx", sQLRecoverableException0.getMessage());
      assertEquals("List must not be null", sQLRecoverableException0.getSQLState());
      assertEquals((-94), sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: !oj/gx", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        reverseListIterator0.set(sQLRecoverableException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ArrayDeque<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayDeque<SQLException>>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      MapIterator<SQLDataException, ArrayDeque<SQLException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, ArrayDeque<SQLException>>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(enumeration0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      int int0 = (-962);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, (-962));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) iterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Locale.FilteringMode> predicate0 = ComparatorPredicate.comparatorPredicate(locale_FilteringMode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertNotNull(predicate0);
      
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertNotNull(listIterator1);
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      MapIterator<SQLTimeoutException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) mapIterator0, (Iterator<? extends SQLTransientException>) mapIterator0);
      assertNotNull(zippingIterator0);
      
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) mapIterator0);
      assertNotNull(enumeration0);
      
      Iterator<SQLTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      assertNotNull(iterator1);
      
      ZippingIterator<SQLTimeoutException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      assertNotNull(zippingIterator1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MapIterator<DataTruncation, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("dA5n>E8MtU)]>31", "List must not be null", (Throwable) null);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLNonTransientConnectionException0, defaultEquator0);
      SQLWarning sQLWarning0 = new SQLWarning("Enumeration must not be null");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("dA5n>E8MtU)]>31", "w^>ycbo*", "Iterator must not be null", 31);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Enumeration must not be null", "dA5n>E8MtU)]>31", "org.apache.commons.collections4.functors.IfClosure", (-1));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Iterator must not be null", "dA5n>E8MtU)]>31", "org.apache.commons.collections4.functors.IfClosure", (-1));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("dA5n>E8MtU)]>31", "W@py.J", "ad0L( Bi]FN%W+Zo", (-1));
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      EqualPredicate.equalPredicate(sQLWarning0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) orderedMapIterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) mapIterator1);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (int) integerArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("^VpM", "^VpM");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("delimiter may not be null", "delimiter may not be null", sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException1);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (-1425L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }
}
