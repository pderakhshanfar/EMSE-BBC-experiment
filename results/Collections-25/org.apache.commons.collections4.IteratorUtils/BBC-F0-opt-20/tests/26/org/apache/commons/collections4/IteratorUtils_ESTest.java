/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 11:21:49 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>(765, (Comparator<? super SQLTransactionRollbackException>) null);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) priorityQueue0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("g,!OOZWHNn5};", "g,!OOZWHNn5};", 765);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 765, sQLRecoverableException0);
      priorityQueue0.add(sQLTransactionRollbackException0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null, 60, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) objectArrayIterator0, 0);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(object0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ubxAXZ");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, "", (-2517), hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", "", hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      sQLClientInfoException2.addSuppressed(sQLClientInfoException1);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((String) null, (String) null, hashMap0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      IteratorUtils.getIterator(sQLClientInfoException4);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus1, clientInfoStatus1);
      SingletonIterator<EnumSet<ClientInfoStatus>> singletonIterator0 = new SingletonIterator<EnumSet<ClientInfoStatus>>(enumSet0, false);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(instanceofPredicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<EnumSet<ClientInfoStatus>>) singletonIterator0, (Closure<? super EnumSet<ClientInfoStatus>>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedIterator0);
      IteratorUtils.getIterator(equalPredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("5P$/");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Transformer<SQLNonTransientException, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) singletonListIterator0, (Transformer<? super SQLDataException, ? extends SQLClientInfoException>) transformer0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) iterator1, (Iterator<? extends SQLClientInfoException>) iterator1, (Iterator<? extends SQLClientInfoException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) zippingIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) orderedIterator0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) objectArrayIterator0, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      objectArrayIterator0.reset();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(object0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) objectArrayIterator0, class0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" YjhaRit21,1|OKu{Y", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(" YjhaRit21,1|OKu{Y", hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<Locale.Category> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) listIterator0);
      Iterator<Locale.Category> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) iterator0);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      properties1.put(properties0, iterator1);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties(properties0);
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends Properties>) objectArrayListIterator0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) loopingListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      IteratorUtils.contains((Iterator<Properties>) objectArrayIterator0, (Object) properties0);
      Object object1 = new Object();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 128;
      int int1 = 1;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = null;
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 4);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) singletonIterator0);
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(list0);
      iteratorArray0[0] = (Iterator<Properties>) loopingListIterator0;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Properties>) loopingListIterator0, 51);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1817, 1817);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(stringTokenizer0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      int int0 = 1;
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.arrayIterator(predicateArray0, 1, 1);
      ListIteratorWrapper<Predicate<Object>> listIteratorWrapper0 = new ListIteratorWrapper<Predicate<Object>>(resettableIterator0);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) listIteratorWrapper0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) list0);
      predicateArray0[1] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[3] = predicate1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate2 = ComparatorPredicate.comparatorPredicate((Object) predicate0, comparator0);
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = NotPredicate.notPredicate((Predicate<? super Object>) predicate2);
      predicateArray0[5] = predicate3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLIntegrityConstraintViolationException0);
      predicateArray0[6] = (Predicate<Object>) equalPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      PredicateTransformer<Boolean> predicateTransformer0 = new PredicateTransformer<Boolean>(nullIsTruePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((Boolean) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("uTSR|+thw|,~Q|", "", 3143, sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("uTSR|+thw|,~Q|", "uTSR|+thw|,~Q|", (-2910), sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Transformer must not be null", sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      vector0.add(sQLInvalidAuthorizationSpecException1);
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(arrayList0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<Properties>) resettableIterator0, (Object) zippingIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      HashMap<Boolean, SQLRecoverableException> hashMap0 = new HashMap<Boolean, SQLRecoverableException>();
      EntrySetMapIterator<Boolean, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, SQLRecoverableException>(hashMap0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) entrySetMapIterator0, (Iterator<? extends Boolean>) entrySetMapIterator0, (Iterator<? extends Boolean>) entrySetMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) zippingIterator0, (Iterator<? extends Boolean>) entrySetMapIterator0, (Iterator<? extends Boolean>) zippingIterator0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<Properties>) resettableIterator0, (Object) arrayList0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) objectArrayIterator0, 0);
      IteratorUtils.emptyIterator();
      MapIterator<Properties, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLRecoverableException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLRecoverableException>(mapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("B&#c5Lk8NDm276~|");
      IteratorUtils.contains((Iterator<Properties>) abstractMapIteratorDecorator0, (Object) stringTokenizer0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) objectArrayIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientException>(abstractOrderedMapIteratorDecorator0);
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int int0 = 1;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 1);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      int int1 = 51;
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(iteratorArray0[1], 51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) orderedIterator0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0);
      Object object0 = new Object();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) orderedIterator0;
      objectArray0[2] = (Object) orderedIterator0;
      objectArray0[3] = object0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      MapIterator<StringTokenizer, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<StringTokenizer, SQLNonTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) mapIterator1, (long) 0, (long) 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) boundedIterator0, (-1249));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<LinkedList<Class<SQLDataException>>, SQLException> hashMap0 = new HashMap<LinkedList<Class<SQLDataException>>, SQLException>();
      EntrySetMapIterator<LinkedList<Class<SQLDataException>>, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<LinkedList<Class<SQLDataException>>, SQLException>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedList<Class<SQLDataException>>>) entrySetMapIterator0, (Transformer<? super LinkedList<Class<SQLDataException>>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      SingletonIterator<Stack<DataTruncation>> singletonIterator0 = new SingletonIterator<Stack<DataTruncation>>(stack0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 1);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Iterator must not be null", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<DataTruncation>>) singletonIterator0, (Transformer<? super Stack<DataTruncation>, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Iterator must not be null' on 'class java.util.Stack' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(list0);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) list0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(vector0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) vector0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "delimiter may not be null", (-6536));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("delimiter may not be null");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "delimiter may not be null", "]", "delimiter may not be null");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Hashtable<SQLRecoverableException, SQLNonTransientException> hashtable0 = new Hashtable<SQLRecoverableException, SQLNonTransientException>();
      EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException>(hashtable0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) entrySetMapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Iterator<LinkedHashSet>>) entrySetMapIterator0, (Predicate<? super Iterator<LinkedHashSet>>) predicate0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Predicate<Object>[] predicateArray0 = null;
      Transformer<Object, StringTokenizer>[] transformerArray0 = (Transformer<Object, StringTokenizer>[]) Array.newInstance(Transformer.class, 7);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
      Class<Properties> class1 = Properties.class;
      classArray0[0] = class1;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) class0;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class0, (Class<?>[]) classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) listIterator0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) transformer0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, 1753);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) null);
      IteratorUtils.skippingIterator(iterator0, 2140L);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mapIterator0;
      objectArray0[1] = (Object) mapIterator0;
      objectArray0[2] = (Object) mapIterator0;
      objectArray0[3] = (Object) mapIterator0;
      IteratorUtils.arrayListIterator(objectArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("", "", 7, sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientException) sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) listIterator0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer0);
      Object object0 = new Object();
      IteratorUtils.size(iterator0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      Transformer<Object, SQLDataException> transformer1 = ConstantTransformer.constantTransformer(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, ? extends SQLDataException>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) listIterator0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer0);
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2898);
      integerArray0[7] = integer7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, int0, 869);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<?>) listIterator0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer0);
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2898);
      integerArray0[7] = integer7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, int0, 869);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MapIterator<String, Vector<BatchUpdateException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<String, Vector<BatchUpdateException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) null, (Object) vector0);
      IteratorUtils.size(mapIterator1);
      IteratorUtils.getIterator((Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.emptyOrderedIterator();
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) null, (Closure<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Hashtable<SQLRecoverableException, SQLNonTransientException> hashtable0 = new Hashtable<SQLRecoverableException, SQLNonTransientException>();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<DataTruncation>) null, (Closure<? super DataTruncation>) closure0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, Locale.Category> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, Locale.Category>(mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.size(mapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hashtable<SQLRecoverableException, SQLNonTransientException> hashtable0 = new Hashtable<SQLRecoverableException, SQLNonTransientException>();
      EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException>(hashtable0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) entrySetMapIterator0;
      objectArray0[2] = (Object) hashtable0;
      objectArray0[3] = object0;
      objectArray0[5] = (Object) hashtable0;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      String string0 = "zM{MeAj8";
      SQLDataException sQLDataException0 = new SQLDataException("zM{MeAj8");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable1, sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLClientInfoException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<SQLFeatureNotSupportedException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLFeatureNotSupportedException, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) orderedIterator0;
      objectArray0[2] = (Object) orderedIterator0;
      objectArray0[3] = object0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) objectArrayIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hashtable<SQLRecoverableException, SQLNonTransientException> hashtable0 = new Hashtable<SQLRecoverableException, SQLNonTransientException>();
      EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException>(hashtable0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) entrySetMapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Iterator<LinkedHashSet>>) entrySetMapIterator0, (Predicate<? super Iterator<LinkedHashSet>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Class<SQLDataException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      IteratorUtils.toArray(iterator0);
      LinkedHashSet<Transformer<Object, String>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, String>>();
      LoopingIterator<Transformer<Object, String>> loopingIterator0 = new LoopingIterator<Transformer<Object, String>>(linkedHashSet0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Transformer<Object, String>>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      Iterator<Object> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 463);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedHashSet0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) loopingIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10, (-31));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      NullPredicate.nullPredicate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H@");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonIterator(locale_Category0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      vector0.add((Integer) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) loopingIterator0, (Predicate<? super Integer>) transformerPredicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      IteratorUtils.size(mapIterator1);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("E0:XA-Jw.n=1ak+]}[");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("E0:XA-Jw.n=1ak+]}[");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("Criterion must not be null.");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      int int0 = (-972);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, (-972));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hashtable<SQLRecoverableException, SQLNonTransientException> hashtable0 = new Hashtable<SQLRecoverableException, SQLNonTransientException>();
      EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException>(hashtable0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLWarning0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLSyntaxErrorException0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) listIterator0);
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(list0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0;
      MapIterator<SQLInvalidAuthorizationSpecException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator1;
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(iteratorArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "qdA^~9`=miH%E$NBI\"";
      stringArray0[1] = "ListIterator must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "k~iSws%c\"*|1";
      stringArray0[4] = "&J!";
      stringArray0[5] = "i(=*pP^ijazwx]R";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      HashMap<Predicate<Object>, Closure<Object>> hashMap1 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap1);
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Hashtable<SQLRecoverableException, SQLNonTransientException> hashtable0 = new Hashtable<SQLRecoverableException, SQLNonTransientException>();
      EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException>(hashtable0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) entrySetMapIterator0;
      objectArray0[2] = (Object) hashtable0;
      objectArray0[3] = object0;
      objectArray0[5] = (Object) hashtable0;
      objectArray0[6] = (Object) entrySetMapIterator0;
      objectArray0[7] = (Object) hashtable0;
      objectArray0[8] = object0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      String string0 = "";
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable1);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 2886, 16, sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", dataTruncation0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation1 = new DataTruncation(234, false, false, 16, 2, sQLTransientException0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      dataTruncationArray0[0] = dataTruncation1;
      ObjectArrayIterator<DataTruncation> objectArrayIterator1 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) objectArrayIterator1, 1);
      // Undeclared exception!
      try { 
        EnumSet.complementOf((EnumSet<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      IteratorUtils.isEmpty(iterator0);
      ObjectArrayIterator<ClientInfoStatus> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<ClientInfoStatus>((ClientInfoStatus[]) null, 265);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "[]", 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      int int0 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "[]", 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<Iterator<SQLFeatureNotSupportedException>> iterable0 = new LinkedList<Iterator<SQLFeatureNotSupportedException>>();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      IteratorUtils.contains((Iterator<DataTruncation>) null, (Object) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<?>) orderedMapIterator0, 3143);
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) listIterator0, (Transformer<? super Object, String>) null, "", "Collection must not be null", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Hashtable<SQLRecoverableException, SQLNonTransientException> hashtable0 = new Hashtable<SQLRecoverableException, SQLNonTransientException>();
      EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException>(hashtable0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) entrySetMapIterator0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Object object0 = new Object();
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList2 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList3 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("$]GJQW/r", (String) null);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8gg1&5v`}qJjHf", "$]GJQW/r", 93);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("8gg1&5v`}qJjHf", "", 93, sQLTransientConnectionException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException1);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("8gg1&5v`}qJjHf", "", sQLTransientExceptionArray0[2]);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException2;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", (-1813));
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = (Enumeration<SQLFeatureNotSupportedException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      Enumeration<SQLFeatureNotSupportedException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration1);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) enumeration1, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>(0);
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) reverseListIterator0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) arrayList0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("transformer may not be null");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("transformer may not be null", sQLFeatureNotSupportedException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLNonTransientException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<Object, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) mapIterator0, (Transformer<? super Object, String>) transformer0, "Op:g^d+R6kP`~|cL", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      int[] intArray0 = new int[1];
      intArray0[0] = 2470;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 2470, (-3236), batchUpdateException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      InvokerTransformer.invokerTransformer("");
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<DataTruncation>) singletonListIterator0, (Closure<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("'I");
      SQLDataException sQLDataException0 = new SQLDataException("", sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.toArray(iterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.size(iterator1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLSyntaxErrorException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      uniquePredicate0.evaluate(sQLFeatureNotSupportedException0);
      Predicate<SQLNonTransientException> predicate0 = OrPredicate.orPredicate((Predicate<? super SQLNonTransientException>) uniquePredicate0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", sQLTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(13, false, false, 13, 13, sQLTransientConnectionException1);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      InvokerTransformer.invokerTransformer("d5GpU/BrRr>$");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.apply(iterator0, (Closure<? super DataTruncation>) closure0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("(i9yJoHPt=9]54+jA+");
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayDeque0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLDataException sQLDataException0 = new SQLDataException("(i9yJoHPt=9]54+jA+", "$hqmzo2S", 12);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("$hqmzo2S", "$hqmzo2S", sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((Throwable) null);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      OrderedMapIterator<SQLTransientException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) orderedMapIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      ListIterator<Object> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Object>) listIterator0, (Transformer<? super Object, String>) transformer0, "", "", "");
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("I[ovYa", "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "[");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("uMnJ[Jq9BIV'$DmXb", "NodeList must not be null", 10);
      uniquePredicate0.evaluate(sQLTransientException0);
      Predicate<SQLNonTransientException> predicate0 = OrPredicate.orPredicate((Predicate<? super SQLNonTransientException>) uniquePredicate0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("N;|(A.kJiTAKTYXofg]", "", sQLTransactionRollbackException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      uniquePredicate0.evaluate(sQLTransactionRollbackException0);
      Predicate<SQLNonTransientException> predicate0 = OrPredicate.orPredicate((Predicate<? super SQLNonTransientException>) uniquePredicate0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "N;|(A.kJiTAKTYXofg]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.toList((Iterator<?>) reverseListIterator0, 5654);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) comparatorPredicate_Criterion0;
      objectArray0[1] = (Object) "H@";
      objectArray0[2] = (Object) "H@";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) predicate0;
      Object object1 = new Object();
      objectArray0[5] = (Object) iterator0;
      objectArray0[7] = (Object) reverseListIterator0;
      objectArray0[7] = (Object) comparatorPredicate_Criterion0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) objectArrayIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&YsWnJKlR!J$SQLIl V");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      iIOMetadataNode1.appendChild(iIOMetadataNode0);
      Integer integer0 = new Integer(91);
      IteratorUtils.singletonIterator(integer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-45), 100, batchUpdateException0);
      DataTruncation dataTruncation1 = new DataTruncation(100, true, true, (-45), 1, dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation1);
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("&YsWnJKlR!J$SQLIl V");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      predicateArray0[2] = predicate1;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MapIterator<Properties, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.toString((Iterator<Properties>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer("KTtn.'[N");
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer1);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      predicateArray0[2] = predicate2;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 7);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      transformerArray0[2] = transformer0;
      transformerArray0[3] = transformer0;
      Transformer<Object, String> transformer2 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      transformerArray0[4] = transformer2;
      transformerArray0[5] = transformer0;
      transformerArray0[6] = transformer0;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformer2);
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "KTtn.'[N", "+xYm:5DU/(J[Qty=RE", "+xYm:5DU/(J[Qty=RE");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      InvokerTransformer.invokerTransformer("(i9yJoHPt=9]54+jA+");
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("HnLR'^+p", "");
      arrayDeque0.add(sQLFeatureNotSupportedException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayDeque0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toString((Iterator<SQLTransientException>) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", sQLTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-1), (-1), sQLTransientConnectionException1);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) singletonListIterator0, (Iterator<? extends SQLException>) singletonListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.UniquePredicate", "org.apache.commons.collections4.CollectionUtils", sQLTransientConnectionException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 143, 143);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(">d9l");
      SQLDataException sQLDataException0 = new SQLDataException("(i9yJoHPt=9]54+jA+", ">d9l", sQLNonTransientConnectionException0);
      SQLDataException sQLDataException1 = new SQLDataException("jOdof-{", sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException1);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode1;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode2;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(arrayList0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) loopingListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&YsWnJKlR!J$SQLIl V");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      iIOMetadataNode1.appendChild(iIOMetadataNode0);
      Integer integer0 = new Integer(91);
      IteratorUtils.singletonIterator(integer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-45), (-1681), batchUpdateException0);
      DataTruncation dataTruncation1 = new DataTruncation(100, true, true, (-1681), 1, dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation1);
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("&YsWnJKlR!J$SQLIl V");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      predicateArray0[2] = predicate1;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      transformerArray0[0] = transformer1;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) singletonListIterator0, (Transformer<? super DataTruncation, String>) switchTransformer0, "&YsWnJKlR!J$SQLIl V", "&YsWnJKlR!J$SQLIl V", "&YsWnJKlR!J$SQLIl V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      String string0 = "\\H@";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H@");
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) orderedIterator0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      Integer integer0 = new Integer(10);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator((Integer) null);
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.find((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("'?iq1:+)", "(eG|58HymDI7x");
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(arrayDeque0);
      loopingIterator0.reset();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) loopingIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 9);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      Class<SQLFeatureNotSupportedException> class6 = SQLFeatureNotSupportedException.class;
      classArray0[6] = class6;
      Class<SQLFeatureNotSupportedException> class7 = SQLFeatureNotSupportedException.class;
      classArray0[7] = class7;
      Class<SQLFeatureNotSupportedException> class8 = SQLFeatureNotSupportedException.class;
      classArray0[8] = class8;
      InvokerTransformer<SQLClientInfoException, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<SQLClientInfoException, SQLClientInfoException>("ZNe MAxenT`jF@DLlr", classArray0, classArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) invokerTransformer0);
      IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) iterator0);
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList2 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList3 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList4 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("$]GJQW/r");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode1.appendChild(iIOMetadataNode0);
      iIOMetadataNode0.appendChild(node0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("$]GJQW/r", "'YvSQL8");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) iterator0);
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList2 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList3 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList4 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("$]GJQW/r");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode1.appendChild(iIOMetadataNode0);
      iIOMetadataNode0.appendChild(node0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("$]GJQW/r", "'YvSQL8");
      LinkedList<SQLWarning> linkedList5 = new LinkedList<SQLWarning>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&YsWnJKlR!J$SQLIl V");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      iIOMetadataNode1.appendChild(iIOMetadataNode0);
      Integer integer0 = new Integer(91);
      IteratorUtils.singletonIterator(integer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-45), (-1681), batchUpdateException0);
      DataTruncation dataTruncation1 = new DataTruncation(100, true, true, (-1681), 1, dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation1);
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("&YsWnJKlR!J$SQLIl V");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      predicateArray0[2] = predicate1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) mapIterator1);
      IteratorUtils.getIterator(predicate1);
      OrderedIterator<HashMap<Class<SQLIntegrityConstraintViolationException>, Boolean>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("&YsWnJKlR!J$SQLIl V");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<HashMap<Class<SQLIntegrityConstraintViolationException>, Boolean>>) orderedIterator0, (Transformer<? super HashMap<Class<SQLIntegrityConstraintViolationException>, Boolean>, String>) factoryTransformer0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>(priorityQueue0);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(treeSet0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0);
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      IteratorUtils.unmodifiableIterator(iterator0);
      LoopingIterator<SQLException> loopingIterator1 = new LoopingIterator<SQLException>(treeSet0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<SQLException>) loopingIterator1, (Transformer<? super SQLException, String>) transformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]", "");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Consumer<StringTokenizer> consumer0 = (Consumer<StringTokenizer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        singletonListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      IteratorUtils.find((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      NullPredicate.nullPredicate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H@");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonIterator(locale_Category0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      IteratorUtils.matchesAny((Iterator<Integer>) loopingIterator0, (Predicate<? super Integer>) transformerPredicate0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale_Category0;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) vector0;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MapIterator<Object, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      String string0 = "k-KPmP{xBWjTB";
      IteratorUtils.toString((Iterator<Object>) mapIterator0, (Transformer<? super Object, String>) transformer0, "k-KPmP{xBWjTB", "", "EIl%C");
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(arrayList0);
      // Undeclared exception!
      try { 
        ComparatorPredicate.comparatorPredicate((Object) reverseListIterator0, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator must not be null.
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MapIterator<Object, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<Object>) mapIterator0, (Transformer<? super Object, String>) transformer0, "js#i1O_\"y$?xS/I-+`", "js#i1O_\"y$?xS/I-+`", "");
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(arrayList0);
      String string0 = "";
      String string1 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "InstantiateTransformer: Constructor threw an exception");
      // Undeclared exception!
      try { 
        ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator must not be null.
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<Object, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) mapIterator0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) transformer0, "", "js#i1O_\"y$?xS/I-+`", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&YsWnJKlR!J$SQLIl V");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      iIOMetadataNode1.appendChild(iIOMetadataNode0);
      Integer integer0 = new Integer(91);
      IteratorUtils.singletonIterator(integer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-45), (-1681), batchUpdateException0);
      DataTruncation dataTruncation1 = new DataTruncation(100, true, true, (-1681), 1, dataTruncation0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation1);
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("&YsWnJKlR!J$SQLIl V");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      transformerArray0[0] = transformer1;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) singletonListIterator0, (Transformer<? super DataTruncation, String>) switchTransformer0, "&YsWnJKlR!J$SQLIl V", "&YsWnJKlR!J$SQLIl V", "&YsWnJKlR!J$SQLIl V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '&YsWnJKlR!J$SQLIl V' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      IteratorUtils.getIterator((Object) null);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedMapIterator0, 3143);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableListIterator0, 3143);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3143
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) abstractOrderedMapIteratorDecorator0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator0, 234);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) list0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Integer>) transformerPredicate0);
      List<Object> list1 = IteratorUtils.toList((Iterator<?>) abstractOrderedMapIteratorDecorator0, 5);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list1);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableListIterator0, (-45));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -45
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      NullPredicate.nullPredicate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H@");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      IteratorUtils.matchesAny((Iterator<Integer>) loopingIterator0, (Predicate<? super Integer>) transformerPredicate0);
      int int0 = (-45);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale_Category0;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) vector0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) resettableIterator0, (-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) iterator0);
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList2 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList3 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList4 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("$]GJQW/r");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$]GJQW/r", "$]GJQW/r", 10);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      String string0 = "ONiTL0NB";
      iIOMetadataNode3.getAttributeNodeNS("ONiTL0NB", "ONiTL0NB");
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) linkedList0);
      IteratorUtils.emptyMapIterator();
      ArrayListIterator<ClientInfoStatus> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<ClientInfoStatus>(iIOMetadataNode0, 1960);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) listIterator0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer0);
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      integerArray0[5] = integer0;
      Integer integer5 = new Integer(int0);
      integerArray0[6] = integer5;
      Integer integer6 = new Integer(2898);
      integerArray0[7] = integer6;
      IteratorUtils.toList((Iterator<?>) iterator0, 1);
      IteratorUtils.size(iterator0);
      ListIterator<SQLRecoverableException> listIterator1 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) nullIsTruePredicate0);
      predicateArray0[1] = predicate1;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate2 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = UniquePredicate.uniquePredicate();
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = FalsePredicate.falsePredicate();
      predicateArray0[4] = predicate4;
      Predicate<SQLException> predicate5 = AllPredicate.allPredicate((Predicate<? super SQLException>[]) predicateArray0);
      Predicate<SQLException> predicate6 = NotPredicate.notPredicate((Predicate<? super SQLException>) predicate5);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 3);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, uniquePredicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      TransformedPredicate<Object> transformedPredicate1 = new TransformedPredicate<Object>(transformer0, transformedPredicate0);
      predicateArray0[3] = (Predicate<Object>) transformedPredicate1;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      predicateArray0[4] = (Predicate<Object>) nullIsFalsePredicate0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLDataException sQLDataException0 = new SQLDataException(batchUpdateException0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate.comparatorPredicate((Object) sQLDataException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NonePredicate<SQLInvalidAuthorizationSpecException> nonePredicate0 = new NonePredicate<SQLInvalidAuthorizationSpecException>(predicateArray0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) nonePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) null, (Predicate<? super Boolean>) transformedPredicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) orderedIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "&YsWnJKlR!J$SQLIl V";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&YsWnJKlR!J$SQLIl V");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      iIOMetadataNode1.appendChild(iIOMetadataNode0);
      Integer integer0 = new Integer(91);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLDataException sQLDataException0 = new SQLDataException("", "(i9yJoHPt=9]54+jA+", sQLNonTransientConnectionException0);
      SQLDataException sQLDataException1 = new SQLDataException("", sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(i9yJoHPt=9]54+jA+", "");
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayDeque0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "";
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", "", (-324), (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("rd?)j7z", (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("rd?)j7z", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException3);
      sQLClientInfoException3.addSuppressed(sQLClientInfoException7);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) objectArrayIterator0, (long) (-324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 2264, 2264);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&YsWnJKlR!J$SQLIl V");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      iIOMetadataNode1.appendChild(iIOMetadataNode0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("&YsWnJKlR!J$SQLIl V", "");
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) iterator0);
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList2 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList3 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList4 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList5 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList6 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList7 = new LinkedList<IIOMetadataNode>();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      DataTruncation dataTruncation0 = new DataTruncation((-1398), false, false, 1, 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("H", dataTruncation0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1, (-384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 3);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Class<Integer> class3 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class3);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, instanceofPredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) transformedPredicate0, comparator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformedPredicate<Object> transformedPredicate1 = new TransformedPredicate<Object>(transformer0, uniquePredicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate1;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, transformedPredicate1);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      TransformerPredicate.transformerPredicate((Transformer<? super ArrayDeque<Integer>, Boolean>) transformer1);
      IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer((-2291));
      IteratorUtils.singletonIterator(integer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.Category>>) comparator0, (Iterator<? extends EnumSet<Locale.Category>>[]) iteratorArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(predicateArray0, (-3421), (-3421));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 123;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("!TJ=jh3ID", "Predicate must not be null", 10);
      SQLDataException sQLDataException0 = new SQLDataException("!TJ=jh3ID", sQLRecoverableException0);
      IteratorUtils.singletonListIterator(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Z&&0CLsn");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.PredicateTransformer");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-608), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!TJ=jh3ID", "");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "MW`84cGYViqG<{.J");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-915), (-915));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Collection must not be null";
      stringArray0[3] = "org.apache.commons.collections4.functors.InvokerTransformer";
      stringArray0[4] = "";
      stringArray0[5] = "[9JN w&%F=VJG4";
      stringArray0[6] = "Bu6<&]HfT4";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) null, (Iterator<? extends String>) objectArrayIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator2);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 123);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLRecoverableException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Invalid index:", "");
      DataTruncation dataTruncation0 = new DataTruncation(123, true, true, 123, 123, sQLSyntaxErrorException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      InvokerTransformer.invokerTransformer("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ",bm\"*49<br";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) objectArrayIterator0, (Iterator<? extends String>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 14;
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-1278), 3193);
      dataTruncation0.getParameter();
      dataTruncation0.getNextWarning();
      DataTruncation dataTruncation1 = new DataTruncation((-1278), true, true, (-1278), 14, (Throwable) null);
      IteratorUtils.getIterator(dataTruncation1);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = ",5ME}cQ/[|B0";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",5ME}cQ/[|B0");
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newChild == null!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("%", "XNQ/# Y Dr3/&96#", (-2303));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("%", "XNQ/# Y Dr3/&96#", sQLNonTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("%", "", (-2303));
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "ceb", (-2303), sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException3;
      SQLWarning sQLWarning0 = new SQLWarning("aF ", ";");
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", sQLWarning0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("XNQ/# Y Dr3/&96#");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("zZ+fyFTQv 8] Fi+");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("%", "org.apache.commons.collections4.functors.NotNullPredicate", (-2303), sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.NotNullPredicate", "GREATER");
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException8;
      SQLTransientConnectionException sQLTransientConnectionException9 = new SQLTransientConnectionException("XNQ/# Y Dr3/&96#", "org.apache.commons.collections4.functors.NotNullPredicate", 1181, sQLTransientConnectionException3);
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException9;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, (-3095));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("The current criterion '");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C6Wtlli_Y8dAep");
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.coll1ctions4.functors.InvokeNTransformer");
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableListIterator<HashMap<SQLSyntaxErrorException, SQLFeatureNotSupportedException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) orderedIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode>[] linkedListArray0 = (LinkedList<IIOMetadataNode>[]) Array.newInstance(LinkedList.class, 2);
      linkedList0.addAll((Collection<? extends IIOMetadataNode>) linkedList1);
      linkedListArray0[0] = linkedList1;
      linkedListArray0[1] = linkedList0;
      IteratorUtils.arrayListIterator(linkedListArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((LinkedHashSet<SQLTimeoutException>[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 3);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      ResettableIterator<Iterator<SQLFeatureNotSupportedException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Iterator<SQLFeatureNotSupportedException>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Iterator<SQLFeatureNotSupportedException>>) resettableIterator0);
      IteratorUtils.asIterable((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) iterator0);
      IteratorUtils.toArray(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H@");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      linkedList0.add((SQLInvalidAuthorizationSpecException) null);
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      IteratorUtils.matchesAny((Iterator<Integer>) loopingIterator0, (Predicate<? super Integer>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableListIterator<HashMap<SQLSyntaxErrorException, SQLFeatureNotSupportedException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      ResettableListIterator<Iterator<SQLFeatureNotSupportedException>> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Iterator<SQLFeatureNotSupportedException>>) resettableListIterator1);
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(linkedList0);
      LinkedList<IIOMetadataNode>[] linkedListArray0 = (LinkedList<IIOMetadataNode>[]) Array.newInstance(LinkedList.class, 8);
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[0] = linkedList1;
      LinkedList<IIOMetadataNode> linkedList2 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[1] = linkedList2;
      LinkedList<IIOMetadataNode> linkedList3 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[2] = linkedList3;
      LinkedList<IIOMetadataNode> linkedList4 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[3] = linkedList4;
      LinkedList<IIOMetadataNode> linkedList5 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[4] = linkedList5;
      LinkedList<IIOMetadataNode> linkedList6 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[5] = linkedList6;
      LinkedList<IIOMetadataNode> linkedList7 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[6] = linkedList7;
      LinkedList<IIOMetadataNode> linkedList8 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[7] = linkedList8;
      IteratorUtils.arrayListIterator(linkedListArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 123);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLRecoverableException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Invalid index:", "");
      sQLSyntaxErrorException0.addSuppressed(sQLRecoverableException0);
      DataTruncation dataTruncation0 = new DataTruncation(123, true, true, 123, 123, sQLSyntaxErrorException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "Invalid index:", 123, sQLRecoverableException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 4018, (-35));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "";
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-608);
      intArray0[1] = (-608);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException1, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertNotNull(batchUpdateException1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException1);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.BatchUpdateException: java.sql.BatchUpdateException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      int int0 = (-45);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 1, (-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MapIterator<Object, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("");
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      assertNotNull(sQLTimeoutException1);
      
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "!-zog&4%IH?5Aedy");
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("!-zog&4%IH?5Aedy", sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException2.toString());
      assertEquals("", sQLTimeoutException2.getMessage());
      assertNotNull(sQLTimeoutException2);
      
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTimeoutException2;
      SQLTransientException sQLTransientException1 = new SQLTransientException("");
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException1.toString());
      assertEquals("", sQLTransientException1.getMessage());
      assertNull(sQLTransientException1.getSQLState());
      assertNotNull(sQLTransientException1);
      
      sQLTransientExceptionArray0[6] = sQLTransientException1;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(7, sQLTransientExceptionArray0.length);
      
      SQLTransientException sQLTransientException2 = IteratorUtils.find((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertFalse(sQLTransientException2.equals((Object)sQLTransientException1));
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException2.toString());
      assertEquals("", sQLTransientException2.getMessage());
      assertNull(sQLTransientException2.getSQLState());
      assertEquals(0, sQLTransientException2.getErrorCode());
      assertNotNull(sQLTransientException2);
      assertNotSame(sQLTransientException2, sQLTransientException1);
      assertSame(sQLTransientException2, sQLTransientException0);
      assertEquals(7, sQLTransientExceptionArray0.length);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException2));
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(iterator0);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException2);
      
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("-U", "-U");
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(iterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H@");
      assertNotNull(iIOMetadataNode0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      assertNotNull(resettableIterator0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("H@");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("H@", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: H@", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", (String) null);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNotNull(sQLTimeoutException1);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("}%lns<a]}vI");
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("}%lns<a]}vI", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: }%lns<a]}vI", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException1;
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException1;
      sQLTransientExceptionArray0[3] = sQLTransientException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException0;
      sQLTransientExceptionArray0[5] = sQLTransientException0;
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTimeoutException1;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(7, sQLTransientExceptionArray0.length);
      
      ListIteratorWrapper<SQLTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientException>(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(7, sQLTransientExceptionArray0.length);
      
      SQLTransientException sQLTransientException1 = IteratorUtils.find((Iterator<SQLTransientException>) listIteratorWrapper0, (Predicate<? super SQLTransientException>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertNull(sQLTransientException1);
      assertEquals(7, sQLTransientExceptionArray0.length);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(iterator1);
      
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 3);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
      assertEquals(3, classArray0.length);
      
      Class<Integer> class3 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class3);
      assertNotNull(instanceofPredicate0);
      
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, instanceofPredicate0);
      assertNotNull(transformedPredicate0);
      assertEquals(3, classArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) transformedPredicate0, comparator0);
      assertNotNull(predicate0);
      assertEquals(3, classArray0.length);
      
      predicateArray0[0] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      TransformedPredicate<Object> transformedPredicate1 = new TransformedPredicate<Object>(transformer0, uniquePredicate0);
      assertFalse(transformedPredicate1.equals((Object)transformedPredicate0));
      assertNotNull(transformedPredicate1);
      assertEquals(3, classArray0.length);
      
      predicateArray0[1] = (Predicate<Object>) transformedPredicate1;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, transformedPredicate1);
      assertFalse(transformedPredicate1.equals((Object)transformedPredicate0));
      assertNotNull(andPredicate0);
      assertEquals(3, classArray0.length);
      
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      TransformedPredicate<Object> transformedPredicate2 = new TransformedPredicate<Object>(transformer0, transformedPredicate1);
      assertFalse(transformedPredicate1.equals((Object)transformedPredicate0));
      assertFalse(transformedPredicate2.equals((Object)transformedPredicate0));
      assertFalse(transformedPredicate2.equals((Object)transformedPredicate1));
      assertNotNull(transformedPredicate2);
      assertEquals(3, classArray0.length);
      
      predicateArray0[3] = (Predicate<Object>) transformedPredicate2;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      assertNotNull(nullIsFalsePredicate0);
      
      predicateArray0[4] = (Predicate<Object>) nullIsFalsePredicate0;
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicateArray0[3], (Predicate<? super Object>) andPredicate0);
      assertFalse(transformedPredicate1.equals((Object)transformedPredicate2));
      assertFalse(transformedPredicate1.equals((Object)transformedPredicate0));
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      assertNotSame(transformedPredicate1, transformedPredicate2);
      assertNotSame(transformedPredicate1, transformedPredicate0);
      assertEquals(7, predicateArray0.length);
      assertEquals(3, classArray0.length);
      
      predicateArray0[5] = predicate1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      SQLDataException sQLDataException0 = new SQLDataException(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.BatchUpdateException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate2 = ComparatorPredicate.comparatorPredicate((Object) sQLDataException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.BatchUpdateException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(predicate2);
      assertNotSame(predicate2, predicate0);
      
      predicateArray0[6] = predicate2;
      NonePredicate<SQLInvalidAuthorizationSpecException> nonePredicate0 = new NonePredicate<SQLInvalidAuthorizationSpecException>(predicateArray0);
      assertNotNull(nonePredicate0);
      assertEquals(7, predicateArray0.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) nonePredicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(7, predicateArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      assertNull(sQLTransientException0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.InvokerTransformer", "");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "5";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5");
      assertNotNull(iIOMetadataNode0);
      
      short short0 = iIOMetadataNode0.getNodeType();
      assertEquals((short)1, short0);
      
      iIOMetadataNode0.setAttributeNS(".d\"j8JiR'BE,7G&r", "", "5");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MapIterator<Hashtable<TreeSet, IIOMetadataNode>, HashSet<SQLTransientConnectionException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(loopingIterator0);
      
      int int0 = 2396;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) loopingIterator0, 2396);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2396
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("MU( 5@'1tG\"", hashtable0, (Throwable) null);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: MU( 5@'1tG\"", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("MU( 5@'1tG\"", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, hashtable0);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getMessage());
      assertNotNull(sQLClientInfoException2);
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertNull(sQLClientInfoException3.getMessage());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException3.toString());
      assertNotNull(sQLClientInfoException3);
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      StackTraceElement[] stackTraceElementArray0 = sQLClientInfoException0.getStackTrace();
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: MU( 5@'1tG\"", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("MU( 5@'1tG\"", sQLClientInfoException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException3);
      assertEquals(13, stackTraceElementArray0.length);
      
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("_?t52h$b&xUk\",b43cJ", "iterator", hashtable0);
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: _?t52h$b&xUk\",b43cJ", sQLClientInfoException4.toString());
      assertEquals("iterator", sQLClientInfoException4.getSQLState());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertEquals("_?t52h$b&xUk\",b43cJ", sQLClientInfoException4.getMessage());
      assertNotNull(sQLClientInfoException4);
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("_?t52h$b&xUk\",b43cJ", "", 100, hashtable0, sQLClientInfoException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: MU( 5@'1tG\"", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("MU( 5@'1tG\"", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException5.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: _?t52h$b&xUk\",b43cJ", sQLClientInfoException5.toString());
      assertEquals("_?t52h$b&xUk\",b43cJ", sQLClientInfoException5.getMessage());
      assertEquals(100, sQLClientInfoException5.getErrorCode());
      assertNotNull(sQLClientInfoException5);
      
      String string0 = sQLClientInfoException5.getLocalizedMessage();
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertEquals("_?t52h$b&xUk\",b43cJ", string0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: MU( 5@'1tG\"", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("MU( 5@'1tG\"", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException5.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: _?t52h$b&xUk\",b43cJ", sQLClientInfoException5.toString());
      assertEquals("_?t52h$b&xUk\",b43cJ", sQLClientInfoException5.getMessage());
      assertEquals(100, sQLClientInfoException5.getErrorCode());
      assertNotNull(string0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException5);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException4);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException3);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException4);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException3);
      
      Spliterator<Throwable> spliterator0 = sQLClientInfoException5.spliterator();
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: MU( 5@'1tG\"", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("MU( 5@'1tG\"", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException5.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: _?t52h$b&xUk\",b43cJ", sQLClientInfoException5.toString());
      assertEquals("_?t52h$b&xUk\",b43cJ", sQLClientInfoException5.getMessage());
      assertEquals(100, sQLClientInfoException5.getErrorCode());
      assertNotNull(spliterator0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException5);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException4);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException3);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException4);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException5, sQLClientInfoException3);
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(6, objectArrayIterator0.getEndIndex());
      assertNotNull(objectArrayIterator0);
      assertEquals(6, sQLClientInfoExceptionArray0.length);
      
      objectArrayIterator0.reset();
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(6, objectArrayIterator0.getEndIndex());
      assertEquals(6, sQLClientInfoExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) objectArrayIterator0, (long) 100, (-1966L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends Locale.Category>) mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator1);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(enumeration0);
      
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(iterator0);
      
      Iterable<SQLClientInfoException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) iterator0);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(iterable0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getFirstChild();
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      int int0 = (-2061);
      int int1 = 16;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, (-2061), 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, (-282), (-282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ResettableListIterator<HashMap<SQLSyntaxErrorException, SQLFeatureNotSupportedException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      ResettableListIterator<Iterator<SQLFeatureNotSupportedException>> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      ListIterator<Iterator<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Iterator<SQLFeatureNotSupportedException>>) resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      OrderedIterator<Iterator<SQLFeatureNotSupportedException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterable<Iterator<SQLFeatureNotSupportedException>> iterable0 = IteratorUtils.asIterable((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) orderedIterator0);
      assertNotNull(iterable0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator1, 2264);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Boolean>) null, (Collection<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Hashtable<SQLRecoverableException, SQLNonTransientException> hashtable0 = new Hashtable<SQLRecoverableException, SQLNonTransientException>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 19;
      intArray0[1] = 19;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.ListOrderedMap", "aO|R$`", 2, hashMap0, sQLInvalidAuthorizationSpecException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("aO|R$`", sQLClientInfoException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.getMessage());
      assertEquals(2, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "org.apache.commons.collections4.map.ListOrderedMap", intArray0, sQLClientInfoException0);
      assertArrayEquals(new int[] {19, 19}, intArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("aO|R$`", sQLClientInfoException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.getMessage());
      assertEquals(2, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.toString());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertEquals(2, intArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.ListOrderedMap", "7u/|2]_", batchUpdateException0);
      assertArrayEquals(new int[] {19, 19}, intArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("aO|R$`", sQLClientInfoException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.getMessage());
      assertEquals(2, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.toString());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("7u/|2]_", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.map.ListOrderedMap", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(2, intArray0.length);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("bCku''F6b", "aO|R$`", 19, sQLTransactionRollbackException0);
      assertArrayEquals(new int[] {19, 19}, intArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("aO|R$`", sQLClientInfoException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.getMessage());
      assertEquals(2, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.toString());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("7u/|2]_", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.map.ListOrderedMap", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", sQLTransactionRollbackException0.getMessage());
      assertEquals("aO|R$`", sQLRecoverableException0.getSQLState());
      assertEquals("bCku''F6b", sQLRecoverableException0.getMessage());
      assertEquals(19, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: bCku''F6b", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      assertEquals(2, intArray0.length);
      
      SQLNonTransientException sQLNonTransientException0 = hashtable0.put(sQLRecoverableException0, sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {19, 19}, intArray0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("aO|R$`", sQLClientInfoException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.getMessage());
      assertEquals(2, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.collections4.map.ListOrderedMap", sQLClientInfoException0.toString());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("7u/|2]_", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.map.ListOrderedMap", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.ListOrderedMap", sQLTransactionRollbackException0.getMessage());
      assertEquals("aO|R$`", sQLRecoverableException0.getSQLState());
      assertEquals("bCku''F6b", sQLRecoverableException0.getMessage());
      assertEquals(19, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: bCku''F6b", sQLRecoverableException0.toString());
      assertNull(sQLNonTransientException0);
      assertEquals(2, intArray0.length);
      
      EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLNonTransientException>(hashtable0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", "9tsn]]+]", 0, hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("9tsn]]+]", sQLClientInfoException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)properties0.merge(sQLFeatureNotSupportedException0, sQLClientInfoException0, biFunction0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("9tsn]]+]", sQLClientInfoException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLClientInfoException0.getMessage());
      assertEquals("9tsn]]+]", sQLClientInfoException1.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      
      Object object0 = properties0.setProperty("setValue() can only be called after next() and before remove()", "]");
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertNull(object0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("K0+ \u0002 %e1+FiA~", "a!0", sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("K0+ \u0002 %e1+FiA~", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: K0+ \u0002 %e1+FiA~", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("a!0", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Entry does not exist: ", "", (-2808));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertEquals("", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("Entry does not exist: ", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals((-2808), sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Entry does not exist: ", sQLIntegrityConstraintViolationException1.toString());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNull(sQLIntegrityConstraintViolationException2.getMessage());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException2.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException2);
      
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", (String) null);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException3.toString());
      assertEquals("", sQLIntegrityConstraintViolationException3.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException3);
      
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertEquals("", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("Entry does not exist: ", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals((-2808), sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Entry does not exist: ", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException4.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Entry does not exist: ", sQLIntegrityConstraintViolationException4.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException: Entry does not exist: ", sQLIntegrityConstraintViolationException4.toString());
      assertNotNull(sQLIntegrityConstraintViolationException4);
      
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException2);
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNull(sQLIntegrityConstraintViolationException2.getMessage());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException2.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException5.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException5.toString());
      assertNull(sQLIntegrityConstraintViolationException5.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException5.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException5);
      
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("", "", (-2808));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException4));
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException6.toString());
      assertEquals("", sQLIntegrityConstraintViolationException6.getMessage());
      assertEquals((-2808), sQLIntegrityConstraintViolationException6.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException6.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException6);
      
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException(";<zt:'KBW~?\"[lvH", "", (-1581), sQLIntegrityConstraintViolationException0);
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException5));
      assertEquals(";<zt:'KBW~?\"[lvH", sQLIntegrityConstraintViolationException7.getMessage());
      assertEquals((-1581), sQLIntegrityConstraintViolationException7.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException7.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ;<zt:'KBW~?\"[lvH", sQLIntegrityConstraintViolationException7.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("K0+ \u0002 %e1+FiA~", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: K0+ \u0002 %e1+FiA~", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("a!0", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException7);
      
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException5);
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException7));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException7));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException7));
      assertEquals(0, sQLIntegrityConstraintViolationException8.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException8.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException8.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException8.toString());
      assertNull(sQLIntegrityConstraintViolationException2.getMessage());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException2.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException5.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException5.toString());
      assertNull(sQLIntegrityConstraintViolationException5.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException5.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException8);
      
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(9, sQLIntegrityConstraintViolationExceptionArray0.length);
      
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertEquals(9, sQLIntegrityConstraintViolationExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayDeque<SQLFeatureNotSupportedException>[] arrayDequeArray0 = (ArrayDeque<SQLFeatureNotSupportedException>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque1 = new ArrayDeque<SQLFeatureNotSupportedException>();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotNull(arrayDeque1);
      
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque2 = new ArrayDeque<SQLFeatureNotSupportedException>();
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertTrue(arrayDeque2.isEmpty());
      assertEquals(0, arrayDeque2.size());
      assertNotNull(arrayDeque2);
      
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque3 = new ArrayDeque<SQLFeatureNotSupportedException>();
      assertFalse(arrayDeque3.equals((Object)arrayDeque1));
      assertFalse(arrayDeque3.equals((Object)arrayDeque0));
      assertFalse(arrayDeque3.equals((Object)arrayDeque2));
      assertTrue(arrayDeque3.isEmpty());
      assertEquals(0, arrayDeque3.size());
      assertNotNull(arrayDeque3);
      
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque4 = new ArrayDeque<SQLFeatureNotSupportedException>();
      assertFalse(arrayDeque4.equals((Object)arrayDeque1));
      assertFalse(arrayDeque4.equals((Object)arrayDeque3));
      assertFalse(arrayDeque4.equals((Object)arrayDeque2));
      assertFalse(arrayDeque4.equals((Object)arrayDeque0));
      assertTrue(arrayDeque4.isEmpty());
      assertEquals(0, arrayDeque4.size());
      assertNotNull(arrayDeque4);
      
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque5 = new ArrayDeque<SQLFeatureNotSupportedException>();
      assertFalse(arrayDeque5.equals((Object)arrayDeque2));
      assertFalse(arrayDeque5.equals((Object)arrayDeque0));
      assertFalse(arrayDeque5.equals((Object)arrayDeque1));
      assertFalse(arrayDeque5.equals((Object)arrayDeque4));
      assertFalse(arrayDeque5.equals((Object)arrayDeque3));
      assertEquals(0, arrayDeque5.size());
      assertTrue(arrayDeque5.isEmpty());
      assertNotNull(arrayDeque5);
      
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque6 = new ArrayDeque<SQLFeatureNotSupportedException>();
      assertFalse(arrayDeque6.equals((Object)arrayDeque1));
      assertFalse(arrayDeque6.equals((Object)arrayDeque3));
      assertFalse(arrayDeque6.equals((Object)arrayDeque0));
      assertFalse(arrayDeque6.equals((Object)arrayDeque5));
      assertFalse(arrayDeque6.equals((Object)arrayDeque4));
      assertFalse(arrayDeque6.equals((Object)arrayDeque2));
      assertTrue(arrayDeque6.isEmpty());
      assertEquals(0, arrayDeque6.size());
      assertNotNull(arrayDeque6);
      
      arrayDequeArray0[6] = arrayDeque6;
      ResettableIterator<ArrayDeque<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(7, arrayDequeArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (Throwable) null);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("V}*Y6fq;KBNQN#sD", "", "", 2620);
      assertEquals("V}*Y6fq;KBNQN#sD", stackTraceElement0.getClassName());
      assertEquals(2620, stackTraceElement0.getLineNumber());
      assertEquals("V}*Y6fq;KBNQN#sD.(:2620)", stackTraceElement0.toString());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals("", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "V}*Y6fq;KBNQN#sD", 0);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("", stackTraceElement1.getClassName());
      assertEquals("V}*Y6fq;KBNQN#sD", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals(".(V}*Y6fq;KBNQN#sD:0)", stackTraceElement1.toString());
      assertEquals("", stackTraceElement1.getMethodName());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      int int0 = 0;
      StackTraceElement stackTraceElement2 = new StackTraceElement("V}*Y6fq;KBNQN#sD", "", "ListIterator must not be null", 0);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertEquals("ListIterator must not be null", stackTraceElement2.getFileName());
      assertEquals("V}*Y6fq;KBNQN#sD", stackTraceElement2.getClassName());
      assertEquals("V}*Y6fq;KBNQN#sD.(ListIterator must not be null:0)", stackTraceElement2.toString());
      assertEquals(0, stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("", stackTraceElement2.getMethodName());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(3, stackTraceElementArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
      
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode1.appendChild(iIOMetadataNode0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode1));
      assertNotNull(node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(node0, iIOMetadataNode0);
      assertNotSame(node0, iIOMetadataNode1);
      
      Node node1 = iIOMetadataNode0.appendChild(node0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)node0));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode1));
      assertFalse(node1.equals((Object)iIOMetadataNode1));
      assertNotNull(node1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertSame(iIOMetadataNode0, node0);
      assertSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(node0, iIOMetadataNode0);
      assertSame(node0, node1);
      assertNotSame(node0, iIOMetadataNode1);
      assertNotSame(node1, iIOMetadataNode1);
      assertSame(node1, iIOMetadataNode0);
      assertSame(node1, node0);
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertSame(iIOMetadataNode0, node0);
      assertSame(iIOMetadataNode0, node1);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = null;
      try {
        stringTokenizer0 = new StringTokenizer((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(resettableIterator0);
      
      String string0 = "9Wa2Cm'Nhy<3M= qxMg";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9Wa2Cm'Nhy<3M= qxMg", "9Wa2Cm'Nhy<3M= qxMg");
      assertEquals("java.sql.SQLNonTransientConnectionException: 9Wa2Cm'Nhy<3M= qxMg", sQLNonTransientConnectionException0.toString());
      assertEquals("9Wa2Cm'Nhy<3M= qxMg", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("9Wa2Cm'Nhy<3M= qxMg", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MapIterator<Object, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) mapIterator0);
      assertNotNull(iterator0);
      
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) transformer0, (String) null, "js#i1O_\"y$?xS/I-+`", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      String string0 = iIOMetadataNode0.getLocalName();
      assertNull(string0);
      
      NamedNodeMap namedNodeMap0 = iIOMetadataNode0.getAttributes();
      assertNotNull(namedNodeMap0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      String string1 = "lxPOx;9=GVT=";
      iIOMetadataNode0.setPrefix("lxPOx;9=GVT=");
      Object object0 = iIOMetadataNode0.getUserObject();
      assertNull(object0);
      
      try { 
        iIOMetadataNode0.getFeature((String) null, "org.apache.commons.collections4.set.ListOrderedSet");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = " ";
      String string1 = "+M-82][A6_ZX[vGF";
      StringTokenizer stringTokenizer0 = new StringTokenizer(" ", "+M-82][A6_ZX[vGF", false);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      boolean boolean0 = stringTokenizer0.hasMoreElements();
      assertTrue(boolean0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      boolean boolean1 = stringTokenizer0.hasMoreElements();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, stringTokenizer0.countTokens());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("LESS", "LESS", (-1));
      assertEquals("LESS", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("LESS", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: LESS", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Throwable[] throwableArray0 = sQLInvalidAuthorizationSpecException0.getSuppressed();
      assertEquals("LESS", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("LESS", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: LESS", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      assertEquals("LESS", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("LESS", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: LESS", sQLInvalidAuthorizationSpecException0.toString());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-738));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) null, (-194L), (-194L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator1, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 123);
      assertEquals(123, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", sQLRecoverableException0);
      assertEquals(123, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      assertEquals(123, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      assertEquals(123, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(iterator0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Invalid index:", "");
      assertEquals("Invalid index:", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: Invalid index:", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(123, true, true, 123, 123, sQLSyntaxErrorException0);
      assertEquals("Invalid index:", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: Invalid index:", sQLSyntaxErrorException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      assertEquals("Invalid index:", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: Invalid index:", sQLSyntaxErrorException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertNotNull(singletonListIterator0);
      
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      assertNotNull(closure0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<DataTruncation>) singletonListIterator0, (Closure<? super DataTruncation>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = (-2395);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      String string0 = "\\H@";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H@");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonIterator(locale_Category0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(vector0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = null;
      linkedList0.add((SQLInvalidAuthorizationSpecException) null);
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      IteratorUtils.matchesAny((Iterator<Integer>) loopingIterator0, (Predicate<? super Integer>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) allPredicate0);
      predicateArray0[0] = predicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[1] = (Predicate<Object>) comparatorPredicate0;
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[2] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) nonePredicate0);
      predicateArray0[4] = predicate2;
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate2);
      Predicate<Object> predicate3 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[5] = predicate3;
      Predicate<Object> predicate4 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[6] = predicate4;
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate5 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[7] = predicate5;
      Predicate<Object> predicate6 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) nonePredicate0);
      predicateArray0[8] = predicate6;
      Predicate<Object> predicate7 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate7, predicate7);
      Predicate<Locale.Category> predicate8 = NotPredicate.notPredicate((Predicate<? super Locale.Category>) andPredicate0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) objectArrayIterator0, (Predicate<? super Locale.Category>) predicate8);
      Iterator<Locale.Category> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      int int0 = 512;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
