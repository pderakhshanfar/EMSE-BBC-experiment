/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 07:02:30 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet1);
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) singletonListIterator0, 0);
      linkedHashSet1.addAll(linkedHashSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(":rEU?OD2`L", "Enumeration must not be null", sQLRecoverableException0);
      hashSet0.add(sQLIntegrityConstraintViolationException0);
      singletonListIterator0.set(hashSet0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      StringValueTransformer.stringValueTransformer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.Category>>) comparator0, (Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) singletonListIterator0, 0);
      IteratorUtils.size(singletonListIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$Values", sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.Flat3Map$Values", sQLTransientConnectionException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>((HashSet<SQLIntegrityConstraintViolationException>) null);
      IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) singletonListIterator0, 0);
      OrderedMapIterator<SQLTimeoutException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) singletonListIterator0, 0);
      IteratorUtils.size(singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ServiceLoader<Locale.Category>[]) null, 0, (-609));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet1);
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) singletonListIterator0, 0);
      linkedHashSet1.addAll(linkedHashSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(":rEU?OD2`L", "Enumeration must not be null", sQLRecoverableException0);
      hashSet0.add(sQLIntegrityConstraintViolationException0);
      singletonListIterator0.set(hashSet0);
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class1);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      StringValueTransformer.stringValueTransformer();
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ":rEU?OD2`L";
      stringArray0[3] = "|W6CI&~Dj(";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) zippingIterator0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ResettableListIterator<Closure<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Closure<Object>>) resettableListIterator0, (Predicate<? super Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<HashSet<LinkedList>>) listIterator0, (Predicate<? super HashSet<LinkedList>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.getIterator("Entry does not exist: ");
      HashSet<SQLIntegrityConstraintViolationException>[] hashSetArray0 = (HashSet<SQLIntegrityConstraintViolationException>[]) Array.newInstance(HashSet.class, 4);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[0] = (HashSet<SQLIntegrityConstraintViolationException>) linkedHashSet0;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet2 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[2] = (HashSet<SQLIntegrityConstraintViolationException>) linkedHashSet2;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet3 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[3] = (HashSet<SQLIntegrityConstraintViolationException>) linkedHashSet3;
      ResettableListIterator<HashSet<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0, 0);
      IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) resettableListIterator0, 0);
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Entry does not exist: ", "SR2qT'sj%q[7KB");
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 7);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Transformer<SQLNonTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("]", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, String>) transformer0, "w)(y?c:F", ").", "dI~DQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ']' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<ComparatorPredicate.Criterion> linkedList0 = new LinkedList<ComparatorPredicate.Criterion>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "%w1+ho");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Iterator[]", sQLSyntaxErrorException1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("", defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%w1+ho", "%w1+ho", (-1), sQLRecoverableException0);
      DefaultEquator<SQLNonTransientConnectionException> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(sQLNonTransientConnectionException0, (Equator<SQLNonTransientConnectionException>) defaultEquator1);
      IteratorUtils.matchesAll((Iterator<HashSet<LinkedList>>) null, (Predicate<? super HashSet<LinkedList>>) equalPredicate0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("x\"mInA_EM)#:SeA~(");
      IteratorUtils.toString((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLDataException, String>) transformer0, "x\"mInA_EM)#:SeA~(", "x\"mInA_EM)#:SeA~(", "L:>Zx#x{9_%");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("x\"mInA_EM)#:SeA~(L:>Zx#x{9_%", "L:>Zx#x{9_%");
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Closure<Object>>) null, (Predicate<? super Closure<Object>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<ComparatorPredicate.Criterion> linkedList0 = new LinkedList<ComparatorPredicate.Criterion>();
      IteratorUtils.loopingListIterator((List<ComparatorPredicate.Criterion>) linkedList0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(<\"qXB{,QPLn`R*a");
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      arrayList0.add(sQLTransactionRollbackException0);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Iterator[]", (String) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException2;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLSyntaxErrorException1);
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("W W]~5", "Already at start of list.", 5, sQLSyntaxErrorException2);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Iterator[]", (String) null, sQLSyntaxErrorException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLTransientConnectionException>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLDataException>) orderedMapIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      IteratorUtils.size(reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Iterator[]", (String) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException2;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLSyntaxErrorException1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(abstractOrderedMapIteratorDecorator0, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      IteratorUtils.matchesAll((Iterator<HashSet<LinkedList>>) orderedMapIterator0, (Predicate<? super HashSet<LinkedList>>) orPredicate0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("TJsZRk", "W W]~5", (-1), sQLSyntaxErrorException2);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLTransientConnectionException>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      MapIterator<SQLNonTransientConnectionException, Locale.Category> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      SQLWarning sQLWarning0 = new SQLWarning("(RG$7(`", "(RG$7(`", 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("(RG$7(`", "(RG$7(`", 0);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("' cannot be accessed", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 0);
      IteratorUtils.arrayIterator(arrayDequeArray0, 0);
      IteratorUtils.getIterator(predicate0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      ExceptionPredicate.exceptionPredicate();
      int int1 = 16;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ExceptionClosure invoked", "N25=sbgr", 16, sQLIntegrityConstraintViolationException0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransactionRollbackException>("", classArray0, arrayDequeArray0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) invokerTransformer0);
      Enumeration<SQLTransactionRollbackException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration1, (Collection<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      InvokerTransformer.invokerTransformer("x\"mInA_EMf#:SA~(");
      HashSet<SQLIntegrityConstraintViolationException>[] hashSetArray0 = (HashSet<SQLIntegrityConstraintViolationException>[]) Array.newInstance(HashSet.class, 0);
      ResettableListIterator<HashSet<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) resettableListIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) reverseListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends DataTruncation>) orderedMapIterator0);
      MapIterator<SQLDataException, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends DataTruncation>) orderedMapIterator1);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) predicate0;
      objectArray0[1] = (Object) orderedMapIterator1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) predicate0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, objectArray0);
      IteratorUtils.toString((Iterator<SQLDataException>) mapIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0, "", "", "");
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransactionRollbackException>) reverseListIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Estimated size must be greater than 0");
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, (Throwable) null);
      sQLClientInfoException0.getStackTrace();
      IteratorUtils.getIterator(hashMap0);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 925);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      IteratorUtils.contains((Iterator<ClientInfoStatus>) listIterator0, (Object) clientInfoStatus0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<ComparatorPredicate.Criterion> linkedList0 = new LinkedList<ComparatorPredicate.Criterion>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("|6ET1YW*?h{o R", "|6ET1YW*?h{o R", (-2282));
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("|6ET1YW*?h{o R", "|6ET1YW*?h{o R");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLSyntaxErrorException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException1, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLTimeoutException> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLTimeoutException>) equalPredicate0);
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<HashSet<LinkedList>>) listIterator0, (Predicate<? super HashSet<LinkedList>>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      IteratorUtils.contains((Iterator<ClientInfoStatus>) listIterator0, (Object) listIterator0);
      IteratorUtils.emptyListIterator();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      int int0 = (-1890);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Closure<DataTruncation>[]) null, (-1890));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Iterator[]", (String) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException2.fillInStackTrace();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException2;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLSyntaxErrorException1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(abstractOrderedMapIteratorDecorator0, defaultEquator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      IteratorUtils.size(singletonListIterator0);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<String>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("x\"mInA_EM)#:SeA~(");
      IteratorUtils.toString((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLDataException, String>) transformer0, "x\"mInA_EM)#:SeA~(", "x\"mInA_EM)#:SeA~(", "L:>Zx#x{9_%");
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      IteratorUtils.contains((Iterator<SQLTransientException>) null, (Object) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("InstantiateTransformer: The constructor must exist and be public ", "InstantiateTransformer: The constructor must exist and be public ");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gM$cmHBbkA3j");
      ArrayDeque<SQLDataException>[] arrayDequeArray0 = (ArrayDeque<SQLDataException>[]) Array.newInstance(ArrayDeque.class, 4);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLDataException> arrayDeque1 = new ArrayDeque<SQLDataException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLDataException> arrayDeque2 = new ArrayDeque<SQLDataException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLDataException> arrayDeque3 = new ArrayDeque<SQLDataException>();
      arrayDequeArray0[3] = arrayDeque1;
      ObjectArrayIterator<ArrayDeque<SQLDataException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<SQLDataException>>(arrayDequeArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gM$cmHBbkA3j");
      arrayDeque2.removeLastOccurrence(arrayDeque1);
      objectArrayIterator0.reset();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLDataException>>) objectArrayIterator0, (Predicate<? super ArrayDeque<SQLDataException>>) predicate0);
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(predicate0, (-779), (-779));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gM$cmHBbkA3j");
      ArrayDeque<SQLDataException>[] arrayDequeArray0 = (ArrayDeque<SQLDataException>[]) Array.newInstance(ArrayDeque.class, 4);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLDataException> arrayDeque1 = new ArrayDeque<SQLDataException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLDataException> arrayDeque2 = new ArrayDeque<SQLDataException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLDataException> arrayDeque3 = new ArrayDeque<SQLDataException>();
      arrayDequeArray0[3] = arrayDeque3;
      ObjectArrayIterator<ArrayDeque<SQLDataException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<SQLDataException>>(arrayDequeArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gM$cmHBbkA3j");
      arrayDeque2.removeLastOccurrence(arrayDeque1);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      objectArrayIterator0.reset();
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLDataException>>) objectArrayIterator0, (Predicate<? super ArrayDeque<SQLDataException>>) predicate0);
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(predicate0, (-779), (-779));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("InstantiateTransformer: The constructor must exist and be public ", "InstantiateTransformer: The constructor must exist and be public ");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator1);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      EmptyListIterator.emptyListIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "8Hy8");
      IteratorUtils.getIterator(stringTokenizer0);
      ExceptionPredicate.exceptionPredicate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator1);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("Entry does not exist: ");
      IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) transformer0, "L:>Zx#x{9_%", "2\"Yek]OKjZ)", "add() not supported for empty Iterator");
      IteratorUtils.toArray((Iterator<?>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Iterator[]", (String) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException2;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLSyntaxErrorException1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(abstractOrderedMapIteratorDecorator0, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(orPredicate0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) orPredicate0);
      IteratorUtils.matchesAll((Iterator<HashSet<LinkedList>>) orderedMapIterator0, (Predicate<? super HashSet<LinkedList>>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "setValue() is not supported";
      String string1 = "_:VRk)f7i";
      StringTokenizer stringTokenizer0 = new StringTokenizer("setValue() is not supported", "_:VRk)f7i");
      ConstantTransformer.constantTransformer(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("InstantiateTransformer: The constructor must exist and be public ", "InstantiateTransformer: The constructor must exist and be public ");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("InstantiateTransformer: The constructor must exist and be public ", "Closure must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator1);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 5);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, "Entry does not exist: ");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLSyntaxErrorException1);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLRecoverableException0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-3380), (-3380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("InstantiateTransformer: The constructor must exist and be public ", "InstantiateTransformer: The constructor must exist and be public ");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) singletonListIterator0, 0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>((SortedSet<? extends Predicate<Object>>) treeSet0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IteratorUtils.emptyListIterator();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends IIOMetadataNode>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator1);
      String string0 = "x\"mInA_EM)#:SeA~(";
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("!-Jn/xwvy");
      String string1 = "org.apache.commons.collections4.functors.IfClosure";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLDataException, String>) transformer0, "org.apache.commons.collections4.functors.IfClosure", "x\"mInA_EM)#:SeA~(", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("^tXsCcB+F;HC%", "^tXsCcB+F;HC%", (-327));
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("The prototype must be cloneable via a public clone method", "", (-327));
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ArrayIterator<SQLClientInfoException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLClientInfoException>(sQLIntegrityConstraintViolationException0, 100, (-974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) reverseListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      IteratorUtils.contains((Iterator<ClientInfoStatus>) listIterator0, (Object) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("InstantiateTransformer: The constructor must exist and be public ", "InstantiateTransformer: The constructor must exist and be public ");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) singletonListIterator0, 0);
      IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 2200, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.singletonListIterator((DataTruncation) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      IdentityPredicate.identityPredicate((SQLException) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.functors.ExceptionTransformer");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("");
      sQLDataExceptionArray0[3] = sQLDataException3;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      Transformer<SQLNonTransientException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLNonTransientException, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLDataException, String>) transformer0, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("G-HEkB.'>", "G-HEkB.'>", 158, hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      IteratorUtils.getIterator((Object) null);
      ExceptionPredicate.exceptionPredicate();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("!-Jn/xwvy", "!-Jn/xwvy");
      ConstantTransformer.constantTransformer(stringTokenizer0);
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Locale.Category>) resettableIterator0, (-1011L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("G-HEkB.'>", hashtable0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IteratorUtils.getIterator("0PmE-");
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<StringTokenizer> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagNameNS("0PmE-", "NodeList must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Iterator<? extends SQLTimeoutException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) zippingIterator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("7&iV3$e", "}EQd'M!5l;");
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      int int0 = (-21);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (-21));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.singletonListIterator((DataTruncation) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      IdentityPredicate.identityPredicate((SQLException) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.functors.ExceptionTransformer");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("");
      sQLDataExceptionArray0[3] = sQLDataException3;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      Transformer<SQLNonTransientException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLNonTransientException, ? extends String>) hashtable0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLDataException, String>) transformer0, "", "", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s", "s");
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("!-Jn/xwvy", "!-Jn/xwvy");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.UnmodifiableListIterator");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, (Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find(iterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*q:w}zBvJ*=G", "!-Jn/xwvy", 1, hashtable0);
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("!-Jn/xwvy", "mg");
      Transformer<SQLException, StringTokenizer> transformer0 = new ConstantTransformer<SQLException, StringTokenizer>(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<HashMap<BatchUpdateException, BatchUpdateException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = null;
      Integer integer1 = new Integer(511);
      vector0.add(integer1);
      vector0.add((Integer) null);
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.FunctorUtils");
      hashSet0.add(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = hashSet0.iterator();
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) iterator0);
      Iterator<Object> iterator1 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator1, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super HashMap<SQLFeatureNotSupportedException, String>>) comparator0, (Iterator<? extends HashMap<SQLFeatureNotSupportedException, String>>) null, (Iterator<? extends HashMap<SQLFeatureNotSupportedException, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IteratorUtils.getIterator("0PmE-");
      ExceptionPredicate.exceptionPredicate();
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      Iterator<SQLRecoverableException> iterator0 = linkedList0.descendingIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 8);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      MapIterator<SQLNonTransientConnectionException, Locale.Category> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<SQLDataException> priorityQueue1 = new PriorityQueue<SQLDataException>();
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertEquals(0, priorityQueue1.size());
      
      PriorityQueue<SQLDataException> priorityQueue2 = new PriorityQueue<SQLDataException>();
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      assertNotNull(priorityQueue2);
      assertEquals(0, priorityQueue2.size());
      
      PriorityQueue<SQLDataException> priorityQueue3 = new PriorityQueue<SQLDataException>();
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertNotNull(priorityQueue3);
      assertEquals(0, priorityQueue3.size());
      
      PriorityQueue<SQLDataException> priorityQueue4 = new PriorityQueue<SQLDataException>();
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      assertNotNull(priorityQueue4);
      assertEquals(0, priorityQueue4.size());
      
      PriorityQueue<SQLDataException> priorityQueue5 = new PriorityQueue<SQLDataException>();
      assertFalse(priorityQueue5.equals((Object)priorityQueue0));
      assertFalse(priorityQueue5.equals((Object)priorityQueue2));
      assertFalse(priorityQueue5.equals((Object)priorityQueue4));
      assertFalse(priorityQueue5.equals((Object)priorityQueue3));
      assertFalse(priorityQueue5.equals((Object)priorityQueue1));
      assertNotNull(priorityQueue5);
      assertEquals(0, priorityQueue5.size());
      
      PriorityQueue<SQLDataException>[] priorityQueueArray0 = (PriorityQueue<SQLDataException>[]) Array.newInstance(PriorityQueue.class, 2);
      priorityQueueArray0[0] = priorityQueue1;
      priorityQueueArray0[1] = priorityQueue5;
      ObjectArrayIterator<PriorityQueue<SQLDataException>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<SQLDataException>>(priorityQueueArray0);
      assertEquals(2, priorityQueueArray0.length);
      assertNotNull(objectArrayIterator0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(2, objectArrayIterator0.getEndIndex());
      
      ResettableListIterator<PriorityQueue<SQLDataException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      MapIterator<PriorityQueue<SQLDataException>, Integer> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Iterator<PriorityQueue<SQLDataException>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends PriorityQueue<SQLDataException>>) objectArrayIterator0, (Iterator<? extends PriorityQueue<SQLDataException>>) resettableListIterator0);
      assertEquals(2, priorityQueueArray0.length);
      assertNotNull(iterator0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(2, objectArrayIterator0.getEndIndex());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ListIterator<PriorityQueue<SQLDataException>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends PriorityQueue<SQLDataException>>) resettableListIterator0);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<PriorityQueue<SQLDataException>> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends PriorityQueue<SQLDataException>>) mapIterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      ResettableIterator<PriorityQueue<SQLDataException>> resettableIterator0 = IteratorUtils.arrayIterator(priorityQueueArray0);
      Iterator<PriorityQueue<SQLDataException>>[] iteratorArray0 = (Iterator<PriorityQueue<SQLDataException>>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<PriorityQueue<SQLDataException>>) objectArrayIterator0;
      entrySetMapIterator0.toString();
      iteratorArray0[1] = (Iterator<PriorityQueue<SQLDataException>>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<PriorityQueue<SQLDataException>>) resettableIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends PriorityQueue<SQLDataException>>[]) iteratorArray0);
      IteratorUtils.toList((Iterator<? extends PriorityQueue<SQLDataException>>) mapIterator1);
      IteratorUtils.size(entrySetMapIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray1 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 6);
      OrderedMapIterator<IIOMetadataNode, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLException>) orderedMapIterator0);
      iteratorArray1[0] = (Iterator<IIOMetadataNode>) orderedMapIterator1;
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) iteratorArray1[0], (long) 0, (long) 0);
      iteratorArray1[1] = (Iterator<IIOMetadataNode>) boundedIterator0;
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(iteratorArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("!-Jn/xwvy", "!-Jn/xwvy");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) null, (long) 0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("G-HEkB.'>", hashtable0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("fnNFH", hashtable0, sQLClientInfoException1);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (-1054L), 311L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      String string0 = "x\"mInA_EM)#:SeA~(";
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("x\"mInA_EM)#:SeA~(");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) orderedMapIterator0, (Transformer<? super SQLDataException, String>) transformer0, "x\"mInA_EM)#:SeA~(", (String) null, "L:>Zx#x{9_%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) null);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) resettableIterator0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue1 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue2 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue3 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue4 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue5 = new PriorityQueue<SQLDataException>();
      int int0 = 0;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 16);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue1 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue2 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue3 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue4 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue5 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException>[] priorityQueueArray0 = (PriorityQueue<SQLDataException>[]) Array.newInstance(PriorityQueue.class, 2);
      priorityQueueArray0[0] = priorityQueue1;
      priorityQueueArray0[1] = priorityQueue5;
      ObjectArrayIterator<PriorityQueue<SQLDataException>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<SQLDataException>>(priorityQueueArray0);
      ResettableListIterator<PriorityQueue<SQLDataException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      MapIterator<PriorityQueue<SQLDataException>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends PriorityQueue<SQLDataException>>) objectArrayIterator0, (Iterator<? extends PriorityQueue<SQLDataException>>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends PriorityQueue<SQLDataException>>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends PriorityQueue<SQLDataException>>) mapIterator0);
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Iterator<PriorityQueue<SQLDataException>>[] iteratorArray0 = (Iterator<PriorityQueue<SQLDataException>>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<PriorityQueue<SQLDataException>>) objectArrayIterator0;
      entrySetMapIterator0.toString();
      iteratorArray0[1] = (Iterator<PriorityQueue<SQLDataException>>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends PriorityQueue<SQLDataException>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*q:w}zBvJ*=G", "!-Jn/xwvy", 1, hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException>[] priorityQueueArray0 = (PriorityQueue<SQLDataException>[]) Array.newInstance(PriorityQueue.class, 7);
      PriorityQueue<SQLDataException> priorityQueue1 = new PriorityQueue<SQLDataException>(priorityQueue0);
      priorityQueueArray0[0] = priorityQueue1;
      priorityQueueArray0[1] = priorityQueue0;
      priorityQueueArray0[2] = priorityQueue0;
      priorityQueueArray0[3] = priorityQueue0;
      priorityQueueArray0[4] = priorityQueue0;
      priorityQueueArray0[5] = priorityQueue0;
      priorityQueueArray0[6] = priorityQueue0;
      ObjectArrayIterator<PriorityQueue<SQLDataException>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<SQLDataException>>(priorityQueueArray0);
      ResettableListIterator<PriorityQueue<SQLDataException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      MapIterator<PriorityQueue<SQLDataException>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<PriorityQueue<SQLDataException>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends PriorityQueue<SQLDataException>>) mapIterator0, (Iterator<? extends PriorityQueue<SQLDataException>>) mapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends PriorityQueue<SQLDataException>>) objectArrayIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends PriorityQueue<SQLDataException>>) objectArrayIterator0);
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable1 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable1);
      entrySetMapIterator0.toString();
      Iterator<PriorityQueue<SQLDataException>>[] iteratorArray0 = (Iterator<PriorityQueue<SQLDataException>>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<PriorityQueue<SQLDataException>>) mapIterator0;
      iteratorArray0[1] = (Iterator<PriorityQueue<SQLDataException>>) objectArrayIterator0;
      iteratorArray0[2] = (Iterator<PriorityQueue<SQLDataException>>) resettableListIterator0;
      iteratorArray0[3] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(priorityQueueArray0, (-2306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) null);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) resettableIterator0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(listIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) listIteratorWrapper0, (Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      String string0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      arrayList0.add(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayList0);
      IteratorUtils.toArray(iterator0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) iterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 7);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) iterator0, 1198L);
      iteratorArray0[0] = (Iterator<StringTokenizer>) boundedIterator0;
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry", "org.apache.commons.collections4.map.AbstractHashedMap$HashEntry");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry", "org.apache.commons.collections4.map.AbstractHashedMap$HashEntry");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("Iterator must not be null", "org.apache.commons.collections4.map.AbstractHashedMap$HashEntry", false);
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry");
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("UV7tV~j^Q=%GVen^M", "0Q@!q^/'u?2-hQK7Gl", true);
      stringTokenizerArray0[6] = stringTokenizer6;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0, (-1721));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.singletonListIterator((DataTruncation) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) null);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "==OxRS:2";
      stringArray0[1] = "1#x&B8F";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Vector<String> vector0 = new Vector<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(vector0);
      HashMap<String, Properties> hashMap1 = new HashMap<String, Properties>();
      HashMap<String, Properties> hashMap2 = new HashMap<String, Properties>();
      EntrySetMapIterator<String, Properties> entrySetMapIterator0 = new EntrySetMapIterator<String, Properties>(hashMap2);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<String, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<String>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<String>) entrySetMapIterator0;
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) iteratorArray0[1], 0L);
      iteratorArray0[2] = (Iterator<String>) boundedIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.singletonListIterator((DataTruncation) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<DataTruncation>) null, (Closure<? super DataTruncation>) closure0);
      DataTruncation dataTruncation0 = new DataTruncation(6271, false, false, 6271, 2182, (Throwable) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap1 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      LinkedList<ComparatorPredicate.Criterion> linkedList0 = new LinkedList<ComparatorPredicate.Criterion>();
      IteratorUtils.loopingListIterator((List<ComparatorPredicate.Criterion>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("=T>.ug3>iWGZEyFiipq", "org.apache.commons.collections4.iterators.EmptyOrderedMapIterator", 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%d_5\"~dit#X9* @}+", "aoJ5z\"HqZFK=mu=I", 0);
      IdentityPredicate.identityPredicate((SQLException) sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("' cannot be accessed", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayDequeArray0[0] = arrayDeque0;
      IteratorUtils.arrayIterator(arrayDequeArray0, 1);
      IteratorUtils.getIterator("");
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) entrySetMapIterator0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      IteratorUtils.isEmpty(singletonListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = hashSet0.iterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) iterator0);
      Integer integer0 = new Integer(1);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.isEmpty(singletonListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!-Jn/xwvy", "~&55U X17|@grA");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      LinkedList<ComparatorPredicate.Criterion> linkedList0 = new LinkedList<ComparatorPredicate.Criterion>();
      IteratorUtils.loopingListIterator((List<ComparatorPredicate.Criterion>) linkedList0);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Boolean>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("[");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) transformer0, (String) null, "R 696/^a:0M9jbFP6,q", "wg?~>|bUQ^U.cM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      hashSet0.iterator();
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 9);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      OrderedMapIterator<IIOMetadataNode, ArrayList<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) zippingIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("m8%1'*'n_#+OOWB2");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("!-Jn/xwvy", "!-Jn/xwvy");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) listIterator0);
      IteratorUtils.getIterator(orderedMapIterator1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue1 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue2 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue3 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue4 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue5 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException>[] priorityQueueArray0 = (PriorityQueue<SQLDataException>[]) Array.newInstance(PriorityQueue.class, 2);
      priorityQueueArray0[0] = priorityQueue1;
      priorityQueueArray0[1] = priorityQueue5;
      ObjectArrayIterator<PriorityQueue<SQLDataException>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<SQLDataException>>(priorityQueueArray0);
      ResettableListIterator<PriorityQueue<SQLDataException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      MapIterator<PriorityQueue<SQLDataException>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends PriorityQueue<SQLDataException>>) objectArrayIterator0, (Iterator<? extends PriorityQueue<SQLDataException>>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends PriorityQueue<SQLDataException>>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends PriorityQueue<SQLDataException>>) mapIterator0);
      ResettableIterator<PriorityQueue<SQLDataException>> resettableIterator0 = IteratorUtils.arrayIterator(priorityQueueArray0);
      Iterator<PriorityQueue<SQLDataException>>[] iteratorArray0 = (Iterator<PriorityQueue<SQLDataException>>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<PriorityQueue<SQLDataException>>) objectArrayIterator0;
      entrySetMapIterator0.toString();
      iteratorArray0[1] = (Iterator<PriorityQueue<SQLDataException>>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<PriorityQueue<SQLDataException>>) resettableIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends PriorityQueue<SQLDataException>>[]) iteratorArray0);
      IteratorUtils.toList((Iterator<? extends PriorityQueue<SQLDataException>>) mapIterator0);
      IteratorUtils.size(entrySetMapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MapIterator[]");
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) null);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0);
      Iterator<SQLTransactionRollbackException> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator2, (Closure<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DataTruncation dataTruncation0 = null;
      IteratorUtils.singletonListIterator((DataTruncation) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("InstantiateTransformer: The constructor must exist and be public ", "InstantiateTransformer: The constructor must exist and be public ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) singletonListIterator0, 0);
      ResettableIterator<ServiceLoader<SQLException>> resettableIterator0 = IteratorUtils.emptyIterator();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator1 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.toString((Iterator<Transformer<SQLDataException, TreeSet>>) iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ArrayList<PriorityQueue<SQLDataException>> arrayList1 = new ArrayList<PriorityQueue<SQLDataException>>();
      LoopingIterator<PriorityQueue<SQLDataException>> loopingIterator0 = new LoopingIterator<PriorityQueue<SQLDataException>>(arrayList1);
      IteratorUtils.collatedIterator((Comparator<? super PriorityQueue<SQLDataException>>) null, (Iterator<? extends PriorityQueue<SQLDataException>>) loopingIterator0, (Iterator<? extends PriorityQueue<SQLDataException>>) loopingIterator0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) nullIsExceptionPredicate0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.emptyIterator();
      SkippingIterator<ClientInfoStatus> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<ClientInfoStatus>) resettableIterator0, 0L);
      IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>) skippingIterator0, (Iterator<? extends ClientInfoStatus>) resettableIterator0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) loopingListIterator0);
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      arrayList0.add(sQLInvalidAuthorizationSpecException0);
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(list0);
      IteratorUtils.toString((Iterator<SQLException>) reverseListIterator0);
      ArrayIterator<PriorityQueue<SQLDataException>> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<PriorityQueue<SQLDataException>>("suffix may not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "*q}zBvJ*=G";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      String string1 = "SeD";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("SeD", "SeD");
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, (-732));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      MapIterator<SQLNonTransientConnectionException, Locale.Category> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("(RG$7(`", "(RG$7(`", 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLIntegrityConstraintViolationException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) iterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("(RG$7(`", "&r~8LDK;l1LtQJ3qo");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Properties properties0 = new Properties();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(properties0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 100);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) equalPredicate0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) equalPredicate0);
      OrderedMapIterator<BatchUpdateException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<BatchUpdateException, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLTimeoutException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Estimated size must be greater than 0");
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLWarning sQLWarning0 = new SQLWarning("[]", "%g:pDN", 100);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", sQLWarning0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)1;
      sQLRecoverableException0.printStackTrace();
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "8", 100, (int[]) null, sQLTransientConnectionException0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.computeIfPresent(batchUpdateException0, biFunction0);
      IteratorUtils.getIterator(properties0);
      MapIterator<PriorityQueue<SQLDataException>, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 1);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends PriorityQueue<SQLDataException>>) mapIterator0, (Transformer<? super PriorityQueue<SQLDataException>, ? extends SQLDataException>) transformer0);
      OrderedMapIterator<SQLTransientException, ArrayDeque<SQLClientInfoException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) orderedMapIterator0, (Transformer<? super SQLTransientException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.getIterator("Entry does not exist: ");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable1);
      SQLDataException sQLDataException0 = new SQLDataException("Entry does not exist: ", "Entry does not exist: ", 25, sQLClientInfoException0);
      SQLDataException sQLDataException1 = new SQLDataException(sQLClientInfoException0);
      SQLDataException sQLDataException2 = new SQLDataException("\") in this Map", sQLDataException1);
      SQLDataException sQLDataException3 = new SQLDataException("", sQLDataException1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      sQLDataExceptionArray0[0] = sQLDataException1;
      sQLDataExceptionArray0[1] = sQLDataException2;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      SQLDataException sQLDataException4 = new SQLDataException("");
      Predicate<SQLDataException> predicate0 = EqualPredicate.equalPredicate(sQLDataException2);
      OrPredicate.orPredicate((Predicate<? super SQLDataException>) predicate0, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate0);
      OrderedMapIterator<SQLDataException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) orderedMapIterator0, (Transformer<? super SQLDataException, String>) null, "Q0c$;gD:Zi]", "-a3\"2#Bt!,<boC2", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("!-Jn/xwvy", "!-Jn/xwvy");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPrefix();
      iIOMetadataNode0.getNodeType();
      MapIterator<Properties, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Properties, StringTokenizer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends StringTokenizer>) mapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) mapIterator1);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator1, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, (int) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue1 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue2 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue3 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue4 = new PriorityQueue<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue5 = new PriorityQueue<SQLDataException>();
      int int0 = 1;
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null, (Collection<? super SQLNonTransientConnectionException>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, (-971));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 1916, hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("!-Jn/xwvy", hashtable0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException(sQLClientInfoException2);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLClientInfoException1);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("", "", 1916, sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) objectArrayListIterator0);
      Integer integer0 = new Integer((-38));
      Integer integer1 = new Integer(1916);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 1916, hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("!-Jn/xwvy", hashtable0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashtable0);
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("z9! a1?I", hashtable0, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 1916, hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("!-Jn/xwvy", hashtable0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashtable0);
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("z9 1?t", hashtable0, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedHashSet0);
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[1];
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(objectArrayIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      EqualPredicate.equalPredicate(stringTokenizer0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      MapIterator<SQLNonTransientConnectionException, Locale.Category> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterable<Properties> iterable0 = new TreeSet<Properties>();
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Object[] objectArray0 = new Object[1];
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(objectArrayIterator0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("kfk||[r|Fu Q^]V", "kfk||[r|Fu Q^]V", 100);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      OrderedMapIterator<BatchUpdateException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<BatchUpdateException, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLTimeoutException>(orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) abstractMapIteratorDecorator0);
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Closure<Object>, Vector<Locale.Category>> hashtable0 = new Hashtable<Closure<Object>, Vector<Locale.Category>>();
      EntrySetMapIterator<Closure<Object>, Vector<Locale.Category>> entrySetMapIterator0 = new EntrySetMapIterator<Closure<Object>, Vector<Locale.Category>>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Closure<Object>>) entrySetMapIterator0, 117);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 117
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      OrderedMapIterator<ArrayDeque<SQLTransientException>, Class<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransientException>, Class<SQLInvalidAuthorizationSpecException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLTransientException>, Class<SQLInvalidAuthorizationSpecException>>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("x\"mInA_EM)#:SeA~(");
      IteratorUtils.toString((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLDataException, String>) transformer0, "x\"mInA_EM)#:SeA~(", "x\"mInA_EM)#:SeA~(", "L:>Zx#x{9_%");
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, (-1214));
      dataTruncationArray0[1] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1214), false, false, (-927), (-2756));
      dataTruncationArray0[2] = dataTruncation1;
      int int0 = (-34);
      DataTruncation dataTruncation2 = new DataTruncation((-70), false, false, (-70), (-34));
      dataTruncationArray0[3] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-855), false, true, (-70), (-549));
      dataTruncationArray0[4] = dataTruncation3;
      IteratorUtils.isEmpty(orderedMapIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(dataTruncation1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Collection must not be null", "Collection must not be null", 0, hashtable0, sQLFeatureNotSupportedException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Collection must not be null", "x\"mInA_EM)#:SeA~(", map0);
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>(sQLClientInfoException1, (-549), (-1214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Estimated size must be greater than 0");
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Throwable throwable0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, (Throwable) null);
      sQLClientInfoException0.getStackTrace();
      IteratorUtils.getIterator(hashMap0);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) orderedIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (int[]) null, (Throwable) null);
      int int0 = 925;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 925, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      MapIterator<SQLNonTransientConnectionException, Locale.Category> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("(RG$7(`", "(RG$7(`", 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("(RG$7(`", "(RG$7(`", 0);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("' cannot be accessed", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 0);
      ResettableIterator<ArrayDeque<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0, 0);
      IteratorUtils.getIterator(predicate0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[1];
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(objectArrayIterator0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("kfk||[r|Fu Q^]V", "kfk||[r|Fu Q^]V", 12);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("* w;", "* w;", 117, (long[]) null, sQLTransientException0);
      EqualPredicate.equalPredicate((SQLException) batchUpdateException0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super ArrayDeque<SQLTimeoutException>>) nullIsTruePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("kfk||[r|Fu Q^]V");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 1);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("uH3w(oZb)#F2CQaPpsK", (Class<?>[]) classArray0, objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) listIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'uH3w(oZb)#F2CQaPpsK' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPrefix();
      iIOMetadataNode0.getNodeType();
      iIOMetadataNode0.cloneNode(false);
      String string0 = "Closure must not be null";
      iIOMetadataNode0.getAttribute("Closure must not be null");
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      DataTruncation dataTruncation0 = new DataTruncation((short)1, false, true, (short)1, (short)1);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning0 = new SQLWarning("iterator");
      sQLWarningArray0[1] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("A`ullo^M.}9u`{z>8$", "j", (short)1);
      sQLWarningArray0[2] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("3z", "Wg#9%", 3635, sQLWarning1);
      sQLWarningArray0[3] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning("", (String) null, 0, sQLWarning2);
      sQLWarningArray0[4] = sQLWarning3;
      IteratorUtils.arrayIterator(sQLWarningArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = hashSet0.iterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) iterator0);
      ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLWarning0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 5);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientConnectionException>("", classArray0, (Object[]) null);
      Predicate<SQLNonTransientConnectionException> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) invokerTransformer0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties4 = new Properties();
      propertiesArray0[0] = properties4;
      propertiesArray0[1] = properties2;
      propertiesArray0[2] = properties2;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties2;
      propertiesArray0[5] = properties3;
      propertiesArray0[6] = properties2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[1];
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(objectArrayIterator0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("kfk||[r|Fu Q^]V", "kfk||[r|Fu Q^]V", 12);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("* w;", "* w;", 117, (long[]) null, sQLTransientException0);
      EqualPredicate.equalPredicate((SQLException) batchUpdateException0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super ArrayDeque<SQLTimeoutException>>) nullIsTruePredicate0);
      IteratorUtils.find((Iterator<Object>) objectArrayIterator0, (Predicate<? super Object>) nullIsTruePredicate0);
      objectArray0[0] = null;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator1, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("delimiter may not be null", hashMap0);
      sQLClientInfoException0.getStackTrace();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException0);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) orderedIterator0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 5);
      int int0 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*q:w}zBvJ*=G", "!-Jn/xwvy", 1, hashtable0);
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*q:w}zBvJ*=G", "!-Jn/xwvy", 1, hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("!-Jn/xwvy", hashtable0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLTransientException sQLTransientException0 = new SQLTransientException("*q:w}zBvJ*=G", "!-Jn/xwvy");
      IteratorUtils.singletonListIterator(sQLTransientException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.item(1073741824);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayDeque<IIOMetadataNode>[] arrayDequeArray0 = (ArrayDeque<IIOMetadataNode>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("transformer may not be null", "");
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 1);
      arrayDeque0.retainAll(list0);
      arrayDequeArray0[0] = arrayDeque0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      arrayDeque0.add(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      SQLWarning sQLWarning0 = new SQLWarning("Entry does not exist: ", "Entry does not exist: ", 100);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLIntegrityConstraintViolationException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator1, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Entry does not exist: ", "\"bJ?-|LY'@0nfN", "Entry does not exist: ", (-1144));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) iterator0);
      Iterator<Object> iterator1 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator1, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("!-Jn/xwvy", "!-Jn/xwvy");
      Transformer<SQLException, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends StringTokenizer>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLIntegrityConstraintViolationException>>(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) singletonListIterator0, 2798);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2797
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*q:w}zBvJ*=G", "!-Jn/xwvy", 1, hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 18
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 1, hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("*q:w}zBvJ*=G", hashtable0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("pYsY3", hashtable0);
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("!-Jn/xwvy", hashtable0);
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", hashtable0, sQLClientInfoException4);
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "!-Jn/xwvy", (int) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Comparator<ClientInfoStatus> comparator0 = (Comparator<ClientInfoStatus>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(511);
      vector0.add(integer0);
      vector0.add((Integer) null);
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashMap<SQLFeatureNotSupportedException, String>>) null, 511);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, (-2347), 933);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Estimated size must be greater than 0");
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLWarning sQLWarning0 = new SQLWarning("[]", "%g:pDN", 100);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", sQLWarning0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)1;
      sQLRecoverableException0.printStackTrace();
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) singletonIterator0, (Iterator<? extends SQLRecoverableException>) singletonIterator0, (Iterator<? extends SQLRecoverableException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) uniquePredicate0);
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(predicate0);
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator(predicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) constantTransformer0);
      IteratorUtils.skippingIterator(iterator0, 0L);
      String string0 = "n]Bc<&Y_)TqK~HTg";
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "n]Bc<&Y_)TqK~HTg", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Stack<Class<SQLTransientException>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      MapIterator<SQLNonTransientConnectionException, Locale.Category> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("ST*8)nrcoxHr@Hx1)L", "Collection must not be null", sQLWarning0);
      assertNotNull(sQLTransientException0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLTransientException: ST*8)nrcoxHr@Hx1)L", sQLTransientException0.toString());
      assertEquals("ST*8)nrcoxHr@Hx1)L", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("Collection must not be null", sQLTransientException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ST*8)nrcoxHr@Hx1)L", "Collection must not be null", 1714, sQLTransientException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLTransientException: ST*8)nrcoxHr@Hx1)L", sQLTransientException0.toString());
      assertEquals("ST*8)nrcoxHr@Hx1)L", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("Collection must not be null", sQLTransientException0.getSQLState());
      assertEquals(1714, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ST*8)nrcoxHr@Hx1)L", sQLTransactionRollbackException0.toString());
      assertEquals("ST*8)nrcoxHr@Hx1)L", sQLTransactionRollbackException0.getMessage());
      assertEquals("Collection must not be null", sQLTransactionRollbackException0.getSQLState());
      
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      assertNotNull(resettableIterator0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLTransientException: ST*8)nrcoxHr@Hx1)L", sQLTransientException0.toString());
      assertEquals("ST*8)nrcoxHr@Hx1)L", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("Collection must not be null", sQLTransientException0.getSQLState());
      assertEquals(1714, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ST*8)nrcoxHr@Hx1)L", sQLTransactionRollbackException0.toString());
      assertEquals("ST*8)nrcoxHr@Hx1)L", sQLTransactionRollbackException0.getMessage());
      assertEquals("Collection must not be null", sQLTransactionRollbackException0.getSQLState());
      
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      assertNotNull(enumeration0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLTransientException: ST*8)nrcoxHr@Hx1)L", sQLTransientException0.toString());
      assertEquals("ST*8)nrcoxHr@Hx1)L", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("Collection must not be null", sQLTransientException0.getSQLState());
      assertEquals(1714, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ST*8)nrcoxHr@Hx1)L", sQLTransactionRollbackException0.toString());
      assertEquals("ST*8)nrcoxHr@Hx1)L", sQLTransactionRollbackException0.getMessage());
      assertEquals("Collection must not be null", sQLTransactionRollbackException0.getSQLState());
      
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList0);
      assertNotNull(iterator0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLTransientException: ST*8)nrcoxHr@Hx1)L", sQLTransientException0.toString());
      assertEquals("ST*8)nrcoxHr@Hx1)L", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("Collection must not be null", sQLTransientException0.getSQLState());
      assertEquals(1714, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ST*8)nrcoxHr@Hx1)L", sQLTransactionRollbackException0.toString());
      assertEquals("ST*8)nrcoxHr@Hx1)L", sQLTransactionRollbackException0.getMessage());
      assertEquals("Collection must not be null", sQLTransactionRollbackException0.getSQLState());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      assertNotNull(treeSet0);
      
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      assertNotNull(closure0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      IteratorUtils.apply((Iterator<DataTruncation>) listIterator0, (Closure<? super DataTruncation>) closure0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedList<ComparatorPredicate.Criterion> linkedList0 = new LinkedList<ComparatorPredicate.Criterion>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ResettableListIterator<ComparatorPredicate.Criterion> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ComparatorPredicate.Criterion>) linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      assertNotNull(singletonListIterator0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      ListIterator<Properties> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) singletonListIterator0);
      assertNotNull(listIterator1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.singletonIterator(clientInfoStatus0);
      assertNotNull(resettableIterator0);
      
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      MapIterator<SQLNonTransientConnectionException, LinkedList<EnumSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 9);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      assertNotNull(singletonListIterator0);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) singletonListIterator0;
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterator<SQLTransactionRollbackException> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      iteratorArray0[1] = iterator0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) resettableListIterator1;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      sQLTransactionRollbackExceptionArray0[0] = null;
      sQLTransactionRollbackExceptionArray0[1] = null;
      sQLTransactionRollbackExceptionArray0[2] = null;
      sQLTransactionRollbackExceptionArray0[3] = null;
      sQLTransactionRollbackExceptionArray0[4] = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("00!=~NzvU`#7", "Closure collection must not be null", sQLTransactionRollbackExceptionArray0[1]);
      assertEquals(8, sQLTransactionRollbackExceptionArray0.length);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("00!=~NzvU`#7", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: 00!=~NzvU`#7", sQLTransactionRollbackException0.toString());
      assertEquals("Closure collection must not be null", sQLTransactionRollbackException0.getSQLState());
      
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[6] = null;
      sQLTransactionRollbackExceptionArray0[7] = null;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 0, 0);
      assertEquals(8, sQLTransactionRollbackExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) objectArrayListIterator0;
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      
      iteratorArray0[4] = iterator1;
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      iteratorArray0[5] = (Iterator<SQLTransactionRollbackException>) orderedIterator0;
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackExceptionArray0[1]);
      assertEquals(8, sQLTransactionRollbackExceptionArray0.length);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      iteratorArray0[6] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      Comparator<SQLTransactionRollbackException> comparator0 = (Comparator<SQLTransactionRollbackException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayDeque<IIOMetadataNode>[] arrayDequeArray0 = (ArrayDeque<IIOMetadataNode>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      arrayDequeArray0[0] = arrayDeque0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean0 = arrayDeque0.add(iIOMetadataNode0);
      assertTrue(arrayDeque0.contains(iIOMetadataNode0));
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*q:w}zBvJ*=G", "!-Jn/xwvy", 1, hashtable0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("!-Jn/xwvy", sQLClientInfoException0.getSQLState());
      assertEquals(1, sQLClientInfoException0.getErrorCode());
      assertEquals("*q:w}zBvJ*=G", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: *q:w}zBvJ*=G", sQLClientInfoException0.toString());
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, hashtable0);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException2);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashtable0);
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertNotNull(sQLClientInfoException3);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException3.toString());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals("", sQLClientInfoException3.getMessage());
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("!-Jn/xwvy", hashtable0, sQLClientInfoException2);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertNotNull(sQLClientInfoException4);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertEquals("!-Jn/xwvy", sQLClientInfoException4.getMessage());
      assertNull(sQLClientInfoException4.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: !-Jn/xwvy", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertNotNull(sQLClientInfoException5);
      assertNull(sQLClientInfoException5.getMessage());
      assertNull(sQLClientInfoException5.getSQLState());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException5.toString());
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      assertEquals(6, sQLClientInfoExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      Iterable<SQLClientInfoException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertEquals(6, sQLClientInfoExceptionArray0.length);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("x\"mInA_EM)#:SeA~(");
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLDataException, String>) transformer0, "x\"mInA_EM)#:SeA~(", "x\"mInA_EM)#:SeA~(", "L:>Zx#x{9_%");
      assertEquals("x\"mInA_EM)#:SeA~(L:>Zx#x{9_%", string0);
      assertNotNull(string0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Collection must not be null", "L:>Zx#x{9_%");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals("Collection must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("L:>Zx#x{9_%", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals("Collection must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("L:>Zx#x{9_%", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-2756), 0, sQLTransientConnectionException0);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals("Collection must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("L:>Zx#x{9_%", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 0, (-1214));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation1);
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-1214), false, false, (-927), (-2756));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertNotNull(dataTruncation2);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("22001", dataTruncation2.getSQLState());
      assertEquals(0, dataTruncation2.getErrorCode());
      
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-70), false, false, (-70), 0);
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertNotNull(dataTruncation3);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("22001", dataTruncation3.getSQLState());
      assertEquals(0, dataTruncation3.getErrorCode());
      
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-855), false, true, (-70), (-549));
      assertFalse(dataTruncation4.equals((Object)dataTruncation1));
      assertFalse(dataTruncation4.equals((Object)dataTruncation2));
      assertFalse(dataTruncation4.equals((Object)dataTruncation3));
      assertFalse(dataTruncation4.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation4);
      assertEquals("01004", dataTruncation4.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation4.toString());
      assertEquals(0, dataTruncation4.getErrorCode());
      assertEquals("Data truncation", dataTruncation4.getMessage());
      
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-1214), false, true, (-1), (-1214), sQLTransientConnectionException0);
      assertFalse(dataTruncation5.equals((Object)dataTruncation1));
      assertFalse(dataTruncation5.equals((Object)dataTruncation0));
      assertFalse(dataTruncation5.equals((Object)dataTruncation2));
      assertFalse(dataTruncation5.equals((Object)dataTruncation4));
      assertFalse(dataTruncation5.equals((Object)dataTruncation3));
      assertNotNull(dataTruncation5);
      assertEquals("01004", dataTruncation5.getSQLState());
      assertEquals("Data truncation", dataTruncation5.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation5.toString());
      assertEquals(0, dataTruncation5.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals("Collection must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("L:>Zx#x{9_%", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLNonTransientConnectionException: Collection must not be null", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      dataTruncationArray0[5] = dataTruncation5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-2756), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableIterator<LinkedHashSet<Integer>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      OrderedMapIterator<SQLFeatureNotSupportedException, LinkedList<BatchUpdateException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      String[] stringArray0 = new String[1];
      String string0 = "v{l)>RQ";
      stringArray0[0] = "v{l)>RQ";
      int int0 = 123;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      assertNotNull(enumeration0);
      
      int int0 = 0;
      long[] longArray0 = new long[0];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Set must not be null");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Set must not be null", sQLFeatureNotSupportedException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("delimiter may not be null", "", 0, longArray0, sQLFeatureNotSupportedException0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(batchUpdateException0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Set must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: delimiter may not be null", batchUpdateException0.toString());
      assertEquals("delimiter may not be null", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" g{t;o^$>!9 LP>i-&c");
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode3);
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode4);
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode5);
      
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("Enumeration must not be null");
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode6);
      
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode6));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode7);
      
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      assertEquals(8, iIOMetadataNodeArray0.length);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      assertNotNull(reverseListIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      assertNotNull(enumeration0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      
      UnaryOperator<SQLTransactionRollbackException> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList0);
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      assertNotNull(treeSet0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = IteratorUtils.find(iterator0, (Predicate<? super SQLTransactionRollbackException>) uniquePredicate0);
      assertNull(sQLTransactionRollbackException0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, Locale.Category> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Locale.Category>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Locale.Category>(hashtable0);
      MapIterator<SQLNonTransientConnectionException, Locale.Category> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Locale.Category>) entrySetMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("(RG$7(`", "(RG$7(`", 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLIntegrityConstraintViolationException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) iterator0);
      Iterator<Object> iterator1 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      boolean boolean0 = IteratorUtils.matchesAny(iterator1, (Predicate<? super Object>) predicate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPrefix();
      iIOMetadataNode0.getNodeType();
      iIOMetadataNode0.getAttribute("Closure must not be null");
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPrefix();
      iIOMetadataNode0.getNodeType();
      String string0 = "Closure must not be null";
      iIOMetadataNode0.getAttribute("Closure must not be null");
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLRecoverableException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLRecoverableException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(orderedMapIterator0, "");
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = null;
      iIOMetadataNode0.getAttributeNode((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-872));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("]", "]", 1339);
      DataTruncation dataTruncation0 = new DataTruncation(1339, true, true, (-1), (-774), sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, (-534));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 266;
      DataTruncation dataTruncation0 = new DataTruncation(266, false, true, 266, 266);
      int int1 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      int int0 = 10;
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(orderedIterator0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Map<String, ClientInfoStatus> map0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 32, (Map<String, ClientInfoStatus>) null);
      int int0 = (-1984);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, (-1984), 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
