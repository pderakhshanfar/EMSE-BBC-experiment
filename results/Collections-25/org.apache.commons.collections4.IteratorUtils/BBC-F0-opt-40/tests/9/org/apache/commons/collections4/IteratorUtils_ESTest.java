/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:02:34 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Transformer<SQLException, SQLTransientException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTransactionRollbackException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ResettableIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(serviceLoader0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray1[0] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[1] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[3] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(allPredicate0, predicate1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(orPredicate0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(notPredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Transformer<? super ServiceLoader<SQLInvalidAuthorizationSpecException>, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("You must invoke setComparator() to set a comparator first.");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("&_Q]H]a2[/", sQLRecoverableException0);
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientConnectionException0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) singletonListIterator0);
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.get((Iterator<SQLTransientException>) resettableListIterator0, 2141);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      int int0 = 0;
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      SQLTransientException sQLTransientException0 = new SQLTransientException("Transformer must not be null", "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Transformer must not be null", sQLTransientException0);
      sQLTransactionRollbackException0.printStackTrace();
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+XV;/K&y}", ")_OlL)M3Y_N2o");
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 0, (-1125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      vector0.add(sQLClientInfoException0);
      vector0.add(sQLClientInfoException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(vector0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) loopingListIterator0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      IteratorUtils.toArray(iterator0);
      Hashtable<ComparatorPredicate.Criterion, Closure<Object>> hashtable0 = new Hashtable<ComparatorPredicate.Criterion, Closure<Object>>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLFeatureNotSupportedException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 1073741824;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AxKN+9<", "", 1073741824, sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLTransientException> singletonListIterator1 = new SingletonListIterator<SQLTransientException>(sQLTransientConnectionException0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) singletonListIterator1, 1073741824);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MapIterator<SQLTransientException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure1, closure1);
      IfClosure.ifClosure((Predicate<? super EnumSet<ClientInfoStatus>>) predicate0, (Closure<? super EnumSet<ClientInfoStatus>>) closure0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", "");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) singletonIterator0, (Closure<? super SQLException>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientException0);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) singletonListIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLException>) closure1);
      assertFalse(singletonListIterator0.hasNext());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) ifClosure0);
      MapIterator<SQLTransientException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>((SQLTransientException) null);
      SQLTransientException sQLTransientException0 = IteratorUtils.get((Iterator<SQLTransientException>) singletonListIterator0, 0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<SQLException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null, (Closure<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) mapIterator0, (Closure<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapIterator<SQLException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = null;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<SQLException>) mapIterator0, (Closure<? super SQLException>) ifClosure0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientException0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0);
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (long) 0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) boundedIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      int[] intArray0 = new int[9];
      intArray0[0] = 541;
      intArray0[1] = 55;
      intArray0[2] = (-1);
      intArray0[3] = 1942;
      intArray0[4] = 100;
      intArray0[5] = (-2442);
      intArray0[6] = (-517);
      intArray0[7] = 26;
      intArray0[8] = 128;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Enumeration must not be null", intArray0);
      IteratorUtils.getIterator(batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Enumeration must not be null", "' is invalid.", (-517), batchUpdateException0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 6);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[0] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[1] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[2] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      classArray0[3] = class4;
      Class<SQLNonTransientException> class5 = SQLNonTransientException.class;
      classArray0[4] = class5;
      Class<SQLNonTransientException> class6 = SQLNonTransientException.class;
      classArray0[5] = class6;
      InvokerTransformer<Object, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<Object, SQLInvalidAuthorizationSpecException>("VxHbZ*r~|", classArray0, classArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'VxHbZ*r~|' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.ReverseListIterator", "Collecion must notbe null", 1);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Collection must not be null", "", (Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      Integer integer0 = new Integer(2547);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Collection must not be null");
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLNonTransientException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLNonTransientException0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Integer integer0 = new Integer(100);
      SingletonListIterator<Integer> singletonListIterator1 = new SingletonListIterator<Integer>((Integer) (-1));
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) singletonListIterator1, (Predicate<? super Integer>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("P>");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "P>", "P>", "PeT(8nv^|Dl9@8~Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'P>' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, (Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Integer integer0 = new Integer(100);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) singletonListIterator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) allPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResettableListIterator<Predicate<Properties>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, (Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Predicate<Properties>>) resettableListIterator0, (Predicate<? super Predicate<Properties>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Iterator<Properties>>) null, (Predicate<? super Iterator<Properties>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) mapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<Boolean> class1 = Boolean.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Iterator<Properties>>) null, (Predicate<? super Iterator<Properties>>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Collection must not be null", sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransactionRollbackException0);
      SQLTransientException sQLTransientException0 = IteratorUtils.get((Iterator<SQLTransientException>) singletonListIterator0, 0);
      assertSame(sQLTransientException0, sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedHashSet<Transformer<Object, BatchUpdateException>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, BatchUpdateException>>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Transformer<Object, BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<ArrayDeque<IIOMetadataNode>, Integer> hashMap0 = new HashMap<ArrayDeque<IIOMetadataNode>, Integer>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLNonTransientException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) singletonListIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 10;
      int int1 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>((SQLException) null);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      String string0 = IteratorUtils.toString((Iterator<SQLException>) singletonIterator0, (Transformer<? super SQLException, String>) transformer0, "", "", "");
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "Collection must not be null";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Collection must not be null");
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLNonTransientException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) singletonListIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      int int0 = 3236;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, 3236, 3236);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      String string0 = "fttCf3h._F^r";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) null, "$if=xrVQ,}\"}H", "fttCf3h._F^r", "$if=xrVQ,}\"}H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, (-2946L), (-2946L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "fttCf3h._F^r", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      HashMap<ArrayDeque<IIOMetadataNode>, Integer> hashMap0 = new HashMap<ArrayDeque<IIOMetadataNode>, Integer>();
      EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer>(hashMap0);
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null, 9, 689);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      HashMap<ArrayDeque<IIOMetadataNode>, Integer> hashMap0 = new HashMap<ArrayDeque<IIOMetadataNode>, Integer>();
      EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer>(hashMap0);
      IteratorUtils.contains((Iterator<ArrayDeque<IIOMetadataNode>>) entrySetMapIterator0, (Object) predicate0);
      IteratorUtils.size(entrySetMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, BatchUpdateException>(orderedMapIterator0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends Properties>) orderedMapIterator0, (Iterator<? extends Properties>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Node must not be null");
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLNonTransientException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) singletonListIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>[]) iteratorArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) singletonListIterator0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) singletonIterator0);
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 9);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Class<Boolean> class1 = Boolean.class;
      classArray0[1] = class1;
      Class<Boolean> class2 = Boolean.class;
      classArray0[2] = class2;
      Class<Boolean> class3 = Boolean.class;
      classArray0[3] = class3;
      Class<Boolean> class4 = Boolean.class;
      classArray0[4] = class4;
      Class<Boolean> class5 = Boolean.class;
      classArray0[5] = class5;
      Class<Boolean> class6 = Boolean.class;
      classArray0[6] = class6;
      Class<Boolean> class7 = Boolean.class;
      classArray0[7] = class7;
      Class<Boolean> class8 = Boolean.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      Iterator<String> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends String>) invokerTransformer0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      HashMap<ArrayDeque<IIOMetadataNode>, Integer> hashMap0 = new HashMap<ArrayDeque<IIOMetadataNode>, Integer>();
      EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer>(hashMap0);
      IteratorUtils.contains((Iterator<ArrayDeque<IIOMetadataNode>>) entrySetMapIterator0, (Object) predicate0);
      IteratorUtils.size(entrySetMapIterator0);
      OrderedMapIterator<SQLException, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLException, Locale.Category> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ? extends Locale.Category>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLException, Locale.Category> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLException, Locale.Category>(orderedMapIterator1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLException, String>) transformer0, ").", "Node must not be null", "");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 4);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(").", "", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Node must not be null", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(").", "Node must not be null", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator1 = IteratorUtils.emptyIterator();
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator1;
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      iteratorArray0[3] = (Iterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException>(orderedMapIterator0);
      MapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLInvalidAuthorizationSpecException, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      iteratorArray0[4] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SingletonListIterator<ArrayDeque<Object>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<Object>>(arrayDeque0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<Object>>) singletonListIterator0, (Transformer<? super ArrayDeque<Object>, String>) transformer0);
      assertEquals("[null]", string0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "74q\"V&y*F!0$W");
      SingletonListIterator<SQLTransientException> singletonListIterator1 = new SingletonListIterator<SQLTransientException>(sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation((-4921), true, true, (-1193), (-4921), sQLTransientException0);
      IteratorUtils.getIterator(dataTruncation0);
      String string1 = IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "5\"tlhyfA", "", "Node must not be null");
      assertEquals("Node must not be null", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      HashMap<ArrayDeque<IIOMetadataNode>, Integer> hashMap0 = new HashMap<ArrayDeque<IIOMetadataNode>, Integer>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (String) null);
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientException0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1762);
      intArray0[1] = (-632);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, ")hh!1B,$$gjS,x", intArray0, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", batchUpdateException0);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer1, (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedHashSet<Transformer<Object, BatchUpdateException>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, BatchUpdateException>>();
      HashMap<Object, BatchUpdateException> hashMap0 = new HashMap<Object, BatchUpdateException>();
      Transformer<Object, BatchUpdateException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends BatchUpdateException>) hashMap0);
      linkedHashSet0.add(transformer0);
      IteratorUtils.loopingIterator((Collection<? extends Transformer<Object, BatchUpdateException>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SingletonListIterator<ArrayDeque<Object>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<Object>>(arrayDeque0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ArrayDeque<Object>>) singletonListIterator0, (Transformer<? super ArrayDeque<Object>, String>) transformer0);
      singletonListIterator0.set(arrayDeque0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "[null]");
      SingletonListIterator<SQLTransientException> singletonListIterator1 = new SingletonListIterator<SQLTransientException>(sQLTransientException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category.values();
      IteratorUtils.getIterator(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "Node must not be null", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "Node mY not b. nul?";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Node mY not b. nul?");
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SingletonListIterator<ArrayDeque<Object>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<Object>>(arrayDeque0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ArrayDeque<Object>>) singletonListIterator0, (Transformer<? super ArrayDeque<Object>, String>) transformer0);
      String string0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "[null]");
      SingletonListIterator<SQLTransientException> singletonListIterator1 = new SingletonListIterator<SQLTransientException>(sQLTransientException0);
      IteratorUtils.getIterator(singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "", "Node must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<ArrayDeque<IIOMetadataNode>, Integer> hashMap0 = new HashMap<ArrayDeque<IIOMetadataNode>, Integer>();
      EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer>(hashMap0);
      entrySetMapIterator0.hasNext();
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ListIterator<ArrayDeque<Object>> listIterator0 = new SingletonListIterator<ArrayDeque<Object>>(arrayDeque0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ArrayDeque<Object>>) listIterator0, (Transformer<? super ArrayDeque<Object>, String>) transformer0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "[null]");
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) singletonListIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int[] intArray0 = new int[2];
      intArray0[0] = 1022;
      intArray0[1] = (-2575);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("iterator", "iterator", intArray0);
      batchUpdateException0.getNextException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) singletonListIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("-C^");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      LinkedHashSet<Transformer<Object, BatchUpdateException>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, BatchUpdateException>>();
      IteratorUtils.loopingIterator((Collection<? extends Transformer<Object, BatchUpdateException>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) null, 2273);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 8);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      String string0 = "";
      int int0 = 0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("sJ<.@eb@9si>", "", 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", "", 0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException(sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      MapIterator<SQLTransientConnectionException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, BatchUpdateException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends BatchUpdateException>) mapIterator0);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) mapIterator1;
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) orderedIterator0;
      EntrySetMapIterator<SQLTransientConnectionException, SQLTimeoutException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, SQLTimeoutException>((Map<SQLTransientConnectionException, SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.UniquePredicate", "", false);
      IteratorUtils.getIterator(stringTokenizer0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      HashMap<ArrayDeque<IIOMetadataNode>, Integer> hashMap0 = new HashMap<ArrayDeque<IIOMetadataNode>, Integer>();
      EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer>(hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IteratorUtils.contains((Iterator<ArrayDeque<IIOMetadataNode>>) entrySetMapIterator0, (Object) sQLFeatureNotSupportedException0);
      EmptyListIterator.resettableEmptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ListIterator<ArrayDeque<Object>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[", hashMap0, sQLTransientException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      predicateArray0[1] = predicate2;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate2);
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("[");
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate3);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) transformedPredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<Object>>) listIterator0, (Transformer<? super ArrayDeque<Object>, String>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Da~m", "Da~m");
      LinkedHashSet<Transformer<Object, BatchUpdateException>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, BatchUpdateException>>();
      IteratorUtils.loopingIterator((Collection<? extends Transformer<Object, BatchUpdateException>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) resettableListIterator0, 2273);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2273
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Da~m", "Da~m");
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.getIterator(class0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      HashMap<ArrayDeque<IIOMetadataNode>, Integer> hashMap0 = new HashMap<ArrayDeque<IIOMetadataNode>, Integer>();
      EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<ArrayDeque<IIOMetadataNode>, Integer>(hashMap0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.contains((Iterator<ArrayDeque<IIOMetadataNode>>) entrySetMapIterator0, (Object) iIOMetadataNode0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      ConstantTransformer.nullTransformer();
      int int0 = (-19);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayDeque<Object>[]) null, (-19));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.getIterator(class0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("List must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", sQLRecoverableException0);
      sQLRecoverableException0.setNextException(sQLTransactionRollbackException0);
      sQLRecoverableException0.getStackTrace();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "i;*f]", 3223);
      Properties properties0 = new Properties();
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Hfz:v>aa", "org.apache.commons.collections4.iterators.EntrySetMapIterator", (byte)17, sQLSyntaxErrorException0);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) sQLTransactionRollbackException0);
      IteratorUtils.emptyOrderedIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("i;*f]");
      IteratorUtils.asIterable((Iterator<? extends String>) singletonListIterator0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Hfz:v>aa");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      StringValueTransformer.stringValueTransformer();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("i;*f]", "i;*f]", (-4029));
      Properties properties0 = new Properties();
      SQLWarning sQLWarning0 = new SQLWarning("i;*f]", "i;*f]");
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) sQLWarning0);
      IteratorUtils.emptyOrderedIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("tbU[q|");
      IteratorUtils.asIterable((Iterator<? extends String>) singletonListIterator0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ExceptionPredicate.exceptionPredicate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.addFirst(iIOMetadataNode0);
      ListIterator<ArrayDeque<Object>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<Object>>) listIterator0, (Transformer<? super ArrayDeque<Object>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("lAsF(=>5v,_");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[1] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[2] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[4] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[5] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[6] = sQLNonTransientException0;
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      intArray0[1] = (-278);
      intArray0[2] = 44;
      intArray0[3] = (-721);
      intArray0[4] = (-183);
      intArray0[5] = 14;
      intArray0[6] = 2127;
      intArray0[7] = (-785);
      intArray0[8] = (-3773);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("lAsF(=>5v,_", intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", batchUpdateException0);
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[8] = sQLNonTransientException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "List must not be null";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("List must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", sQLRecoverableException0);
      sQLRecoverableException0.setNextException(sQLTransactionRollbackException0);
      sQLRecoverableException0.getStackTrace();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation((-3543), true, false, (-3543), (-3543), sQLTransactionRollbackException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1542, false, true, (-3543), (-3647));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2177, false, true, (-723), 1851, sQLTransactionRollbackException0);
      dataTruncationArray0[2] = dataTruncation2;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<DataTruncation>) loopingListIterator0, (Predicate<? super DataTruncation>) predicate0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(stack0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`aY0TehI1o2j");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.getIterator(class0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2915;
      longArray0[1] = (long) 2915;
      longArray0[2] = (long) 2915;
      longArray0[3] = (long) 2915;
      longArray0[4] = (long) 2915;
      longArray0[5] = (long) 2915;
      longArray0[6] = (long) 2915;
      SQLDataException sQLDataException0 = new SQLDataException("", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.InstantiateTransformer", "Q#", 2915, longArray0, sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedMapIterator0, 1);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 10);
      Properties properties0 = new Properties();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) properties0);
      IteratorUtils.emptyOrderedIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      IteratorUtils.asIterable((Iterator<? extends String>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      sQLRecoverableException0.getStackTrace();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>(linkedList0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      LinkedList<DataTruncation> linkedList1 = new LinkedList<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(linkedList1);
      IteratorUtils.matchesAll((Iterator<DataTruncation>) loopingListIterator0, (Predicate<? super DataTruncation>) andPredicate0);
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 1, (-1213), sQLRecoverableException0);
      linkedList1.add(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!(g9");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("!(g9");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("The map size must be 0 or 1");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("The map size must be 0 or 1");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("The map size must be 0 or 1");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("The map size must be 0 or 1");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
      IteratorUtils.isEmpty(resettableIterator0);
      NOPClosure.nopClosure();
      IteratorUtils.isEmpty(mapIterator0);
      Integer integer0 = new Integer((-583));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1311);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      EmptyListIterator.resettableEmptyListIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      sQLRecoverableException0.getStackTrace();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      LoopingListIterator<SQLException> loopingListIterator0 = new LoopingListIterator<SQLException>(vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) loopingListIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 10);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MapIterator<Transformer<SQLSyntaxErrorException, Locale.Category>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<Transformer<SQLSyntaxErrorException, Locale.Category>>) mapIterator0, (Predicate<? super Transformer<SQLSyntaxErrorException, Locale.Category>>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.list.AbstractLinkedList");
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) "org.apache.commons.collections4.list.AbstractLinkedList");
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(resettableIterator0);
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) listIteratorWrapper0, class0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.getIterator(listIteratorWrapper0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class0, 2, 1235);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Properties properties0 = new Properties();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[", "[", 10);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLRecoverableException0);
      IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      MapIterator<Boolean, Boolean> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Boolean>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Boolean>) mapIterator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NZBR VH^qB-[r|GZ'EF", (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransactionRollbackException0);
      IteratorUtils.isEmpty(iterator0);
      Integer integer0 = new Integer((-156));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 378);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("wBv0wZr%p~h)8/X");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("(%MyR *e9 n*f'|j", "", (-392));
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prefix may not be null");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "Start index must not be greater than the array length");
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("", "`C;@\"IfEJ", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("DU=|v+r$`d", "DU=|v+r$`d", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.isEmpty(resettableListIterator0);
      Integer integer0 = new Integer((-583));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException1, 951);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<DataTruncation, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends DataTruncation>) mapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate2);
      Predicate<Object> predicate4 = AndPredicate.andPredicate((Predicate<? super Object>) predicate3, (Predicate<? super Object>) predicate3);
      IteratorUtils.find((Iterator<Transformer<SQLSyntaxErrorException, Locale.Category>>) null, (Predicate<? super Transformer<SQLSyntaxErrorException, Locale.Category>>) predicate4);
      DataTruncation dataTruncation0 = new DataTruncation(1688, true, false, 0, 100, (Throwable) null);
      // Undeclared exception!
      try { 
        dataTruncation0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientException, SQLNonTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) mapIterator1, (Iterator<? extends SQLNonTransientException>) mapIterator0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      Transformer<SQLNonTransientException, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLNonTransientException, ? extends SQLNonTransientConnectionException>) hashtable0);
      Iterator<Object> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Transformer<? super SQLNonTransientException, ?>) transformer0);
      assertNotNull(iterator1);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      MockThrowable mockThrowable0 = new MockThrowable(sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(3, false, false, 3, 3, mockThrowable0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(100, false, true, 3, (-392), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-652), false, true, 10, 3);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-652), false, false, 5, 100, sQLTimeoutException0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(3, true, false, 128, (-3655), dataTruncation0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(980, true, false, 100, (-1655), dataTruncation3);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-392), true, true, 128, 128);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation((-652), false, false, 128, (-1053), dataTruncation5);
      dataTruncationArray0[7] = dataTruncation7;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<DataTruncation>) objectArrayListIterator0, (Object) dataTruncation1);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MapIterator<Transformer<SQLSyntaxErrorException, Locale.Category>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<Transformer<SQLSyntaxErrorException, Locale.Category>>) mapIterator0, (Predicate<? super Transformer<SQLSyntaxErrorException, Locale.Category>>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.list.AbstractLinkedList");
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) "org.apache.commons.collections4.list.AbstractLinkedList");
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(predicate1);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils");
      MockThrowable mockThrowable0 = new MockThrowable(".h4d2>z/tu", sQLWarning0);
      MockThrowable.replacement_getStackTrace(sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLWarning0.forEach(consumer0);
      mockThrowable0.getStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.IteratorUtils");
      sQLWarning0.addSuppressed(mockThrowable0);
      IteratorUtils.singletonIterator(sQLWarning0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientException0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(predicate0);
      ListIterator<SQLNonTransientException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) nullIsTruePredicate0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-178), true, true, (-178), (-178));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" is less than zero", " is less than zero", dataTruncation0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      sQLTimeoutException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "<u$rle#jV^VM@[pT", (-178));
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Object) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Iterable<String> iterable0 = IteratorUtils.asIterable((Iterator<? extends String>) singletonListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("wBv0wZr%p~h)8/X");
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      IteratorUtils.isEmpty(resettableListIterator0);
      NOPClosure.nopClosure();
      MapIterator<Boolean, Boolean> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Boolean> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Boolean>) mapIterator0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Boolean> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Boolean>>) arrayDeque0);
      IteratorUtils.filteredIterator((Iterator<? extends Boolean>) iterator0, (Predicate<? super Boolean>) predicate0);
      MapIterator<Stack<SQLTransientException>, SQLRecoverableException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<Stack<SQLTransientException>>) mapIterator1);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<LinkedList<ClientInfoStatus>>) null, (Predicate<? super LinkedList<ClientInfoStatus>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Index: ", "r( Rh8", 100, longArray0, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<DataTruncation, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<DataTruncation, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) orderedMapIterator1;
      DataTruncation dataTruncation0 = new DataTruncation((-452), false, false, 44, (-452), batchUpdateException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      iteratorArray0[1] = (Iterator<DataTruncation>) singletonIterator0;
      Hashtable<DataTruncation, IIOMetadataNode> hashtable0 = new Hashtable<DataTruncation, IIOMetadataNode>();
      EntrySetMapIterator<DataTruncation, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, IIOMetadataNode>(hashtable0);
      iteratorArray0[2] = (Iterator<DataTruncation>) entrySetMapIterator0;
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0, 44);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) list0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("List must not be null");
      sQLRecoverableException0.getStackTrace();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableListIterator0, 232);
      LoopingListIterator<SQLException> loopingListIterator0 = new LoopingListIterator<SQLException>(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) loopingListIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>(hashtable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("List must not be null", "", hashtable1);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", 232, hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      SQLException sQLException0 = new SQLException("UE{FB");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UE{FB", sQLTransientConnectionException0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      MapIterator<Boolean, Boolean> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Boolean>) mapIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) listIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends Boolean>) mapIterator0, (Predicate<? super Boolean>) predicate0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("org.apache.commons.collections4.functors.StringValueTransformer");
      IteratorUtils.toListIterator((Iterator<? extends String>) singletonListIterator0);
      MapIterator<Integer, Iterator<String>> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Integer, Iterator<String>> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends Iterator<String>>) mapIterator1);
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) mapIterator2, (Predicate<? super Integer>) predicate0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      MapIterator<Boolean, Boolean> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Boolean> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Boolean>) mapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends Boolean>) iterator0, (Predicate<? super Boolean>) predicate0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("org.apache.commons.collections4.functors.StringValueTransformer");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Transformer<? super SQLNonTransientException, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      MapIterator<Boolean, Boolean> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Boolean> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Boolean>) mapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends Boolean>) iterator0, (Predicate<? super Boolean>) predicate0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("org.apache.commons.collections4.functors.StringValueTransformer");
      IteratorUtils.toListIterator((Iterator<? extends String>) singletonListIterator0);
      ResettableListIterator<ServiceLoader<DataTruncation>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ServiceLoader<DataTruncation>>) resettableListIterator0, (-1582L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ExceptionPredicate.exceptionPredicate();
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-178), true, true, (-178), (-178));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" is less than zero", " is less than zero", dataTruncation0);
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      int[] intArray0 = new int[3];
      intArray0[0] = (-178);
      intArray0[1] = (-178);
      intArray0[2] = (-178);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      IteratorUtils.getIterator(batchUpdateException0);
      ConstantTransformer.nullTransformer();
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      linkedHashSet0.clone();
      batchUpdateException0.setNextException(sQLNonTransientConnectionException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("C6AC0\"4E}:b1^[R;", " is less than zero", (-178), sQLNonTransientConnectionException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "Enumeration must not be null", (-178), sQLNonTransientConnectionException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(batchUpdateException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "C6AC0\"4E}:b1^[R;", (-178), sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-178), (-178));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "NZBR VH^qB-[r|GZ'EF";
      String string1 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NZBR VH^qB-[r|GZ'EF", (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      Transformer<Object, Locale.Category> transformer0 = ConstantTransformer.nullTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      hashSet0.clone();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      int int0 = 764;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformedPredicate0, 764);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      IteratorUtils.getIterator((Object) null);
      ConstantTransformer.nullTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      HashSet hashSet1 = (HashSet)hashSet0.clone();
      assertTrue(hashSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.getIterator(class0);
      ConstantTransformer.nullTransformer();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      hashSet0.clone();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) hashSet0, 1235, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<Transformer<SQLSyntaxErrorException, Locale.Category>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ListIterator<ArrayDeque<Object>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque0);
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<Object>>) listIterator0, (Transformer<? super ArrayDeque<Object>, String>) transformer0);
      assertEquals("[[]]", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException>[] priorityQueueArray0 = (PriorityQueue<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(PriorityQueue.class, 2);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue1 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      priorityQueueArray0[1] = priorityQueue1;
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) priorityQueue0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("7&vC'");
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<Object>>) null, (Transformer<? super ArrayDeque<Object>, String>) transformer1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "must call next() or previous() before a call to set()");
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<Object>>) null, (Transformer<? super ArrayDeque<Object>, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      iteratorArray0[0] = iterator0;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator1;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      Iterator<SQLException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(iterator1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "]";
      stringArray0[1] = "tVd`1E{)7U#`dNy";
      stringArray0[2] = "\"WaphE";
      stringArray0[3] = "^6\"cM1GGi(u<B";
      stringArray0[4] = "EQUAL";
      stringArray0[5] = "Zk.4/";
      stringArray0[6] = "]]]GI3}E";
      ResettableIterator<String> resettableIterator1 = IteratorUtils.arrayIterator(stringArray0, 0, 0);
      Iterator<String> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends String>) iterator2, (Iterator<? extends String>) resettableIterator1);
      Class<Locale.Category> class0 = Locale.Category.class;
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 4);
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[0] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[1] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[2] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[3] = class4;
      InstantiateFactory<Locale.Category> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<Locale.Category>(class0, classArray0, iteratorArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("List must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", sQLRecoverableException0);
      sQLRecoverableException0.setNextException(sQLTransactionRollbackException0);
      sQLRecoverableException0.getStackTrace();
      sQLTransactionRollbackException0.spliterator();
      IteratorUtils.contains((Iterator<ArrayDeque<IIOMetadataNode>>) null, (Object) sQLTransactionRollbackException0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableListIterator0, 232);
      LoopingListIterator<SQLException> loopingListIterator0 = new LoopingListIterator<SQLException>(list0);
      loopingListIterator0.add(sQLTransactionRollbackException0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) loopingListIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>(hashtable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("List must not be null", "", hashtable1);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", 232, hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) iterator0, (-14L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getSuppressed();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) singletonIterator0, (Iterator<? extends SQLNonTransientException>) singletonIterator0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      Transformer<SQLNonTransientException, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLNonTransientException, ? extends SQLNonTransientConnectionException>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Transformer<? super SQLNonTransientException, ?>) transformer0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NOPClosure.nopClosure();
      IteratorUtils.isEmpty((Iterator<?>) null);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      int int0 = 44;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(clientInfoStatusArray0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<Transformer<SQLSyntaxErrorException, Locale.Category>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      EqualPredicate.equalPredicate((Object) mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ListIterator<ArrayDeque<Object>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque0);
      IteratorUtils.toString((Iterator<ArrayDeque<Object>>) listIterator0, (Transformer<? super ArrayDeque<Object>, String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getSuppressed();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) singletonIterator0, (Iterator<? extends SQLNonTransientException>) singletonIterator0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      OrderedMapIterator<LinkedList<String>, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<LinkedList<String>, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<LinkedList<String>, SQLDataException>(orderedMapIterator0);
      ZippingIterator<LinkedList<String>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends LinkedList<String>>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends LinkedList<String>>) abstractOrderedMapIteratorDecorator0);
      BiFunction<Object, Object, SQLNonTransientConnectionException> biFunction0 = (BiFunction<Object, Object, SQLNonTransientConnectionException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.computeIfPresent(zippingIterator0, biFunction0);
      MapTransformer.mapTransformer((Map<? super SQLNonTransientException, ? extends SQLNonTransientConnectionException>) hashtable0);
      Transformer<SQLException, String> transformer0 = null;
      Map<String, ClientInfoStatus> map0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      ArrayIterator<SQLTransientConnectionException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLTransientConnectionException>(sQLClientInfoException0, 1949, 1949);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("+");
      linkedHashSet0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      linkedHashSet0.add(iIOMetadataNode1);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      MapIterator<Properties, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) mapIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      SQLException sQLException0 = new SQLException("UE{FB");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UE{FB", sQLTransientConnectionException0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      Transformer<SQLNonTransientException, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLNonTransientException, ? extends SQLNonTransientConnectionException>) hashtable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("f ]+@\"79{ld`=afDAu", "Collection must not be null");
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Transformer<? super SQLNonTransientException, ?>) transformer0);
      MapIterator<Stack<SQLTransientException>, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      String string0 = IteratorUtils.toString((Iterator<Stack<SQLTransientException>>) mapIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedHashSet0.add(iIOMetadataNode0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      MapIterator<Properties, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%i%o&`c/9UGcD]");
      linkedHashSet0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      linkedHashSet0.add(iIOMetadataNode1);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      MapIterator<Properties, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) mapIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>(linkedList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      MapIterator<Boolean, Boolean> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Boolean>) mapIterator1);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iIOMetadataNode1);
      Predicate<Boolean> predicate1 = NotPredicate.notPredicate((Predicate<? super Boolean>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Boolean>) mapIterator1, (Predicate<? super Boolean>) predicate1);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("%i%o&`c/9UGcD]");
      ListIterator<String> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends String>) singletonListIterator0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends String>) iterator0, 0L);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      // Undeclared exception!
      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      MapIterator<DataTruncation, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, DataTruncation> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends DataTruncation>) mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) mapIterator1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (Throwable) null);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.FilterIterator", "u:", (-19), longArray0, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) mapIterator1, (-19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "Closure must not be null";
      int int0 = 84;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "wBv0wZr%p~h)8/X", 84);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@lX$7t", "Closure must not be null", sQLTimeoutException0);
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      String string1 = ", ";
      String string2 = "3sF):mi;";
      Throwable throwable0 = sQLTimeoutException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      int int1 = 100;
      StackTraceElement stackTraceElement0 = new StackTraceElement("@lX$7t", "@lX$7t", "Closure must not be null", 100);
      SQLWarning sQLWarning0 = new SQLWarning(throwable0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 1128, (-899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getSuppressed();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, 10, 229);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientException, SQLNonTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) mapIterator1, (Iterator<? extends SQLNonTransientException>) mapIterator0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      Transformer<SQLNonTransientException, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLNonTransientException, ? extends SQLNonTransientConnectionException>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Transformer<? super SQLNonTransientException, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) hashtable0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%i%o&`c/9UGcD]");
      linkedHashSet0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      linkedHashSet0.add(iIOMetadataNode1);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      MapIterator<Properties, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) mapIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      MapIterator<DataTruncation, SQLFeatureNotSupportedException> mapIterator1 = IteratorUtils.emptyMapIterator();
      Transformer<Object, SQLRecoverableException> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>(linkedList0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) andPredicate0);
      IteratorUtils.matchesAll((Iterator<DataTruncation>) mapIterator1, (Predicate<? super DataTruncation>) predicate1);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("O");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (Throwable) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("InstantiateFactory: The constructor must exist and be public ", "", 44, sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, "InstantiateFactory: The constructor must exist and be public ", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException(sQLTimeoutException2);
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException((String) null, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 44, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.singletonListIterator((SQLTransientException) sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-2154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector<StringTokenizer>[] vectorArray0 = (Vector<StringTokenizer>[]) Array.newInstance(Vector.class, 5);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      vectorArray0[0] = vector0;
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>();
      vectorArray0[1] = vector1;
      Vector<StringTokenizer> vector2 = new Vector<StringTokenizer>();
      vectorArray0[2] = vector2;
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      vectorArray0[3] = (Vector<StringTokenizer>) stack0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")[", "", 1073741824);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("i8GZD!.[z", "@'s9eer(By!(Ef&x#", 1073741824);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException0;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.size(resettableIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("{scgM!@>j[n1RP4", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ArrayListIterator<StringTokenizer> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<StringTokenizer>(sQLTransactionRollbackException0, 2215);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("qKL]JY;-YPYFfh[f");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      String string0 = "iDL)~ovEb&D.#";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("iDL)~ovEb&D.#", "U.Hs{,dEU&1ha5%rM");
      sQLFeatureNotSupportedException1.addSuppressed(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-988), 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MapIterator<SQLRecoverableException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLRecoverableException, String> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ? extends String>) mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      Vector<StringTokenizer> vector0 = new Stack<StringTokenizer>();
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>();
      int int0 = 331;
      Vector<StringTokenizer>[] vectorArray0 = (Vector<StringTokenizer>[]) Array.newInstance(Vector.class, 6);
      vectorArray0[0] = (Vector<StringTokenizer>) stack0;
      vectorArray0[1] = vector0;
      Vector<StringTokenizer> vector2 = new Vector<StringTokenizer>();
      vectorArray0[2] = vector2;
      vectorArray0[3] = (Vector<StringTokenizer>) stack0;
      vectorArray0[4] = vector0;
      vectorArray0[5] = vector1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(vectorArray0, 331, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "[", (Equator<Object>) defaultEquator0);
      PredicateTransformer<BatchUpdateException> predicateTransformer0 = new PredicateTransformer<BatchUpdateException>(predicate0);
      TransformerPredicate.transformerPredicate((Transformer<? super BatchUpdateException, Boolean>) predicateTransformer0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("null values not allowed", "The predicate to call must not be null", true);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException>(hashtable0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, 10);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientException, SQLNonTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) mapIterator1, (Iterator<? extends SQLNonTransientException>) mapIterator0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("].oHuD[WZzJB&", "].oHuD[WZzJB&", 0, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Z+O8r9pI7(", "].oHuD[WZzJB&", 1336, (long[]) null, sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(100, false, true, 100, 0, sQLInvalidAuthorizationSpecException1);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      loopingListIterator0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) loopingListIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLWarning>) iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) listIterator0, class0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) resettableListIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      String string0 = "VNWEb^O";
      iIOMetadataNode0.setNodeValue("VNWEb^O");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.singletonListIterator((Properties) null);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, (-388), (-1412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SingletonListIterator<ArrayDeque<Object>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<Object>>(arrayDeque0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ArrayDeque<Object>>) singletonListIterator0, (Transformer<? super ArrayDeque<Object>, String>) transformer0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "[null]");
      sQLTransientException0.getStackTrace();
      SingletonListIterator<SQLTransientException> singletonListIterator1 = new SingletonListIterator<SQLTransientException>(sQLTransientException0);
      IteratorUtils.getIterator(singletonListIterator0);
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "", "Node must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getSuppressed();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("[", "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<Transformer<SQLSyntaxErrorException, Locale.Category>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Transformer<SQLSyntaxErrorException, Locale.Category>>) mapIterator0, (Predicate<? super Transformer<SQLSyntaxErrorException, Locale.Category>>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("wBv0wZr%p~h)8/X");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("lX$", "Closure must not be null", sQLTimeoutException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      sQLTimeoutException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(", ", "3sF)~:mi;", 84);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Object) sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "Wn";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Wn");
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("+", "+", (-3314));
      DataTruncation dataTruncation0 = new DataTruncation((-3314), false, false, (-3314), (-3314), sQLTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-387), false, true, (-387), (-387));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-387), false, false, 0, (-3314));
      dataTruncationArray0[2] = dataTruncation2;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PriorityQueue<SQLSyntaxErrorException>[] priorityQueueArray0 = (PriorityQueue<SQLSyntaxErrorException>[]) Array.newInstance(PriorityQueue.class, 4);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLSyntaxErrorException> priorityQueue1 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[1] = priorityQueue1;
      priorityQueue1.parallelStream();
      PriorityQueue<SQLSyntaxErrorException> priorityQueue2 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[2] = priorityQueue2;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLSyntaxErrorException> priorityQueue3 = new PriorityQueue<SQLSyntaxErrorException>(4, comparator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator must not be null");
      priorityQueue3.add(sQLSyntaxErrorException0);
      priorityQueueArray0[3] = priorityQueue3;
      IteratorUtils.arrayIterator(priorityQueueArray0, 4, 4);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector<Integer>[] vectorArray0 = (Vector<Integer>[]) Array.newInstance(Vector.class, 9);
      Stack<Integer> stack0 = new Stack<Integer>();
      vectorArray0[0] = (Vector<Integer>) stack0;
      Stack<Integer> stack1 = new Stack<Integer>();
      vectorArray0[1] = (Vector<Integer>) stack1;
      Vector<Integer> vector0 = new Vector<Integer>();
      vectorArray0[2] = vector0;
      Vector<Integer> vector1 = new Vector<Integer>();
      vectorArray0[3] = vector1;
      Stack<Integer> stack2 = new Stack<Integer>();
      vectorArray0[4] = (Vector<Integer>) stack2;
      Stack<Integer> stack3 = new Stack<Integer>();
      vectorArray0[5] = (Vector<Integer>) stack3;
      Stack<Integer> stack4 = new Stack<Integer>();
      vectorArray0[6] = (Vector<Integer>) stack4;
      Vector<Integer> vector2 = new Vector<Integer>();
      vectorArray0[7] = vector2;
      Stack<Integer> stack5 = new Stack<Integer>();
      vectorArray0[8] = (Vector<Integer>) stack5;
      IteratorUtils.arrayIterator(vectorArray0);
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.emptyListIterator();
      MapIterator<SQLRecoverableException, Predicate<Object>> mapIterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (Throwable) null);
      MapIterator<DataTruncation, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, DataTruncation> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends DataTruncation>) mapIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) mapIterator1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.FilterIterator", "u:", 10, longArray0, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 100, 0, sQLInvalidAuthorizationSpecException1);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) mapIterator1, 10);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      loopingListIterator0.add(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) list0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("List must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", sQLRecoverableException0);
      sQLRecoverableException0.setNextException(sQLTransactionRollbackException0);
      sQLRecoverableException0.getStackTrace();
      sQLTransactionRollbackException0.spliterator();
      IteratorUtils.contains((Iterator<ArrayDeque<IIOMetadataNode>>) null, (Object) sQLTransactionRollbackException0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("AT}%9;~");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLFeatureNotSupportedException0.addSuppressed(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 100, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Vector<StringTokenizer>[] vectorArray0 = (Vector<StringTokenizer>[]) Array.newInstance(Vector.class, 5);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      vectorArray0[0] = vector0;
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>();
      vectorArray0[1] = vector1;
      Vector<StringTokenizer> vector2 = new Vector<StringTokenizer>();
      vectorArray0[2] = vector2;
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      vectorArray0[3] = (Vector<StringTokenizer>) stack0;
      Vector<StringTokenizer> vector3 = new Vector<StringTokenizer>();
      vectorArray0[4] = vector3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(vectorArray0, 331, 331);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("C", "C", sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("C", "C", sQLRecoverableException0);
      hashMap0.remove((Object) sQLRecoverableException0, (Object) sQLTransientException0);
      sQLRecoverableException0.addSuppressed(sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("C", sQLRecoverableException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = null;
      IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) null);
      IteratorUtils.emptyListIterator();
      int int0 = 134;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      Predicate<Object> predicate0 = null;
      int int1 = 1430;
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      Closure<Object> closure1 = ForClosure.forClosure(1430, (Closure<? super Object>) closure0);
      // Undeclared exception!
      try { 
        IfClosure.ifClosure((Predicate<? super Object>) null, (Closure<? super Object>) closure1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string1 = "WDk_>\\*";
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("WDk_>*", "WDk_>*");
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "WDk_>*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "R7cn\">X", 3379);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      int[] intArray0 = new int[8];
      intArray0[0] = 44;
      intArray0[1] = 1;
      intArray0[2] = 3114;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = (-1945);
      intArray0[6] = 100;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("<A4aB$y$(~avFV|Sn", "<A4aB$y$(~avFV|Sn", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 4192;
      intArray1[2] = (-1945);
      intArray1[3] = 44;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("Transformer must not be null", "&iE", intArray1, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("]94{'-d;C'WJd](j", intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("<A4aB$y$(~avFV|Sn", "&iE", 1, intArray0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("|(?D|o;HFVK3", "qrZK", (-1945), intArray1);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(intArray0, batchUpdateException5);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, (-1432));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ServiceLoader<SQLRecoverableException>[] serviceLoaderArray0 = (ServiceLoader<SQLRecoverableException>[]) Array.newInstance(ServiceLoader.class, 3);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<SQLRecoverableException> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      serviceLoaderArray0[0] = serviceLoader0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      ServiceLoader<SQLRecoverableException> serviceLoader1 = ServiceLoader.load(class1);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      classLoader1.clearAssertionStatus();
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      ServiceLoader.load(class3, classLoader0);
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      ServiceLoader<SQLClientInfoException> serviceLoader2 = ServiceLoader.load(class4);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader1.forEach(consumer0);
      ServiceLoader<SQLRecoverableException> serviceLoader3 = ServiceLoader.loadInstalled(class2);
      Class<SQLNonTransientConnectionException> class5 = SQLNonTransientConnectionException.class;
      ServiceLoader.load(class5, classLoader0);
      serviceLoader0.iterator();
      serviceLoaderArray0[2] = serviceLoader3;
      int int0 = 0;
      IteratorUtils.arrayIterator(serviceLoaderArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) serviceLoader2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (Throwable) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, (String) null, 0, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, "", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[", sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLSyntaxErrorException0);
      sQLNonTransientConnectionException0.spliterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(")", (int[]) null, sQLTimeoutException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      sQLSyntaxErrorException0.fillInStackTrace();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")", "<hF5wX", (-1), hashtable0, sQLTimeoutException0);
      batchUpdateException0.setNextException(sQLClientInfoException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "[", (Equator<Object>) defaultEquator0);
      PredicateTransformer<BatchUpdateException> predicateTransformer0 = new PredicateTransformer<BatchUpdateException>(predicate0);
      Predicate<BatchUpdateException> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super BatchUpdateException, Boolean>) predicateTransformer0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) predicate1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonIterator(locale_Category0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "@lX$7t";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "wBv0wZr%p~h)8/X", 84);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@lX$7t", "Closure must not be null", sQLTimeoutException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      String string1 = ", ";
      String string2 = "3sF):mi;";
      sQLTimeoutException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(", ", "3sF):mi;", 84);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Object) sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "Closure must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (Throwable) null);
      MapIterator<DataTruncation, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, DataTruncation> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends DataTruncation>) mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) mapIterator1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.FilterIterator", "u:", 10, longArray0, sQLInvalidAuthorizationSpecException0);
      LinkedHashSet<Transformer<Object, BatchUpdateException>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, BatchUpdateException>>();
      IteratorUtils.loopingIterator((Collection<? extends Transformer<Object, BatchUpdateException>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLException sQLException0 = new SQLException("UE{FB");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UE{FB", sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("_l?'8 x", "Ox&=d}GqM-0", 0, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("UE{FB", "_l?'8 x", (-468), sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      sQLTransientConnectionException0.getLocalizedMessage();
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(")", "2@>BT\"='cE(wh[!'H", 0);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      sQLSyntaxErrorException1.initCause(sQLSyntaxErrorException4);
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("", sQLSyntaxErrorException4);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      int int0 = (-1016);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException5, (-1016));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MapIterator<SQLRecoverableException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLRecoverableException, String> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ? extends String>) mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      int int0 = 1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLTransactionRollbackException0);
      ArrayListIterator<SQLTransientException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientException>(sQLSyntaxErrorException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MapIterator<String, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<String>) mapIterator0, 0L);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "org.apache.commons.collections4.iterators.ReverseListIterator", (-96), sQLTransactionRollbackException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientException0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) equalPredicate0);
      Factory<SQLSyntaxErrorException> factory0 = ConstantFactory.constantFactory(sQLSyntaxErrorException0);
      FactoryTransformer<Object, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<Object, SQLSyntaxErrorException>(factory0);
      Transformer<SQLException, SQLSyntaxErrorException> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends SQLSyntaxErrorException>) factoryTransformer0, (Transformer<? super SQLException, ? extends SQLSyntaxErrorException>) factoryTransformer0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      LinkedHashSet<Transformer<Object, BatchUpdateException>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, BatchUpdateException>>();
      ResettableIterator<Transformer<Object, BatchUpdateException>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Transformer<Object, BatchUpdateException>>) linkedHashSet0);
      Iterator<Transformer<Object, BatchUpdateException>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Transformer<Object, BatchUpdateException>>) resettableIterator0, (Predicate<? super Transformer<Object, BatchUpdateException>>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Integer integer0 = new Integer(1);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<String, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) treeSet0);
      Iterator<String> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.size(iterator1);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ceawD'", (String) null);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "]", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d`E", (String) null, 10, sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "]", 0, sQLFeatureNotSupportedException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, sQLWarning0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException((String) null, "d`E", 0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException1);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("Array class must not be null", sQLNonTransientException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MapIterator<Properties, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) mapIterator0, 0L);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) skippingIterator0);
      OrderedMapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }
}
