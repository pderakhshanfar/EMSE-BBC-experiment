/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:48:21 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      ListIterator<LinkedHashSet<SQLTimeoutException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.NOPClosure");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLTimeoutException>>) listIterator0, (Transformer<? super LinkedHashSet<SQLTimeoutException>, String>) transformer0, "FilterListIterator.remove() is not supported.", "FilterListIterator.remove() is not supported.", "org.apache.commons.collections4.IteratorUtils");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.NOPClosure' on 'class java.util.LinkedHashSet' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      IteratorUtils.get((Iterator<String>) singletonListIterator0, 0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("#a )n1`6YC![6LrQ", (String) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, sQLTransientException0);
      Factory<SQLClientInfoException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IteratorUtils.emptyIterator();
      Stack<SQLException>[] stackArray0 = (Stack<SQLException>[]) Array.newInstance(Stack.class, 9);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      stackArray0[0] = stack0;
      Stack<SQLException> stack1 = new Stack<SQLException>();
      stackArray0[1] = stack1;
      Stack<SQLException> stack2 = new Stack<SQLException>();
      stackArray0[2] = stack2;
      Stack<SQLException> stack3 = new Stack<SQLException>();
      stackArray0[3] = stack3;
      Stack<SQLException> stack4 = new Stack<SQLException>();
      stackArray0[4] = stack4;
      Stack<SQLException> stack5 = new Stack<SQLException>();
      stackArray0[5] = stack5;
      Stack<SQLException> stack6 = new Stack<SQLException>();
      stackArray0[6] = stack6;
      Stack<SQLException> stack7 = new Stack<SQLException>();
      stackArray0[7] = stack7;
      Stack<SQLException> stack8 = new Stack<SQLException>();
      stackArray0[8] = stack8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stackArray0, 2, (-1099));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("'g4mE`B~ K3'BV/~ ");
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate.instanceOfPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<String> class3 = String.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("oKz(F3W/HA4o>.=n-+");
      IteratorUtils.get((Iterator<String>) singletonListIterator0, 0);
      IteratorUtils.toListIterator((Iterator<?>) singletonListIterator0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("A6iMCI;PNDgW.1y*", 1280.581619028534);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=1280.581619028534
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[15];
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate((Class<?>) null);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.InstanceofPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, DataTruncation> hashtable0 = new Hashtable<SQLSyntaxErrorException, DataTruncation>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<String> class1 = String.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<InstanceofPredicate>) objectArrayListIterator0, (Closure<? super InstanceofPredicate>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<?> iterator0 = IteratorUtils.getIterator(transformer0);
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Transformer<Object, Boolean> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<ServiceLoader<Transformer>>) iterator0, (Predicate<? super ServiceLoader<Transformer>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("Entry does not exist: ");
      IteratorUtils.get((Iterator<String>) singletonListIterator0, 0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 1513);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      sQLWarningArray0[1] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("IPJh:M=FIkgwBF:C(");
      sQLWarningArray0[2] = sQLWarning1;
      dataTruncation0.getNextWarning();
      sQLWarningArray0[3] = null;
      dataTruncation0.getNextWarning();
      sQLWarningArray0[4] = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 0, (-418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLIntegrityConstraintViolationException>(orderedMapIterator1);
      MapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator0, 1023);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) stack0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedIterator();
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[5] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("KzJ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "KzJ";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 1, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableListIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("VWER<tOZ[#ZEG4G");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.get((Iterator<String>) resettableListIterator0, 3001);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("`{18'De1j2");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.get((Iterator<String>) resettableListIterator0, 61);
      // Undeclared exception!
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("f?,z[~3r");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 5;
      intArray0[7] = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.PrototypeFactory", "Rq~0i", 5, intArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.functors.PrototypeFactory", "org.apache.commons.collections4.functors.PrototypeFactory", batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.PrototypeFactory", sQLTransientException0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Transformer<SQLTransactionRollbackException, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.PrototypeFactory", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (long) 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.PrototypeFactory' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Iterator<Iterator<SQLTransactionRollbackException>>[] iteratorArray0 = (Iterator<Iterator<SQLTransactionRollbackException>>[]) Array.newInstance(Iterator.class, 8);
      Iterator<SQLTransactionRollbackException>[] iteratorArray1 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 5);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      iteratorArray1[0] = iterator0;
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ?>) orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, Object> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, Object>) orderedMapIterator1);
      iteratorArray1[1] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0);
      iteratorArray1[2] = (Iterator<SQLTransactionRollbackException>) zippingIterator0;
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      iteratorArray1[3] = iterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      IteratorUtils.getIterator(sQLTransientException0);
      IteratorUtils.emptyOrderedIterator();
      ConstantTransformer.nullTransformer();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("}~xaQv%cs{`=vMf", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SingletonListIterator<PriorityQueue<DataTruncation>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<DataTruncation>>(priorityQueue0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLTransientException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, LinkedHashSet<Iterator>>) orderedMapIterator0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      iteratorArray0[0] = (Iterator<SQLDataException>) listIterator0;
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("");
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLNonTransientException>) zippingIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableIterator0);
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      SingletonIterator<ArrayDeque<Closure<Object>>> singletonIterator0 = new SingletonIterator<ArrayDeque<Closure<Object>>>(arrayDeque0);
      DefaultEquator<String> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate("~|h1", (Equator<String>) defaultEquator0);
      IteratorUtils.matchesAny((Iterator<String>) null, (Predicate<? super String>) predicate0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("W`\"_^dm-t");
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Properties properties0 = new Properties();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Object) sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("No value has been returned yet");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      linkedList0.listIterator();
      linkedList0.listIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Class<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("[");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) hashSet0);
      ConstantTransformer<SQLClientInfoException, String> constantTransformer0 = new ConstantTransformer<SQLClientInfoException, String>("GREATER_OR_EQUAL");
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, String>) constantTransformer0, "[", "", "");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ServiceLoader<Locale.FilteringMode>>) null, (Transformer<? super ServiceLoader<Locale.FilteringMode>, String>) transformer0, "", "4!a)a5j,iIz7j|", "suffix may not be null");
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      hashSet0.add(sQLClientInfoException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) hashSet0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "u$ay?O_s", "4!a)a5j,iIz7j|suffix may not be null", "4!a)a5j,iIz7j|");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ServiceLoader<Locale.FilteringMode>>) null, (Transformer<? super ServiceLoader<Locale.FilteringMode>, String>) transformer0, "", "4!Pa)a5j,iIz\"j|", "suffix may not be null");
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) hashSet0);
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "u$ay?O_s", "4!Pa)a5j,iIz\"j|suffix may not be null", "4!Pa)a5j,iIz\"j|");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      TruePredicate.truePredicate();
      IteratorUtils.emptyOrderedIterator();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Transformer<Locale.FilteringMode, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) objectArrayListIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      TruePredicate.truePredicate();
      MapIterator<ServiceLoader<Locale.FilteringMode>, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<Locale.FilteringMode>>) mapIterator0, (Transformer<? super ServiceLoader<Locale.FilteringMode>, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<String> stack0 = new Stack<String>();
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      SingletonIterator<ArrayDeque<Closure<Object>>> singletonIterator0 = new SingletonIterator<ArrayDeque<Closure<Object>>>(arrayDeque0);
      BoundedIterator<ArrayDeque<Closure<Object>>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends ArrayDeque<Closure<Object>>>) singletonIterator0, 0L, 0L);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) predicateArray0[0], comparator0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate1;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[", hashtable0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("[", "Av1U8", 29, sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLWarning0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate2 = ComparatorPredicate.comparatorPredicate((Object) sQLNonTransientConnectionException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = UniquePredicate.uniquePredicate();
      predicateArray0[4] = predicate3;
      Stack<InstanceofPredicate> stack1 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate4 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack1);
      predicateArray0[5] = predicate4;
      Predicate<Object> predicate5 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<ArrayDeque<Closure<Object>>>) boundedIterator0, (Predicate<? super ArrayDeque<Closure<Object>>>) predicate5);
      IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<SQLNonTransientException> predicate6 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLNonTransientException>) predicate3);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate6);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("JR<a6@l>V");
      IteratorUtils.getIterator(sQLDataException0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedList0.removeFirstOccurrence(sQLDataException0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) linkedList0);
      IteratorUtils.contains((Iterator<SQLClientInfoException>) resettableListIterator0, (Object) linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.contains((Iterator<SQLException>) null, (Object) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<Locale.FilteringMode>>) null, (Transformer<? super ServiceLoader<Locale.FilteringMode>, String>) transformer0, "Jh>wN)&uE=.d0)k%1", "' threw an exception", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) stack0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("y2|9`4B");
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Object) iIOMetadataNode0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[5] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) iterator0, 1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<ClientInfoStatus>) singletonListIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Boolean> class1 = Boolean.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      Class<Object> class2 = Object.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      Class<DataTruncation> class3 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class3);
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class4);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate3);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      stack0.addElement("M>[47l1<sw=7");
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, 2337);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      SingletonIterator<ArrayDeque<Closure<Object>>> singletonIterator0 = new SingletonIterator<ArrayDeque<Closure<Object>>>(arrayDeque0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(arrayDeque0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<ArrayDeque<Closure<Object>>>) singletonIterator0, (Predicate<? super ArrayDeque<Closure<Object>>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*t/(^1");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0);
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[0] = arrayDeque0;
      ResettableIterator<ArrayDeque<Closure<Object>>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      IteratorUtils.find((Iterator<ArrayDeque<Closure<Object>>>) resettableIterator0, (Predicate<? super ArrayDeque<Closure<Object>>>) predicate0);
      Object object0 = new Object();
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(object0, 3, 2101);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableIterator0);
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      SingletonIterator<ArrayDeque<Closure<Object>>> singletonIterator0 = new SingletonIterator<ArrayDeque<Closure<Object>>>(arrayDeque0);
      IteratorUtils.find((Iterator<ArrayDeque<Closure<Object>>>) singletonIterator0, (Predicate<? super ArrayDeque<Closure<Object>>>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      Consumer<SQLNonTransientConnectionException> consumer0 = (Consumer<SQLNonTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<Locale.FilteringMode>>) null, (Transformer<? super ServiceLoader<Locale.FilteringMode>, String>) transformer0, "", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.getIterator((Object) null);
      MapIterator<SQLRecoverableException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) mapIterator0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) linkedList0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) orderedIterator0, (Transformer<? super Properties, String>) transformer0, "|6", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      ConstantFactory<SQLIntegrityConstraintViolationException> constantFactory0 = new ConstantFactory<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLIntegrityConstraintViolationException>) constantFactory0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLIntegrityConstraintViolationException0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      IteratorUtils.find((Iterator<ArrayDeque<Closure<Object>>>) null, (Predicate<? super ArrayDeque<Closure<Object>>>) transformedPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("' on '", "Transformer must not be null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      ConstantFactory<SQLIntegrityConstraintViolationException> constantFactory0 = new ConstantFactory<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLIntegrityConstraintViolationException>) constantFactory0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) uniquePredicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 1);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) uniquePredicate0;
      objectArray0[2] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray0[3] = (Object) constantFactory0;
      objectArray0[4] = (Object) uniquePredicate0;
      objectArray0[5] = (Object) transformer0;
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) resettableIterator0);
      ListIterator<Object> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.find((Iterator<Object>) listIterator1, (Predicate<? super Object>) predicate0);
      objectArray0[6] = null;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("Transformer must not be null", (Class<?>[]) classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, closure0);
      ForClosure<Object> forClosure1 = new ForClosure<Object>(0, forClosure0);
      UniquePredicate.uniquePredicate();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      closureArray0[0] = (Closure<Object>) forClosure0;
      closureArray0[1] = (Closure<Object>) forClosure0;
      Closure<Object> closure1 = NOPClosure.nopClosure();
      closureArray0[2] = closure1;
      ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      ForClosure<Object> forClosure2 = new ForClosure<Object>(91, (Closure<? super Object>) null);
      ChainedClosure.chainedClosure((Closure<? super SQLTransientConnectionException>[]) closureArray0);
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) null, (Closure<? super SQLTransientConnectionException>) forClosure2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", "!=N-\"HP@x", 100);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, false);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      closureArray0[0] = closure1;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      Closure<Object> closure2 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1052), closure1);
      UniquePredicate.uniquePredicate();
      Closure<Object>[] closureArray1 = (Closure<Object>[]) Array.newInstance(Closure.class, 8);
      closureArray1[0] = (Closure<Object>) whileClosure0;
      closureArray1[1] = closure0;
      closureArray1[2] = closure1;
      closureArray1[3] = (Closure<Object>) whileClosure0;
      closureArray1[4] = closure0;
      Closure<Object> closure3 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) forClosure0, false);
      closureArray1[5] = closure3;
      Closure<Object> closure4 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure2);
      closureArray1[6] = closure4;
      closureArray1[7] = closure1;
      ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray1);
      ForClosure<Object> forClosure1 = new ForClosure<Object>(4329, closure3);
      ChainedClosure.chainedClosure((Closure<? super SQLTransientConnectionException>[]) closureArray1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPrefix();
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ServiceLoader<Locale.FilteringMode>>) null, (Transformer<? super ServiceLoader<Locale.FilteringMode>, String>) transformer0, "suffix may not be null", "Q<|", "Q(TmB`A#nZV,B");
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLNonTransientConnectionException, ArrayDeque<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DataTruncation dataTruncation0 = new DataTruncation(501, true, true, 501, 501, sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(dataTruncation0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) singletonListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Q6\"s&8t8S!|_m.M/Z]");
      iIOMetadataNode0.getPrefix();
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<Locale.FilteringMode>>) null, (Transformer<? super ServiceLoader<Locale.FilteringMode>, String>) transformer0, (String) null, "", "suffix may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 11);
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLExceptionArray0[2] = (SQLException) sQLSyntaxErrorException0;
      SQLDataException sQLDataException0 = new SQLDataException("", sQLExceptionArray0[2]);
      sQLExceptionArray0[3] = (SQLException) sQLDataException0;
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLExceptionArray0[1]);
      sQLDataException0.printStackTrace();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLFeatureNotSupportedException0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate0);
      IteratorUtils.matchesAny((Iterator<SQLException>) resettableListIterator0, (Predicate<? super SQLException>) nullIsFalsePredicate0);
      OrderedIterator<ArrayDeque<SQLSyntaxErrorException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLWarning sQLWarning0 = new SQLWarning("", sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      IteratorUtils.contains((Iterator<ArrayDeque<SQLSyntaxErrorException>>) orderedIterator0, (Object) sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 11, (-1436));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = null;
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) linkedList0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = iterator0;
      iteratorArray0[3] = iterator0;
      iteratorArray0[5] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SingletonListIterator<PriorityQueue<DataTruncation>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<DataTruncation>>(priorityQueue0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("}~xaQv%cs{`=vMf", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 2337);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2336
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V1[ZC>");
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure1, false);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, whileClosure0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      closureArray0[0] = (Closure<Object>) whileClosure0;
      closureArray0[1] = closure1;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(921, closure1);
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      Closure<Object> closure2 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(predicate1, closure2, closure0);
      ForClosure<Object> forClosure1 = new ForClosure<Object>(921, chainedClosure0);
      ChainedClosure.chainedClosure((Closure<? super SQLTransientConnectionException>[]) closureArray0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) closure2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null, (Collection<? super SQLNonTransientConnectionException>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SingletonListIterator<PriorityQueue<DataTruncation>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<DataTruncation>>(priorityQueue0);
      ExceptionTransformer.exceptionTransformer();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@1In8dlW'<AR", "' L8}RZP6:c", sQLTransientException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("@1In8dlW'<AR");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      StringTokenizer stringTokenizer0 = new StringTokenizer("@1In8dlW'<AR", "}", false);
      IteratorUtils.getIterator(stringTokenizer0);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransientConnectionException>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) abstractOrderedMapIteratorDecorator0, 21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 21
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SingletonListIterator<PriorityQueue<DataTruncation>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<DataTruncation>>(priorityQueue0);
      ExceptionTransformer.exceptionTransformer();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("' L8}RZP6:c", "' L8}RZP6:c", sQLTransientException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("}");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator(locale_FilteringMode0);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) orderedIterator0, 2910);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2910
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 15;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 15, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<String> predicate0 = EqualPredicate.equalPredicate("$[vXt3!;O{}J;T&+M");
      Iterator<String> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      IteratorUtils.get(iterator0, 2337);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) null);
      UniquePredicate.uniquePredicate();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (-2169), hashtable0, sQLTransientConnectionException0);
      sQLClientInfoException0.getFailedProperties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "' L8}RZP6:c", sQLTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("_[)eGRXd*&w|5Z/o");
      IteratorUtils.getIterator(iIOMetadataNode0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) orderedMapIterator0, 2910);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2910
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node m0st not be null", "", 23, (Throwable) null);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 23, 0);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Object) dataTruncation0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("}$<,");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, (Predicate<? super Object>) null);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      closureArray0[0] = (Closure<Object>) transformerClosure0;
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[1] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[2] = (Closure<Object>) chainedClosure0;
      ChainedClosure<Object> chainedClosure1 = new ChainedClosure<Object>(closureArray0);
      closureArray0[3] = (Closure<Object>) chainedClosure1;
      Closure<Object> closure1 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(transformedPredicate0, closure1);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(12, ifClosure0);
      ChainedClosure.chainedClosure((Closure<? super SQLTransientConnectionException>[]) closureArray0);
      OrderedMapIterator<SQLTransientConnectionException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<Object> closure2 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Closure<? super SQLTransientConnectionException>) closure2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      linkedList0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) null, (-424L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      Consumer<SQLNonTransientConnectionException> consumer0 = (Consumer<SQLNonTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement((String) null);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.get((Iterator<String>) resettableListIterator0, 2337);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      linkedList0.toArray();
      linkedList0.listIterator();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("VWER<tOZ[#ZEG4G");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      int int0 = 3001;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.isEmpty(resettableListIterator0);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      linkedList0.listIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, 3788);
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(list0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) null);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure1, false);
      closureArray0[0] = (Closure<Object>) whileClosure0;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, whileClosure0);
      closureArray0[1] = (Closure<Object>) ifClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[2] = (Closure<Object>) chainedClosure0;
      Closure<Object> closure2 = ExceptionClosure.exceptionClosure();
      closureArray0[3] = closure2;
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1347), ifClosure0);
      closureArray0[4] = (Closure<Object>) forClosure0;
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(predicate0, ifClosure0, closureArray0[1]);
      closureArray0[5] = (Closure<Object>) ifClosure1;
      ForClosure<Object> forClosure1 = new ForClosure<Object>(12, closureArray0[0]);
      closureArray0[6] = (Closure<Object>) forClosure1;
      Closure<SQLTransientConnectionException> closure3 = ChainedClosure.chainedClosure((Closure<? super SQLTransientConnectionException>[]) closureArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) closure3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      stack0.addElement("");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0, 1391);
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 1391);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Transformer<Object, SQLInvalidAuthorizationSpecException>[] transformerArray0 = (Transformer<Object, SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Transformer.class, 0);
      IteratorUtils.arrayIterator(transformerArray0, 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Transformer must not be null", "' on '");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLTransientException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      ConstantFactory<SQLIntegrityConstraintViolationException> constantFactory0 = new ConstantFactory<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedIterator0, 1391);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      Consumer<SQLNonTransientConnectionException> consumer0 = (Consumer<SQLNonTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("H8$c/#a8#(7iMeV");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.get((Iterator<String>) resettableListIterator0, 2337);
      Integer integer0 = new Integer(2337);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, (-526));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement(")");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.get((Iterator<String>) resettableListIterator0, 1);
      Integer integer0 = new Integer(10);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("A4%x{)p]SF|[I", ")");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      stack0.addElement("");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) zippingIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      stack0.addElement("ku-\"m0H\tR|!\\F?");
      MapIterator<String, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) mapIterator0);
      IteratorUtils.loopingListIterator(list0);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
      OrderedMapIterator<LinkedList<Locale.LanguageRange>, TreeSet<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<LinkedList<Locale.LanguageRange>>) orderedMapIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ma8gTZUZT[:WbD-", "ma8gTZUZT[:WbD-", sQLClientInfoException0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      IteratorUtils.singletonListIterator((ArrayDeque<ArrayList>) arrayDeque0);
      ResettableListIterator<LinkedList<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Object object0 = new Object();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(object0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) identityPredicate0);
      IteratorUtils.find((Iterator<LinkedList<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLInvalidAuthorizationSpecException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZxE,,]A4Bw.");
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      DataTruncation dataTruncation0 = new DataTruncation((-1265), false, false, 2336, 2336);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      MapIterator<EnumSet<Locale.FilteringMode>, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) mapIterator0);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.emptyListIterator();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZxE,,]A4Bw.";
      stringArray0[1] = "ZxE,,]A4Bw.";
      stringArray0[2] = "ZxE,,]A4Bw.";
      stringArray0[3] = "ZxE,,]A4Bw.";
      stringArray0[4] = "ZxE,,]A4Bw.";
      IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "ZxE,,]A4Bw.", 2801, 2284);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      stack0.addElement("");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      linkedList0.add(sQLFeatureNotSupportedException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "Jj|:6[YD", hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Jj|:6[YD", sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Jj|:6[YD", sQLNonTransientConnectionException0);
      arrayDeque0.push(sQLInvalidAuthorizationSpecException0);
      ResettableListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(arrayDeque0, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLInvalidAuthorizationSpecException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyListIterator();
      MapIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) mapIterator0, (Predicate<? super ArrayDeque<SQLInvalidAuthorizationSpecException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!b@xU~)q", "Wvq2H.nE=MJ$)x2KB1");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Wvq2H.nE=MJ$)x2KB1", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "", 8, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("!b@xU~)q", "L3uP|vGx$", sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      // Undeclared exception!
      try { 
        ComparatorPredicate.comparatorPredicate((Object) sQLSyntaxErrorException1, (Comparator<Object>) null, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator must not be null.
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[1] = arrayDeque1;
      SingletonListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>(arrayDeque1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLDataException>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLDataException>) orderedMapIterator1);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedMapIterator1, (Iterator<? extends Integer>) loopingListIterator0);
      HashMap<InstanceofPredicate, SQLException> hashMap0 = new HashMap<InstanceofPredicate, SQLException>();
      EntrySetMapIterator<InstanceofPredicate, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<InstanceofPredicate, SQLException>(hashMap0);
      List<InstanceofPredicate> list1 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) entrySetMapIterator0);
      Predicate<Integer> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Integer>>) list1);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) orderedMapIterator0, (Predicate<? super Integer>) predicate0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator1 = new LoopingListIterator<SQLTransientConnectionException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) loopingListIterator1, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SingletonListIterator<PriorityQueue<DataTruncation>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<DataTruncation>>(priorityQueue0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%h0/");
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<DataTruncation>>) singletonListIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int int0 = 10;
      Integer integer0 = new Integer(10);
      linkedHashSet0.add(integer0);
      String string0 = "";
      DataTruncation[] dataTruncationArray0 = null;
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 32, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      stack0.addElement("");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, ")", mockThrowable0);
      linkedList0.offerLast(sQLFeatureNotSupportedException0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      Consumer<SQLNonTransientConnectionException> consumer0 = (Consumer<SQLNonTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stack<String> stack0 = new Stack<String>();
      loopingIterator0.reset();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-2862), (-2862), sQLSyntaxErrorException0);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) loopingIterator0, (Object) dataTruncation0);
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLTransientException>) resettableListIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) objectArrayIterator0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) priorityQueue0);
      IteratorUtils.emptyOrderedIterator();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.remove(priorityQueue0);
      Integer integer0 = new Integer(512);
      linkedHashSet0.add(integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getPrefix();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Transformer must not be null", "' on '");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("' on '");
      ConstantFactory<SQLIntegrityConstraintViolationException> constantFactory0 = new ConstantFactory<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLIntegrityConstraintViolationException>) constantFactory0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) uniquePredicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      stack0.addElement("");
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPrefix();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      SingletonListIterator<PriorityQueue<DataTruncation>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<DataTruncation>>((PriorityQueue<DataTruncation>) null);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<DataTruncation>>) singletonListIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      Consumer<SQLNonTransientConnectionException> consumer0 = (Consumer<SQLNonTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("H8$c/#a8#(7iMeV");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPrefix();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      SingletonListIterator<PriorityQueue<DataTruncation>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<DataTruncation>>((PriorityQueue<DataTruncation>) null);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H8$c/#a8#(7iMeV");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<DataTruncation>>) singletonListIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ma8gTZUZT[:WbD-", "ma8gTZUZT[:WbD-", sQLClientInfoException1);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Q6\"s&8t8S!|_m.M/Z]");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) null);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[2] = (Closure<Object>) chainedClosure0;
      Closure<Object> closure1 = ExceptionClosure.exceptionClosure();
      closureArray0[3] = closure1;
      ForClosure<Object> forClosure0 = new ForClosure<Object>(12, closureArray0[0]);
      OrderedMapIterator<SQLTimeoutException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) mapIterator0, (long) (-1347), 1011L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(vector0);
      Consumer<SQLNonTransientException> consumer0 = (Consumer<SQLNonTransientException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      loopingIterator0.forEachRemaining(consumer0);
      loopingIterator0.reset();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0, sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Closure<SQLDataException>[]) null, 1073741824, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("44:kJ$rc]f1t)", "44:kJ$rc]f1t)", (-1177));
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-1827), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IteratorUtils.emptyOrderedIterator();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int int0 = 512;
      Integer integer0 = new Integer(512);
      linkedHashSet0.add(integer0);
      String string0 = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 512, 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) null);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (Throwable) null);
      String[] stringArray0 = new String[0];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableListIterator0, 2337);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2337
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Transformer must not be null", "' on '");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLTransientException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      ConstantFactory<SQLIntegrityConstraintViolationException> constantFactory0 = new ConstantFactory<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("' on '");
      iIOMetadataNode0.getAttributeNodeNS(":lt.5G0~cpGj{;", "Rh");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      SingletonListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>(arrayDeque0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLDataException>) orderedMapIterator0);
      MapIterator<Integer, SQLDataException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLDataException>) orderedMapIterator1);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator1);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) loopingListIterator0, (Iterator<? extends Integer>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("aSD<!");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[1] = arrayDeque1;
      ResettableListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLDataException>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLDataException>) orderedMapIterator1);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedMapIterator1, (Iterator<? extends Integer>) loopingListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("aSD<!");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "j", (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLIntegrityConstraintViolationException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.put("", clientInfoStatus0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("j", map0, sQLClientInfoException0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ma8gTZUZT[:WbD-", "ma8gTZUZT[:WbD-", sQLClientInfoException1);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Q6\"s&8t8S!|_m.M/Z]");
      iIOMetadataNode0.getPrefix();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      Consumer<SQLNonTransientConnectionException> consumer0 = (Consumer<SQLNonTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      loopingIterator0.forEachRemaining(consumer0);
      loopingIterator0.reset();
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("List must not be null");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) zippingIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) zippingIterator0, 469);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 469
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iteratorArray0[6], (-1308), (-2181));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, (-520), (-520));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[1] = arrayDeque1;
      ResettableListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("l#g");
      iIOMetadataNode0.getPrefix();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      arrayDeque1.add(sQLInvalidAuthorizationSpecException0);
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator0, 1232L);
      IteratorUtils.toArray((Iterator<?>) boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1178, 2764);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLIntegrityConstraintViolationException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.put("", clientInfoStatus0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0, sQLClientInfoException0);
      vector0.add(sQLClientInfoException1);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      stack0.addElement("");
      IteratorUtils.isEmpty(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, (-1), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      Iterator<String> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      stack0.addElement("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("=p=PBu#9%Gc?");
      iIOMetadataNode0.getPrefix();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[1] = arrayDeque1;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PBh7v");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLDataException>) orderedMapIterator0);
      MapIterator<Integer, SQLDataException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLDataException>) orderedMapIterator1);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[1] = arrayDeque1;
      ResettableListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[1] = arrayDeque1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "NodeList must not be null", 2336, hashtable0, sQLNonTransientConnectionException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator0);
      Factory<SQLTransientConnectionException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLTransientConnectionException>(factory0);
      IfTransformer<Object, SQLTransientConnectionException> ifTransformer0 = new IfTransformer<Object, SQLTransientConnectionException>(predicate0, factoryTransformer0, factoryTransformer0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) linkedList0);
      linkedList0.parallelStream();
      EmptyIterator.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<ServiceLoader<Locale.FilteringMode>>) null, (Transformer<? super ServiceLoader<Locale.FilteringMode>, String>) transformer0, "", "", "suffix may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      Consumer<SQLNonTransientConnectionException> consumer0 = (Consumer<SQLNonTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("H8$c/#a8#(7iMeV");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator1);
      ZippingIterator<DataTruncation> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) zippingIterator1, 2910);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2910
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Q<|", "Q<|", 45, (Throwable) null);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Properties properties0 = new Properties();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Object) properties0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0);
      ResettableListIterator<String> resettableListIterator1 = new ReverseListIterator<String>(list0);
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("");
      Iterator<Locale.LanguageRange>[] iteratorArray0 = (Iterator<Locale.LanguageRange>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.LanguageRange> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.LanguageRange>[]) iteratorArray0);
      List<Locale.LanguageRange> list1 = IteratorUtils.toList((Iterator<? extends Locale.LanguageRange>) zippingIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) stack0, locale_FilteringMode0);
      IteratorUtils.loopingListIterator(list2);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) zippingIterator1, 2910);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2910
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      String string0 = "";
      stack0.addElement("");
      int int0 = 2337;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableListIterator0, 2337);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) priorityQueue0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int int0 = 1;
      Integer integer0 = new Integer(512);
      linkedHashSet0.add(integer0);
      Integer integer1 = new Integer(1);
      linkedHashSet0.add(integer1);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Integer integer0 = new Integer((-851));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer0);
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      linkedHashSet0.add(integer0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("c[bh@\"?Zb}u");
      iIOMetadataNode0.getPrefix();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) linkedList0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLDataException>) orderedMapIterator0);
      MapIterator<Integer, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLDataException>) orderedMapIterator1);
      MapIterator<Integer, SQLDataException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLDataException>) mapIterator0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) mapIterator1);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) loopingListIterator0, (Iterator<? extends Integer>) loopingListIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = null;
      linkedList0.add((SQLSyntaxErrorException) null);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) linkedList0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("GgGID8+qOsDUkkh1D", "GgGID8+qOsDUkkh1D");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      singletonListIterator0.reset();
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<StringTokenizer>) singletonListIterator0;
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = iterator0;
      iteratorArray0[3] = iterator0;
      iteratorArray0[4] = (Iterator<StringTokenizer>) singletonListIterator0;
      iteratorArray0[5] = iterator0;
      Iterator<StringTokenizer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) iterator1, (Transformer<? super StringTokenizer, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList1 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(linkedList1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0, (-518L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 3, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      singletonListIterator0.next();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "V*So_V!+2dh$thX7", 95, sQLTransientException0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.constantTransformer(sQLInvalidAuthorizationSpecException0);
      singletonListIterator0.reset();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (long) 95);
      EmptyIterator.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientException0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "V*So_V!+2dh$thX7", 0, sQLTransientException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("", "V*So_V!+2dh$thX7");
      sQLDataExceptionArray0[2] = sQLDataException2;
      sQLDataExceptionArray0[3] = sQLDataException0;
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) orderedMapIterator1);
      EmptyOrderedIterator.emptyOrderedIterator();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      String string0 = "#6V";
      stack0.ensureCapacity(0);
      stack0.addElement("#6V");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = 18;
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SingletonListIterator<PriorityQueue<DataTruncation>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<DataTruncation>>(priorityQueue0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.filteredListIterator((ListIterator<? extends PriorityQueue<DataTruncation>>) singletonListIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      singletonListIterator0.next();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "V*So_V!+2dh$thX7", 95, sQLTransientException0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.constantTransformer(sQLInvalidAuthorizationSpecException0);
      singletonListIterator0.reset();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (long) 95);
      EmptyIterator.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientException0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "V*So_V!+2dh$thX7", 0, sQLTransientException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("", "V*So_V!+2dh$thX7");
      sQLDataExceptionArray0[2] = sQLDataException2;
      sQLDataExceptionArray0[3] = sQLDataException0;
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException1, true);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) orderedIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) iterator1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.constantTransformer(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "3t!08aQ~a3c41`";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 1);
      Transformer<Object, Boolean> transformer1 = ExceptionTransformer.exceptionTransformer();
      Predicate<String> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super String, Boolean>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<String>) objectArrayListIterator0, (Predicate<? super String>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[1] = arrayDeque1;
      ResettableListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3286)).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLInvalidAuthorizationSpecException>>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("InstantiateFactory: InstantiationException");
      Predicate<String> predicate0 = EqualPredicate.equalPredicate("5m~>4'_j2lu$9");
      IteratorUtils.matchesAll((Iterator<String>) singletonListIterator0, (Predicate<? super String>) predicate0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("`X");
      sQLDataExceptionArray0[1] = sQLDataException1;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = (-326);
      String string0 = "";
      String string1 = "org.apache.commons.collections4.map.AbstractLinkedMap";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "org.apache.commons.collections4.map.AbstractLinkedMap");
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) reverseListIterator0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("0V=pOE-", "Node must not be null", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      ResettableListIterator<SQLTransientException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLTransientException>) resettableListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("`X");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLDataException1);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      predicateArray0[3] = predicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 3);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      transformerArray0[2] = transformer0;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformer0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) switchTransformer0);
      IteratorUtils.toString((Iterator<SQLException>) singletonIterator0, (Transformer<? super SQLException, String>) transformer1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) reverseListIterator0);
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      String string0 = "0V=pOE-";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("0V=pOE-", "Node must not be null", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      int int0 = 0;
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException1);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      int int1 = 845;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 845, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<String, ArrayList<SQLRecoverableException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.toString((Iterator<String>) orderedMapIterator0);
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[1] = arrayDeque1;
      ResettableListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLInvalidAuthorizationSpecException>>) comparatorPredicate0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator1 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Object object0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 580);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLNonTransientException>) orderedMapIterator0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) loopingListIterator0, (Iterator<? extends Integer>) loopingListIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, (Iterator<? extends BatchUpdateException>) orderedIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) zippingIterator0, (Iterator<? extends BatchUpdateException>) zippingIterator0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, (-934L), (-934L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Locale.FilteringMode>[] linkedListArray0 = (LinkedList<Locale.FilteringMode>[]) Array.newInstance(LinkedList.class, 2);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      linkedListArray0[0] = linkedList0;
      LinkedList<Locale.FilteringMode> linkedList1 = new LinkedList<Locale.FilteringMode>();
      linkedListArray0[1] = linkedList1;
      ObjectArrayListIterator<LinkedList<Locale.FilteringMode>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedList<Locale.FilteringMode>>(linkedListArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[0] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-150);
      intArray0[1] = (-2310);
      intArray0[2] = 650;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "?0XNSk:3V^A=)WKk;V", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[", "", batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[", sQLSyntaxErrorException0);
      EqualPredicate.equalPredicate(sQLTimeoutException0, (Equator<SQLTimeoutException>) null);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<LinkedList<Locale.FilteringMode>>) objectArrayListIterator0, (Predicate<? super LinkedList<Locale.FilteringMode>>) predicate1);
      Hashtable<SQLClientInfoException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLClientInfoException, SQLInvalidAuthorizationSpecException>(0);
      EntrySetMapIterator<SQLClientInfoException, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLInvalidAuthorizationSpecException>(hashtable0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable1, sQLInvalidAuthorizationSpecException0);
      hashtable0.replace(sQLClientInfoException0, sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) entrySetMapIterator0, (long) 0, 916L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("prefix may not be null", "prefix may not be null", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) reverseListIterator0);
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[0];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) objectArrayListIterator0);
      Predicate<Properties> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Properties>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      linkedList0.listIterator();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Iterator>>) null, (Predicate<? super ArrayDeque<Iterator>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 4);
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      arrayDequeArray0[3] = arrayDeque0;
      ResettableListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("5F", "", 100);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTimeoutException0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLInvalidAuthorizationSpecException>>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("List must not be null", "List must not be null", 32);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLFeatureNotSupportedException0, comparator0, comparatorPredicate_Criterion0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(comparatorPredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[0], nullIsExceptionPredicate0);
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("List must not be null");
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      SQLDataException sQLDataException0 = new SQLDataException("List must not be null", "List must not be null", 0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLDataException0);
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[4] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsExceptionPredicate0);
      predicateArray0[5] = predicate0;
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Transformer<Object, SQLWarning> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<Object, SQLWarning> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicateArray0[3], (Transformer<? super Object, ? extends SQLWarning>) transformer0, (Transformer<? super Object, ? extends SQLWarning>) transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer1, predicateArray0[3]);
      predicateArray0[6] = (Predicate<Object>) transformedPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[7] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicateArray0[6]);
      predicateArray0[8] = predicate1;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Transformer<Object, InstanceofPredicate> transformer2 = InvokerTransformer.invokerTransformer("");
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator(predicate2, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer2);
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) comparatorPredicate_Criterion0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.AnyPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) null);
      Hashtable<SQLClientInfoException, Properties> hashtable0 = new Hashtable<SQLClientInfoException, Properties>();
      EntrySetMapIterator<SQLClientInfoException, Properties> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, Properties>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) entrySetMapIterator0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      IteratorUtils.singletonIterator((SQLNonTransientException) null);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.parallelStream();
      int int0 = (-482);
      Integer integer0 = new Integer((-482));
      stack0.add(integer0);
      IteratorUtils.singletonIterator(stack0);
      IteratorUtils.loopingListIterator((List<Integer>) stack0);
      OrderedIterator<LinkedList<SQLDataException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<LinkedList<SQLDataException>>) orderedIterator0);
      IteratorUtils.emptyIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) orderedIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.ensureCapacity(0);
      stack0.addElement("#6V");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) zippingIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.singletonIterator(linkedHashSet0);
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("qHW-Rq|LS", "qHW-Rq|LS", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 1300);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 728);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("iterator", "iterator");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "iterator");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("'}Wv`YB", "iterator", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      int int0 = (-212);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, "", (-212), sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("o}He/PL=Ci4T", "iterator", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(":Pq_bwUI");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) priorityQueue0);
      IteratorUtils.emptyOrderedIterator();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(5529);
      Integer integer1 = new Integer(512);
      linkedHashSet0.add(integer1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getPrefix();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      IteratorUtils.emptyOrderedMapIterator();
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 2336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Integer integer0 = new Integer(3963);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) reverseListIterator0);
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("0V=pOE-", "Node must not be null", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException((String) null, "Node must not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("y:EPQwqmAa4:o", (String) null, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      String string1 = "V*So_V!+2dh$thX7";
      int int0 = 95;
      singletonListIterator0.next();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "V*So_V!+2dh$thX7", 95, sQLTransientException0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.constantTransformer(sQLInvalidAuthorizationSpecException0);
      singletonListIterator0.reset();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (long) 95);
      Iterator<IIOMetadataNode> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) priorityQueue0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLTimeoutException>) orderedMapIterator0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0, 31, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = null;
      linkedList0.add((SQLSyntaxErrorException) null);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) linkedList0);
      Iterator<String> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Map.Entry.setValue is not supported", "Map.Entry.setValue is not supported", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("XG==%MA8;%R", "XG==%MA8;%R", 1, sQLTransactionRollbackException0);
      hashSet0.add(sQLTimeoutException0);
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 12
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("`X");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("c[bh@\"?Zb}u");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
      IteratorUtils.toArray(iterator0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.collections4.functors.FalsePredicate";
      stringArray0[1] = "c[bh@\"?Zb}u";
      stringArray0[2] = "org.apache.commons.collections4.functors.FalsePredicate";
      stringArray0[3] = "org.apache.commons.collections4.functors.FalsePredicate";
      stringArray0[4] = "clone";
      stringArray0[5] = "c[bh@\"?Zb}u";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      IteratorUtils.asIterable((Iterator<? extends String>) objectArrayListIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.FalsePredicate", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("clone", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "org.apache.commons.collections4.functors.FalsePredicate", 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      DataTruncation dataTruncation0 = new DataTruncation(1409, false, false, 1409, 1409, sQLNonTransientException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, 10, 0, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, false, 100, 0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, false, false, 355, 93, dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(355, true, true, (-188), (-2875));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(100, false, false, 205, (-2875), dataTruncation2);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, false, false, 512, (-1777), dataTruncation3);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(93, false, false, 0, 93, dataTruncation2);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(0, false, true, 4, 10);
      dataTruncationArray0[8] = dataTruncation8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-1052));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("MJzCI!1i<", "", 0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "");
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException1;
      ObjectArrayListIterator<SQLTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientException>(sQLTransientExceptionArray0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) objectArrayListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      int int0 = (-326);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) null, (-326));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -326
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("c[bh@\"?Zb}u");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      String string0 = "org.apache.commons.collections4.functors.FalsePredicate";
      Predicate<Object> predicate0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = null;
      predicateArray0[1] = null;
      predicateArray0[2] = null;
      predicateArray0[3] = null;
      predicateArray0[4] = null;
      predicateArray0[5] = null;
      predicateArray0[6] = null;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      transformerArray0[0] = transformer0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicateArray0[1]);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate1, transformer0, transformer0);
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends String>[]) transformerArray0, (Transformer<? super Object, ? extends String>) ifTransformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Vector<Integer> vector0 = new Vector<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(vector0);
      vector0.add((Integer) null);
      Integer integer0 = new Integer(3757);
      // Undeclared exception!
      try { 
        loopingListIterator0.previous();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("H(4", "", (-1445));
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("o3Ro=%B", "List must not be null", (-3356));
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, (-1445));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<EnumSet<Locale.FilteringMode>, TreeSet<SQLRecoverableException>> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<EnumSet<Locale.FilteringMode>, TreeSet<SQLRecoverableException>>((OrderedMapIterator<EnumSet<Locale.FilteringMode>, TreeSet<SQLRecoverableException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      ResettableListIterator<SQLTransientException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node m0st not be null", "", 23, (Throwable) null);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 23, 0);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Object) dataTruncation0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) resettableListIterator1, (-357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      Consumer<SQLNonTransientConnectionException> consumer0 = (Consumer<SQLNonTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      loopingIterator0.forEachRemaining(consumer0);
      loopingIterator0.reset();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) loopingIterator0, (Object) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "Z}kLO|Fnaz-B", (Throwable) null);
      arrayDeque0.add(sQLNonTransientConnectionException0);
      SQLException sQLException0 = new SQLException("", "");
      sQLException0.getSuppressed();
      sQLException0.getSuppressed();
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException0.initCause(sQLException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLException: 
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int[] intArray0 = new int[0];
      SQLWarning sQLWarning0 = new SQLWarning("", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", (-721));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "s beyond the end of the array. ", (-721), intArray0, sQLWarning0);
      IteratorUtils.contains((Iterator<Properties>) resettableListIterator0, (Object) batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) predicateArray0[0]);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[2] = predicate1;
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      predicateArray0[3] = predicate2;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) allPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[5] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate3 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[6] = predicate3;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[7] = (Predicate<Object>) allPredicate1;
      Transformer<Object, SQLFeatureNotSupportedException>[] transformerArray0 = (Transformer<Object, SQLFeatureNotSupportedException>[]) Array.newInstance(Transformer.class, 0);
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super SQLException>[]) predicateArray0, (Transformer<? super SQLException, ? extends SQLFeatureNotSupportedException>[]) transformerArray0, (Transformer<? super SQLException, ? extends SQLFeatureNotSupportedException>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }
}
