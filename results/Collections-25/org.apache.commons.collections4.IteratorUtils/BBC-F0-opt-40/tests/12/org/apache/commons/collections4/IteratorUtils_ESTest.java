/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 09:22:00 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.getIterator("(`de^6SczX\";3,");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("(`de^6SczX\";3,");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[46];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) objectArrayListIterator0, 2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("GP", "org.apache.commons.collections4.functors.StringValueTransformer", (Throwable) null);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 4);
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      predicateArray0[0] = (Predicate<SQLException>) nonePredicate0;
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(nonePredicate0, nonePredicate0);
      predicateArray0[1] = (Predicate<SQLException>) orPredicate0;
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      predicateArray0[2] = (Predicate<SQLException>) uniquePredicate0;
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) null);
      predicateArray0[3] = predicate0;
      Predicate<SQLFeatureNotSupportedException> predicate1 = AllPredicate.allPredicate((Predicate<? super SQLFeatureNotSupportedException>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, (-1662));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1662), true, true, (-1662), (-1662), sQLTransientException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1662), false, false, 93, 128);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(12, true, false, 151, 599, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1969, false, true, 1969, 151, dataTruncation0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1291), true, true, 27, 1969, sQLIntegrityConstraintViolationException0);
      dataTruncationArray0[4] = dataTruncation4;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 8);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class5;
      Class<SQLIntegrityConstraintViolationException> class6 = SQLIntegrityConstraintViolationException.class;
      classArray0[6] = class6;
      Class<SQLIntegrityConstraintViolationException> class7 = SQLIntegrityConstraintViolationException.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>((String) null, classArray0, dataTruncationArray0);
      Predicate<SQLException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<DataTruncation>) objectArrayListIterator0, (Predicate<? super DataTruncation>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.getIterator("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "l%G^#");
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      ListIterator<Vector<SQLRecoverableException>> listIterator0 = IteratorUtils.singletonListIterator(vector0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Vector<SQLRecoverableException>>) listIterator0, (Object) vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Transformer must not be null", "Transformer must not be null", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Transformer must not be null", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("Transformer must not be null", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      String string0 = "?tcpXVbp9h\\'&n)QD~I";
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 8);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      Class<SQLInvalidAuthorizationSpecException> class6 = SQLInvalidAuthorizationSpecException.class;
      classArray0[6] = class6;
      Class<SQLInvalidAuthorizationSpecException> class7 = SQLInvalidAuthorizationSpecException.class;
      classArray0[7] = class7;
      Transformer<BatchUpdateException, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("?tcpXVbp9h'&n)QD~I", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) objectArrayIterator0, (Transformer<? super BatchUpdateException, ? extends SQLDataException>) transformer0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) objectArrayListIterator0, 4);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) objectArrayListIterator0, (Iterator<? extends SQLTransientException>) objectArrayListIterator0);
      assertEquals(4, objectArrayListIterator0.previousIndex());
      
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator((Object[]) sQLTransactionRollbackExceptionArray0, 0, 4);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 3;
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      int int1 = 1366;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "uH", 1366);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("uH", "uH", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      String string0 = "org.apache.commons.collections4.list.TreeList$TreeListIterator";
      String string1 = "Xsb5";
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("org.apache.commons.collections4.list.TreeList$TreeListIterator", "Xsb5", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException2;
      String string2 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("_hgyA_VXTx", "org.apache.commons.collections4.iterators.TransformIterator", 1366, sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("The predicate to call must not be null", "uH");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("[-63SidkxKE%", sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 3, (-194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingIterator<SQLWarning> loopingIterator0 = new LoopingIterator<SQLWarning>(vector0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("{x2(5  =H}hSKw", "{x2(5  =H}hSKw", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(12, true, false, 0, 12, sQLTransientException0);
      vector0.add(dataTruncation0);
      Transformer<SQLWarning, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) loopingIterator0, (Transformer<? super SQLWarning, String>) transformer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet>>) iterator0, (Closure<? super Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet>>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) objectArrayListIterator0, 1);
      IteratorUtils.toListIterator((Iterator<?>) objectArrayListIterator0);
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category7;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) resettableListIterator0, 3);
      LoopingListIterator<Locale.Category> loopingListIterator0 = new LoopingListIterator<Locale.Category>(list0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Locale.Category>) loopingListIterator0, (Transformer<? super Locale.Category, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("9\"\u0005Z&[hkHs");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<ArrayDeque>>) iterator0, (Transformer<? super HashSet<ArrayDeque>, String>) transformer0, "N;,TtLW", "9\"\u0005Z&[hkHs", "9\"\u0005Z&[hkHs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '9\"\u0005Z&[hkHs' on 'class java.lang.Object' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray1 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 9);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Cannot put new key/value pair - Map is fixed size singleton");
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>((Factory<? extends IIOMetadataNode>) null);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = null;
      stack0.add((SQLSyntaxErrorException) null);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Object) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Class<SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation(3, false, true, 0, 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, 3, 3);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(3, true, true, 512, 0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, false, false, 0, 0, dataTruncation0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(9, true, true, 3, 4174);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, true, true, 4, 4, dataTruncation3);
      dataTruncationArray0[5] = dataTruncation5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 4, (-983));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.TransformerClosure");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("prefix may not be null", "", 1490);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("", "prefix may not be null", 2088);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("1", "\"p", sQLDataException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate2;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("", defaultEquator0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicateArray0[2]);
      predicateArray0[3] = (Predicate<Object>) transformedPredicate0;
      Predicate<SQLNonTransientException> predicate3 = OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) predicate3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(",8M-('~aD");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      HashMap<Object, ClientInfoStatus> hashMap0 = new HashMap<Object, ClientInfoStatus>();
      Transformer<ClientInfoStatus, ClientInfoStatus> transformer1 = MapTransformer.mapTransformer((Map<? super ClientInfoStatus, ? extends ClientInfoStatus>) hashMap0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) transformer1);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, ",8M-('~aD", ",8M-('~aD", ",8M-('~aD");
      assertEquals(",8M-('~aDnull,8M-('~aD", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      String string0 = "NodeList must not be null";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("PrototypeCloneFactory: Clone method threw an exception", "NodeList must not be null", 93);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("PrototypeCloneFactory: Clone method threw an exception", "PrototypeCloneFactory: Clone method threw an exception", 2802, sQLClientInfoException0);
      arrayList0.add(sQLRecoverableException0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Nt?p'FvGZz,cSBv", mockThrowable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) objectArrayIterator0, 1);
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(list0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 514;
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = null;
      iteratorArray0[1] = null;
      iteratorArray0[2] = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[15];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("delimiter may not be null");
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      int int0 = 95;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null, 95);
      Transformer<SQLException, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) iterator0, 1L, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[2] = (Predicate<Object>) nullIsTruePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super IIOMetadataNode>) nonePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tiEz-SM[,i{6");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      UniquePredicate.uniquePredicate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Iterator<EnumSet<ComparatorPredicate.Criterion>> iterator0 = EmptyIterator.emptyIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) factoryTransformer0, (String) null, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 512;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 512, 2544);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[13];
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      OrderedMapIterator<EnumSet<ComparatorPredicate.Criterion>, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<EnumSet<ComparatorPredicate.Criterion>, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<ComparatorPredicate.Criterion>, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<EnumSet<ComparatorPredicate.Criterion>>) orderedMapIterator1, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) transformer0, "Transformer must not be null", "transformer may not be null", "ef[Oh;'p`%!Sp>X");
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Vector<Iterator<SQLTransactionRollbackException>>[]) null, 771, 4055);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) null, 331);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<SQLTransactionRollbackException, SQLTimeoutException> hashMap0 = new HashMap<SQLTransactionRollbackException, SQLTimeoutException>();
      hashMap0.clone();
      EntrySetMapIterator<SQLTransactionRollbackException, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, SQLTimeoutException>(hashMap0);
      EmptyIterator.emptyIterator();
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2017), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      StringTokenizer stringTokenizer0 = new StringTokenizer(",k'e(&;U:.>|$fB", ",k'e(&;U:.>|$fB");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      EmptyIterator.resettableEmptyIterator();
      NOPClosure.nopClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[13];
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) objectArrayListIterator0, 12);
      assertEquals(12, objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 1, (-1739));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      EmptyIterator.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) transformer0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      PredicateTransformer<SQLIntegrityConstraintViolationException> predicateTransformer0 = new PredicateTransformer<SQLIntegrityConstraintViolationException>(nonePredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", ", "' out of bounds for size '");
      Boolean boolean0 = predicateTransformer0.transform(sQLIntegrityConstraintViolationException0);
      Transformer<Object, Boolean> transformer1 = ExceptionTransformer.exceptionTransformer();
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) transformer1);
      Closure<Boolean> closure0 = TransformerClosure.transformerClosure((Transformer<? super Boolean, ?>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super Boolean>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IfTransformer<Object, SQLDataException> ifTransformer0 = new IfTransformer<Object, SQLDataException>(predicate0, (Transformer<? super Object, ? extends SQLDataException>) null, (Transformer<? super Object, ? extends SQLDataException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLDataException>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException> hashMap0 = new HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>();
      ListIterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>> listIterator0 = IteratorUtils.singletonListIterator(hashMap0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) listIterator0, (Predicate<? super HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UniquePredicate.uniquePredicate();
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(".}0");
      arrayList0.add(iIOMetadataNode0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      loopingListIterator0.previousIndex();
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      UniquePredicate.uniquePredicate();
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) loopingListIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SingletonListIterator<Class<SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<Class<SQLTransactionRollbackException>>(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) singletonListIterator0, (Predicate<? super Class<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException> hashMap0 = new HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>();
      ListIterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>> listIterator0 = IteratorUtils.singletonListIterator(hashMap0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) listIterator0, (Predicate<? super HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) predicate0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Closure<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("72HG J}QQJ}|z", "72HG J}QQJ}|z");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<String, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends SQLDataException>) orderedMapIterator0);
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) orderedMapIterator1, (Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) orderedMapIterator1);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      StringTokenizer stringTokenizer0 = new StringTokenizer("a_J,R\"*", "/5:v3Qg>(@V6", true);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("a_J,R\"*", "c", true);
      stringTokenizerArray0[1] = stringTokenizer1;
      ResettableIterator<StringTokenizer> resettableIterator1 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException> hashMap0 = new HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>();
      ListIterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>> listIterator0 = IteratorUtils.singletonListIterator(hashMap0);
      IteratorUtils.matchesAny((Iterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) listIterator0, (Predicate<? super HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<SQLNonTransientConnectionException, InstanceofPredicate> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, InstanceofPredicate> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, InstanceofPredicate>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<String> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<EnumSet<ComparatorPredicate.Criterion>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) transformer0, "_", "_", "_");
      NullPredicate.nullPredicate();
      Iterator<ArrayDeque<DataTruncation>>[] iteratorArray0 = (Iterator<ArrayDeque<DataTruncation>>[]) Array.newInstance(Iterator.class, 5);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[");
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockThrowable0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 4);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      InvokerTransformer<SQLException, ArrayDeque<DataTruncation>> invokerTransformer0 = new InvokerTransformer<SQLException, ArrayDeque<DataTruncation>>("Collection must not be null", classArray0, objectArray0);
      Iterator<ArrayDeque<DataTruncation>> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) objectArrayIterator0, (Transformer<? super SQLException, ? extends ArrayDeque<DataTruncation>>) invokerTransformer0);
      iteratorArray0[0] = iterator1;
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      ListIterator<ArrayDeque<DataTruncation>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque0);
      iteratorArray0[1] = (Iterator<ArrayDeque<DataTruncation>>) listIterator0;
      List<ArrayDeque<DataTruncation>> list0 = IteratorUtils.toList((Iterator<? extends ArrayDeque<DataTruncation>>) iteratorArray0[1], 1215);
      ResettableIterator<ArrayDeque<DataTruncation>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends ArrayDeque<DataTruncation>>) list0);
      iteratorArray0[2] = (Iterator<ArrayDeque<DataTruncation>>) resettableIterator0;
      MapIterator<ArrayDeque<DataTruncation>, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[3] = (Iterator<ArrayDeque<DataTruncation>>) mapIterator0;
      Iterator<ArrayDeque<DataTruncation>> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends ArrayDeque<DataTruncation>>) listIterator0);
      iteratorArray0[4] = iterator2;
      Iterator<ArrayDeque<DataTruncation>> iterator3 = IteratorUtils.chainedIterator((Iterator<? extends ArrayDeque<DataTruncation>>[]) iteratorArray0);
      assertFalse(iterator3.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("_", "_", (-374), (Throwable) null);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsFalsePredicate0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableIterator<LinkedHashSet<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator((LinkedHashSet<IIOMetadataNode>) null);
      Predicate<SQLClientInfoException> predicate0 = NullPredicate.nullPredicate();
      Predicate<SQLClientInfoException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLClientInfoException>) predicate0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate2 = EqualPredicate.equalPredicate((Object) predicate1, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<LinkedHashSet<IIOMetadataNode>>) resettableIterator0, (Predicate<? super LinkedHashSet<IIOMetadataNode>>) predicate2);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 4569;
      Integer integer0 = new Integer(4569);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) singletonListIterator0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      loopingListIterator0.next();
      loopingListIterator0.remove();
      long long0 = (-2468L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) loopingListIterator0, (-2468L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 14);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", sQLTimeoutException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException1;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientExceptionArray0[2] = sQLTransientException0;
      ObjectArrayListIterator<SQLTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientException>(sQLTransientExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientException>) objectArrayListIterator0, (Object) objectArrayListIterator0);
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<EnumSet<ComparatorPredicate.Criterion>> iterator0 = EmptyIterator.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) transformer0, "q!&NB{-gV{w", ".MiT){", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Enumeration<String> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration1, (Collection<? super String>) linkedList0);
      MapIterator<String, HashSet<SQLClientInfoException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends String>) iterator1, (Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) iterator1);
      IteratorUtils.toArray(iterator1);
      EmptyOrderedIterator.emptyOrderedIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category0, 621, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.singletonListIterator((Object) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(andPredicate0, closure0, closure0);
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 2);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0, (Iterator<? extends IIOMetadataNode>) objectArrayListIterator0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) zippingIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0, (Iterator<? extends IIOMetadataNode>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator(iterator1, 406L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 6);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLWarning sQLWarning0 = new SQLWarning("suVpA'qL+vkT9rd,]", "", sQLIntegrityConstraintViolationException0);
      sQLWarningArray0[0] = sQLWarning0;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      iteratorArray0[0] = (Iterator<SQLWarning>) objectArrayListIterator0;
      SQLWarning sQLWarning1 = new SQLWarning("suVpA'qL+vkT9rd,]", "suVpA'qL+vkT9rd,]");
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning1);
      iteratorArray0[1] = (Iterator<SQLWarning>) singletonListIterator0;
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) singletonListIterator0);
      iteratorArray0[2] = (Iterator<SQLWarning>) listIterator0;
      SingletonListIterator<SQLWarning> singletonListIterator1 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      iteratorArray0[3] = (Iterator<SQLWarning>) singletonListIterator1;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      ListIterator<SQLWarning> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) orPredicate0);
      iteratorArray0[4] = (Iterator<SQLWarning>) listIterator1;
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      iteratorArray0[5] = (Iterator<SQLWarning>) singletonIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>[]) iteratorArray0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation(1645, true, true, (-3748), (-3748), sQLIntegrityConstraintViolationException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-3748), true, true, 689, (-3748), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-3748), true, false, (-807), 10);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(10, true, false, (-1526), (-1661), sQLWarning1);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(2, false, false, (-652), (-696));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-1661), false, false, (-289), 5053, sQLWarning0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-1661), false, true, 909, 10, sQLIntegrityConstraintViolationException0);
      dataTruncationArray0[6] = dataTruncation6;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tiEz-SM[,i{6");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Predicate<SQLTransientException> predicate0 = EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ArrayDeque<DataTruncation>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator1, (Iterator<? extends SQLDataException>) resettableIterator1);
      boolean boolean0 = IteratorUtils.isEmpty(zippingIterator0);
      assertTrue(boolean0);
      
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("prefix may not be null");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<EnumSet<ComparatorPredicate.Criterion>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) transformer0, "sufXix may not be nll", "sufXix may not be nll", "sufXix may not be nll");
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) null, (Predicate<? super Class<SQLTransactionRollbackException>>) nullIsTruePredicate0);
      IteratorUtils.emptyOrderedIterator();
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Transformer<? super IIOMetadataNode, ? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Iterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>> iterator0 = EmptyIterator.emptyIterator();
      Iterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) zippingIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) predicate0);
      MapIterator<SQLTransientConnectionException, Hashtable<LinkedList, BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<SQLTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) mapIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (-497L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLDataException>) transformer0);
      IteratorUtils.emptyOrderedMapIterator();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      ResettableListIterator<Boolean> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Boolean>) resettableListIterator1, (Closure<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "@&";
      int int0 = 10;
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[0];
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      IteratorUtils.find((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator1, (Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Locale.Category, SQLSyntaxErrorException> hashMap0 = new HashMap<Locale.Category, SQLSyntaxErrorException>();
      EntrySetMapIterator<Locale.Category, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<Locale.Category, SQLSyntaxErrorException>(hashMap0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) entrySetMapIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Locale.Category>) predicate1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Nsxz}0cdQ@Zx#FFY");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Nsxz}0cdQ@Zx#FFY", "Nsxz}0cdQ@Zx#FFY", 100);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", 803, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLException sQLException0 = new SQLException("", "", 0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", ") greater than the size of the ", 2996, sQLException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",?S@#V");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) objectArrayListIterator0, 834);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      Iterable<DataTruncation> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) loopingListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      Iterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) singletonListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = null;
      UniquePredicate.uniquePredicate();
      int int0 = (-468);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) loopingListIterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>((Object) null, (-468));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tiEz-SM[,i{6");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Predicate<SQLTransientException> predicate0 = EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      EmptyOrderedIterator.emptyOrderedIterator();
      Hashtable<Iterator<SQLTransactionRollbackException>, IIOMetadataNode> hashtable0 = new Hashtable<Iterator<SQLTransactionRollbackException>, IIOMetadataNode>();
      EntrySetMapIterator<Iterator<SQLTransactionRollbackException>, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<SQLTransactionRollbackException>, IIOMetadataNode>(hashtable0);
      ListIteratorWrapper<Iterator<SQLTransactionRollbackException>> listIteratorWrapper0 = new ListIteratorWrapper<Iterator<SQLTransactionRollbackException>>(entrySetMapIterator0);
      Enumeration<Iterator<SQLTransactionRollbackException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTransactionRollbackException>>) listIteratorWrapper0);
      Iterator<Iterator<SQLTransactionRollbackException>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTransactionRollbackException>>) enumeration0, (Collection<? super Iterator<SQLTransactionRollbackException>>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLTransactionRollbackException>>) iterator0, (-1049L), (-1049L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<EnumSet<ComparatorPredicate.Criterion>> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString(iterator0, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) constantTransformer0, "J", "", "");
      NullPredicate.nullPredicate();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<SQLWarning> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLWarning>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 654);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Predicate<SQLTransientException>[] predicateArray0 = (Predicate<SQLTransientException>[]) Array.newInstance(Predicate.class, 7);
      Predicate<SQLTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      AnyPredicate<SQLTimeoutException> anyPredicate0 = new AnyPredicate<SQLTimeoutException>(predicateArray0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) anyPredicate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicateArray0[2], (-322));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLSyntaxErrorException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLDataException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate1;
      instanceofPredicateArray0[2] = instanceofPredicate1;
      instanceofPredicateArray0[3] = instanceofPredicate1;
      instanceofPredicateArray0[4] = instanceofPredicate0;
      instanceofPredicateArray0[5] = instanceofPredicate1;
      instanceofPredicateArray0[6] = instanceofPredicate0;
      instanceofPredicateArray0[7] = instanceofPredicate1;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate1, instanceofPredicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(instanceofPredicate1, closure0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<EnumSet<ComparatorPredicate.Criterion>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) transformer0, "_", "_", "_");
      NullPredicate.nullPredicate();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<SQLWarning> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLWarning>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) null, (Predicate<? super Class<SQLTransactionRollbackException>>) nullIsTruePredicate0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      linkedList0.descendingIterator();
      int int0 = (-2688);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, (-2688));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<EnumSet<ComparatorPredicate.Criterion>>) null, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) transformer0, "_", "_", "_");
      NullPredicate.nullPredicate();
      Enumeration<SQLRecoverableException> enumeration0 = null;
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null, (Collection<? super SQLRecoverableException>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      String string0 = "Node must not be null";
      SQLWarning sQLWarning0 = new SQLWarning();
      priorityQueue0.poll();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Node must not be null", "Node must not be null", sQLWarning0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      priorityQueue0.add(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null, (Collection<? super SQLDataException>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      EmptyListIterator.resettableEmptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(2334, true, true, 2334, (-1640));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.asIterable((Iterator<? extends SQLWarning>) listIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      dataTruncationArray0[2] = dataTruncation0;
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncation0;
      dataTruncationArray0[5] = dataTruncation0;
      dataTruncationArray0[6] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2334, true, true, 2334, 15, dataTruncation0);
      dataTruncationArray0[7] = dataTruncation1;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.singletonListIterator((Object) null);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (long) 3637, 1425L);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) boundedIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) linkedList0);
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 7);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Class<Boolean> class1 = Boolean.class;
      classArray0[1] = class1;
      Class<Boolean> class2 = Boolean.class;
      classArray0[2] = class2;
      Class<Boolean> class3 = Boolean.class;
      classArray0[3] = class3;
      Class<Boolean> class4 = Boolean.class;
      classArray0[4] = class4;
      Class<Boolean> class5 = Boolean.class;
      classArray0[5] = class5;
      Class<Boolean> class6 = Boolean.class;
      classArray0[6] = class6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(classArray0, 3637, (-1635));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("V9'kwfHI$otME%", (String) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("V9'kwfHI$otME%");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("V9'kwfHI$otME%", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException2.getSuppressed();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("72HG J}QQJ}|z", ".x{%zV90k", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      IteratorUtils.getIterator((Object) null);
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(".x{%zV90k", ".x{%zV90k", 870, sQLNonTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, "-a4mXiQN");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", sQLTransientException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLDataException>) transformer0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0);
      Predicate<SQLTransientException> predicate0 = EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.CloneTransformer");
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1136));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tiEz-SM[,i{6");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Predicate<SQLTransientException> predicate0 = EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      EmptyOrderedIterator.emptyOrderedIterator();
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Node must not be null", "Node must not be null", (-575));
      SQLDataException sQLDataException0 = new SQLDataException("Node must not be null", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLDataException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("g]U", sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLDataException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "Node must not be null", (-2562));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<SQLWarning> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLWarning>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) singletonListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) singletonListIterator0, 10);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, instanceofPredicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0, closure0);
      PredicateTransformer<SQLIntegrityConstraintViolationException> predicateTransformer0 = new PredicateTransformer<SQLIntegrityConstraintViolationException>(instanceofPredicate0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(predicate0, ifClosure0, ifClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("72HG J}QQJ}|z", ".x{%zV90k", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(".x{%zV90k", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException((String) null, "", 12, sQLNonTransientConnectionException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[13];
      sQLTransactionRollbackExceptionArray0[12] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) objectArrayListIterator0, 12);
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) andPredicate0);
      IteratorUtils.matchesAny((Iterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) null, (Predicate<? super HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) predicate0);
      ArrayIterator<DataTruncation> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<DataTruncation>(resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("72HG J}QQJ}|z", ".x{%zV90k", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(".x{%zV90k", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException((String) null, "", 12, sQLNonTransientConnectionException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[13];
      sQLTransactionRollbackExceptionArray0[12] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) objectArrayListIterator0, 12);
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      IteratorUtils.matchesAny((Iterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) null, (Predicate<? super HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) andPredicate0);
      ArrayIterator<DataTruncation> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<DataTruncation>(resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Iterator<EnumSet<ComparatorPredicate.Criterion>> iterator0 = EmptyIterator.emptyIterator();
      Iterator<EnumSet<ComparatorPredicate.Criterion>> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends EnumSet<ComparatorPredicate.Criterion>>) iterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) transformer0, "_", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLSyntaxErrorException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "Yt=R5K3H'p5}Vcx", sQLSyntaxErrorException0);
      IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("Yt=R5K3H'p5}Vcx", "Yt=R5K3H'p5}Vcx", (-1571));
      linkedList0.add(sQLDataException0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(resettableListIterator0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLNonTransientException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLNonTransientException) sQLIntegrityConstraintViolationException0, comparator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) listIteratorWrapper0, (Predicate<? super SQLDataException>) predicate0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIteratorWrapper0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) iterator1);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLDataException0);
      IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<Object> class2 = Object.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) objectArrayListIterator0, 834);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, instanceofPredicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Node must not be null", "\";`hEHP");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("#dfY@Y#1e", sQLTransactionRollbackException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("CeW.jo]UVj-Da1e]9", "#dfY@Y#1e");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("#dfY@Y#1e", "0L=:Yh", 1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "", 542, sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("0L=:Yh", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.ListOrderedMap", "MYoS]X?1", 0, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("\";`hEHP", "NodeList must not be null", sQLTransactionRollbackException0);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      ResettableIterator<HashSet<SQLRecoverableException>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<SQLRecoverableException>>) resettableIterator0, (Transformer<? super HashSet<SQLRecoverableException>, String>) null, "0L=:Yh", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLSyntaxErrorException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLDataException>) transformer0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<Locale.Category> class1 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      Class<StringTokenizer> class3 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class3);
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate.instanceOfPredicate(class4);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate1;
      instanceofPredicateArray0[2] = instanceofPredicate2;
      instanceofPredicateArray0[3] = instanceofPredicate3;
      instanceofPredicateArray0[4] = instanceofPredicate2;
      instanceofPredicateArray0[5] = instanceofPredicate2;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) objectArrayListIterator0, 834);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(834, closure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(uniquePredicate0, closure0, forClosure0);
      IteratorUtils.apply((Iterator<Boolean>) null, (Closure<? super Boolean>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "\\/lnN6.<GVtq_";
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("/lnN6.<GVtq_");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) singletonListIterator0);
      ListIterator<String> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) closure0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.skippingIterator((Iterator<String>) listIterator1, 0L);
      int int0 = 1851;
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(listIterator0, 1851, 1851);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<String> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.toList((Iterator<? extends String>) listIterator1, 8);
      OrderedMapIterator<SQLRecoverableException, Class<SQLSyntaxErrorException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Class<SQLSyntaxErrorException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Class<SQLSyntaxErrorException>>(orderedMapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) null, (Predicate<? super Class<SQLTransactionRollbackException>>) nullIsTruePredicate0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, (Class<?>[]) null, (Object[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-2203));
      Integer integer1 = new Integer((-2116));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer1);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Integer>) listIterator0, (Transformer<? super Integer, String>) transformer0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      MapIterator<SQLRecoverableException, Class<SQLSyntaxErrorException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLRecoverableException, Class<SQLSyntaxErrorException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) mapIterator1, class0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("72HG J}QQJ}|z", ".x{%zV90k", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "72HG J}QQJ}|z", sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(".x{%zV90k", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException((String) null, "", 12, sQLNonTransientConnectionException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) objectArrayListIterator0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 7
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("72HG J}QQJ}|z", ".x{%zV90k", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "72HG J}QQJ}|z", sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(".x{%zV90k", (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException((String) null, "", 12, sQLNonTransientConnectionException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) objectArrayListIterator0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 7
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedIterator();
      Enumeration<Boolean> enumeration0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<String, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Iterator<InstanceofPredicate> iterator0 = linkedList0.descendingIterator();
      Predicate<InstanceofPredicate> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super InstanceofPredicate>>) linkedList0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iterator1, 1574);
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate1);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(andPredicate0, closure0, closure0);
      PredicateTransformer<SQLIntegrityConstraintViolationException> predicateTransformer0 = new PredicateTransformer<SQLIntegrityConstraintViolationException>(predicate1);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 834;
      intArray0[2] = 123;
      intArray0[3] = (-445);
      intArray0[4] = 0;
      intArray0[5] = (-720);
      intArray0[6] = (-445);
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-445), intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("The collections must not be null", "l<F)@nAk;WnFs?", 0, batchUpdateException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLIntegrityConstraintViolationException0);
      ArrayIterator<Boolean> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Boolean>(boolean0, 834);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 542);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLSyntaxErrorException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 6);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>((String) null, classArray0, classArray0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.transformedIterator(iterator0, (Transformer<? super Object, ? extends DataTruncation>) invokerTransformer0);
      Iterator<DataTruncation> iterator2 = IteratorUtils.unmodifiableIterator(iterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) iterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) iterator2);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) iterator2, 542);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tiEz-SM[,i{6");
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Predicate<SQLTransientException> predicate0 = EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      UniquePredicate.uniquePredicate();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 6);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[4] = class4;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("tiEz-SM[,i{6", classArray0, classArray0);
      Integer integer0 = new Integer((-2116));
      ListIterator<Integer> listIterator1 = IteratorUtils.singletonListIterator(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) listIterator1, (Transformer<? super Integer, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'tiEz-SM[,i{6' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      Hashtable<InstanceofPredicate, SQLDataException> hashtable0 = new Hashtable<InstanceofPredicate, SQLDataException>(100);
      EntrySetMapIterator<InstanceofPredicate, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<InstanceofPredicate, SQLDataException>(hashtable0);
      MapIterator<Predicate<Object>, SQLDataException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Predicate<Object>, ? extends SQLDataException>) entrySetMapIterator0);
      AbstractMapIteratorDecorator<Predicate<Object>, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Predicate<Object>, SQLDataException>(mapIterator0);
      MapIterator<Predicate<Object>, SQLDataException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Predicate<Object>, SQLDataException>) abstractMapIteratorDecorator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(allPredicate0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) mapIterator1, (Predicate<? super Predicate<Object>>) nullIsTruePredicate0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.AbstractIterableMap", "v(uo2P>Kj", 8);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("v(uo2P>Kj", "v(uo2P>Kj", sQLDataException2);
      sQLDataExceptionArray0[4] = sQLDataException4;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Array class must not be null");
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      Class<SQLException> class7 = SQLException.class;
      classArray0[7] = class7;
      Class<SQLException> class8 = SQLException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Ax|%rr.(B#5Z;W-8k&", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) invokerTransformer0);
      assertEquals("[]", string0);
      
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Array class must not be null");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLDataException>) transformer0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 845, 845);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      // Undeclared exception!
      try { 
        NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsFalsePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) null, (Predicate<? super Class<SQLTransactionRollbackException>>) nullIsTruePredicate0);
      int[] intArray0 = new int[9];
      intArray0[0] = 184;
      intArray0[1] = 1073741824;
      intArray0[2] = 783;
      intArray0[3] = 125;
      intArray0[4] = 1615;
      intArray0[5] = (-1);
      intArray0[6] = (-2788);
      intArray0[7] = (-1213);
      intArray0[8] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Estimated size must be greater than 0", intArray0);
      batchUpdateException0.getSuppressed();
      IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.size((Iterator<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("gc;(}");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("!LKGjAD6l2(->R", "gc;(}", sQLSyntaxErrorException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("|d/k88+4Zz", "!LKGjAD6l2(->R", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("4R", "VX*K (9CJ,yO");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "|d/k88+4Zz", (-1909), sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("4R", "gc;(}", (-1909), sQLNonTransientException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) objectArrayIterator0, class0);
      assertNotSame(sQLRecoverableExceptionArray0, sQLRecoverableExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) stack0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 404L);
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = null;
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", ":", (-98));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("suffix may not be null", (String) null, sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("suffix may not be null", (String) null, sQLTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "", (-98), sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("L}z|fc", "? $Pi%/_j2Z!");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", "suffix may not be null", (-98));
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("i4&rvX5Hd(4#");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("", (String) null, (-98));
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException(sQLTransactionRollbackException6);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, (-98));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -98
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 4401, 2468);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.emptyIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      UniquePredicate.uniquePredicate();
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 8);
      Class<SQLException> class2 = SQLException.class;
      classArray0[0] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[1] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[2] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[3] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[4] = class6;
      Class<SQLException> class7 = SQLException.class;
      classArray0[5] = class7;
      Class<SQLException> class8 = SQLException.class;
      classArray0[6] = class8;
      Class<SQLException> class9 = SQLException.class;
      classArray0[7] = class9;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Bj", classArray0, instanceofPredicateArray0);
      OrderedMapIterator<Integer, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Properties>(orderedMapIterator0);
      MapIterator<Integer, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, Properties>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<Integer, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, Properties>(mapIterator0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) abstractOrderedMapIteratorDecorator0, (Transformer<? super Integer, String>) invokerTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 19);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[17] = class3;
      Integer integer0 = new Integer((-700));
      arrayDeque0.add(integer0);
      Class<SQLException> class4 = SQLException.class;
      classArray0[5] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[6] = class5;
      classArray0[7] = class0;
      Class<SQLException> class6 = SQLException.class;
      classArray0[8] = class6;
      IteratorUtils.isEmpty(resettableIterator0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Array class must not be null");
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      Class<SQLException> class7 = SQLException.class;
      classArray0[7] = class7;
      Class<SQLException> class8 = SQLException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Ax|%rr.(B#5Z;W-8k&", classArray0, classArray0);
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) invokerTransformer0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Array class must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null, 251);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      Class<SQLTransactionRollbackException>[] classArray1 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 2);
      ObjectArrayIterator<Class<SQLTransactionRollbackException>> objectArrayIterator0 = new ObjectArrayIterator<Class<SQLTransactionRollbackException>>(classArray1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'LWFE0-ee4}");
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) objectArrayIterator0, (Predicate<? super Class<SQLTransactionRollbackException>>) predicate0);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayListIterator<SQLRecoverableException>(predicate0, 125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) instanceofPredicate0, comparator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      ListIterator<Class<SQLTransactionRollbackException>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) listIterator0, (Predicate<? super Class<SQLTransactionRollbackException>>) nullIsTruePredicate0);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>((Object) null, (-5830));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      Class<SQLTransactionRollbackException>[] classArray1 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 2);
      ObjectArrayIterator<Class<SQLTransactionRollbackException>> objectArrayIterator0 = new ObjectArrayIterator<Class<SQLTransactionRollbackException>>(classArray1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'LWFE0-ee4}");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransactionRollbackException0);
      IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) objectArrayIterator0, (Predicate<? super Class<SQLTransactionRollbackException>>) predicate0);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>((Object) null, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      ResettableIterator<Class<SQLTransactionRollbackException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) resettableIterator0, (Predicate<? super Class<SQLTransactionRollbackException>>) predicate0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(arrayDeque0, (-1302));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Yvp4_)E", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(">Qt.y-", sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("dO),)3}", "", (-1864), sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLNonTransientException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException2;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, "", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0, sQLFeatureNotSupportedException0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("p&P!Bxgsp#]w$w", "p&P!Bxgsp#]w$w", 32, (Map<String, ClientInfoStatus>) null, sQLClientInfoException2);
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", hashMap0, sQLClientInfoException2);
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("Sz", "", 2, hashMap0, sQLClientInfoException4);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException6;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 2);
      Transformer<SQLClientInfoException, String> transformer0 = ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "VwA3(p(", (String) null, "*1dv[R0^S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "N;sC#&^";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("N;sC#&^", "N;sC#&^", sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTimeoutException0);
      IteratorUtils.getIterator(sQLTransientConnectionException1);
      MapIterator<ArrayDeque<DataTruncation>, Iterator<SQLTransactionRollbackException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<ArrayDeque<DataTruncation>> list0 = IteratorUtils.toList((Iterator<? extends ArrayDeque<DataTruncation>>) mapIterator0);
      IteratorUtils.getIterator(list0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 5);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      Object[] objectArray0 = new Object[2];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ReverseListIterator<Object> reverseListIterator0 = new ReverseListIterator<Object>(linkedList0);
      int int0 = 297;
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 297);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Array class must not be null");
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      Class<SQLException> class7 = SQLException.class;
      classArray0[7] = class7;
      Class<SQLException> class8 = SQLException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Ax|%rr.(B#5Z;W-8k&", classArray0, classArray0);
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) invokerTransformer0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Array class must not be null");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLDataException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLDataException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 19);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      Class<SQLException> class7 = SQLException.class;
      classArray0[7] = class7;
      Class<SQLException> class8 = SQLException.class;
      classArray0[8] = class8;
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "}o2", hashMap0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0, sQLFeatureNotSupportedException0);
      String string0 = ".]P@1T_R\\4gKzTGh";
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(".]P@1T_R\u0004gKzTGh", ")&D0>LqeQ:dRW0 ", (-483), hashMap0, sQLFeatureNotSupportedException0);
      String string1 = "";
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", map0, sQLFeatureNotSupportedException0);
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(")&D0>LqeQ:dRW0 ", "}o2", (-459), map0, sQLFeatureNotSupportedException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException((String) null, "}o2", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException6;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, (-459));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      int[] intArray0 = new int[7];
      intArray0[0] = (-15);
      intArray0[1] = 10;
      intArray0[2] = 3228;
      intArray0[3] = 59;
      intArray0[4] = (-1059);
      intArray0[5] = (-1);
      intArray0[6] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Ax|%rr.(B#5Z;W-8k&", "v2?", intArray0);
      batchUpdateException0.getSuppressed();
      IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1, 3228);
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayDeque0, (-1), (-1059));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tiEz-SM[,i{6", "tiEz-SM[,i{6");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Predicate<SQLTransientException> predicate0 = EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      assertFalse(singletonListIterator0.hasNext());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedIterator0, class0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<LinkedHashSet<SQLTransientException>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<LinkedHashSet<SQLTransientException>>) orderedMapIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.DISPLAY;
      locale_CategoryArray0[8] = locale_Category8;
      ObjectArrayListIterator<Locale.Category> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Locale.Category>(locale_CategoryArray0, (-931), (-931));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException>[] linkedHashSetArray0 = (LinkedHashSet<SQLIntegrityConstraintViolationException>[]) Array.newInstance(LinkedHashSet.class, 9);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet2 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet3 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet4 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet5 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSetArray0[5] = linkedHashSet5;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet6 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSetArray0[6] = linkedHashSet6;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet7 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSetArray0[7] = linkedHashSet7;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet8 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSet7.add((SQLIntegrityConstraintViolationException) null);
      linkedHashSet8.add((SQLIntegrityConstraintViolationException) null);
      linkedHashSetArray0[8] = linkedHashSet8;
      linkedHashSet5.addAll(linkedHashSet1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(linkedHashSetArray0, (-748), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-5306);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "WEj;lJ_|]5>cR]V", intArray0);
      batchUpdateException0.getSuppressed();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.size(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayDeque0.add(instanceofPredicate0);
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      NullPredicate.nullPredicate();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLWarning>) resettableListIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLWarning0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.emptyIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<Object> class2 = Object.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) objectArrayListIterator0, 834);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, instanceofPredicate1);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(andPredicate0, closure0, closure0);
      IteratorUtils.apply((Iterator<Boolean>) resettableIterator0, (Closure<? super Boolean>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) null, (Predicate<? super Class<SQLTransactionRollbackException>>) nullIsTruePredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      MapIterator<SQLTransactionRollbackException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException>(mapIterator0);
      IteratorUtils.getIterator(abstractMapIteratorDecorator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate1, instanceofPredicate0);
      Iterator<HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>> iterator0 = EmptyIterator.emptyIterator();
      boolean boolean1 = IteratorUtils.matchesAny(iterator0, (Predicate<? super HashMap<ArrayDeque<DataTruncation>, SQLSyntaxErrorException>>) uniquePredicate0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("E]kRO*AD+4F");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("E]kRO*AD+4F", hashtable0, sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLClientInfoException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(mockThrowable0);
      batchUpdateException0.getLocalizedMessage();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int int0 = 3036;
      batchUpdateException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 3036);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) null, (Predicate<? super Class<SQLTransactionRollbackException>>) nullIsTruePredicate0);
      assertTrue(boolean0);
      
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "ListIterator must not be null", 0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "ListIterator must not be null", 3191, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, 2119L);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "tiEz-SM[,i{6";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tiEz-SM[,i{6");
      int int0 = 1362;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) null, 1362);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "N;sC#&^";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("N;sC#&^", "N;sC#&^", sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTimeoutException0);
      IteratorUtils.getIterator(sQLTransientConnectionException1);
      MapIterator<ArrayDeque<DataTruncation>, Iterator<SQLTransactionRollbackException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<ArrayDeque<DataTruncation>> list0 = IteratorUtils.toList((Iterator<? extends ArrayDeque<DataTruncation>>) mapIterator0);
      IteratorUtils.getIterator(list0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 5);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      Object[] objectArray0 = new Object[2];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ReverseListIterator<Object> reverseListIterator0 = new ReverseListIterator<Object>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) reverseListIterator0, 297);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 297
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = "";
      String string1 = "Jkk*U|L9GX$e{'4UnE";
      IteratorUtils.toString((Iterator<EnumSet<ComparatorPredicate.Criterion>>) null, (Transformer<? super EnumSet<ComparatorPredicate.Criterion>, String>) transformer0, "", "Jkk*U|L9GX$e{'4UnE", "");
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayDeque0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[13];
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 4255);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) listIterator0, (-3627L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLWarning>) resettableListIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, Closure<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Closure<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Closure<Object>>(orderedMapIterator0);
      MapIterator<SQLFeatureNotSupportedException, Closure<Object>> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends Closure<Object>>) abstractOrderedMapIteratorDecorator0);
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, 695L);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.bidimap.TreeBidiMap");
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) skippingIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SingletonListIterator<ArrayDeque<Object>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<Object>>(arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ArrayDeque<Object>>) singletonListIterator0, (-3040L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<Class<SQLTransactionRollbackException>>) null, (Predicate<? super Class<SQLTransactionRollbackException>>) nullIsTruePredicate0);
      IteratorUtils.getIterator((Object) null);
      EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = (-914);
      ArrayIterator<SQLDataException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLDataException>((Object) null, (-914));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      int int0 = (-2174);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) zippingIterator0, (-2174));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      sQLException0.spliterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", 0, sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[", "[", "o(V6e7i1+2%srpz", (-1792));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      IteratorUtils.singletonIterator(sQLDataException0);
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 542;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 542);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLSyntaxErrorException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      String string0 = "Yt=R5K3H'p5}Vcx";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "Yt=R5K3H'p5}Vcx", sQLSyntaxErrorException0);
      IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      int int1 = (-1579);
      File file0 = MockFile.createTempFile("Map.Entry.setValue is not supported", "delimiter may not be null");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "AU0=Nc");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // AU0=Nc
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = ">Qt.y-";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">Qt.y-");
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("nD&U", "", (-1829), sQLInvalidAuthorizationSpecException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nD&U");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "nD&U";
      objectArray0[1] = (Object) "e";
      objectArray0[2] = (Object) sQLInvalidAuthorizationSpecException0;
      objectArray0[3] = (Object) "nD&U";
      objectArray0[4] = (Object) "e";
      objectArray0[5] = (Object) sQLSyntaxErrorException0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("e", objectArray0);
      sQLInvalidAuthorizationSpecException0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, (-1829), 1174);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = 0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("isnJ2G6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ke");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "Ke", objectArray0);
      sQLTransientException0.printStackTrace(printWriter0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 1015, sQLTransientException0);
      dataTruncation0.addSuppressed(sQLTransientException0);
      Transformer<DataTruncation, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("isnJ2G6");
      IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, 0L);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<ArrayDeque> class1 = ArrayDeque.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<Object> class3 = Object.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Class<ArrayDeque> class4 = ArrayDeque.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[6] = instanceofPredicate6;
      Class<SQLWarning> class5 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class5);
      instanceofPredicateArray0[7] = instanceofPredicate7;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0, 0, 2111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLTransientException sQLTransientException0 = new SQLTransientException("IHmKE%fugAf7");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rW=", "rW=", (-1175), sQLTransientException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLDataException sQLDataException0 = new SQLDataException("IHmKE%fugAf7");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, (-1175));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) null);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate4 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      Predicate<Object> predicate5 = EqualPredicate.equalPredicate((Object) predicate0, (Equator<Object>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = predicate3;
      predicateArray0[1] = predicate2;
      predicateArray0[2] = predicate2;
      predicateArray0[3] = predicate5;
      predicateArray0[4] = predicate3;
      predicateArray0[5] = predicate4;
      predicateArray0[6] = predicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<ComparatorPredicate.Criterion>) null, (Predicate<? super ComparatorPredicate.Criterion>) predicate2);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedHashSet0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) loopingIterator0, class0);
      Integer integer0 = new Integer((-3954));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, (-862));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[1] = predicate0;
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicateArray0[3] = predicate2;
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate((Object) instanceofPredicate0, comparator0);
      predicateArray0[4] = predicate3;
      Predicate<Object> predicate4 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<SQLException> predicate5 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate4, (Predicate<? super SQLException>) predicate2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate5);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tiEz-SM[,i{6");
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Predicate<SQLTransientException> predicate0 = EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = IteratorUtils.find((Iterator<SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      PredicateTransformer<SQLNonTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientConnectionException>(predicate1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("tiEz-SM[,i{6", "tiEz-SM[,i{6", sQLTimeoutException1);
      Boolean boolean0 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      Class<SQLException> class7 = SQLException.class;
      classArray0[7] = class7;
      Class<SQLException> class8 = SQLException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Ax|%rr.(B#5Z;W-8k&", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) invokerTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "The prototype must be cloneable via a public clone method";
      StringTokenizer stringTokenizer0 = new StringTokenizer("The prototype must be cloneable via a public clone method");
      stringTokenizer0.hasMoreElements();
      stringTokenizer0.nextElement();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      int int0 = 0;
      String string0 = "3BdHt&-h";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLException sQLException0 = new SQLException("3BdHt&-h", "3BdHt&-h", sQLSyntaxErrorException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 0, sQLTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1296, false, true, 0, 1296);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-846), true, true, (-3233), (-846), dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 0, 0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, true, false, 125, 0, dataTruncation3);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(10, true, true, 2, 0, dataTruncation3);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-846), false, true, 503, 512);
      dataTruncationArray0[6] = dataTruncation6;
      int int1 = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(dataTruncation5);
      DataTruncation dataTruncation7 = new DataTruncation((-1), true, true, 125, 5, batchUpdateException0);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(798, true, true, 798, (-219));
      dataTruncationArray0[8] = dataTruncation8;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0, 0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 1 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }
}
