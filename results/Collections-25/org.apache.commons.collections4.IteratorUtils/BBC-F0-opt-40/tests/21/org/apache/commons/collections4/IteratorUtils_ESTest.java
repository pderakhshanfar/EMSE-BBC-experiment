/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 11:22:04 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.UserDataHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale_Category0;
      objectArray0[1] = (Object) iterator0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) locale_Category0;
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator(iterator0, iterator0, iterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) locale_Category0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(allPredicate0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[5] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[6] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>((String) null, classArray0, classArray0);
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<Object, InstanceofPredicate> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends InstanceofPredicate>) invokerTransformer0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0);
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator((Predicate<Object>) notPredicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 124);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, ? extends DataTruncation>) transformer0);
      Class<DataTruncation> class6 = DataTruncation.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      AndPredicate<InstanceofPredicate> andPredicate0 = new AndPredicate<InstanceofPredicate>(instanceofPredicate0, instanceofPredicate0);
      Predicate<Closure<Object>> predicate0 = new UniquePredicate<Closure<Object>>();
      Predicate<InstanceofPredicate> predicate1 = EqualPredicate.equalPredicate(instanceofPredicate0);
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) predicate1);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 1);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.map.AbstractHashedMap$Values", 0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "zql?315B", 1, sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException3;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0, 0);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableIterator<Stack<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.emptyIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<SQLFeatureNotSupportedException>>) resettableIterator0, (Transformer<? super Stack<SQLFeatureNotSupportedException>, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("9o>Nk");
      IteratorUtils.toString((Iterator<Stack<SQLFeatureNotSupportedException>>) null, (Transformer<? super Stack<SQLFeatureNotSupportedException>, String>) transformer0, "9o>Nk", "", "9o>Nk");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) mapIterator0, class0);
      Stack<SQLFeatureNotSupportedException>[] stackArray0 = (Stack<SQLFeatureNotSupportedException>[]) Array.newInstance(Stack.class, 4);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[0] = stack0;
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[1] = stack1;
      Stack<SQLFeatureNotSupportedException> stack2 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[2] = stack2;
      Stack<SQLFeatureNotSupportedException> stack3 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[3] = stack3;
      ObjectArrayIterator<Stack<SQLFeatureNotSupportedException>> objectArrayIterator0 = new ObjectArrayIterator<Stack<SQLFeatureNotSupportedException>>(stackArray0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<Stack<SQLFeatureNotSupportedException>>) objectArrayIterator0, (Transformer<? super Stack<SQLFeatureNotSupportedException>, String>) transformer0, "cbgug2f,460#", "Io5vljEdW7'w.8I", "rL#%5'0");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Stack<SQLFeatureNotSupportedException>[] stackArray0 = (Stack<SQLFeatureNotSupportedException>[]) Array.newInstance(Stack.class, 7);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[0] = stack0;
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[1] = stack1;
      Stack<SQLFeatureNotSupportedException> stack2 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[2] = stack2;
      Stack<SQLFeatureNotSupportedException> stack3 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[3] = stack3;
      Stack<SQLFeatureNotSupportedException> stack4 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[4] = stack4;
      Stack<SQLFeatureNotSupportedException> stack5 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[5] = stack5;
      Stack<SQLFeatureNotSupportedException> stack6 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[6] = stack6;
      ObjectArrayListIterator<Stack<SQLFeatureNotSupportedException>> objectArrayListIterator0 = new ObjectArrayListIterator<Stack<SQLFeatureNotSupportedException>>(stackArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Stack<SQLFeatureNotSupportedException>>) objectArrayListIterator0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<SQLFeatureNotSupportedException>>) objectArrayListIterator0, (Transformer<? super Stack<SQLFeatureNotSupportedException>, String>) transformer0, "ZGUD:Z%1r|_W^$@2", "npy1ca*$F3~cx", "The map size must be 1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ListIterator<Stack<SQLFeatureNotSupportedException>> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<Stack<SQLFeatureNotSupportedException>> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Stack<SQLFeatureNotSupportedException>>) listIterator1, (Transformer<? super Stack<SQLFeatureNotSupportedException>, String>) transformer0, "npy1ca*$F3~cx", "The map size must be 1", "npy1ca*$F3~cx");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("zWEk==jqTr`8#");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("", "Lu'-tC5dgnSMQ7U;9v5", false);
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("yzqD");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("Lu'-tC5dgnSMQ7U;9v5");
      stringTokenizerArray0[5] = stringTokenizer5;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = linkedList0.descendingIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("QeE5C");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonIterator0, (Transformer<? super IIOMetadataNode, String>) null, "QeE5C", "ME0JCa9pe#kAV?Ji", "QeE5C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) listIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator1 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) listIterator1);
      iteratorArray0[0] = iterator0;
      EmptyListIterator.emptyListIterator();
      ListIterator<String> listIterator2 = new SingletonListIterator<String>("[]");
      IteratorUtils.matchesAll((Iterator<String>) listIterator2, (Predicate<? super String>) instanceofPredicate0);
      Vector<Class<BatchUpdateException>> vector0 = new Vector<Class<BatchUpdateException>>();
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<String>) listIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("c/1PpR3@!x6", classArray0, classArray0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("VT4e", (Transformer<? super String, ? extends String>) invokerTransformer0);
      Predicate<String> predicate0 = IdentityPredicate.identityPredicate("The closure array must not contain a null closure, index ");
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super String>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'c/1PpR3@!x6' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<BatchUpdateException, Class<BatchUpdateException>> hashMap0 = new HashMap<BatchUpdateException, Class<BatchUpdateException>>();
      NotPredicate<String> notPredicate0 = new NotPredicate<String>((Predicate<? super String>) null);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<String>) listIterator0, (Predicate<? super String>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      NotPredicate<String> notPredicate0 = new NotPredicate<String>(predicate0);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator((String) null);
      IteratorUtils.matchesAll((Iterator<String>) listIterator0, (Predicate<? super String>) notPredicate0);
      Vector<Class<BatchUpdateException>> vector0 = new Vector<Class<BatchUpdateException>>();
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) listIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator1 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) listIterator1);
      iteratorArray0[0] = iterator0;
      ListIterator<InstanceofPredicate> listIterator2 = EmptyListIterator.emptyListIterator();
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) listIterator2;
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) zippingIterator0, (Predicate<? super InstanceofPredicate>) andPredicate0);
      PredicateTransformer<PriorityQueue<String>> predicateTransformer0 = new PredicateTransformer<PriorityQueue<String>>(instanceofPredicate0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Boolean boolean0 = predicateTransformer0.transform(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, 484);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", 2898, sQLTimeoutException0);
      sQLTimeoutException1.fillInStackTrace();
      IteratorUtils.getIterator(sQLTimeoutException1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.Category>>) null, (Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) listIterator0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicateTransformer<PriorityQueue<String>> predicateTransformer0 = new PredicateTransformer<PriorityQueue<String>>(predicate0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      predicateTransformer0.transform(priorityQueue0);
      Hashtable<BatchUpdateException, Class<BatchUpdateException>> hashtable0 = new Hashtable<BatchUpdateException, Class<BatchUpdateException>>();
      EntrySetMapIterator<BatchUpdateException, Class<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, Class<BatchUpdateException>>(hashtable0);
      entrySetMapIterator0.hasNext();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) entrySetMapIterator0, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicateTransformer<PriorityQueue<String>> predicateTransformer0 = new PredicateTransformer<PriorityQueue<String>>(predicate0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      predicateTransformer0.transform(priorityQueue0);
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>();
      priorityQueue1.add("org.apache.commons.collections4.functors.FalsePredicate");
      Boolean boolean0 = predicateTransformer0.transform(priorityQueue1);
      IteratorUtils.singletonListIterator(boolean0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedIterator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null, 1308, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) mapIterator0, class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H\"f");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 900);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("w-<B&7jR3b  =2bX+", "", 14);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("!d.cb\"Rt]0J|9 ", "", 14);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("transformer may not be null");
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException2;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Object) sQLTransactionRollbackException2);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException2);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("");
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("w-<B&7jR3b  =2bX+", "'wkc4z.Sd_u 1Y-");
      Vector<Class<BatchUpdateException>> vector0 = new Vector<Class<BatchUpdateException>>();
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(linkedHashSet0, defaultEquator0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      IteratorUtils.get((Iterator<SQLDataException>) singletonListIterator0, 0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyIterator.emptyIterator();
      HashMap<BatchUpdateException, Class<BatchUpdateException>> hashMap0 = new HashMap<BatchUpdateException, Class<BatchUpdateException>>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      HashSet<IIOMetadataNode> hashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0, defaultEquator0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.get((Iterator<SQLDataException>) singletonListIterator0, 0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("suffix may not be null", "tx", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("suffix may not be null", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("s@#9", "", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("org.apache.commons.collections4.IterableUtils$5$1", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("Index '", "", 93, (Map<String, ClientInfoStatus>) null, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException((String) null, "Index '", (Map<String, ClientInfoStatus>) null, sQLClientInfoException5);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException8;
      SQLClientInfoException sQLClientInfoException9 = new SQLClientInfoException("iterator", (Map<String, ClientInfoStatus>) null, sQLClientInfoException8);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException9;
      SQLClientInfoException sQLClientInfoException10 = new SQLClientInfoException("suffix may not be null", (Map<String, ClientInfoStatus>) null, sQLClientInfoException8);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException10;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0, 93);
      IteratorUtils.getIterator("OMbgOM:]dm0l=&");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("!H/lIO'u@ED", "!H/lIO'u@ED", 1225);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("!H/lIO'u@ED", "!H/lIO'u@ED");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("[", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("!H/lIO'u@ED", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("", "");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("_", "fp(>6yZo0HK%?;e", sQLRecoverableException4);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("", "");
      sQLRecoverableException3.printStackTrace();
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableListIterator1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException0);
      EmptyIterator.emptyIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      HashMap<BatchUpdateException, Class<BatchUpdateException>> hashMap0 = new HashMap<BatchUpdateException, Class<BatchUpdateException>>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0, defaultEquator0);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("=vwhuOZ9oJ&V", "=vwhuOZ9oJ&V", (-1));
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("=vwhuOZ9oJ&V", "'w-c4z.Sd_u 1Y-", (-1));
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("'w-c4z.Sd_u 1Y-");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Object) iterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException2);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("=vwhuOZ9oJ&V");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("=vwhuOZ9oJ&V", "Al1tiSAUl9]");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "=vwhuOZ9oJ&V");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      OrderedMapIterator<DataTruncation, Class<String>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLWarning> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (Predicate<? super SQLWarning>) equalPredicate0);
      IteratorUtils.size(iterator1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ICI/^GmEqDSE*=", "ICI/^GmEqDSE*=");
      Transformer<SQLException, SQLTimeoutException> transformer0 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends SQLTimeoutException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) orderedIterator0);
      Vector<Class<BatchUpdateException>> vector0 = new Vector<Class<BatchUpdateException>>();
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) treeSet0);
      MapIterator<String, Closure<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(vector0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) equalPredicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) mapIterator0, (Closure<? super Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) closure1);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) iterator0, (Transformer<? super SQLException, ? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 11;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Properties properties0 = new Properties();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      int int0 = 11;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Jc4l8[l", "Jc4l8[l", 11, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLFeatureNotSupportedException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.emptyListIterator();
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
      DefaultEquator.defaultEquator();
      OrderedMapIterator<EnumSet<Locale.Category>, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, Properties>(orderedMapIterator0);
      OrderedMapIterator<EnumSet<Locale.Category>, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ? extends Properties>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<EnumSet<Locale.Category>>) orderedMapIterator1, (Predicate<? super EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = 1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "D", 0, sQLNonTransientConnectionException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLNonTransientConnectionException1);
      IteratorUtils.size(singletonListIterator0);
      EmptyIterator.emptyIterator();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(nodeListIterator0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("SS@xRyG", "b3Mz;.DE", 1073741824, sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableListIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("V=H=XgR", "s", (-719));
      IteratorUtils.singletonListIterator(sQLRecoverableException0);
      sQLRecoverableException0.getSuppressed();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      Predicate<SQLRecoverableException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      NotPredicate<String> notPredicate0 = new NotPredicate<String>(predicate0);
      IteratorUtils.matchesAll((Iterator<String>) null, (Predicate<? super String>) notPredicate0);
      Vector<Class<BatchUpdateException>> vector0 = new Vector<Class<BatchUpdateException>>();
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayDeque0);
      IteratorUtils.apply((Iterator<Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) null, (Closure<? super Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) closure0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      NotPredicate<String> notPredicate0 = new NotPredicate<String>(predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",`){O+n@hJ)}.%");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLDataException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Iterator<? extends IIOMetadataNode>) singletonIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Properties properties0 = new Properties();
      SQLDataException sQLDataException0 = new SQLDataException(":#Eu0w%J6ea5%4B[|E", ":#Eu0w%J6ea5%4B[|E", (Throwable) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLDataException0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Properties properties0 = new Properties();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("osjG");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) orderedIterator0, (Iterator<? extends IIOMetadataNode>) orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Properties properties0 = new Properties();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[1] = 100;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GQ~p", ";i", (-387));
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)107;
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Yz`50kOc7:G");
      IteratorUtils.getIterator(stringTokenizer0);
      IteratorUtils.emptyListIterator();
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[2];
      intArray0[0] = (-391);
      intArray0[1] = 2980;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("J2B", "", (-391));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "J2B", intArray0, sQLSyntaxErrorException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[1];
      intArray1[0] = 2980;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("4EUI", intArray1);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) objectArrayIterator0, (long) (-391));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("&=shoI` r2/RKGUnd", "&=shoI` r2/RKGUnd", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("^:J]*j-n@/=NGg4Mu", (String) null, hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 3, (-475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) mapIterator0, class0);
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) locale_Category0, 953, 3267);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) null);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Properties properties0 = new Properties();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      IteratorUtils.emptyListIterator();
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientException>) vector0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(3317);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("kO6P9vrp}yE`mL", "Iterator remove() cannot be called at this time", 11);
      linkedHashSet0.add(sQLSyntaxErrorException0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) linkedHashSet0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.contains((Iterator<SQLTransientException>) resettableIterator0, (Object) instanceofPredicate0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) instanceofPredicate0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("LESS");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLDataException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Iterator<? extends IIOMetadataNode>) orderedIterator0, (Iterator<? extends IIOMetadataNode>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      stack0.listIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Stack<SQLTransientConnectionException> stack1 = new Stack<SQLTransientConnectionException>();
      stack1.listIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "org.apache.commons.collections4.IterableUtils$5";
      boolean boolean0 = true;
      MapIterator<SQLIntegrityConstraintViolationException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      UserDataHandler userDataHandler0 = mock(UserDataHandler.class, new ViolatedAssumptionAnswer());
      try { 
        iIOMetadataNode0.setUserData("org.apache.commons.collections4.IterableUtils$5", (Object) null, userDataHandler0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) mapIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, 0L);
      Predicate<SQLNonTransientConnectionException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3064;
      intArray0[1] = 416;
      intArray0[2] = 2843;
      intArray0[3] = (-1185);
      intArray0[4] = (-1);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      DataTruncation dataTruncation0 = new DataTruncation((-1429), false, false, 3064, (-1185), sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, dataTruncation0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyListIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (-1255));
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) listIterator0);
      NotNullPredicate.notNullPredicate();
      DataTruncation dataTruncation0 = new DataTruncation(92, true, true, 123, 92, sQLRecoverableException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(dataTruncation0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      stack0.listIterator();
      Stack<SQLTransientConnectionException> stack1 = new Stack<SQLTransientConnectionException>();
      stack1.listIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "org.apache.commons.collections4.IterableUtils$5";
      boolean boolean0 = true;
      MapIterator<SQLIntegrityConstraintViolationException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      UserDataHandler userDataHandler0 = mock(UserDataHandler.class, new ViolatedAssumptionAnswer());
      try { 
        iIOMetadataNode0.setUserData("org.apache.commons.collections4.IterableUtils$5", (Object) null, userDataHandler0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Properties properties0 = new Properties();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[1] = 100;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GQ~p", ";i", (-387));
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) listIterator0);
      Predicate<SQLRecoverableException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find(iterator0, (Predicate<? super SQLRecoverableException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>(512, 512);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedHashSet0.add(iIOMetadataNode0);
      stack0.retainAll(linkedHashSet0);
      stack0.listIterator();
      Stack<SQLTransientConnectionException> stack1 = new Stack<SQLTransientConnectionException>();
      ListIterator<SQLTransientConnectionException> listIterator0 = stack1.listIterator();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("T f}p[");
      Node node0 = iIOMetadataNode2.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      int[] intArray0 = new int[6];
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 8);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class5;
      Class<SQLIntegrityConstraintViolationException> class6 = SQLIntegrityConstraintViolationException.class;
      classArray0[6] = class6;
      Class<SQLIntegrityConstraintViolationException> class7 = SQLIntegrityConstraintViolationException.class;
      classArray0[7] = class7;
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("Ttc", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) listIterator0, (Transformer<? super SQLTransientException, ? extends SQLTransactionRollbackException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[9];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("P-hkdLApK-/d[8", "P-hkdLApK-/d[8", (-1), longArray0, sQLClientInfoException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("Transformer must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[9];
      longArray0[0] = 1771L;
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue1 = new PriorityQueue<SQLFeatureNotSupportedException>(priorityQueue0);
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue1);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("' is invalid.");
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>(32, 2094);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ListIterator<SQLTransientConnectionException> listIterator0 = stack0.listIterator();
      Predicate<SQLTransientConnectionException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      stack0.listIterator();
      Stack<SQLTransientConnectionException> stack1 = new Stack<SQLTransientConnectionException>();
      stack1.listIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("MapIterator[", "p49KJ>Wj8y", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("suffix may not be null", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, (long) 1);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLDataException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      OrderedMapIterator<InstanceofPredicate, LinkedHashSet<SQLSyntaxErrorException>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) orderedMapIterator1);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) linkedHashSet0);
      IteratorUtils.getIterator(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLTimeoutException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTimeoutException, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) transformer0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      HashMap<BatchUpdateException, Class<BatchUpdateException>> hashMap1 = new HashMap<BatchUpdateException, Class<BatchUpdateException>>();
      EntrySetMapIterator<BatchUpdateException, Class<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, Class<BatchUpdateException>>(hashMap1);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) entrySetMapIterator0, (Iterator<? extends BatchUpdateException>) entrySetMapIterator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      arrayList0.sort((Comparator<? super SQLTimeoutException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1283);
      longArray0[1] = (long) (-1283);
      longArray0[2] = (long) (-1283);
      longArray0[3] = 814L;
      longArray0[4] = (long) (-1283);
      longArray0[5] = (long) (-1283);
      longArray0[6] = (long) (-1283);
      longArray0[7] = (long) (-1283);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("add() is not supported by this iterator", "Couldn't get the node: index (", (-1283), longArray0, sQLClientInfoException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) resettableIterator0);
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      IteratorUtils.apply((Iterator<Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) resettableIterator0, (Closure<? super Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) closure0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("lnXf;CAS`b=((*HPc", (String) null, 1281, sQLRecoverableExceptionArray0[0]);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<?> iterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLTimeoutException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTimeoutException, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) transformer0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      HashMap<BatchUpdateException, Class<BatchUpdateException>> hashMap1 = new HashMap<BatchUpdateException, Class<BatchUpdateException>>();
      EntrySetMapIterator<BatchUpdateException, Class<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, Class<BatchUpdateException>>(hashMap1);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) entrySetMapIterator0, (Iterator<? extends BatchUpdateException>) entrySetMapIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "YW?=#}L");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "Enumeration must not be null");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("YW?=#}L", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("YW?=#}L", "2fEjl", 2397, sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("o49|Fd", "Enumeration must not be null", (-1941), sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Iterator must not be null", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLTimeoutException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(14, true, true, 506, 506, mockThrowable0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) singletonListIterator0, class0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<SQLWarning> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLWarning>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ArrayIterator<SQLDataException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLDataException>(iterable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[8];
      SQLDataException sQLDataException0 = new SQLDataException("iterator", "iterator");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("iterator", "iterator", 184, longArray0, sQLDataException0);
      IteratorUtils.singletonIterator(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<Properties, HashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) mapIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[8];
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) entrySetMapIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Hashtable<SQLDataException, Properties> hashtable0 = new Hashtable<SQLDataException, Properties>();
      EntrySetMapIterator<SQLDataException, Properties> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, Properties>(hashtable0);
      MapIterator<SQLDataException, Properties> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends Properties>) entrySetMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, (long) 184, (long) 184);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      int[] intArray0 = new int[5];
      intArray0[0] = 184;
      intArray0[1] = 184;
      intArray0[2] = 184;
      intArray0[3] = 184;
      intArray0[4] = (-1897);
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("t<'`OdtU;eI]O-", batchUpdateException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLNonTransientConnectionException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) entrySetMapIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) null, (Closure<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 2121;
      longArray0[3] = (long) 2121;
      longArray0[5] = (long) 2121;
      IteratorUtils.emptyOrderedMapIterator();
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 2121;
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 2121;
      longArray0[3] = (long) 2121;
      longArray0[5] = (long) 2121;
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) mapIterator0, class0);
      OrderedMapIterator<Class<SQLException>, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      String[] stringArray0 = new String[0];
      IteratorUtils.arrayListIterator(stringArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "", 1, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      String string0 = "c;+:cz6-'Jy=Y'";
      SQLException sQLException0 = new SQLException("", "c;+:cz6-'Jy=Y'", sQLTransientConnectionException2);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException((String) null, "", (-1), sQLException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("c;+:cz6-'Jy=Y'", (String) null, (-1), sQLTransientConnectionException3);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException(sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1);
      Hashtable<Object, SQLTransactionRollbackException> hashtable0 = new Hashtable<Object, SQLTransactionRollbackException>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransactionRollbackException>) hashtable0);
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[9];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("P-hkdLApK-/d[8", "P-hkdLApK-/d[8", (-1), longArray0, sQLClientInfoException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) resettableIterator0);
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      IteratorUtils.apply((Iterator<Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) orderedMapIterator0, (Closure<? super Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) closure0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Iterator<SQLWarning> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) null, 2121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2121;
      longArray0[1] = (long) 2121;
      longArray0[2] = (long) 2121;
      longArray0[3] = (long) 2121;
      longArray0[5] = (long) 2121;
      longArray0[6] = 0L;
      longArray0[7] = (long) 2121;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.fillInStackTrace();
      SQLWarning sQLWarning0 = new SQLWarning("Sld/'Ohsn@", "ID:`$twjqvx*d{2", 2121, sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ID:`$twjqvx*d{2", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Sld/'Ohsn@", "ID:`$twjqvx*d{2", 2121, longArray0, sQLTransientConnectionException0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      arrayList0.add(sQLTimeoutException0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      Vector<Object> vector0 = new Vector<Object>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.Flat3Map$KeySet", "org.apache.commons.collections4.map.Flat3Map$KeySet");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) stack0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.Flat3Map$KeySet", "org.apache.commons.collections4.map.Flat3Map$KeySet", 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Transformer must not be null", "", 0);
      hashtable0.put(sQLDataException0, sQLTransientConnectionException0);
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) entrySetMapIterator0, (Predicate<? super SQLNonTransientException>) instanceofPredicate0);
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, 0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-3120), sQLClientInfoException0);
      sQLWarning0.spliterator();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<InstanceofPredicate>[]) null, (-3120));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[9];
      longArray0[0] = 1771L;
      DataTruncation dataTruncation0 = new DataTruncation(61, false, false, 4207, (-1));
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      stack0.listIterator();
      stack0.listIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(true);
      IteratorUtils.nodeListIterator(node0);
      int[] intArray0 = new int[1];
      intArray0[0] = 4207;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      IteratorUtils.singletonIterator(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[9];
      longArray0[0] = 1771L;
      DataTruncation dataTruncation0 = new DataTruncation(61, true, true, 4207, (-1));
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      HashSet<InstanceofPredicate>[] hashSetArray0 = (HashSet<InstanceofPredicate>[]) Array.newInstance(HashSet.class, 9);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      hashSetArray0[0] = (HashSet<InstanceofPredicate>) linkedHashSet0;
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      hashSetArray0[1] = hashSet0;
      IteratorUtils.arrayListIterator(hashSetArray0, 1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      iteratorArray0[0] = (Iterator<DataTruncation>) loopingListIterator0;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableIterator0;
      MapIterator<DataTruncation, TreeSet<SQLTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[2] = (Iterator<DataTruncation>) mapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.toArray(iteratorArray0[1]);
      Vector<Class<BatchUpdateException>> vector1 = new Vector<Class<BatchUpdateException>>();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      vector1.add(class0);
      Vector<Class<BatchUpdateException>> vector2 = new Vector<Class<BatchUpdateException>>();
      // Undeclared exception!
      try { 
        vector2.setElementAt(class0, (-1376));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1376
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(100);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(972);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(6742);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-115));
      integerArray0[3] = integer3;
      IteratorUtils.arrayIterator(integerArray0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null, (Collection<? super SQLDataException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2121;
      longArray0[1] = (long) 2121;
      longArray0[2] = (long) 2121;
      longArray0[3] = (long) 2121;
      longArray0[5] = (long) 2121;
      longArray0[6] = 0L;
      longArray0[7] = (long) 2121;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.fillInStackTrace();
      SQLWarning sQLWarning0 = new SQLWarning("Sld/'Ohsn@", "ID:`$twjqvx*d{2", 2121, sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ID:`$twjqvx*d{2", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Sld/'Ohsn@", "ID:`$twjqvx*d{2", 2121, longArray0, sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("T2l 9~6Pww", "Ib3H");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, true);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2121;
      longArray0[1] = (long) 2121;
      longArray0[2] = (long) 2121;
      DataTruncation dataTruncation0 = new DataTruncation(2121, false, true, 184, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "ID:`$twjqvx*d{2", (-581), longArray0, dataTruncation0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[9];
      longArray0[0] = 1771L;
      DataTruncation dataTruncation0 = new DataTruncation(61, true, true, 4207, (-1));
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ListIterator<SQLTransientConnectionException> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2121;
      longArray0[1] = (long) 2121;
      longArray0[2] = (long) 2121;
      longArray0[3] = (long) 2121;
      longArray0[4] = (long) 2121;
      longArray0[5] = (long) 2121;
      longArray0[6] = 0L;
      longArray0[7] = (long) 2121;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator((InstanceofPredicate) null);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.toString((Iterator<ArrayList<ArrayDeque>>) resettableIterator0);
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<? extends Properties>) iterator0, 1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Object object0 = new Object();
      ArrayIterator<SQLDataException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLDataException>(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) entrySetMapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(61, false, true, 4207, (-3238));
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 61;
      longArray0[1] = 1771L;
      longArray0[2] = (long) 4207;
      longArray0[3] = (long) (-3238);
      longArray0[4] = (long) (-3238);
      longArray0[5] = (long) (-3238);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "J_\"b=)", 4207, longArray0, dataTruncation0);
      IteratorUtils.getIterator(hashtable0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", (-3238), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("J_\"b=)");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.StringValueTransformer", (String) null, 61, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("2rNgm [");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLWarning sQLWarning0 = new SQLWarning("", "{]{/5`", sQLFeatureNotSupportedException3);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException(sQLWarning0);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException("Enumeration must not be null", (String) null);
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) mapIterator0, class0);
      IteratorUtils.emptyOrderedIterator();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2280));
      integerArray0[0] = integer0;
      int int0 = 93;
      Integer integer1 = new Integer(93);
      integerArray0[1] = integer1;
      DataTruncation dataTruncation0 = new DataTruncation((-1630), true, true, 4207, 1433);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 61;
      longArray0[1] = (long) 4207;
      longArray0[2] = (long) (-1630);
      longArray0[3] = (-773L);
      longArray0[4] = (long) (-1630);
      longArray0[5] = (long) (-2280);
      longArray0[6] = (long) 93;
      integerArray0[4] = (Integer) int0;
      longArray0[8] = (long) 1433;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, longArray0, dataTruncation0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("^aw}r=__s#V", "", (Throwable) null);
      Vector<Object> vector0 = new Vector<Object>();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[9];
      longArray0[0] = 1771L;
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue1 = new PriorityQueue<SQLFeatureNotSupportedException>(priorityQueue0);
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue1);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("' is invalid.");
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>(32, 2094);
      Vector<InstanceofPredicate> vector1 = new Vector<InstanceofPredicate>(vector0);
      PriorityQueue<InstanceofPredicate> priorityQueue2 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue2);
      NotPredicate<String> notPredicate0 = new NotPredicate<String>(predicate0);
      IteratorUtils.matchesAll((Iterator<String>) null, (Predicate<? super String>) notPredicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Hashtable<DataTruncation, SQLNonTransientConnectionException> hashtable0 = new Hashtable<DataTruncation, SQLNonTransientConnectionException>();
      EntrySetMapIterator<DataTruncation, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLNonTransientConnectionException>(hashtable0);
      IteratorUtils.toString((Iterator<DataTruncation>) entrySetMapIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      IteratorUtils.toString((Iterator<LinkedList<ServiceLoader>>) orderedMapIterator0);
      LinkedList<Iterator<SQLIntegrityConstraintViolationException>> linkedList0 = new LinkedList<Iterator<SQLIntegrityConstraintViolationException>>();
      LoopingListIterator<Iterator<SQLIntegrityConstraintViolationException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLIntegrityConstraintViolationException>>(linkedList0);
      IteratorUtils.toList((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>) loopingListIterator0);
      IteratorUtils.objectGraphIterator((Object) predicate0, (Transformer<? super Object, ?>) transformer0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(100);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(972);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(6742);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-115));
      integerArray0[3] = integer3;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>(1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("`|");
      arrayList0.add(iIOMetadataNode0);
      arrayList0.clear();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Hashtable<StringTokenizer, DataTruncation> hashtable0 = new Hashtable<StringTokenizer, DataTruncation>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      sQLRecoverableException0.spliterator();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("`|");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) entrySetMapIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) entrySetMapIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) vector0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, (-1), 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Enumeration must not be null");
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) linkedList0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m+l";
      stringArray0[1] = "n";
      stringArray0[2] = "]g5Otj&{r";
      stringArray0[3] = "Enumeration must not be null";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) objectArrayListIterator0, (-2450L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[9];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLWarning sQLWarning0 = new SQLWarning("", "fVd56^CV?", (-3120), sQLClientInfoException0);
      sQLWarning0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-72), (-4981));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2121;
      longArray0[1] = (long) 2121;
      longArray0[2] = (long) 2121;
      longArray0[3] = (long) 2121;
      longArray0[4] = (long) 2121;
      longArray0[5] = (long) 2121;
      longArray0[6] = 0L;
      longArray0[7] = (long) 2121;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLWarning sQLWarning0 = new SQLWarning("Sld/'Ohsn@", "ID:`$twjqvx*d{2", 2121, sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ID:`$twjqvx*d{2", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Sld/'Ohsn@", "ID:`$twjqvx*d{2", 2121, longArray0, sQLTransientConnectionException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransactionRollbackException) null);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) listIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<ZHs");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, (-328), (-328));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Enumeration must not be null");
      IteratorUtils.loopingIterator((Collection<? extends String>) linkedList0);
      Vector<Class<BatchUpdateException>>[] vectorArray0 = (Vector<Class<BatchUpdateException>>[]) Array.newInstance(Vector.class, 3);
      Vector<Class<BatchUpdateException>> vector0 = new Vector<Class<BatchUpdateException>>();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      vector0.add(class0);
      vectorArray0[0] = vector0;
      Vector<Class<BatchUpdateException>> vector1 = new Vector<Class<BatchUpdateException>>();
      vectorArray0[1] = vector1;
      Vector<Class<BatchUpdateException>> vector2 = new Vector<Class<BatchUpdateException>>();
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        vector0.setElementAt(class1, (-2148));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2148
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) entrySetMapIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) vector0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Predicate<? super SQLNonTransientException>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLNonTransientConnectionException0);
      linkedList0.add(sQLInvalidAuthorizationSpecException0);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0, 2473L);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 1778);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 0, sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorException0.getSuppressed();
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) listIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (-1477L), (-1477L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) mapIterator0, class0);
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2280));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(93);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-13));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-349));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      IteratorUtils.arrayIterator(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      IteratorUtils.size(orderedIterator0);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) iterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      int int0 = (-1897);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, (-1897));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      int int0 = 447;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("lnXf;CVS`b=((*HPc", (String) null, 447);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("lnXf;CVS`b=((*HPc", ", Size: ", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      int int1 = 1251;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("M1a9Xx,O2v8O_X$", "_3R)c weO>,J3_$=0", 1251, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      sQLRecoverableException2.spliterator();
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("_3R)c weO>,J3_$=0");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      sQLRecoverableException0.setNextException(sQLRecoverableException1);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableIterator<ArrayList<DataTruncation>> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = 0;
      int int1 = 628;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 0, 628);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ListIterator<ServiceLoader<SQLNonTransientConnectionException>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) listIterator0, 2443, 2443);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OrderedMapIterator<String, EnumSet<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, EnumSet<Locale.Category>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends EnumSet<Locale.Category>>) orderedMapIterator0);
      MapIterator<String, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, EnumSet<Locale.Category>>) orderedMapIterator1);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      int int0 = 16;
      HashSet<Object> hashSet0 = new HashSet<Object>(16);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) hashSet0);
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        linkedList0.listIterator(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException("VI*Y72+lV", "", sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      String string1 = "Enumeration must not be null";
      StackTraceElement stackTraceElement0 = new StackTraceElement("Node must not be null", "Enumeration must not be null", "", (-1));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, StringTokenizer>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category0, 1536, 1536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      int int0 = 1536;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category0, 1536, 1536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      NotPredicate<String> notPredicate0 = new NotPredicate<String>(predicate0);
      IteratorUtils.matchesAll((Iterator<String>) null, (Predicate<? super String>) predicate0);
      Vector<Class<BatchUpdateException>> vector0 = new Vector<Class<BatchUpdateException>>();
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayDeque0);
      IteratorUtils.apply((Iterator<Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) null, (Closure<? super Hashtable<SQLIntegrityConstraintViolationException, ArrayDeque>>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[10];
      long long0 = 1771L;
      longArray0[0] = 1771L;
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "n";
      stringArray0[1] = "]g5Otg&{u";
      stringArray0[2] = "]g5Otg&{u";
      stringArray0[3] = "'[,TW2t}7|~<";
      stringArray0[4] = "]g5Otg&{u";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Comparator<String> comparator0 = null;
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) objectArrayListIterator0, (Iterator<? extends String>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) iterator0, (-1275L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<SQLWarning, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      long long0 = (-998L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (-998L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(100);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(972);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(6742);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-115));
      integerArray0[3] = integer3;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>(1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("`|");
      arrayList0.add(iIOMetadataNode0);
      arrayList0.clear();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Hashtable<StringTokenizer, DataTruncation> hashtable0 = new Hashtable<StringTokenizer, DataTruncation>();
      EntrySetMapIterator<StringTokenizer, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, DataTruncation>(hashtable0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 6);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      classArray0[2] = class2;
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      classArray0[3] = class3;
      Class<SQLRecoverableException> class4 = SQLRecoverableException.class;
      classArray0[4] = class4;
      Class<SQLRecoverableException> class5 = SQLRecoverableException.class;
      classArray0[5] = class5;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("=xMz{9j)IC", (Class<?>[]) classArray0, (Object[]) integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      mockPrintStream0.println(2734.0F);
      mockPrintStream0.printf("U", (Object[]) sQLRecoverableExceptionArray0);
      mockPrintStream1.print('x');
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, ".-NSG&hAIJA<N", (Object[]) sQLRecoverableExceptionArray0);
      sQLRecoverableException0.printStackTrace(printStream0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, sQLRecoverableException0);
      sQLTransientConnectionException0.addSuppressed(sQLRecoverableException0);
      sQLTransientConnectionException0.printStackTrace(printStream0);
      sQLRecoverableException0.setNextException(sQLTransientConnectionException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      Hashtable<Class<SQLException>, SQLFeatureNotSupportedException>[] hashtableArray0 = (Hashtable<Class<SQLException>, SQLFeatureNotSupportedException>[]) Array.newInstance(Hashtable.class, 0);
      ObjectArrayIterator<Hashtable<Class<SQLException>, SQLFeatureNotSupportedException>> objectArrayIterator0 = new ObjectArrayIterator<Hashtable<Class<SQLException>, SQLFeatureNotSupportedException>>(hashtableArray0);
      IteratorUtils.unmodifiableIterator((Iterator<Hashtable<Class<SQLException>, SQLFeatureNotSupportedException>>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) objectArrayIterator0, 108, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Array class must not be null", 386, sQLTransientException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTimeoutException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransientExceptionArray0[1]);
      SQLWarning sQLWarning0 = new SQLWarning("", "ExceptionClosure invoked", sQLTransactionRollbackException3);
      SQLTransientException sQLTransientException1 = new SQLTransientException("ExceptionClosure invoked", "P]", sQLWarning0);
      sQLTransientExceptionArray0[4] = sQLTransientException1;
      SQLTransientException sQLTransientException2 = new SQLTransientException("Transformer must not be null");
      sQLTransientExceptionArray0[5] = sQLTransientException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, (-2836));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      String string0 = "lnXf;CVS`b=((*HPc";
      int int0 = 1273;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("lnXf;CVS`b=((*HPc", (String) null, 1281, sQLRecoverableExceptionArray0[0]);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableException0.spliterator();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("lnXf;CVS`b=((*HPc");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("lnXf;CVS`b=((*HPc", "XsK9u", sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("lnXf;CVS`b=((*HPc", "XsK9u", 1273, sQLFeatureNotSupportedException0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(", size=", (String) null, 14, sQLRecoverableException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("lnXf;CVS`b=((*HPc", sQLTransientConnectionException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException((String) null);
      sQLDataExceptionArray0[3] = sQLDataException3;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      long[] longArray0 = new long[9];
      longArray0[0] = 1771L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (-1);
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, 4207, (-1));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1), longArray0, dataTruncation0);
      IteratorUtils.getIterator(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedMapIterator<SQLWarning, TreeSet<InstanceofPredicate>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) orderedMapIterator0, 123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 123
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<SQLWarning, TreeSet<InstanceofPredicate>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      int int0 = 123;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) orderedMapIterator0, 123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 123
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$EXj6lj=fY", "");
      assertEquals("$EXj6lj=fY", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: $EXj6lj=fY", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("$EXj6lj=fY", "$EXj6lj=fY");
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertEquals("$EXj6lj=fY", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: $EXj6lj=fY", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("$EXj6lj=fY", sQLIntegrityConstraintViolationException1.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "&P2Ww~");
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertEquals("&P2Ww~", sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException2.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException2.toString());
      assertNotNull(sQLIntegrityConstraintViolationException2);
      
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException3.toString());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException3.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException3);
      
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("}}~n$r9> - ", "", sQLIntegrityConstraintViolationException0);
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      assertEquals("$EXj6lj=fY", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: $EXj6lj=fY", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("}}~n$r9> - ", sQLIntegrityConstraintViolationException4.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException4.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: }}~n$r9> - ", sQLIntegrityConstraintViolationException4.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException4);
      
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "$EXj6lj=fY", "", 100);
      assertEquals("", stackTraceElement0.getFileName());
      assertEquals(100, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getClassName());
      assertEquals("$EXj6lj=fY", stackTraceElement0.getMethodName());
      assertEquals(".$EXj6lj=fY(:100)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("$EXj6lj=fY", "iterator", "}}~n$r9> - ", (-2204));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("$EXj6lj=fY", "$EXj6lj=fY", "iterator", (-2204));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "$EXj6lj=fY", "", 100);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "List must not be null", "EpS]M", 100);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("List must not be null", "|vuavfIb6xBuO", "", (-2571));
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("Iterator must not be null", "}}~n$r9> - ", sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("&P2Ww~", "$EXj6lj=fY", 0, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      sQLIntegrityConstraintViolationException5.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-1), (-3984));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      ArrayDeque<SQLSyntaxErrorException>[] arrayDequeArray0 = (ArrayDeque<SQLSyntaxErrorException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLSyntaxErrorException> arrayDeque1 = new ArrayDeque<SQLSyntaxErrorException>();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(arrayDeque1);
      
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLSyntaxErrorException> arrayDeque2 = new ArrayDeque<SQLSyntaxErrorException>();
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertEquals(0, arrayDeque2.size());
      assertTrue(arrayDeque2.isEmpty());
      assertNotNull(arrayDeque2);
      
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLSyntaxErrorException> arrayDeque3 = new ArrayDeque<SQLSyntaxErrorException>();
      assertFalse(arrayDeque3.equals((Object)arrayDeque0));
      assertFalse(arrayDeque3.equals((Object)arrayDeque2));
      assertFalse(arrayDeque3.equals((Object)arrayDeque1));
      assertTrue(arrayDeque3.isEmpty());
      assertEquals(0, arrayDeque3.size());
      assertNotNull(arrayDeque3);
      
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLSyntaxErrorException> arrayDeque4 = new ArrayDeque<SQLSyntaxErrorException>();
      assertFalse(arrayDeque4.equals((Object)arrayDeque2));
      assertFalse(arrayDeque4.equals((Object)arrayDeque0));
      assertFalse(arrayDeque4.equals((Object)arrayDeque3));
      assertFalse(arrayDeque4.equals((Object)arrayDeque1));
      assertEquals(0, arrayDeque4.size());
      assertTrue(arrayDeque4.isEmpty());
      assertNotNull(arrayDeque4);
      
      boolean boolean0 = arrayDeque2.removeAll(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque1.equals((Object)arrayDeque4));
      assertFalse(arrayDeque1.equals((Object)arrayDeque2));
      assertFalse(arrayDeque1.equals((Object)arrayDeque3));
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      assertFalse(arrayDeque2.equals((Object)arrayDeque4));
      assertFalse(arrayDeque2.equals((Object)arrayDeque3));
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque1, arrayDeque4);
      assertNotSame(arrayDeque1, arrayDeque2);
      assertNotSame(arrayDeque1, arrayDeque3);
      assertNotSame(arrayDeque2, arrayDeque1);
      assertNotSame(arrayDeque2, arrayDeque4);
      assertNotSame(arrayDeque2, arrayDeque3);
      assertNotSame(arrayDeque2, arrayDeque0);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, arrayDeque2.size());
      assertTrue(arrayDeque2.isEmpty());
      assertFalse(boolean0);
      
      arrayDequeArray0[4] = arrayDeque4;
      boolean boolean1 = arrayDeque4.remove((Object) mapIterator0);
      assertFalse(arrayDeque4.equals((Object)arrayDeque2));
      assertFalse(arrayDeque4.equals((Object)arrayDeque0));
      assertFalse(arrayDeque4.equals((Object)arrayDeque3));
      assertFalse(arrayDeque4.equals((Object)arrayDeque1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayDeque4, arrayDeque2);
      assertNotSame(arrayDeque4, arrayDeque0);
      assertNotSame(arrayDeque4, arrayDeque3);
      assertNotSame(arrayDeque4, arrayDeque1);
      assertEquals(0, arrayDeque4.size());
      assertTrue(arrayDeque4.isEmpty());
      assertFalse(boolean1);
      
      ArrayDeque<SQLSyntaxErrorException> arrayDeque5 = new ArrayDeque<SQLSyntaxErrorException>();
      assertFalse(arrayDeque5.equals((Object)arrayDeque3));
      assertFalse(arrayDeque5.equals((Object)arrayDeque1));
      assertFalse(arrayDeque5.equals((Object)arrayDeque2));
      assertFalse(arrayDeque5.equals((Object)arrayDeque0));
      assertFalse(arrayDeque5.equals((Object)arrayDeque4));
      assertTrue(arrayDeque5.isEmpty());
      assertEquals(0, arrayDeque5.size());
      assertNotNull(arrayDeque5);
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Closure must not be null");
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Closure must not be null", (String) null, (-750), sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Closure must not be null", sQLTransactionRollbackException0.toString());
      assertEquals((-750), sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Closure must not be null", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Closure must not be null", sQLTransactionRollbackException0.toString());
      assertEquals((-750), sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Closure must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Closure must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLIntegrityConstraintViolationException0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Closure must not be null", sQLTransactionRollbackException0.toString());
      assertEquals((-750), sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Closure must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Closure must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLClientInfoException0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Closure must not be null", sQLTransactionRollbackException0.toString());
      assertEquals((-750), sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Closure must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Closure must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      arrayDeque2.addLast(sQLSyntaxErrorException0);
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      assertFalse(arrayDeque2.equals((Object)arrayDeque5));
      assertFalse(arrayDeque2.equals((Object)arrayDeque4));
      assertFalse(arrayDeque2.equals((Object)arrayDeque3));
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertNotSame(arrayDeque2, arrayDeque1);
      assertNotSame(arrayDeque2, arrayDeque5);
      assertNotSame(arrayDeque2, arrayDeque4);
      assertNotSame(arrayDeque2, arrayDeque3);
      assertNotSame(arrayDeque2, arrayDeque0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Closure must not be null", sQLTransactionRollbackException0.toString());
      assertEquals((-750), sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Closure must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Closure must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: Closure must not be null", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(arrayDeque2.isEmpty());
      assertEquals(1, arrayDeque2.size());
      assertTrue(arrayDeque2.contains(sQLSyntaxErrorException0));
      
      arrayDequeArray0[5] = arrayDeque5;
      ResettableListIterator<ArrayDeque<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      assertEquals(6, arrayDequeArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
  }
}
