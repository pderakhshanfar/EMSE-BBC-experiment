/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 09:10:58 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("$Ow{NUq<znX");
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLSyntaxErrorException0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<SQLException> closure1 = WhileClosure.whileClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, false);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) listIterator0, (Closure<? super SQLSyntaxErrorException>) closure1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.getIterator("dc&");
      Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>>();
      EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Properties>>(hashtable0);
      Consumer<SQLTransientConnectionException> consumer0 = (Consumer<SQLTransientConnectionException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      SingletonIterator<PriorityQueue<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLNonTransientConnectionException>>(priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("dc&", "dc&", 32);
      DataTruncation dataTruncation0 = new DataTruncation(74, false, false, 74, (-1060), sQLTransientException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(dataTruncation0);
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(nullIsExceptionPredicate0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<PriorityQueue<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super PriorityQueue<SQLNonTransientConnectionException>>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, class0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) listIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-2291));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLException sQLException0 = new SQLException("", "", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("p;", sQLException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("+ {A}MZ6|Ox%<iG", "p;", 1073741823, sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("p;");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", "List must not be null", sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("xlY->1}CL", "r@Mb", sQLNonTransientException0);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(";`");
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("ListIteratorWrapper does not support optional operations of ListIterator.", ";`", sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, class0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, 1073741823);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", sQLTransientException0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) singletonListIterator0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0);
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>((Predicate<? super SQLException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) zippingIterator0, (Predicate<? super SQLSyntaxErrorException>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayList0);
      int int0 = 2;
      Integer integer0 = new Integer(2);
      arrayList0.add(integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.getIterator("9#P9k_%C^&j(4$Bm)b");
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(2895);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("9#P9k_%C^&j(4$Bm)b", "Map must not be null", (-1077));
      SQLWarning sQLWarning0 = new SQLWarning("Map must not be null", sQLFeatureNotSupportedException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("9#P9k_%C^&j(4$Bm)b", "@i\"7&l2t7l}jOABksQ", hashMap0, sQLWarning0);
      linkedHashSet0.add(sQLClientInfoException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (Throwable) null);
      Predicate<Object> predicate0 = null;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<SQLNonTransientConnectionException, SQLNonTransientConnectionException> ifTransformer0 = new IfTransformer<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((Predicate<? super SQLNonTransientConnectionException>) null, transformer0, transformer0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) ifTransformer0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("PrototypeCloneFactory: Clonepmethod must be public", "PrototypeCloneFactory: Clonepmethod must be public");
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 1, 1, sQLIntegrityConstraintViolationException0);
      hashSet0.add(dataTruncation0);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) hashSet0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("GX");
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'GX' on 'class java.sql.SQLNonTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = IteratorUtils.get((Iterator<IIOMetadataNode>) singletonListIterator0, 0);
      assertNull(iIOMetadataNode1);
      
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = null;
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("c", "c", 19, sQLNonTransientException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientException0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("c");
      Node node0 = iIOMetadataNode0.cloneNode(true);
      IteratorUtils.nodeListIterator(node0);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) stack0);
      IteratorUtils.nodeListIterator(node0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Iterator must not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Iterator must not be null", "Iterator must not be null", 32, sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("Iterator must not be null", sQLRecoverableException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) singletonIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<SQLNonTransientException> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLNonTransientException>) predicate2);
      // Undeclared exception!
      IteratorUtils.matchesAll(iterator1, (Predicate<? super SQLDataException>) predicate3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("?{\"%1fg]!]5?!W`97M");
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<PriorityQueue<ServiceLoader>>) iterator0, (Predicate<? super PriorityQueue<ServiceLoader>>) nullIsFalsePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.getIterator("p");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("p");
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("p");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 708);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'p' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      SingletonIterator<ArrayList<Integer>> singletonIterator0 = new SingletonIterator<ArrayList<Integer>>(arrayList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<ArrayList<Integer>>) singletonIterator0, (Predicate<? super ArrayList<Integer>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      int[] intArray0 = new int[21];
      intArray0[0] = 44;
      intArray0[1] = 44;
      intArray0[3] = 44;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("fswFz :b~ofIg2B6+=\"", "");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "Map must not be null", "OY'z+*,%TR", "MapIterator[");
      assertEquals("OY'z+*,%TRnullMap must not be nullnullMapIterator[", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLClientInfoException>) loopingIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      iIOMetadataNode0.getNamespaceURI();
      IteratorUtils.get((Iterator<IIOMetadataNode>) singletonListIterator0, 0);
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, true);
      IteratorUtils.toString((Iterator<Integer>) singletonIterator0);
      TruePredicate.truePredicate();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[0]");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      HashMap<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>> hashMap0 = new HashMap<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>>(hashMap0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0, class0);
      NullPredicate.nullPredicate();
      LinkedList<ArrayDeque<IIOMetadataNode>> linkedList0 = new LinkedList<ArrayDeque<IIOMetadataNode>>();
      IteratorUtils.loopingListIterator((List<ArrayDeque<IIOMetadataNode>>) linkedList0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 7);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("<n&Gl@#z;L>-", "[0]", 0, intArray0, sQLNonTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "aw-B={=T6}Mvq~(%\"k", "aw-B={=T6}Mvq~(%\"k", "aw-B={=T6}Mvq~(%\"k");
      String string0 = "";
      int int0 = 1757;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("aw-B={=T6}Mvq~(%\"kaw-B={=T6}Mvq~(%\"k", "", 1757);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("aw-B={=T6}Mvq~(%\"kaw-B={=T6}Mvq~(%\"k", "aw-B={=T6}Mvq~(%\"kaw-B={=T6}Mvq~(%\"k", "%Hl26?[pmxy3\"=|@", 93);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string1 = "NJH=S5|~]\"yUY;,Kh";
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "NJH=S5|~]\"yUY;,Kh", "List must not be null", (-1779));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("aw-B={=T6}Mvq~(%\"kaw-B={=T6}Mvq~(%\"k", "", "", (-902));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("aw-B={=T6}Mvq~(%\"kaw-B={=T6}Mvq~(%\"k", "List must not be null", ":z95B/e.,EQUCV=[F", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = null;
      try {
        stackTraceElement4 = new StackTraceElement("org.apache.commons.collections4.functors.AnyPredicate", (String) null, "NJH=S5|~]\"yUY;,Kh", 6951);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<Iterator<BatchUpdateException>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Iterator<BatchUpdateException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "0";
      IteratorUtils.getIterator("0");
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.Category>) linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.add(locale_Category0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Hashtable<Integer, SQLWarning> hashtable0 = new Hashtable<Integer, SQLWarning>();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = arrayList0.listIterator();
      Transformer<SQLFeatureNotSupportedException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<BatchUpdateException> iterator0 = null;
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      IteratorUtils.apply(iterator0, (Closure<? super Locale.Category>) transformerClosure0);
      TruePredicate.truePredicate();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<SQLNonTransientException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "", "", "iterator");
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLTransientException sQLTransientException0 = new SQLTransientException("6^/t", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", sQLTransientException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "", 674, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("", "iterator");
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("Iterator must not be null", "Collection must not be null", 1676, sQLSyntaxErrorException5);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("5&", "", hashtable0, sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException("5&", "Collection must not be null", sQLClientInfoException0);
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NullPredicate.nullPredicate();
      HashMap<Integer, SQLWarning> hashMap0 = new HashMap<Integer, SQLWarning>();
      EntrySetMapIterator<Integer, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLWarning>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLWarning>) entrySetMapIterator0);
      IteratorUtils.toString((Iterator<Integer>) entrySetMapIterator0);
      TruePredicate.truePredicate();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[]");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      HashMap<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>> hashMap1 = new HashMap<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>> entrySetMapIterator1 = new EntrySetMapIterator<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>>(hashMap1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      hashMap1.put(sQLNonTransientConnectionException0, arrayDeque0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator1, class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator("[]");
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]", "*T.Z4pu#Xh';~P^:");
      Iterator<?> iterator1 = IteratorUtils.getIterator(stringTokenizer0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.apply((Iterator<Locale.Category>) orderedMapIterator0, (Closure<? super Locale.Category>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("V\"-<#");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      IIOMetadataNode iIOMetadataNode1 = IteratorUtils.get(iterator0, 0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(iIOMetadataNode1);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.apply((Iterator<Locale.Category>) orderedMapIterator0, (Closure<? super Locale.Category>) closure0);
      String string0 = "V\"Q-<#";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("V\"Q-<#");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      IteratorUtils.get(iterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Hashtable<Integer, SQLWarning> hashtable0 = new Hashtable<Integer, SQLWarning>();
      EntrySetMapIterator<Integer, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLWarning>(hashtable0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = 1;
      intArray0[2] = 10;
      intArray0[3] = (-457);
      intArray0[4] = (-1934);
      intArray0[5] = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("?i 1x =q3y4$MMv", "Cannot instantiate class: ");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("2]'C<B!bf0gewR43");
      TransformerPredicate.transformerPredicate((Transformer<? super BatchUpdateException, Boolean>) transformer0);
      batchUpdateException0.fillInStackTrace();
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(predicate0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Vector<SQLClientInfoException> vector1 = new Vector<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(vector1);
      assertEquals(0, loopingListIterator0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      vector0.setSize(2198);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = arrayDeque0.descendingIterator();
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IdentityPredicate.identityPredicate((Object) iIOMetadataNode0);
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) orderedIterator0);
      Iterator<Integer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0);
      IteratorUtils.toString(iterator1);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NOPClosure.nopClosure();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Integer>) listIterator0);
      TruePredicate.truePredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[]", "");
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLFeatureNotSupportedException0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("gN`MF0;\\;(W]", (Class<?>[]) classArray0, (Object[]) classArray0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "cZ", "", "Node must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'gN`MF0;\\;(W]' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Consumer<SQLTimeoutException> consumer0 = (Consumer<SQLTimeoutException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("suffix may not be null", (Class<?>[]) null, (Object[]) null);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      SQLException sQLException0 = new SQLException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("suffix may not be null", "suffix may not be null", 0, sQLException0);
      arrayDeque0.add(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = arrayDeque0.descendingIterator();
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "", "suffix may not be null", "suffix may not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'suffix may not be null' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-918));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "", "", "");
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      Stack<SQLIntegrityConstraintViolationException> stack1 = new Stack<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(stack1);
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      iIOMetadataNode0.getNamespaceURI();
      IteratorUtils.get((Iterator<IIOMetadataNode>) singletonListIterator0, 0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.FORMAT;
      locale_CategoryArray0[7] = locale_Category7;
      ObjectArrayListIterator<Locale.Category> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.Category>(locale_CategoryArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Locale.Category>) objectArrayListIterator0, (Predicate<? super Locale.Category>) predicate1);
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Consumer<SQLTimeoutException> consumer0 = (Consumer<SQLTimeoutException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      String string0 = "Class to instantiate must not be null";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Class to instantiate must not be null");
      Transformer<Object, IIOMetadataNode> transformer0 = null;
      IteratorUtils.emptyOrderedMapIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Locale.Category>) singletonIterator0, (Closure<? super Locale.Category>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.emptyOrderedMapIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) singletonIterator0, (long) 0, 687L);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Locale.Category>) boundedIterator0, (Closure<? super Locale.Category>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hashtable<SQLTransientConnectionException, Boolean>[] hashtableArray0 = (Hashtable<SQLTransientConnectionException, Boolean>[]) Array.newInstance(Hashtable.class, 7);
      Hashtable<SQLTransientConnectionException, Boolean> hashtable0 = new Hashtable<SQLTransientConnectionException, Boolean>();
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLTransientConnectionException, Boolean> hashtable1 = new Hashtable<SQLTransientConnectionException, Boolean>();
      hashtableArray0[1] = hashtable1;
      Hashtable<SQLTransientConnectionException, Boolean> hashtable2 = new Hashtable<SQLTransientConnectionException, Boolean>();
      hashtableArray0[2] = hashtable2;
      Hashtable<SQLTransientConnectionException, Boolean> hashtable3 = new Hashtable<SQLTransientConnectionException, Boolean>();
      hashtableArray0[3] = hashtable3;
      Hashtable<SQLTransientConnectionException, Boolean> hashtable4 = new Hashtable<SQLTransientConnectionException, Boolean>();
      hashtableArray0[4] = hashtable4;
      Hashtable<SQLTransientConnectionException, Boolean> hashtable5 = new Hashtable<SQLTransientConnectionException, Boolean>();
      hashtableArray0[5] = hashtable5;
      Hashtable<SQLTransientConnectionException, Boolean> hashtable6 = new Hashtable<SQLTransientConnectionException, Boolean>(2);
      hashtableArray0[6] = hashtable6;
      ResettableIterator<Hashtable<SQLTransientConnectionException, Boolean>> resettableIterator0 = IteratorUtils.arrayIterator(hashtableArray0, 2, 2);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.toString((Iterator<Integer>) null);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[]");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.find(iterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      IteratorUtils.matchesAny((Iterator<LinkedList<LinkedHashSet>>) null, (Predicate<? super LinkedList<LinkedHashSet>>) predicate0);
      IteratorUtils.emptyMapIterator();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(vector0);
      assertFalse(loopingListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.toString((Iterator<Integer>) null);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 6);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class0;
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("[]", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "Node must not be null", "Node must not be null", "Node must not be null");
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      Stack<SQLIntegrityConstraintViolationException> stack1 = new Stack<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(stack1);
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 3264;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null, 3264, 3264);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.toString((Iterator<Integer>) null);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 5);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("z@(qY3=$lU4j^kG=", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "start", (String) null, "1.sQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>>(0);
      EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Properties>>(hashtable0);
      HashMap<Integer, SQLWarning> hashMap0 = new HashMap<Integer, SQLWarning>();
      EntrySetMapIterator<Integer, SQLWarning> entrySetMapIterator1 = new EntrySetMapIterator<Integer, SQLWarning>(hashMap0);
      entrySetMapIterator1.reset();
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 6);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      classArray0[4] = class4;
      Class<SQLTransientConnectionException> class5 = SQLTransientConnectionException.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{u<|3dS]Hrpm", "x'xw]BW7_=*`,?u%a");
      Class<Properties> class6 = Properties.class;
      ServiceLoader<Properties> serviceLoader0 = ServiceLoader.loadInstalled(class6);
      hashtable0.put(sQLTransientConnectionException0, serviceLoader0);
      classArray0[5] = class5;
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("x'xw]BW7_=*`,?u%a", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "x'xw]BW7_=*`,?u%a", "x'xw]BW7_=*`,?u%a", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("C.yWh8n\u000F 8p5mkNr", "C.yWh8n\u000F 8p5mkNr");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("C.yWh8n\u000F 8p5mkNr");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("C.yWh8n\u000F 8p5mkNr", "J");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      int int0 = 1;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 1, 1);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableListIterator0;
      HashMap<SQLTransactionRollbackException, ArrayList<SQLRecoverableException>> hashMap0 = new HashMap<SQLTransactionRollbackException, ArrayList<SQLRecoverableException>>();
      EntrySetMapIterator<SQLTransactionRollbackException, ArrayList<SQLRecoverableException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, ArrayList<SQLRecoverableException>>(hashMap0);
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>(entrySetMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.apply((Iterator<Locale.Category>) orderedMapIterator0, (Closure<? super Locale.Category>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Class to instantiate must not be null");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) null);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 45
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NOPClosure.nopClosure();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[4];
      clientInfoStatusArray0[0] = clientInfoStatus1;
      clientInfoStatusArray0[1] = clientInfoStatus2;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      clientInfoStatusArray0[3] = clientInfoStatus1;
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) resettableListIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".$NV", "");
      int[] intArray0 = new int[9];
      intArray0[0] = 2024;
      intArray0[1] = 2024;
      intArray0[2] = 2024;
      intArray0[3] = 2024;
      intArray0[4] = 2024;
      intArray0[5] = 2024;
      intArray0[6] = 2024;
      intArray0[7] = 2024;
      intArray0[8] = 2024;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLTransactionRollbackException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, true);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("Iterator must not be null");
      Predicate<BatchUpdateException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super BatchUpdateException, Boolean>) transformer0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) singletonIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Iterator must not be null' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a%U");
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Consumer<SQLTimeoutException> consumer0 = (Consumer<SQLTimeoutException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>((Integer) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      DataTruncation dataTruncation0 = new DataTruncation((-946), true, true, (-1325), (-457), sQLNonTransientException0);
      IteratorUtils.contains((Iterator<Integer>) singletonIterator0, (Object) null);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NullPredicate.nullPredicate();
      HashMap<Integer, SQLWarning> hashMap0 = new HashMap<Integer, SQLWarning>();
      EntrySetMapIterator<Integer, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLWarning>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLWarning>) entrySetMapIterator0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) entrySetMapIterator0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 7);
      entrySetMapIterator0.reset();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("x'xw]BW7_=*`,?u%a", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string1 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "[]", "[]", "[]");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[15];
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("V\"M+ak'8h AF(V:?", sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 1);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.getIterator((Object) null);
      MapIterator<DataTruncation, ServiceLoader<EnumSet>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      entrySetMapIterator0.toString();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.apply((Iterator<Locale.Category>) null, (Closure<? super Locale.Category>) closure0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[6];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) resettableListIterator0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2024;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".$NV", "Iterator must not be null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("MapIterator[]", intArray0, sQLTransactionRollbackException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("MapIterator[]");
      Predicate<BatchUpdateException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super BatchUpdateException, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'MapIterator[]' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.apply((Iterator<Locale.Category>) orderedMapIterator0, (Closure<? super Locale.Category>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Class to instantiate must not be null");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", (-457));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Class to instantiate must not be null", (String) null, (-1146), sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator(sQLNonTransientException0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.getIterator("rx)LT*oD2mT|#s");
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 9);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      Class<SQLFeatureNotSupportedException> class6 = SQLFeatureNotSupportedException.class;
      classArray0[6] = class6;
      Class<SQLFeatureNotSupportedException> class7 = SQLFeatureNotSupportedException.class;
      classArray0[7] = class7;
      Class<SQLFeatureNotSupportedException> class8 = SQLFeatureNotSupportedException.class;
      classArray0[8] = class8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(classArray0, (-1714));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause((Throwable) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator1, class0);
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer((-1290));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) listIterator0, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Stack<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      UniquePredicate<SQLWarning> uniquePredicate0 = new UniquePredicate<SQLWarning>();
      Integer integer0 = new Integer((-1290));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      TruePredicate.truePredicate();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      OrderedMapIterator<Integer, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLWarning> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLWarning>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Integer, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLWarning>(orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLWarning>) abstractOrderedMapIteratorDecorator0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) singletonIterator0);
      assertEquals("[-1290]", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Hashtable<Integer, SQLWarning> hashtable0 = new Hashtable<Integer, SQLWarning>();
      EntrySetMapIterator<Integer, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLWarning>(hashtable0);
      MapIterator<Integer, SQLWarning> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLWarning>) entrySetMapIterator0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) mapIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation((-1516), false, true, 455, (-1516));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(455, true, true, (-1516), 455, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-73), false, false, 455, 1, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(739, false, true, 1, (-457), dataTruncation0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(739, false, true, 739, 1159, dataTruncation0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(100, true, false, 0, 458);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(1, true, false, 1715, 458);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(0, true, false, 1159, 0);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(772, true, true, 0, 0);
      dataTruncationArray0[8] = dataTruncation8;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation4, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      iteratorArray0[1] = iterator0;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      iteratorArray0[2] = (Iterator<DataTruncation>) objectArrayIterator0;
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>((Predicate<? super SQLException>) null);
      Iterator<DataTruncation> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) nullIsFalsePredicate0);
      iteratorArray0[3] = iterator1;
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(iteratorArray0[2]);
      iteratorArray0[4] = (Iterator<DataTruncation>) listIteratorWrapper0;
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      iteratorArray0[5] = (Iterator<DataTruncation>) orderedMapIterator1;
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator(iteratorArray0[0], 3057L);
      iteratorArray0[6] = (Iterator<DataTruncation>) skippingIterator0;
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) skippingIterator0, 0L);
      iteratorArray0[7] = (Iterator<DataTruncation>) boundedIterator0;
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      UniquePredicate.uniquePredicate();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.apply((Iterator<Locale.Category>) orderedMapIterator0, (Closure<? super Locale.Category>) closure0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 10, sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "The predicate to call must not be null", (-4339), sQLRecoverableException0);
      Transformer<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> transformer0 = ClosureTransformer.closureTransformer((Closure<? super SQLFeatureNotSupportedException>) closure0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Transformer<Object, String> transformer1 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      ConstantTransformer.nullTransformer();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, 2105);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, class0);
      IteratorUtils.size(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Integer integer0 = new Integer((-1290));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TruePredicate.truePredicate();
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) resettableIterator0, (Transformer<? super BatchUpdateException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]", "]");
      sQLRecoverableException0.getStackTrace();
      arrayList0.add((Object) sQLRecoverableException0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NOPClosure.nopClosure();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate.comparatorPredicate((SQLException) sQLSyntaxErrorException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(list0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      int int0 = (-1290);
      Integer integer0 = new Integer((-1290));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      linkedList0.iterator();
      Class<String> class0 = String.class;
      InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 6);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends String>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator1;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      UniquePredicate.uniquePredicate();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.contains((Iterator<Integer>) null, (Object) orderedMapIterator0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) linkedList0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      abstractMapIteratorDecorator0.hasNext();
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator1 = linkedList0.iterator();
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(factory0);
      IteratorUtils.toString(iterator1, (Transformer<? super BatchUpdateException, String>) factoryTransformer0);
      IteratorUtils.isEmpty(zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) iterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapIterator<EnumSet<Locale.Category>, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.Category>>) null, (Iterator<? extends EnumSet<Locale.Category>>) mapIterator0, (Iterator<? extends EnumSet<Locale.Category>>) mapIterator0);
      MapIterator<SQLTransientConnectionException, Predicate<DataTruncation>> mapIterator1 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) mapIterator1, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>>(0);
      EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Properties>>(hashtable0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) entrySetMapIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      IteratorUtils.getIterator(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NOPClosure.nopClosure();
      UniquePredicate.uniquePredicate();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<SQLTransientConnectionException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-376), false, true, (-376), (-1568), (Throwable) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate.comparatorPredicate((SQLException) dataTruncation0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, dataTruncation0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLClientInfoException1, (Equator<Object>) defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      abstractMapIteratorDecorator0.hasNext();
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = linkedList0.iterator();
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(factory0);
      IteratorUtils.toString(iterator0, (Transformer<? super BatchUpdateException, String>) factoryTransformer0);
      IteratorUtils.isEmpty(zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>>();
      OrderedMapIterator<SQLFeatureNotSupportedException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(orderedMapIterator0);
      abstractMapIteratorDecorator0.hasNext();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NOPClosure.nopClosure();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MapIterator<SQLRecoverableException, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      MapIterator<SQLTransientConnectionException, StringTokenizer> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AbstractMapIteratorDecorator<SQLTransientConnectionException, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, StringTokenizer>(mapIterator1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("W,wT`@}(:(2ci&Z");
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) constantTransformer0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Consumer<SQLTimeoutException> consumer0 = (Consumer<SQLTimeoutException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, 2105);
      IteratorUtils.isEmpty(listIterator0);
      ListIterator<SQLException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) listIterator0);
      assertTrue(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator1);
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      hashtable0.putAll(hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashMap0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable1 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(31, true, true, 31, 31, sQLWarning0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Predicate<SQLWarning>[] predicateArray0 = (Predicate<SQLWarning>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<DataTruncation> onePredicate0 = new OnePredicate<DataTruncation>(predicateArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) onePredicate0);
      IteratorUtils.toArray(iterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      abstractMapIteratorDecorator0.hasNext();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator0);
      abstractMapIteratorDecorator0.hasNext();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5F7`|sGQL3_%J");
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) null);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, 1L);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) boundedIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("h*nci1&AM|Uz:U*P", "", (-1), sQLNonTransientConnectionException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException1);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException1;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) objectArrayIterator0;
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException1);
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) singletonListIterator0;
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) stack0);
      iteratorArray0[5] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Closure<Object>[]) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable1 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      hashtable0.putAll(hashtable1);
      FalsePredicate.falsePredicate();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) hashtable1);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) singletonListIterator0, (Predicate<? super Locale.Category>) predicate1);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = iterator0;
      Iterator<Locale.Category> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) singletonListIterator0, (Iterator<? extends Locale.Category>) iterator1);
      IteratorUtils.toList((Iterator<? extends Locale.Category>) iterator0, 100);
      IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      UniquePredicate.uniquePredicate();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size((Iterator<?>) null);
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends SQLTimeoutException>) orderedMapIterator0);
      MapIterator<EnumSet<Locale.Category>, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.Category>>) null, (Iterator<? extends EnumSet<Locale.Category>>) mapIterator0, (Iterator<? extends EnumSet<Locale.Category>>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      MapIterator<Predicate<SQLTransientConnectionException>, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      NotPredicate.notPredicate((Predicate<? super Integer>) notPredicate0);
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) notPredicate0);
      IteratorUtils.toList((Iterator<? extends Locale.Category>) resettableIterator0, 100);
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      String string1 = "";
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTransientExceptionArray0[0]);
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      String string2 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("");
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException1;
      SQLTransientException sQLTransientException1 = new SQLTransientException(", ", sQLTransientExceptionArray0[0]);
      sQLTransientExceptionArray0[3] = sQLTransientException1;
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0, 100, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer((-1290));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      TruePredicate.truePredicate();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      Consumer<SQLTimeoutException> consumer0 = (Consumer<SQLTimeoutException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable1 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("'vUb\u0005C1=", sQLWarning0);
      BiFunction<Object, Object, SQLNonTransientConnectionException> biFunction0 = (BiFunction<Object, Object, SQLNonTransientConnectionException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashtable1.compute(sQLFeatureNotSupportedException0, biFunction0);
      hashtable0.putAll(hashtable1);
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) entrySetMapIterator0, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) transformer0);
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(treeSet0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) listIterator1, (Iterator<? extends SQLTransientException>) listIterator1);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(arrayList0);
      // Undeclared exception!
      try { 
        loopingListIterator0.previousIndex();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      UniquePredicate.uniquePredicate();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      MapIterator<Predicate<SQLTransientConnectionException>, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      IteratorUtils.emptyOrderedIterator();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable1 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      hashtable1.putAll(hashMap0);
      HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashMap1 = new HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashMap1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) entrySetMapIterator0, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) transformer0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) entrySetMapIterator0, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      ResettableListIterator<Stack<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.contains(iterator0, (Object) predicate0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLWarning>) null, (long)  (-54));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      ResettableListIterator<Stack<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)111;
      byte byte0 = (byte) (-54);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.contains(iterator0, (Object) predicate0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("q~-6^", "]sJ'D[6x.nb.H");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MapIterator<Object, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mapIterator0;
      objectArray0[1] = (Object) mapIterator0;
      objectArray0[2] = (Object) mapIterator0;
      objectArray0[3] = (Object) mapIterator0;
      objectArray0[4] = (Object) mapIterator0;
      objectArray0[5] = (Object) mapIterator0;
      objectArray0[6] = (Object) mapIterator0;
      objectArray0[7] = (Object) mapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, 5, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashMap0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Locale.Category>) orderedMapIterator0, (Closure<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NOPClosure.nopClosure();
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/bjeBve;@(i<f:", "/bjeBve;@(i<f:", 0, (Throwable) null);
      vector0.add(sQLNonTransientConnectionException0);
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("@!KnXU8g-;,&5u%dZ@M");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable1 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      hashtable0.putAll(hashtable1);
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      ConstantTransformer.nullTransformer();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.size(iterator0);
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Y=g!/Mjz>", "", (-1), sQLWarning0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0, (Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable2 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(2720, 1122.2056F);
      assertTrue(hashtable2.equals((Object)hashtable1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Predicate<SQLWarning> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.getIterator(predicate0);
      Stack<Integer>[] stackArray0 = (Stack<Integer>[]) Array.newInstance(Stack.class, 9);
      Stack<Integer> stack0 = new Stack<Integer>();
      stackArray0[0] = stack0;
      Stack<Integer> stack1 = new Stack<Integer>();
      stackArray0[1] = stack1;
      Stack<Integer> stack2 = new Stack<Integer>();
      stackArray0[2] = stack2;
      Stack<Integer> stack3 = new Stack<Integer>();
      stackArray0[3] = stack3;
      Stack<Integer> stack4 = new Stack<Integer>();
      stackArray0[4] = stack4;
      Stack<Integer> stack5 = new Stack<Integer>();
      stackArray0[5] = stack5;
      Stack<Integer> stack6 = new Stack<Integer>();
      stackArray0[6] = stack6;
      Stack<Integer> stack7 = new Stack<Integer>();
      stackArray0[7] = stack7;
      Stack<Integer> stack8 = new Stack<Integer>();
      stackArray0[8] = stack8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stackArray0, (-750), (-750));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable1 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("N06N<(*3<X/ HotF", "N06N<(*3<X/ HotF", sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      hashtable0.put(sQLFeatureNotSupportedException0, sQLNonTransientConnectionException0);
      hashtable0.putAll(hashtable1);
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) entrySetMapIterator0, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) transformer0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) iterator0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(arrayList0);
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends SQLTimeoutException>) orderedMapIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, closure0);
      IteratorUtils.apply((Iterator<Locale.Category>) orderedMapIterator1, (Closure<? super Locale.Category>) forClosure0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException("lH[=@5hq=D^N,7\"z7", "N06N<(*3<X/ HotF");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("", sQLWarning0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "6 NS", sQLWarning0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.TransformedPredicate", "");
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLNonTransientException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLNonTransientException) sQLFeatureNotSupportedException1, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      hashtable0.putAll(hashtable0);
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?3");
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      Predicate<Locale.Category> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Locale.Category, Boolean>) constantTransformer0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) predicate0);
      OrderedMapIterator<Locale.Category, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      OrderedMapIterator<Locale.Category, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<Locale.Category, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, SQLInvalidAuthorizationSpecException>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) mapIterator0, (-1325));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("n@t)9:*MH2DqPo/xu", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", sQLSyntaxErrorException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationExceptionArray0[0]);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Transformer must not be null", sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.isEmpty(objectArrayIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException2);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException1);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) singletonListIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Vector<Properties> vector0 = new Vector<Properties>();
      vector0.removeAll(treeSet0);
      treeSet0.containsAll(vector0);
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) treeSet0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      ListIterator<StringTokenizer> listIterator1 = IteratorUtils.singletonListIterator((StringTokenizer) null);
      OrderedMapIterator<Locale.Category, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) orderedMapIterator0, (Iterator<? extends Locale.Category>) orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) singletonListIterator0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[2] = predicate2;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator1, defaultEquator0);
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(vector0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[5] = (Predicate<Object>) comparatorPredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicate1);
      predicateArray0[6] = (Predicate<Object>) identityPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nonePredicate0);
      IteratorUtils.find((Iterator<Locale.Category>) zippingIterator0, (Predicate<? super Locale.Category>) nullIsExceptionPredicate0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      UniquePredicate.uniquePredicate();
      MapIterator<Predicate<SQLTransientConnectionException>, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.Category, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.apply((Iterator<Locale.Category>) orderedMapIterator1, (Closure<? super Locale.Category>) closure0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("r7AZAQy5L", "r7AZAQy5L", 1159);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Iterator<Class<SQLFeatureNotSupportedException>> iterator0 = null;
      NOPClosure.nopClosure();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Iterator<Integer> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) null, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Predicate<SQLWarning> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.getIterator(predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      Node node1 = iIOMetadataNode0.removeChild(node0);
      IteratorUtils.nodeListIterator(node1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      hashtable0.putAll(hashtable0);
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NOPClosure.nopClosure();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      MapIterator<Predicate<SQLTransientConnectionException>, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, (Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.loopingListIterator(list0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Predicate<SQLWarning> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.getIterator(predicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      hashtable0.putAll(hashtable0);
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?3");
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLNonTransientConnectionException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      UniquePredicate.uniquePredicate();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IteratorUtils.apply((Iterator<Class<SQLFeatureNotSupportedException>>) null, (Closure<? super Class<SQLFeatureNotSupportedException>>) chainedClosure0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("%Z", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("null values not allowed", sQLTransientException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsTruePredicate0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransientConnectionException, ServiceLoader<Properties>>(0);
      EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, ServiceLoader<Properties>>(hashtable0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) entrySetMapIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 0, 107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte) (-27);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OrderedMapIterator<Properties, Closure<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, Closure<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, Closure<Object>>(orderedMapIterator0);
      OrderedMapIterator<Properties, Closure<Object>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends Closure<Object>>) abstractOrderedMapIteratorDecorator0);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) orderedMapIterator1, (Iterator<? extends Properties>) orderedMapIterator1);
      Iterator<Properties> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator1, 3186L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator1);
      abstractMapIteratorDecorator0.hasNext();
      abstractMapIteratorDecorator0.hasNext();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator1);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      IteratorUtils.emptyListIterator();
      HashMap<Object, IIOMetadataNode> hashMap0 = new HashMap<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashMap0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category1;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) locale_Category0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      Predicate<Locale.Category> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Locale.Category, Boolean>) transformer0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Predicate<? super Locale.Category>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) iterator0, (-822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TruePredicate.truePredicate();
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) mapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 385);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category2;
      locale_CategoryArray0[5] = locale_Category0;
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, true);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, class0);
      assertEquals(1, sQLIntegrityConstraintViolationExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator1);
      abstractMapIteratorDecorator0.hasNext();
      abstractMapIteratorDecorator0.hasNext();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category1;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category1;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) resettableListIterator0, 107);
      assertTrue(list0.contains(locale_Category1));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("remove() can not be called before calling next()");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("remove() can not be called before calling next()", "remove() can not be called before calling next()", 1, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>> hashMap0 = new HashMap<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>>();
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>((-589));
      EntrySetMapIterator<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("delimiter may not be null", "");
      sQLNonTransientConnectionException0.printStackTrace();
      batchUpdateException0.setNextException(sQLNonTransientConnectionException0);
      IteratorUtils.singletonListIterator(batchUpdateException0);
      MapIterator<SQLTransientException, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 3877);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("n@t)9:*MH2DqPo/xu", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Transformer must not be null", sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.isEmpty(objectArrayIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      predicateArray0[3] = predicate2;
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicateArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable1 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("N06N<(*3<X/ HotF", "N06N<(*3<X/ HotF", sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      hashtable0.put(sQLFeatureNotSupportedException0, sQLNonTransientConnectionException0);
      hashtable0.putAll(hashtable1);
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) entrySetMapIterator0, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) transformer0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) iterator0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(arrayList0);
      // Undeclared exception!
      try { 
        loopingListIterator0.previousIndex();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) resettableListIterator0, (-822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      hashtable0.putAll(hashtable0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      vector0.add(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> hashtable1 = new Hashtable<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>();
      hashtable1.putAll(hashtable0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      treeSet0.clone();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) treeSet0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonListIterator(locale_Category0);
      FalsePredicate.falsePredicate();
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList1 = new ArrayList<SQLInvalidAuthorizationSpecException>(122);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer(2);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("pZmw", "!qzq?[|", (Throwable) null);
      IteratorUtils.contains((Iterator<Integer>) singletonListIterator0, (Object) sQLIntegrityConstraintViolationException0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Vector<Stack<SQLNonTransientConnectionException>> vector0 = new Vector<Stack<SQLNonTransientConnectionException>>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) sQLRecoverableException0);
      java.util.function.Predicate<Object> predicate1 = predicate0.negate();
      java.util.function.Predicate<Object> predicate2 = predicate1.and(predicate0);
      vector0.removeIf(predicate2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.trimToSize();
      ResettableIterator<Stack<SQLNonTransientConnectionException>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Stack<SQLNonTransientConnectionException>>) vector0);
      IteratorUtils.unmodifiableIterator((Iterator<Stack<SQLNonTransientConnectionException>>) resettableIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("q^'^-j6la", sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("q^'^-j6la", "q^'^-j6la", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (int) 0, (-3314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("[");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NullPredicate.nullPredicate();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Hashtable<Integer, SQLDataException> hashtable0 = new Hashtable<Integer, SQLDataException>();
      EntrySetMapIterator<Integer, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLDataException>(hashtable0);
      int int0 = 337;
      Integer integer0 = new Integer(337);
      SQLTransientException sQLTransientException0 = new SQLTransientException("[$ &uC");
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLTransientException0);
      hashtable0.put(integer0, sQLDataException0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) entrySetMapIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) stack0);
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) iterator0, class0);
      StringTokenizer stringTokenizer0 = null;
      try {
        stringTokenizer0 = new StringTokenizer((String) null, "[", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      Consumer<SQLTimeoutException> consumer0 = (Consumer<SQLTimeoutException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeSet0.forEach(consumer0);
      treeSet0.clone();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) treeSet0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("FOA", "GuNENTl", (-3679));
      sQLNonTransientConnectionException0.getLocalizedMessage();
      vector0.add(sQLNonTransientConnectionException0);
      vector0.add(sQLNonTransientConnectionException0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "<#P";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("<#P");
      iIOMetadataNode0.getAttributeNode("<#P");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator1);
      abstractMapIteratorDecorator0.hasNext();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator1);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) null);
      Iterator<String> iterator1 = IteratorUtils.objectGraphIterator("ExceptionTransformer invoked", (Transformer<? super String, ? extends String>) transformer0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) iterator1, 0L);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      HashMap<SQLTransientConnectionException, SQLClientInfoException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLClientInfoException>();
      Hashtable<Object, SQLClientInfoException> hashtable0 = new Hashtable<Object, SQLClientInfoException>(hashMap0);
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashtable0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException1, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) iterator1, (Iterator<? extends SQLClientInfoException>) iterator1, (Iterator<? extends SQLClientInfoException>) iterator1);
      OrderedMapIterator<Class<SQLInvalidAuthorizationSpecException>, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Class<SQLInvalidAuthorizationSpecException>, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Class<SQLInvalidAuthorizationSpecException>, Object>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("n@t)9:*MH2DqPo/xu", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Transformer must not be null", sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.isEmpty(objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException1, 815, 815);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      int int0 = (-4339);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) listIterator0, (-4339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[2] = predicate0;
      nullIsTruePredicate0.evaluate(predicateArray0[0]);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      closureArray0[1] = (Closure<Object>) switchClosure0;
      SwitchClosure<Object> switchClosure1 = new SwitchClosure<Object>(predicateArray0, closureArray0, closureArray0[1]);
      closureArray0[2] = (Closure<Object>) switchClosure1;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IteratorUtils.apply((Iterator<Class<SQLFeatureNotSupportedException>>) null, (Closure<? super Class<SQLFeatureNotSupportedException>>) chainedClosure0);
      MapIterator<Predicate<SQLTransientConnectionException>, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, (Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      String string0 = "@>[PH$t\"c7RU+";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("@>[PH$t\"c7RU+", map1);
      Transformer<Object, SQLClientInfoException>[] transformerArray0 = (Transformer<Object, SQLClientInfoException>[]) Array.newInstance(Transformer.class, 7);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<Object, SQLClientInfoException>("", classArray0, closureArray0);
      SwitchTransformer<Object, SQLClientInfoException> switchTransformer0 = new SwitchTransformer<Object, SQLClientInfoException>(predicateArray0, transformerArray0, invokerTransformer0);
      transformerArray0[0] = (Transformer<Object, SQLClientInfoException>) switchTransformer0;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class5, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Iterator<TreeSet<String>> iterator0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<TreeSet<String>>) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1816), false, false, (-1816), (-1816));
      MockPrintStream mockPrintStream0 = new MockPrintStream("1tG");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.commons.collections4.IteratorUtils", "", "", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      dataTruncation0.setStackTrace(stackTraceElementArray0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) dataTruncation0;
      locale0.getScript();
      objectArray0[1] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "1tG", objectArray0);
      dataTruncation0.printStackTrace(printStream0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>> hashMap0 = new HashMap<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>((-589));
      hashMap0.putIfAbsent(sQLNonTransientConnectionException0, arrayDeque0);
      EntrySetMapIterator<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, ArrayDeque<SQLFeatureNotSupportedException>>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 4;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, (String) null, batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", (String) null);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", "&e");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1178);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 3970;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 3970);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "#cR#2L :|sJ.A2+0];$";
      IteratorUtils.getIterator("#cR#2L :|sJ.A2+0];$");
      int int0 = (-890);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "#cR#2L :|sJ.A2+0];$", (-890));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MapIterator<String, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(linkedHashSet0);
      loopingIterator0.hasNext();
      // Undeclared exception!
      try { 
        loopingIterator0.forEachRemaining((Consumer<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 3358, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = (-2124);
      intArray0[2] = 700;
      intArray0[3] = 1423;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "toIndex = ", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("toIndex = ", (String) null, (-3760), intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      long[] longArray0 = new long[2];
      longArray0[0] = (-127L);
      longArray0[1] = 0L;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "", 111, longArray0, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1423, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OrderedMapIterator<Locale.Category, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, SQLClientInfoException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("org.apache.commons.collections4.functors.StringValueTransformer", classArray0, classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate1);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) nullIsTruePredicate0, 1535, 1535);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (Throwable) null);
      int int0 = (-1106);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, (-1106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(mapIterator1);
      abstractMapIteratorDecorator0.hasNext();
      abstractMapIteratorDecorator0.hasNext();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator1);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      HashMap<Object, IIOMetadataNode> hashMap0 = new HashMap<Object, IIOMetadataNode>();
      Transformer<Object, IIOMetadataNode> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashMap0);
      IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Transformer<? super Locale.Category, ? extends IIOMetadataNode>) transformer0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      int int0 = 0;
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      DataTruncation dataTruncation0 = new DataTruncation(1346, true, true, 2925, 326);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(dataTruncation0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("Node must not be null", classArray0, predicateArray0);
      Transformer<Object, Integer> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends Integer>) invokerTransformer0, (Transformer<? super Object, ? extends Integer>) invokerTransformer0);
      IfTransformer<Object, Integer> ifTransformer0 = new IfTransformer<Object, Integer>(predicateArray0[1], transformer0, invokerTransformer0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) ifTransformer0, (Predicate<? super Object>) predicateArray0[1]);
      predicateArray0[2] = predicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 453, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
