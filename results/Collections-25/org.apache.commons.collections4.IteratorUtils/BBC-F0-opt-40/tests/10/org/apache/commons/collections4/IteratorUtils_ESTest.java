/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:02:49 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) objectArrayIterator0, (Iterator<? extends InstanceofPredicate>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must invoke setComparator() to set a comparator first.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 5);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) singletonIterator0, (Transformer<? super Properties, String>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.EqualPredicate");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.EqualPredicate", "hI\"[{r N7BtS", (-2050));
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "Enumeration must not be null", sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("org.apache.commons.collections4.functors.EqualPredicate", (Class<?>[]) null, sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<ArrayDeque>>) iterator0, (Transformer<? super ArrayList<ArrayDeque>, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.EqualPredicate' on 'class java.util.Locale$Category' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) orderedIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("_[r", classArray0, classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      Closure<Object> closure0 = WhileClosure.whileClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) transformerClosure0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientConnectionException>) resettableIterator0, (Closure<? super SQLTransientConnectionException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '_[r' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      ListIterator<LinkedList<BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator(linkedList1);
      IteratorUtils.get((Iterator<LinkedList<BatchUpdateException>>) listIterator0, 0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("Transformer must return an instanceof Boolean, it was a null object", "", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("ListIterator must not be null", "");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("ListIterator must not be null", "Transformer must return an instanceof Boolean, it was a null object", false);
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("ListIterator must not be null", "Y>r|C^+>L");
      stringTokenizerArray0[3] = stringTokenizer3;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 0, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) null);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = NotPredicate.notPredicate((Predicate<? super Object>) notPredicate0);
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = TruePredicate.truePredicate();
      predicateArray0[4] = predicate4;
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate5 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[5] = predicate5;
      Predicate<Object> predicate6 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[6] = predicate6;
      Predicate<Object> predicate7 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate7);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "zxlJ~m5WN ", sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null, "", 0, sQLTimeoutException2);
      sQLTimeoutException3.getLocalizedMessage();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator0);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) listIterator0, (Closure<? super SQLTimeoutException>) closure0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[6];
      SQLWarning sQLWarning0 = new SQLWarning("", sQLTimeoutException0);
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning((String) null, "", sQLTimeoutException1);
      sQLWarningArray0[1] = sQLWarning1;
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 1361);
      dataTruncation0.getNextWarning();
      sQLWarningArray0[2] = null;
      SQLWarning sQLWarning2 = new SQLWarning();
      sQLWarningArray0[3] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning(sQLTimeoutException3);
      sQLWarningArray0[4] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning("delimiter may not be null", "zxlJ~m5WN ", 1361);
      sQLWarningArray0[5] = sQLWarning4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, (-42));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MapIterator<Integer, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) mapIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      SingletonIterator<LinkedList<BatchUpdateException>> singletonIterator0 = new SingletonIterator<LinkedList<BatchUpdateException>>(linkedList0);
      MapIterator<SQLTimeoutException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLWarning>(mapIterator0);
      NOPClosure.nopClosure();
      LinkedList<BatchUpdateException> linkedList1 = IteratorUtils.get((Iterator<LinkedList<BatchUpdateException>>) singletonIterator0, 0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, (Class<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ListIterator<LinkedList<BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator(linkedList0);
      IteratorUtils.get((Iterator<LinkedList<BatchUpdateException>>) listIterator0, 0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[2];
      SQLException sQLException0 = new SQLException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning("[ R'5", sQLTransactionRollbackException0);
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("", "[ R'5", 0, sQLWarning0);
      sQLWarningArray0[1] = sQLWarning1;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsExceptionPredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate1 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate1;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Load factor must be greater than 0", sQLException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransactionRollbackException1);
      predicateArray0[2] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) null);
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = EqualPredicate.equalPredicate((Object) predicate2);
      predicateArray0[5] = predicate3;
      Predicate<SQLException> predicate4 = OnePredicate.onePredicate((Predicate<? super SQLException>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate4);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLNonTransientException, Vector<LinkedList>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientException>) orderedMapIterator0, (Closure<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((PriorityQueue<Object>[]) null, 2229, 2229);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) arrayList0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) resettableListIterator1);
      Vector<LinkedList<Class<SQLTransactionRollbackException>>> vector0 = new Vector<LinkedList<Class<SQLTransactionRollbackException>>>();
      ReverseListIterator<LinkedList<Class<SQLTransactionRollbackException>>> reverseListIterator0 = new ReverseListIterator<LinkedList<Class<SQLTransactionRollbackException>>>(vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<Class<SQLTransactionRollbackException>>>) reverseListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLWarning0);
      arrayList0.add(sQLFeatureNotSupportedException0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(resettableListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MapIterator<ArrayList<SQLException>, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) mapIterator0, (Predicate<? super ArrayList<SQLException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) linkedList0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) resettableListIterator0;
      objectArray0[2] = (Object) resettableListIterator0;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) resettableListIterator0;
      objectArray0[5] = (Object) resettableListIterator0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      int int0 = IteratorUtils.size(objectArrayListIterator0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      SingletonIterator<LinkedList<BatchUpdateException>> singletonIterator0 = new SingletonIterator<LinkedList<BatchUpdateException>>(linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.iterators.PeekingIterator");
      SingletonIterator<IIOMetadataNode> singletonIterator1 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 3);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("org.apache.commons.collections4.iterators.PeekingIterator", classArray0, classArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(anyPredicate0, anyPredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) andPredicate0);
      AndPredicate.andPredicate((Predicate<? super Iterator<IIOMetadataNode>>) andPredicate0, (Predicate<? super Iterator<IIOMetadataNode>>) andPredicate0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) invokerTransformer0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) singletonIterator1, (Predicate<? super IIOMetadataNode>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.iterators.PeekingIterator' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      EmptyOrderedIterator.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedIterator<ArrayList<SQLException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) orderedIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) orderedIterator1, (Predicate<? super SQLTransientException>) predicate1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "d2+a";
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      int int0 = (-1874);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("d2+a", "Array class must not be null", (-1874), hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, (-1874));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("O", "O", (Map<String, ClientInfoStatus>) null, sQLRecoverableException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[3] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicateArray0[3], (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure1, true);
      Integer integer0 = new Integer((-3603));
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      closureArray0[0] = closure1;
      closureArray0[1] = (Closure<Object>) whileClosure0;
      closureArray0[2] = (Closure<Object>) whileClosure0;
      SwitchClosure<Locale.LanguageRange> switchClosure0 = new SwitchClosure<Locale.LanguageRange>(predicateArray0, closureArray0, closure1);
      WhileClosure<Object> whileClosure1 = new WhileClosure<Object>(predicate0, whileClosure0, true);
      IfClosure.ifClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) whileClosure1, (Closure<? super Object>) closureArray0[2]);
      Iterator<Locale.LanguageRange> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<Locale.LanguageRange> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.LanguageRange>) iterator0, (Iterator<? extends Locale.LanguageRange>) iterator0);
      IteratorUtils.apply((Iterator<Locale.LanguageRange>) zippingIterator0, (Closure<? super Locale.LanguageRange>) closure0);
      assertFalse(closure0.equals((Object)closure1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      EmptyOrderedIterator.emptyOrderedIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) linkedList0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", (-1), (Throwable) null);
      linkedList0.add(sQLFeatureNotSupportedException0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.add(instanceofPredicate0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("O", "O", (Map<String, ClientInfoStatus>) null, sQLRecoverableException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 16;
      longArray0[1] = (long) 16;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~GC7 ", "/e4\"[*%dG#", 16, longArray0, sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.functors.IdentityPredicate", (Map<String, ClientInfoStatus>) null, batchUpdateException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, 1302L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      onePredicate0.getPredicates();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) null, (Predicate<? super SQLTransientException>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ArrayList<SQLException>[] arrayListArray0 = (ArrayList<SQLException>[]) Array.newInstance(ArrayList.class, 5);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLException> arrayList2 = new ArrayList<SQLException>();
      arrayListArray0[2] = arrayList2;
      ArrayList<SQLException> arrayList3 = new ArrayList<SQLException>();
      arrayListArray0[3] = arrayList3;
      ArrayList<SQLException> arrayList4 = new ArrayList<SQLException>();
      arrayListArray0[4] = arrayList4;
      ObjectArrayIterator<ArrayList<SQLException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayList<SQLException>>(arrayListArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) arrayList1);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) objectArrayIterator0, (Predicate<? super ArrayList<SQLException>>) predicate1);
      IteratorUtils.emptyListIterator();
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) orderedIterator0, (Predicate<? super SQLTransientException>) predicate0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1463, 1463);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      IteratorUtils.toArray(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Closure must not be null", "gz%Ia|A 9[eY>)W7a", (-43));
      arrayList0.add(sQLFeatureNotSupportedException0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINA;
      locale0.getUnicodeLocaleAttributes();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLDataException sQLDataException0 = new SQLDataException("0`9?|", "0`9?|", 1882);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<IIOMetadataNode> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      PriorityQueue<Locale.LanguageRange> priorityQueue0 = new PriorityQueue<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(priorityQueue0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&YE7?{U/^", "b1DxBGI^+", (Throwable) null);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("F$P[%4@I", "", (Throwable) null);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "");
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("(8$7", "a89TKfd?ro<*", 5);
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException(sQLTimeoutException3);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException3;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) objectArrayListIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0, (Iterator<? extends SQLTimeoutException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Closure must not be null", "gz%Ia|A 9[eY>)W7a", (-43));
      arrayList0.add(sQLFeatureNotSupportedException0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(list0);
      Enumeration<String> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends String>) reverseListIterator0);
      assertNotNull(enumeration1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Closure<Object>>[] iteratorArray0 = (Iterator<Closure<Object>>[]) Array.newInstance(Iterator.class, 7);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ResettableIterator<Closure<Object>> resettableIterator0 = IteratorUtils.singletonIterator(closure0);
      iteratorArray0[0] = (Iterator<Closure<Object>>) resettableIterator0;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[1] = predicate1;
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iteratorArray0[0], comparator0, comparatorPredicate_Criterion0);
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Iterator<Closure<Object>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Closure<Object>>) iteratorArray0[0], (Predicate<? super Closure<Object>>) anyPredicate0);
      iteratorArray0[1] = iterator0;
      ListIterator<Closure<Object>> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[2] = (Iterator<Closure<Object>>) listIterator0;
      OrderedMapIterator<Closure<Object>, ArrayDeque<Transformer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[3] = (Iterator<Closure<Object>>) orderedMapIterator0;
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      LoopingIterator<Closure<Object>> loopingIterator0 = new LoopingIterator<Closure<Object>>(arrayDeque0);
      iteratorArray0[4] = (Iterator<Closure<Object>>) loopingIterator0;
      Iterator<Closure<Object>> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Closure<Object>>) null, (Iterator<? extends Closure<Object>>) iteratorArray0[2], (Iterator<? extends Closure<Object>>) iteratorArray0[3]);
      iteratorArray0[5] = iterator1;
      ZippingIterator<Closure<Object>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Closure<Object>>) iterator0, (Iterator<? extends Closure<Object>>) iteratorArray0[0], (Iterator<? extends Closure<Object>>) iterator0);
      iteratorArray0[6] = (Iterator<Closure<Object>>) zippingIterator0;
      Iterator<Closure<Object>> iterator2 = IteratorUtils.collatedIterator((Comparator<? super Closure<Object>>) comparator0, (Iterator<? extends Closure<Object>>[]) iteratorArray0);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) null, (Predicate<? super ArrayList<SQLException>>) predicate1);
      IteratorUtils.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) orderedIterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Iterator<LinkedList<BatchUpdateException>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedList<BatchUpdateException>>) null, 1966);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedIterator<ArrayList<SQLException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) orderedIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayListIterator<BatchUpdateException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<BatchUpdateException>(resettableListIterator0, (-1056), (-1056));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ArrayList<SQLException>[] arrayListArray0 = (ArrayList<SQLException>[]) Array.newInstance(ArrayList.class, 5);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLException> arrayList2 = new ArrayList<SQLException>();
      arrayListArray0[0] = arrayList2;
      ArrayList<SQLException> arrayList3 = new ArrayList<SQLException>();
      arrayListArray0[3] = arrayList3;
      ArrayList<SQLException> arrayList4 = new ArrayList<SQLException>();
      arrayListArray0[4] = arrayList4;
      ObjectArrayIterator<ArrayList<SQLException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayList<SQLException>>(arrayListArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) arrayList1);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) objectArrayIterator0, (Predicate<? super ArrayList<SQLException>>) predicate1);
      IteratorUtils.emptyListIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) predicate0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Predicate<IIOMetadataNode> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      int int0 = 1;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category1;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category1;
      locale_CategoryArray0[5] = locale_Category0;
      IteratorUtils.arrayIterator(locale_CategoryArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 10);
      String string0 = "i:m!;]B Cr+";
      int int0 = 1309;
      SQLException sQLException0 = new SQLException("i:m!;]B Cr+");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("i:m!;]B Cr+", "The prototype must be cloneable via a public clone method", 1309, sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("i:m!;]B Cr+", "i:m!;]B Cr+", sQLTimeoutException0);
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) listIterator0);
      Iterator<InstanceofPredicate> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      InvokerTransformer.invokerTransformer("]Z+Si");
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]Z+Si", "]Z+Si", (Throwable) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("\"TL{y6HAqnx#i)*", "hph.;VUr3k", 573, sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("\"TL{y6HAqnx#i)*", ")z6dfJ3To>}w&c8G'", 1220);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("hph.;VUr3k", "hph.;VUr3k", (-1));
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 5, (-1972));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Predicate<IIOMetadataNode> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      SingletonIterator<LinkedList<BatchUpdateException>> singletonIterator0 = new SingletonIterator<LinkedList<BatchUpdateException>>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedList<BatchUpdateException>>) singletonIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Predicate<IIOMetadataNode> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      Properties properties0 = new Properties();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedIterator<ArrayList<SQLException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) orderedIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      IteratorUtils.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      EmptyOrderedIterator.emptyOrderedIterator();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("TVT<({JeV?v}~d;#~");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>(433);
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("TVT<({JeV?v}~d;#~");
      linkedHashSet0.add(iIOMetadataNode0);
      Transformer<IIOMetadataNode, String> transformer0 = MapTransformer.mapTransformer((Map<? super IIOMetadataNode, ? extends String>) hashtable0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator1, (Transformer<? super IIOMetadataNode, String>) transformer0, "TVT<({JeV?v}~d;#~", "TVT<({JeV?v}~d;#~", "|30a!x-vbM/'(]");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) mapIterator0, (Iterator<?>) mapIterator0);
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      IteratorUtils.size((Iterator<?>) null);
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<Boolean, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Boolean, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, DataTruncation>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<InstanceofPredicate, Iterator<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      OrPredicate<SQLClientInfoException> orPredicate0 = new OrPredicate<SQLClientInfoException>(predicate1, predicate0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) orPredicate0);
      IteratorUtils.size(mapIterator0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate1);
      ResettableListIterator<SQLDataException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator1, (Iterator<? extends SQLDataException>) resettableListIterator1);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) loopingListIterator0, (Iterator<? extends DataTruncation>) loopingListIterator0, (Iterator<? extends DataTruncation>) loopingListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) zippingIterator0, 125);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) zippingIterator0);
      IteratorUtils.emptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<Properties, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, Object>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      HashMap<DataTruncation, SQLNonTransientException> hashMap0 = new HashMap<DataTruncation, SQLNonTransientException>();
      DataTruncation dataTruncation0 = new DataTruncation((-63), true, true, (-63), (-213));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      hashMap0.put(dataTruncation0, sQLNonTransientException0);
      EntrySetMapIterator<DataTruncation, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLNonTransientException>(hashMap0);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) entrySetMapIterator0, 1286);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) entrySetMapIterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      InvokerTransformer.invokerTransformer("mDSi");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 1);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Object[] objectArray0 = new Object[7];
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) locale_Category0, comparator0);
      Object object0 = IteratorUtils.find((Iterator<Object>) resettableIterator1, (Predicate<? super Object>) predicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      InvokerTransformer.invokerTransformer("]Z+Si");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category0;
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("j", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]Z+Si");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Transformer collection must not be null", "Transformer collection must not be null", sQLTransientConnectionException0);
      String string1 = "org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator";
      InvokerTransformer.invokerTransformer("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Integer integer0 = new Integer((-1200));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = new Integer((-1200));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayList0.removeAll(arrayDeque0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("E|p gq`Uig0@!");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("E|p gq`Uig0@!");
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("E|p gq`Uig0@!");
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, (-3172));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.getIterator(resettableIterator0);
      ResettableIterator<Locale.Category> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) resettableIterator1);
      Integer integer0 = new Integer((-632));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) singletonListIterator0, 2064L, 2064L);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" m~>9");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(" m~>9");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("Entry does not exist: ");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("Iterator must not be null");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode(" m~>9");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("n^}~*-rM`IEi_");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, (-632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?Suw(gWi_X>J");
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 4);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("?Suw(gWi_X>J", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer1, "?Suw(gWi_X>J", (String) null, "CUg0e`_@(+YIQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MapIterator<InstanceofPredicate, Iterator<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0);
      ZippingIterator<InstanceofPredicate> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) zippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) zippingIterator1);
      IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>(vector0);
      linkedHashSet0.add((InstanceofPredicate) null);
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      OrderedMapIterator<SQLTimeoutException, Iterator<SQLTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, Iterator<SQLTransientConnectionException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, Iterator<SQLTransientConnectionException>>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) mapIterator1, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MapIterator<InstanceofPredicate, Iterator<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0);
      ZippingIterator<InstanceofPredicate> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) zippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) zippingIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation0 = new DataTruncation((-284), true, true, (-284), (-1177));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-284), true, false, (-284), 1164, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      InvokerTransformer.invokerTransformer("mDSi");
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>(linkedHashSet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) iterator0, (Predicate<? super SQLTransientException>) predicate0);
      OrderedMapIterator<String, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedMapIterator0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(752);
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) priorityQueue0);
      IteratorUtils.size(iterator1);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category0;
      IteratorUtils.emptyListIterator();
      IteratorUtils.toArray(iterator0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>(linkedHashSet0);
      linkedHashSet0.add((InstanceofPredicate) null);
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("The type to check instanceof must not be null");
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) constantTransformer0, "LqfztpM", "]Z+Si", "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = Locale.forLanguageTag("iterator");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ResettableIterator<String> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends String>) set0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MapIterator<InstanceofPredicate, Iterator<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0);
      ZippingIterator<InstanceofPredicate> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) zippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) zippingIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringTokenizer stringTokenizer0 = new StringTokenizer("C=2m|", "C=2m|", false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?Suw(gWi_X>J");
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("?Suw(gWi_X>J");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer1, "Gw(/!gwBJT&`{@", ".;9TOWl", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "transformer may not be null";
      stringArray0[1] = "org.apache.commons.collections4.TransformerUtils";
      stringArray0[2] = "u_ua<WB{+5kl";
      stringArray0[3] = "_7";
      stringArray0[4] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) resettableListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Factory<Locale.Category> factory0 = ConstantFactory.constantFactory(locale_Category0);
      Transformer<Object, Locale.Category> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Locale.Category>) factory0);
      SwitchTransformer<Object, Locale.Category> switchTransformer0 = new SwitchTransformer<Object, Locale.Category>(predicateArray0, (Transformer<? super Object, ? extends Locale.Category>[]) null, transformer0);
      IfTransformer<Object, Locale.Category> ifTransformer0 = new IfTransformer<Object, Locale.Category>(predicate0, switchTransformer0, transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(ifTransformer0, predicate0);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) transformedPredicate0);
      predicateArray0[1] = predicate1;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[2] = (Predicate<Object>) nullIsTruePredicate0;
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[4] = predicate2;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[5] = predicate3;
      Predicate<String> predicate4 = AnyPredicate.anyPredicate((Predicate<? super String>[]) predicateArray0);
      IteratorUtils.find(iterator0, (Predicate<? super String>) predicate4);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      InvokerTransformer.invokerTransformer("mDSi");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category0;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 1);
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mapIterator0;
      objectArray0[1] = (Object) iterable0;
      objectArray0[2] = (Object) locale_Category1;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) locale_Category1;
      objectArray0[5] = (Object) locale_Category0;
      objectArray0[6] = (Object) enumeration0;
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) locale_Category0, comparator0);
      Object object0 = IteratorUtils.find((Iterator<Object>) resettableIterator1, (Predicate<? super Object>) predicate0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Integer integer0 = new Integer((-1200));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = new Integer((-1200));
      arrayList0.add(integer1);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayList0.removeAll(arrayDeque0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer2 = new Integer(100);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",JT1gxp(V7NM5lPZU\"", (String) null);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(",JT1gxp(V7NM5lPZU\"");
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "", "WJvk d5", "9cn^Du&y");
      assertEquals("WJvk d59cn^Du&y", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category0;
      IteratorUtils.emptyListIterator();
      IteratorUtils.toArray(iterator0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>(linkedHashSet0);
      linkedHashSet0.add((InstanceofPredicate) null);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Iterator<SQLTransientException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) mapIterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray(iterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.emptyMapIterator();
      Stack<Integer>[] stackArray0 = (Stack<Integer>[]) Array.newInstance(Stack.class, 4);
      Stack<Integer> stack0 = new Stack<Integer>();
      stackArray0[0] = stack0;
      EmptyMapIterator.emptyMapIterator();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterator1);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 1, sQLTimeoutException0);
      Factory<SQLRecoverableException> factory0 = ConstantFactory.constantFactory(sQLRecoverableException0);
      Transformer<Object, SQLRecoverableException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLRecoverableException>) factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) singletonIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLRecoverableException>) transformer0);
      Predicate<Object>[] predicateArray0 = null;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super Object>[]) null, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) notPredicate0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<Object, BatchUpdateException> ifTransformer0 = new IfTransformer<Object, BatchUpdateException>(predicate1, transformer0, transformer0);
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      int int0 = 2761;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 2761);
      Transformer<Object, SQLRecoverableException> transformer1 = ConstantTransformer.constantTransformer(sQLRecoverableException0);
      IfTransformer.ifTransformer((Predicate<? super SQLRecoverableException>) predicate2, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer1);
      IteratorUtils.transformedIterator((Iterator<? extends Predicate<Object>>) resettableListIterator0, (Transformer<? super Predicate<Object>, ? extends BatchUpdateException>) ifTransformer0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicate2, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category0;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 1);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      ArrayList<SQLNonTransientException>[] arrayListArray0 = (ArrayList<SQLNonTransientException>[]) Array.newInstance(ArrayList.class, 3);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLNonTransientException> arrayList1 = new ArrayList<SQLNonTransientException>();
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLNonTransientException> arrayList2 = new ArrayList<SQLNonTransientException>();
      arrayListArray0[2] = arrayList2;
      ObjectArrayIterator<ArrayList<SQLNonTransientException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayList<SQLNonTransientException>>(arrayListArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("){2@X7#tgB/{~G");
      IteratorUtils.toString((Iterator<ArrayList<SQLNonTransientException>>) objectArrayIterator0, (Transformer<? super ArrayList<SQLNonTransientException>, String>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("4rlc90-p6JN{sO&X ", "$9yk1mi");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      onePredicate0.getPredicates();
      onePredicate0.evaluate(listIterator0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) onePredicate0);
      IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?Suw(gWi_X>J");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      InvokerTransformer.invokerTransformer("r");
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.toArray(iterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("r", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer(9);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayDeque0.poll();
      arrayList0.removeAll(arrayDeque0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer1 = new Integer(100);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) listIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("j", "&kFz4W[x");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "L}T3", sQLTransientConnectionException0);
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "", 125, sQLTransientConnectionException0);
      IteratorUtils.getIterator(sQLRecoverableException0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      ResettableIterator<PriorityQueue<SQLClientInfoException>> resettableIterator0 = IteratorUtils.singletonIterator(priorityQueue0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Integer integer0 = new Integer((-1200));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = new Integer((-1200));
      arrayList0.add(integer1);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayList0.removeAll(arrayDeque0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer2 = new Integer(100);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",JT1gxp(V7NM5lPZU\"", (String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.IteratorUtils", "2r?/tCpjWSV;MU", sQLTransientConnectionException0);
      InvokerTransformer.invokerTransformer("");
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator("Lw");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      InvokerTransformer.invokerTransformer("]Z+Si");
      IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      onePredicate0.getPredicates();
      onePredicate0.evaluate(listIterator0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) onePredicate0);
      IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?Suw(gWi_X>J");
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 4050;
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableListIterator0);
      iteratorArray0[0] = iterator0;
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 4050);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) reverseListIterator0);
      iteratorArray0[1] = (Iterator<DataTruncation>) zippingIterator0;
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation> iterator1 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) zippingIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      iteratorArray0[2] = iterator1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+8JS", "", 4050);
      DataTruncation dataTruncation0 = new DataTruncation(1073741824, false, false, 4050, 4050, sQLNonTransientException0);
      Transformer<SQLWarning, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<DataTruncation> iterator2 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      iteratorArray0[3] = iterator2;
      ZippingIterator<DataTruncation> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLWarning>) zippingIterator1, 1073741824);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      onePredicate0.getPredicates();
      onePredicate0.evaluate(listIterator0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) onePredicate0);
      IteratorUtils.emptyMapIterator();
      String string0 = "?Suw(gWi_X>J";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?Suw(gWi_X>J");
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("dyeIZ.bt#s.=", "dyeIZ.bt#s.=", sQLFeatureNotSupportedException0);
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, 1665L, 1665L);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) boundedIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      InvokerTransformer.invokerTransformer("]Z+Si");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category0;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 1);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      NotNullPredicate.notNullPredicate();
      Integer integer0 = new Integer(2);
      int int0 = (-2268);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, (-2268), (-2268));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer1 = new Integer(125);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      ArrayList<StringTokenizer> arrayList1 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("i:^XeKcP(", "ConstantTransformer", true);
      stringTokenizer0.nextElement();
      HashMap<DataTruncation, SQLNonTransientException> hashMap0 = new HashMap<DataTruncation, SQLNonTransientException>();
      EntrySetMapIterator<DataTruncation, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLNonTransientException>(hashMap0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) entrySetMapIterator0, 125);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) list0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      OrderedMapIterator<SQLNonTransientConnectionException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<Vector<SQLException>, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableIterator0, class0);
      Stack<Properties> stack0 = new Stack<Properties>();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Properties>) stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) listIterator0);
      IteratorUtils.getIterator(resettableIterator1);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayList0.removeAll(arrayDeque0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer1 = new Integer(125);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "&kFz4W[x");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Lw", "org.apache.commons.collections4.functors.ExceptionFactory", sQLTransientConnectionException0);
      InvokerTransformer.invokerTransformer("");
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Predicate<IIOMetadataNode> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      ArrayIterator<SQLWarning> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLWarning>((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer((-63));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = new Integer((-1557));
      arrayList0.add(integer1);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer2 = new Integer((-63));
      Integer integer3 = new Integer(0);
      loopingListIterator0.add(integer3);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((Throwable) null);
      ArrayList<StringTokenizer> arrayList1 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("ConstantTransformer", "<~[80)*?3%LE8e_O", false);
      arrayList1.add(stringTokenizer0);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      IteratorUtils.loopingListIterator((List<StringTokenizer>) stack0);
      ExceptionFactory.exceptionFactory();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstantiateFactory<SQLInvalidAuthorizationSpecException> instantiateFactory0 = new InstantiateFactory<SQLInvalidAuthorizationSpecException>(class0);
      FactoryTransformer.factoryTransformer((Factory<? extends SQLInvalidAuthorizationSpecException>) instantiateFactory0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<Object> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.toArray((Iterator<?>) listIterator1);
      HashMap<SQLTransactionRollbackException, DataTruncation> hashMap0 = new HashMap<SQLTransactionRollbackException, DataTruncation>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EntrySetMapIterator<SQLTransactionRollbackException, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, DataTruncation>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) entrySetMapIterator0, 125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 125
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("wH)>Y$SyU\"q_", "", sQLNonTransientConnectionException0);
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      InvokerTransformer.invokerTransformer("r");
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      InvokerTransformer.invokerTransformer(";mDS_");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      int int0 = 1;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      IteratorUtils.arrayIterator(locale_CategoryArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLWarning[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      int int0 = (-1754);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, (-1754));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLException sQLException0 = new SQLException(")", ")");
      SQLDataException sQLDataException0 = new SQLDataException("Collection must not be null", ")", sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1i?{E<{~?", sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      MapIterator<Locale.Category, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Locale.Category, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.Category, IIOMetadataNode>(mapIterator0);
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) abstractMapIteratorDecorator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("wH)>C$fvyHUh_", "", sQLNonTransientConnectionException0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = null;
      OrderedMapIterator<SQLNonTransientConnectionException, SQLClientInfoException> orderedMapIterator0 = null;
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLClientInfoException>((OrderedMapIterator<SQLNonTransientConnectionException, SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray(iterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.emptyMapIterator();
      Stack<Integer> stack0 = new Stack<Integer>();
      EmptyMapIterator.emptyMapIterator();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator1);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      EmptyListIterator.resettableEmptyListIterator();
      OrderedMapIterator<LinkedList<BatchUpdateException>, Predicate<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<LinkedList<BatchUpdateException>, Predicate<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<LinkedList<BatchUpdateException>, Predicate<Object>>(orderedMapIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Integer integer0 = new Integer((-63));
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList1.add(integer0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList1);
      Integer integer1 = new Integer(125);
      Integer integer2 = new Integer((-63));
      loopingListIterator0.add(integer2);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      ArrayList<StringTokenizer> arrayList2 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("prefix may not be null", "QSl~NTq/NZG", false);
      stringTokenizer0.nextElement();
      arrayList0.add(stringTokenizer0);
      IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList2);
      Enumeration<DataTruncation> enumeration0 = null;
      HashMap<DataTruncation, SQLNonTransientException> hashMap0 = new HashMap<DataTruncation, SQLNonTransientException>();
      EntrySetMapIterator<DataTruncation, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLNonTransientException>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) entrySetMapIterator0, (-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MapIterator<InstanceofPredicate, Iterator<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0);
      ZippingIterator<InstanceofPredicate> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) zippingIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) zippingIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      try { 
        iIOMetadataNode0.isDefaultNamespace("C=2m|");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Hashtable<Object, SQLTransientConnectionException> hashtable0 = new Hashtable<Object, SQLTransientConnectionException>();
      Transformer<Object, SQLTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransientConnectionException>) hashtable0);
      IfTransformer<Object, SQLTransientConnectionException> ifTransformer0 = new IfTransformer<Object, SQLTransientConnectionException>((Predicate<? super Object>) null, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, ? extends SQLTransientConnectionException>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("wH)>C$fvyHUh_", "", sQLNonTransientConnectionException0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      IteratorUtils.isEmpty(iterator0);
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>((Locale.Category[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      NullPredicate.nullPredicate();
      ResettableListIterator<ArrayList<SQLException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ArrayList<SQLException>>) resettableListIterator0, (-1015L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "Closure must not be null";
      String string1 = "";
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      IteratorUtils.toList((Iterator<? extends Locale.Category>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      InvokerTransformer.invokerTransformer("]Z+Si");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category0;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 1);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<ArrayDeque<SQLInvalidAuthorizationSpecException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      onePredicate0.getPredicates();
      onePredicate0.evaluate(listIterator0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) onePredicate0);
      IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?Suw(gWi_X>J");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("r");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, (String) null, "", "r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      IteratorUtils.toList((Iterator<? extends Locale.Category>) objectArrayIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("3v.?%98 r7k|#0c");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 3, sQLNonTransientException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTimeoutException0, true);
      Properties properties0 = new Properties();
      IteratorUtils.contains((Iterator<SQLException>) singletonIterator0, (Object) properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) null, (-1L), (-1642L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[");
      IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>((Locale.Category[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)29;
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)8;
      byte byte1 = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byte byte2 = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayList0.retainAll(arrayDeque0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer1 = new Integer(125);
      loopingListIterator0.add(integer1);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 8);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      String string0 = "Jg@3$o;Q_&";
      InvokerTransformer.invokerTransformer("Jg@3$o;Q_&");
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (-227L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("wH)>C$fvyHUh_", "", sQLNonTransientConnectionException0);
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      InvokerTransformer.invokerTransformer("r");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, (-4094));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer1 = new Integer(125);
      loopingListIterator0.add(integer1);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((Throwable) null);
      ArrayList<StringTokenizer> arrayList1 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("ConstantTransformer", "ConstantTransformer", true);
      arrayList1.add(stringTokenizer0);
      IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList1);
      HashMap<DataTruncation, SQLNonTransientException> hashMap0 = new HashMap<DataTruncation, SQLNonTransientException>();
      EntrySetMapIterator<DataTruncation, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLNonTransientException>(hashMap0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) entrySetMapIterator0, 125);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray(iterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.emptyMapIterator();
      Stack<Integer>[] stackArray0 = (Stack<Integer>[]) Array.newInstance(Stack.class, 4);
      Stack<Integer> stack0 = new Stack<Integer>();
      stackArray0[0] = stack0;
      Stack<Integer> stack1 = new Stack<Integer>();
      stackArray0[1] = stack1;
      Stack<Integer> stack2 = new Stack<Integer>();
      stackArray0[2] = stack2;
      Stack<Integer> stack3 = new Stack<Integer>();
      stackArray0[3] = stack3;
      ResettableIterator<Stack<Integer>> resettableIterator0 = IteratorUtils.arrayIterator(stackArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, LinkedList<ClientInfoStatus>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(comparator0, "transformer must not be null.");
      hashMap0.getOrDefault((Object) null, "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", "transformer must not be null.", 3130);
      sQLIntegrityConstraintViolationException0.setNextException(sQLSyntaxErrorException0);
      hashMap0.putIfAbsent("transformer must not be null.", "PsvDXEnj4uapXD");
      OrderedMapIterator<InstanceofPredicate, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<InstanceofPredicate, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<InstanceofPredicate, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      MapIterator<InstanceofPredicate, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends InstanceofPredicate, ? extends SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<InstanceofPredicate>) mapIterator0, (Transformer<? super InstanceofPredicate, String>) ifTransformer0, "BnpB}PG", "wo", "transformer must not be null.");
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLIntegrityConstraintViolationException0);
      arrayList0.add(sQLNonTransientConnectionException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = arrayList0.listIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) instanceofPredicate0);
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<?>) listIterator1, (Predicate<? super Object>) predicate1);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedIterator<ArrayList<SQLException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) orderedIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      assertTrue(boolean0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[/p:9EosZstA,NB~UU", "[/p:9EosZstA,NB~UU", (-4599));
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("r");
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "", "[/p:9EosZstA,NB~UU", "");
      assertEquals("[/p:9EosZstA,NB~UUr", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("~){", ",V~9R5$", true);
      arrayList0.add(stringTokenizer0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      InstantiateFactory<SQLInvalidAuthorizationSpecException> instantiateFactory0 = new InstantiateFactory<SQLInvalidAuthorizationSpecException>(class1);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLInvalidAuthorizationSpecException>) instantiateFactory0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "Closure must not be null";
      IteratorUtils.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("~){", ",V~9R5$", false);
      arrayList0.add(stringTokenizer0);
      IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      IteratorUtils.skippingIterator((Iterator<SQLWarning>) resettableListIterator0, 2659L);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      IteratorUtils.singletonIterator(clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((TreeSet<DataTruncation>[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Integer integer0 = new Integer(883);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Integer>(orderedMapIterator0);
      MapIterator<SQLFeatureNotSupportedException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Integer>) abstractMapIteratorDecorator0);
      MapIterator<SQLFeatureNotSupportedException, Integer> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator2, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[3];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0, (-2860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<ArrayList<String>, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<ArrayList<String>>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.emptyIterator();
      int int0 = 1906;
      Integer integer0 = new Integer(1906);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      singletonListIterator0.reset();
      IteratorUtils.contains((Iterator<Integer>) singletonListIterator0, (Object) integer0);
      singletonListIterator0.set(integer0);
      singletonListIterator0.reset();
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) singletonListIterator0, 1906, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException("S:zFjv)@*L%~e)");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Predicate must not be null", sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Predicate must not be null", "Predicate must not be null", 128, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException1;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PriorityQueue<SQLRecoverableException>[] priorityQueueArray0 = (PriorityQueue<SQLRecoverableException>[]) Array.newInstance(PriorityQueue.class, 8);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[0] = priorityQueue0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLRecoverableException> priorityQueue1 = new PriorityQueue<SQLRecoverableException>(comparator0);
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLRecoverableException> priorityQueue2 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLRecoverableException> priorityQueue3 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLRecoverableException> priorityQueue4 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<SQLRecoverableException> priorityQueue5 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<SQLRecoverableException> priorityQueue6 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[6] = priorityQueue6;
      PriorityQueue<SQLRecoverableException> priorityQueue7 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[7] = priorityQueue7;
      ResettableIterator<PriorityQueue<SQLRecoverableException>> resettableIterator0 = IteratorUtils.arrayIterator(priorityQueueArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      OrderedMapIterator<String, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<String, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLSyntaxErrorException>) orderedMapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends String>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) mapIterator0, (Transformer<? super Object, ? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLTransactionRollbackException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<SQLNonTransientException>[] iteratorArray0 = (Iterator<SQLNonTransientException>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<SQLNonTransientException, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientException, SQLTransientConnectionException>(mapIterator0);
      iteratorArray0[0] = (Iterator<SQLNonTransientException>) abstractMapIteratorDecorator0;
      abstractMapIteratorDecorator0.hasNext();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vK'H6B@tGG?>de4", "vK'H6B@tGG?>de4", (-832));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) sQLSyntaxErrorException0);
      iteratorArray0[1] = (Iterator<SQLNonTransientException>) resettableIterator0;
      ResettableIterator<SQLNonTransientException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[2] = (Iterator<SQLNonTransientException>) resettableIterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      IteratorUtils.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[]", "KoA~qD_ka\u0004.Y|S V}", (-1), hashtable0, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLNonTransientConnectionException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) listIterator0);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?Suw(gWi_X>J");
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedIterator<ArrayList<SQLException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) orderedIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      IteratorUtils.isEmpty(orderedIterator0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0, 2880);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Predicate<Class<Iterator<IIOMetadataNode>>> predicate0 = FalsePredicate.falsePredicate();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      String string0 = "delimiter may not be null";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "]Kx6|Rg'", hashtable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Closure must not be null", "]Kx6|Rg'", sQLClientInfoException0);
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLSyntaxErrorException0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>((Predicate<? super SQLException>) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) singletonListIterator0, (Predicate<? super SQLException>) notPredicate0);
      IteratorUtils.emptyOrderedIterator();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      IteratorUtils.toList((Iterator<? extends Locale.Category>) objectArrayIterator0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<String> class0 = String.class;
      IteratorUtils.objectGraphIterator(class0, (Transformer<? super Class<String>, ? extends Class<String>>) null);
      OrderedMapIterator<SQLTimeoutException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedHashSet<Transformer<Object, String>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, String>>();
      Transformer<String, String> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super String, ? extends String>>) linkedHashSet0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("sQPI>M%[AQ}Lf*", (Transformer<? super String, ? extends String>) transformer0);
      linkedHashSet0.contains("sQPI>M%[AQ}Lf*");
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) iterator0, class0);
      IteratorUtils.emptyIterator();
      String string0 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (-1));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLTimeoutException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true, "sQPI>M%[AQ}Lf*");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // sQPI>M%[AQ}Lf*
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("n|{Ia|", "n|{Ia|");
      sQLDataException0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayList0.retainAll(arrayDeque0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer1 = new Integer(125);
      loopingListIterator0.add(integer1);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) loopingListIterator0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 8);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      Class<SQLInvalidAuthorizationSpecException> class6 = SQLInvalidAuthorizationSpecException.class;
      classArray0[6] = class6;
      Class<SQLInvalidAuthorizationSpecException> class7 = SQLInvalidAuthorizationSpecException.class;
      classArray0[7] = class7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(classArray0, (-3502), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("wH)>C$fvyHUh_", "", sQLNonTransientConnectionException0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("r");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "", "r", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'r' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      IteratorUtils.singletonListIterator(sQLRecoverableException0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-1219), 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", ",V~9R5$", false);
      arrayList0.add(stringTokenizer0);
      IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      onePredicate0.getPredicates();
      onePredicate0.evaluate(listIterator0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) onePredicate0);
      MapIterator<SQLClientInfoException, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) mapIterator0, class0);
      int int0 = (-2239);
      ArrayListIterator<String> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<String>(class0, (-2239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      String string0 = "i:m!;]B Cr+";
      SQLException sQLException0 = new SQLException("i:m!;]B Cr+");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("i:m!;]B Cr+", "The prototype must be cloneable via a public clone method", 1309, sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("i:m!;]B Cr+", "i:m!;]B Cr+", sQLTimeoutException0);
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      iteratorArray0[0] = iterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("i:m!;]B Cr+", "");
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException1;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 1309, 1309);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
