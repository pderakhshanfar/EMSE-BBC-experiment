/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:49:30 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Hashtable<EnumSet<Locale.FilteringMode>, SQLException> hashtable0 = new Hashtable<EnumSet<Locale.FilteringMode>, SQLException>();
      EntrySetMapIterator<EnumSet<Locale.FilteringMode>, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<EnumSet<Locale.FilteringMode>, SQLException>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) entrySetMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, ClientInfoStatus> invokerTransformer0 = new InvokerTransformer<Object, ClientInfoStatus>("zTT]n,wgdPwxp\"", classArray0, classArray0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'zTT]n,wgdPwxp\"' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[2];
      intArray0[0] = 2209;
      intArray0[1] = 2209;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 2209, intArray0);
      ChainedTransformer<BatchUpdateException> chainedTransformer0 = new ChainedTransformer<BatchUpdateException>((Transformer<? super BatchUpdateException, ? extends BatchUpdateException>[]) null);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) chainedTransformer0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      Transformer<SQLException, BatchUpdateException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, (Transformer<? super SQLNonTransientConnectionException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("H", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(":U~R?");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", "");
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException((String) null);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 2);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) orPredicate0);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) closure0, true);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(uniquePredicate0, closure1);
      closureArray0[0] = (Closure<Object>) ifClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, chainedClosure0, true);
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) whileClosure0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) closure2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(list0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingListIterator0, 212);
      IteratorUtils.getIterator(singletonIterator0);
      SQLDataException sQLDataException0 = new SQLDataException(", ");
      sQLDataException0.initCause((Throwable) null);
      IteratorUtils.singletonListIterator(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      OrderedMapIterator<SQLDataException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLTransientException>(orderedMapIterator0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MapIterator<SQLRecoverableException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) mapIterator0, (Closure<? super SQLRecoverableException>) closure0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(26, true, true, 31, 31, sQLTransientException1);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0, 31);
      IteratorUtils.size(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(linkedHashSet0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      IteratorUtils.arrayListIterator(propertiesArray0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) vector0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, BatchUpdateException>) orderedMapIterator0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) zippingIterator0;
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) arrayList0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) reverseListIterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(arrayList0);
      iteratorArray0[4] = (Iterator<SQLTransactionRollbackException>) loopingListIterator0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      iteratorArray0[5] = (Iterator<SQLTransactionRollbackException>) resettableListIterator1;
      OrderedMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[7] = (Iterator<SQLTransactionRollbackException>) resettableIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Object object0 = new Object();
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.matchesAll((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) predicate0);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableListIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) list0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null, true);
      ConstantTransformer<SQLInvalidAuthorizationSpecException, String> constantTransformer0 = new ConstantTransformer<SQLInvalidAuthorizationSpecException, String>("}{mxy.Ii>)As\"X-");
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Object object0 = new Object();
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      Closure<SQLException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLException>>) arrayList0);
      Closure<SQLException> closure1 = WhileClosure.whileClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, false);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, closure1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLDataException sQLDataException0 = new SQLDataException("", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("TcJW;<(*c2D(", "TcJW;<(*c2D(", sQLDataException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException1);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) resettableIterator0, (Closure<? super SQLRecoverableException>) closure1);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Closure<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends Closure<Object>>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("D?'slPSrU^");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) orderedIterator0;
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[0]);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null, "getValue() can only be called after next() and before remove()", "getValue() can only be called after next() and before remove()", "getValue() can only be called after next() and before remove()");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, 193);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 192
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      Transformer<SQLNonTransientException, EnumSet<ClientInfoStatus>> transformer0 = InvokerTransformer.invokerTransformer("OC", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, ? extends EnumSet<ClientInfoStatus>>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = null;
      IteratorUtils.singletonIterator((SQLException) null);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLInvalidAuthorizationSpecException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) list0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, 193);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(stack0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Transformer<SQLNonTransientException, EnumSet<ClientInfoStatus>> transformer0 = InvokerTransformer.invokerTransformer("OC", (Class<?>[]) null, (Object[]) null);
      Iterator<EnumSet<ClientInfoStatus>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) loopingIterator0, (Transformer<? super SQLNonTransientException, ? extends EnumSet<ClientInfoStatus>>) transformer0);
      IteratorUtils.peekingIterator((Iterator<? extends EnumSet<ClientInfoStatus>>) iterator0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      Object object0 = new Object();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) properties0);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      IteratorUtils.matchesAll(iterator1, (Predicate<? super Properties>) predicate1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("@su(", "%&");
      EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      OrderedMapIterator<Closure<Object>, ArrayDeque<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Closure<Object>, ArrayDeque<SQLIntegrityConstraintViolationException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Closure<Object>, ArrayDeque<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      ListIterator<Closure<Object>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Closure<Object>>) abstractMapIteratorDecorator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      intArray0[1] = 16;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Collection must not be null", (String) null, 16, intArray0, (Throwable) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (String) null, 1, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("Collection must not be null", "", 4730, intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~\"qJIH'8u", "B,^)M@4=aCj<7Y0Oj", 16);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException((String) null, intArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("B,^)M@4=aCj<7Y0Oj", intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) objectArrayListIterator0);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(list0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("K&x,./h", "XjTSl");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("K&x,./h", "K&x,./h", hashtable0, sQLTransactionRollbackException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException0);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("K&x,./h", (Class<?>[]) null, (Object[]) null);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'K&x,./h' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "", "");
      ResettableListIterator<PriorityQueue<StringTokenizer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<PriorityQueue<StringTokenizer>>) resettableListIterator0, (Predicate<? super PriorityQueue<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1817);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.iterators.AbstractEmptyIterator";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 8);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) loopingListIterator0;
      IIOMetadataNode[] iIOMetadataNodeArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Collection must not be null");
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      IdentityPredicate.identityPredicate((Object) sQLDataException0);
      IteratorUtils.emptyListIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Collection must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "iterator");
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      singletonIterator0.reset();
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "Closure must not be null", "iterator", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) linkedList0);
      String string0 = "";
      String string1 = "$V";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "$V");
      linkedList0.add(sQLNonTransientConnectionException0);
      linkedList0.spliterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionException0.setNextException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 542L, 1L);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) stack0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ConstantTransformer");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("ConstantTransformer", "]QIB{=7", (-1307));
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("]QIB{=7");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("]QIB{=7", "WXh*^)q!HEVCH", (-1307));
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.IteratorUtils", (String) null, 2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("", "WXh*^)q!HEVCH", 1, sQLException0);
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "WXh*^)q!HEVCH", sQLIntegrityConstraintViolationException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException((String) null, "", sQLTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 2);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0;
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) listIterator0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Properties properties0 = new Properties();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils", "DE|@HV8Qn/u.kncTa", (-291));
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Transformer<SQLNonTransientException, EnumSet<ClientInfoStatus>> transformer0 = InvokerTransformer.invokerTransformer("DE|@HV8Qn/u.kncTa", (Class<?>[]) null, (Object[]) null);
      Iterator<EnumSet<ClientInfoStatus>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) singletonListIterator0, (Transformer<? super SQLNonTransientException, ? extends EnumSet<ClientInfoStatus>>) transformer0);
      IteratorUtils.peekingIterator((Iterator<? extends EnumSet<ClientInfoStatus>>) iterator0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      LinkedList<SQLFeatureNotSupportedException> linkedList1 = new LinkedList<SQLFeatureNotSupportedException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.IteratorUtils");
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) orderedIterator0, class0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ServiceLoader<BatchUpdateException>[]) null, (-291));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Predicate<StringTokenizer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) vector0);
      int[] intArray0 = new int[16];
      intArray0[0] = (-1652);
      intArray0[1] = 534;
      intArray0[2] = (-3468);
      intArray0[3] = (-3389);
      int int0 = (-3627);
      intArray0[5] = (-974);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Properties properties0 = new Properties();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1652)).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) properties0, comparator0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      int int1 = (-1);
      DataTruncation dataTruncation0 = new DataTruncation((-974), true, false, (-1), (-1806));
      SingletonIterator<DataTruncation> singletonIterator1 = new SingletonIterator<DataTruncation>(dataTruncation0);
      iteratorArray0[0] = (Iterator<DataTruncation>) singletonIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) vector0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1652);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Enumeration must not be null", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Properties properties0 = new Properties();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(linkedList0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) reverseListIterator0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find(iterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Enumeration must not be null");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", batchUpdateException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, (-1652));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) resettableListIterator0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) zippingIterator0);
      OrderedMapIterator<Integer, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      String string0 = "delimiter may not be null";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("delimiter may not be null", "delimiter may not be null");
      IteratorUtils.contains((Iterator<Integer>) mapIterator0, (Object) sQLTransientConnectionException0);
      String string1 = "2]?iws*dp}Mzw";
      int int0 = 10;
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "2]?iws*dp}Mzw");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 2]?iws*dp}Mzw
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = AllPredicate.allPredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) null, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      int int0 = 0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = AllPredicate.allPredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) orderedIterator0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) listIterator0, class0);
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) priorityQueue0);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      IteratorUtils.singletonListIterator(linkedList0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) "+Zx'Yug#e)g'];G%");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("FilterListIterator.add(Object) is not supported.", classArray0, predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'FilterListIterator.add(Object) is not supported.' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      SingletonIterator<HashSet<SQLTransientConnectionException>> singletonIterator0 = new SingletonIterator<HashSet<SQLTransientConnectionException>>(hashSet0, false);
      IteratorUtils.contains((Iterator<HashSet<SQLTransientConnectionException>>) singletonIterator0, (Object) hashSet0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) vector0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1652);
      intArray0[1] = 534;
      intArray0[2] = (-3468);
      intArray0[3] = (-3389);
      intArray0[4] = (-3627);
      intArray0[5] = (-974);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Properties properties0 = new Properties();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) properties0, comparator0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("]/IEEbULj78PY", "r}r{@lpG2D~T5$i ", 8, sQLWarning0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("vlVLUU^KM<?");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "l}T>Ue[N:[cJ=EWo");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null, "V2`KdXr", 8);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("([s,<fzb.B", "}QqCmV:ju17XC", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("", "", sQLIntegrityConstraintViolationException6);
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 8, (-1875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Collection must not be null");
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLDataException0);
      ResettableListIterator<PriorityQueue<StringTokenizer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.find((Iterator<PriorityQueue<StringTokenizer>>) resettableListIterator0, (Predicate<? super PriorityQueue<StringTokenizer>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0, (Iterator<?>) orderedMapIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) vector0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      LinkedList<SQLFeatureNotSupportedException> linkedList1 = new LinkedList<SQLFeatureNotSupportedException>();
      LinkedList<SQLFeatureNotSupportedException> linkedList2 = new LinkedList<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((LinkedList<SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      ExceptionFactory.exceptionFactory();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0, 1603);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) list0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "Entry does not exist: ";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Entry does not exist: ", "delimiter may not be null", (-67));
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) singletonListIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("delimiter may not be null");
      ArrayIterator<Predicate<Object>> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Predicate<Object>>(sQLInvalidAuthorizationSpecException0, (-67), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      String string0 = "Transformer must not be null";
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Transformer must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      EmptyListIterator.emptyListIterator();
      ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = AllPredicate.allPredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`FHv(+D.QM*'i-Iqg-d");
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) orderedIterator0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) listIterator0, class0);
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) priorityQueue0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[8];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ClientInfoStatus clientInfoStatus6 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[6] = clientInfoStatus6;
      ClientInfoStatus clientInfoStatus7 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[7] = clientInfoStatus7;
      IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0, 5);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0, (Iterator<?>) orderedMapIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      Factory<StringTokenizer> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends StringTokenizer>) factory0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null, (Collection<? super SQLRecoverableException>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>(comparator0);
      SingletonListIterator<PriorityQueue<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<StringTokenizer>>(priorityQueue0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLWarning sQLWarning0 = new SQLWarning("", "Closure must not be null", mockThrowable0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLWarning0);
      IteratorUtils.find((Iterator<PriorityQueue<StringTokenizer>>) singletonListIterator0, (Predicate<? super PriorityQueue<StringTokenizer>>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("LX!<^,?#", "", 27, sQLWarning0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "Closure must not be null", 652, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("Array class must not be null", "", 1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("List must not be null");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("Closure must not be null");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("NodeList must not be null", "-/gV4Yt,_KWDnMzT|", 10, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, ":qQ{Orc`_T`q!q:", "LX!<^,?#", "");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.InstantiateFactory", "org.apache.commons.collections4.functors.InstantiateFactory");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.InstantiateFactory");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode1);
      Node node1 = iIOMetadataNode0.replaceChild(node0, node0);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node1);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, DataTruncation>(orderedMapIterator0);
      MapIterator<SQLDataException, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, DataTruncation>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLDataException, DataTruncation> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, DataTruncation>(mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) abstractMapIteratorDecorator0);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.matchesAll((Iterator<Properties>) singletonListIterator0, (Predicate<? super Properties>) predicate0);
      LinkedHashSet<SQLTransactionRollbackException>[] linkedHashSetArray0 = (LinkedHashSet<SQLTransactionRollbackException>[]) Array.newInstance(LinkedHashSet.class, 4);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet1 = new LinkedHashSet<SQLTransactionRollbackException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet2 = new LinkedHashSet<SQLTransactionRollbackException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      SQLTransientException sQLTransientException0 = new SQLTransientException("ee0EOpa {(7CVU>");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "ee0EOpa {(7CVU>", 1952, sQLTransientException0);
      linkedHashSet1.add(sQLTransactionRollbackException0);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet3 = new LinkedHashSet<SQLTransactionRollbackException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      IteratorUtils.arrayIterator(linkedHashSetArray0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) hashSet0);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends BatchUpdateException>) orderedMapIterator0);
      UniquePredicate.uniquePredicate();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure.chainedClosure((Closure<? super SQLException>[]) closureArray0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.emptyOrderedIterator();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) singletonIterator0, class0);
      Integer integer0 = new Integer((-1534));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) listIterator0);
      OrderedIterator<HashSet<SQLTransientConnectionException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<SQLTransientConnectionException>>) orderedIterator0, (Object) orderedMapIterator1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.PrototypeFactory", "org.apache.commons.collections4.functors.PrototypeFactory");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.isEmpty(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0, (Iterator<?>) orderedMapIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      String string0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      SQLDataException sQLDataException0 = new SQLDataException("Closure must not be null", "1V=[Hcpqy23|7`gFx;R", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      SQLDataException sQLDataException0 = new SQLDataException("");
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) listIterator0);
      IteratorUtils.isEmpty(listIterator0);
      int int0 = 52;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0, 52, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 8);
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(", ", ", ");
      ConstantFactory.constantFactory(sQLNonTransientConnectionException0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>(0);
      Predicate<SQLException> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) linkedHashSet0);
      predicateArray0[2] = predicate1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicateArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0, (Iterator<?>) orderedMapIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) vector0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) properties0);
      IteratorUtils.matchesAll((Iterator<Properties>) singletonListIterator0, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0, (Iterator<?>) orderedMapIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) vector0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      SingletonIterator<ArrayDeque<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLNonTransientConnectionException>>(arrayDeque0);
      IteratorUtils.contains((Iterator<ArrayDeque<SQLNonTransientConnectionException>>) singletonIterator0, (Object) enumeration0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L.jo+");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "|", sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Transformer must not be null", sQLTransactionRollbackException1);
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "|", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      String string0 = "";
      String string1 = "";
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) orderedIterator0, (-3198L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Collection must not be null", sQLIntegrityConstraintViolationException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLIntegrityConstraintViolationException1, defaultEquator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicateArray0[1]);
      predicateArray0[2] = predicate1;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[3] = (Predicate<Object>) nullIsFalsePredicate0;
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[4] = (Predicate<Object>) instanceofPredicate0;
      AllPredicate.allPredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      Predicate<StringTokenizer> predicate2 = NotNullPredicate.notNullPredicate();
      nullIsFalsePredicate0.evaluate(predicate2);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, 967);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("0S");
      iIOMetadataNode0.getElementsByTagName("0S");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(967);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3464);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1474);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2350);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-3097));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(12);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[5]);
      integerArray0[8] = integer8;
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.toString((Iterator<Integer>) resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) listIterator0, (-238L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = null;
      iIOMetadataNode0.getAttributeNodeNS("H.+_UVHjvt5`p", "r!DPD9td-p");
      iIOMetadataNode0.getAttributeNode((String) null);
      DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("r!DPD9td-p", "", (-2073));
      IteratorUtils.getIterator(sQLDataException0);
      IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) resettableListIterator0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      SingletonListIterator<PriorityQueue<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<StringTokenizer>>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<DataTruncation>[]) null, 967, 967);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Transformer must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "Transformer must not be null", "Transformer must not be null");
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) orderedIterator0, class0);
      Integer integer0 = new Integer(2121);
      ListIterator<Integer> listIterator1 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) listIterator1);
      OrderedIterator<HashSet<SQLTransientConnectionException>> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<SQLTransientConnectionException>>) orderedIterator1, (Object) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"92em/T", "org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", (-474));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "|", 4511, (int[]) null, sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("i.)#>Fb=k}", "Predicate must not be null", (-474), batchUpdateException0);
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      transformerArray0[0] = (Transformer<Object, String>) constantTransformer0;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, constantTransformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Closure must not be null", "org.apache.commons.collections4.functors.ComparatorPredicate$Criterion");
      ConstantTransformer.constantTransformer(sQLNonTransientConnectionException0);
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[3] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[4] = (SQLException) sQLNonTransientConnectionException0;
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException0;
      IteratorUtils.arrayIterator(sQLExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Transformer must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      IteratorUtils.arrayListIterator(propertiesArray0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) vector0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, BatchUpdateException>) orderedMapIterator0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) zippingIterator0;
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) arrayList0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) reverseListIterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(arrayList0);
      iteratorArray0[4] = (Iterator<SQLTransactionRollbackException>) loopingListIterator0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      iteratorArray0[5] = (Iterator<SQLTransactionRollbackException>) resettableListIterator1;
      OrderedMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      iteratorArray0[6] = (Iterator<SQLTransactionRollbackException>) orderedMapIterator2;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[7] = (Iterator<SQLTransactionRollbackException>) resettableIterator1;
      ZippingIterator<Object> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Transformer must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      EmptyListIterator.emptyListIterator();
      ExceptionFactory.exceptionFactory();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Transformer must not be null", ";FTlx1}HEO{!:c{,z,");
      IteratorUtils.getIterator("");
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Class<Iterator> class0 = Iterator.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyIterator();
      PriorityQueue<StringTokenizer>[] priorityQueueArray0 = (PriorityQueue<StringTokenizer>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      PriorityQueue<StringTokenizer> priorityQueue1 = new PriorityQueue<StringTokenizer>((Collection<? extends StringTokenizer>) priorityQueue0);
      priorityQueueArray0[0] = priorityQueue1;
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      properties3.stringPropertyNames();
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIterator must not be null", (String) null);
      IteratorUtils.getIterator(resettableListIterator0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      ExceptionFactory.exceptionFactory();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "WEO", "Cannot store a duplicate key (\"", "Closure must not be null");
      ExceptionPredicate.exceptionPredicate();
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      IteratorUtils.arrayListIterator(propertiesArray0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("3~e>", "Closure must not be null");
      IteratorUtils.getIterator(properties1);
      ExceptionFactory.exceptionFactory();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Class<Iterator> class0 = Iterator.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null", "[");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("The type to check instanceof must not be null", "The type to check instanceof must not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0, defaultEquator0);
      iIOMetadataNode0.setAttribute("The type to check instanceof must not be null", "x*%[3e");
      int int0 = (-2152);
      SQLDataException sQLDataException1 = new SQLDataException("[", (String) null, (-2152));
      IteratorUtils.getIterator(iIOMetadataNode0);
      IteratorUtils.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The closure array must not contain a null closure, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      IteratorUtils.getIterator((Object) null);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "", "");
      ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        AndPredicate.andPredicate((Predicate<? super Object>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0, (Iterator<?>) orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null", "[");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "", 0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLDataException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator((SQLSyntaxErrorException) null);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("NodeList must not be null", "7T&b#*1}0Yg");
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      IteratorUtils.arrayListIterator(propertiesArray0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("3~e>", "Closure must not be null");
      IteratorUtils.getIterator(properties1);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      ExceptionFactory.exceptionFactory();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, (String) null, "WEO", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "f2A\"2";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("f2A\"2");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedException0.printStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate.allPredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      OrderedMapIterator<SQLClientInfoException, Hashtable<SQLClientInfoException, DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Transformer must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      IteratorUtils.getIterator(sQLTransientException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "Transformer must not be null", "", "");
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0);
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(linkedList1);
      IteratorUtils.size(loopingIterator0);
      OrderedMapIterator<Properties, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, Locale.FilteringMode>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "k", "", "Collection must not be null");
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator1 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator1);
      IteratorUtils.size(orderedIterator0);
      OrderedMapIterator<Properties, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, Locale.FilteringMode>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      try { 
        iIOMetadataNode0.lookupPrefix("y");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 6);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) onePredicate0, 3840, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1, false, true, 1, 1);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableIterator0, (long) 1);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsTruePredicate0, predicate0);
      nullIsTruePredicate0.evaluate((Object) null);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super TreeSet<SQLWarning>>) andPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) nullIsTruePredicate0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[6];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      IteratorUtils.boundedIterator((Iterator<? extends ClientInfoStatus>) resettableIterator0, (-614L), (-614L));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Transformer must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "Transformer must not be null", "Transformer must not be null");
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator1 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator1);
      IteratorUtils.size(iterator0);
      OrderedMapIterator<Properties, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, Locale.FilteringMode>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Collection must not be null");
      IteratorUtils.emptyOrderedIterator();
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      SingletonIterator<ArrayDeque<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLNonTransientConnectionException>>(arrayDeque0);
      IteratorUtils.contains((Iterator<ArrayDeque<SQLNonTransientConnectionException>>) singletonIterator0, (Object) orderedIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Collection must not be null", "Collection must not be null", (-4061), sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 4);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Transformer<SQLNonTransientException, EnumSet<ClientInfoStatus>> transformer0 = InvokerTransformer.invokerTransformer("c,W#GpW;A1.T&9", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<EnumSet<ClientInfoStatus>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) singletonListIterator0, (Transformer<? super SQLNonTransientException, ? extends EnumSet<ClientInfoStatus>>) transformer0);
      IteratorUtils.peekingIterator((Iterator<? extends EnumSet<ClientInfoStatus>>) iterator0);
      LinkedList<SQLFeatureNotSupportedException>[] linkedListArray0 = (LinkedList<SQLFeatureNotSupportedException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLFeatureNotSupportedException> linkedList1 = new LinkedList<SQLFeatureNotSupportedException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLFeatureNotSupportedException> linkedList2 = new LinkedList<SQLFeatureNotSupportedException>();
      linkedListArray0[2] = linkedList2;
      IteratorUtils.arrayListIterator(linkedListArray0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, (-4061), 459);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = AllPredicate.allPredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) vector0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(resettableIterator0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) listIteratorWrapper0;
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLDataException>) null, (Object) null);
      IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0, defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      arrayDeque0.clear();
      Stack<ArrayDeque<DataTruncation>> stack0 = new Stack<ArrayDeque<DataTruncation>>();
      ArrayDeque<DataTruncation> arrayDeque1 = new ArrayDeque<DataTruncation>();
      stack0.add(arrayDeque1);
      IteratorUtils.loopingListIterator((List<ArrayDeque<DataTruncation>>) stack0);
      String string0 = "i99Y";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" Tei?", "org.apache.commons.collections4.functors.PrototypeFactory");
      SQLTransientException sQLTransientException0 = new SQLTransientException("S[{Ir", "i99Y");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[", sQLTransientException0);
      sQLSyntaxErrorException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-2722));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLNonTransientException>(orderedMapIterator0);
      int int0 = 100;
      int[] intArray0 = new int[7];
      intArray0[0] = 100;
      intArray0[1] = (-351);
      intArray0[2] = 3679;
      intArray0[3] = 0;
      intArray0[4] = 100;
      intArray0[5] = 3679;
      intArray0[6] = (-66);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*$FKFZWk59I\"p]");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("*$FKFZWk59I\"p]", intArray0, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 3679, 109);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, DataTruncation> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, DataTruncation>(orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) orderedMapIterator0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, 8);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      TreeSet<IIOMetadataNode> treeSet0 = new TreeSet<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = treeSet0.iterator();
      IteratorUtils.toArray(iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySet");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Closure must not be null", "", 10, hashtable0, sQLTimeoutException1);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException1);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", map0, sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLClientInfoException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", "", (-484));
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("", "u$KB-1^Hd+", sQLClientInfoException0);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", "", sQLTimeoutException5);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>) resettableListIterator0, (Iterator<? extends SQLTransientException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLDataException>) null, (Object) null);
      IteratorUtils.emptyListIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Transformer must not be null", (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Transformer must not be null", (String) null);
      IteratorUtils.getIterator(stringTokenizer0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "Transformer must not be null", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "", sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("", "org.apache.commons.collections4.list.CursorableLinkedList$SubCursor");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException2;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException2;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException6;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException4;
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException5;
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, (-1448), 1144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends BatchUpdateException>) orderedMapIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<SQLException> closure0 = ChainedClosure.chainedClosure((Closure<? super SQLException>[]) closureArray0);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, closure0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) orderedMapIterator1, (Closure<? super SQLRecoverableException>) ifClosure0);
      String string0 = "pJR}.";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("pJR}.");
      SQLDataException sQLDataException0 = new SQLDataException("pJR}.", (String) null, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Transformer must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "Transformer must not be null", "Transformer must not be null");
      int int0 = 10;
      DataTruncation dataTruncation0 = new DataTruncation((-172), false, false, 10, 10, sQLTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning("Transformer must not be nullTransformer must not be null", "Transformer must not be null", 10);
      SQLWarning sQLWarning1 = new SQLWarning("delimiter may not be null", "", 0, sQLWarning0);
      SQLWarning sQLWarning2 = new SQLWarning("Transformer must not be null", sQLWarning1);
      sQLWarning1.printStackTrace();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      sQLWarningArray0[0] = sQLWarning0;
      sQLWarningArray0[1] = sQLWarning0;
      sQLWarningArray0[2] = sQLWarning2;
      sQLWarningArray0[3] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[4] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[5] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[6] = (SQLWarning) dataTruncation0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLWarningArray0, 1073741824, 1073741824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<Properties> class0 = Properties.class;
      ServiceLoader<Properties> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ResettableIterator<ServiceLoader<Properties>> resettableIterator0 = IteratorUtils.singletonIterator(serviceLoader0);
      IteratorUtils.skippingIterator((Iterator<ServiceLoader<Properties>>) resettableIterator0, 0L);
      PriorityQueue<StringTokenizer>[] priorityQueueArray0 = (PriorityQueue<StringTokenizer>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      PriorityQueue<StringTokenizer> priorityQueue1 = new PriorityQueue<StringTokenizer>((Collection<? extends StringTokenizer>) priorityQueue0);
      priorityQueueArray0[0] = priorityQueue1;
      PriorityQueue<StringTokenizer> priorityQueue2 = new PriorityQueue<StringTokenizer>();
      priorityQueueArray0[1] = priorityQueue2;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<StringTokenizer> priorityQueue3 = new PriorityQueue<StringTokenizer>(comparator0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      priorityQueue3.add(stringTokenizer0);
      priorityQueueArray0[2] = priorityQueue3;
      ResettableListIterator<PriorityQueue<StringTokenizer>> resettableListIterator0 = new SingletonListIterator<PriorityQueue<StringTokenizer>>(priorityQueue3);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) priorityQueue1);
      IteratorUtils.find((Iterator<PriorityQueue<StringTokenizer>>) resettableListIterator0, (Predicate<? super PriorityQueue<StringTokenizer>>) predicate0);
      OrderedIterator<Vector<SQLFeatureNotSupportedException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Vector<SQLFeatureNotSupportedException>>) orderedIterator0, 376);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 376
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("H.+_UVHjvt5`p", "r!DPD9td-p");
      iIOMetadataNode0.getAttributeNode((String) null);
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0, defaultEquator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("r!DPD9td-p", "", (-2073));
      IteratorUtils.getIterator(sQLDataException0);
      IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      String string0 = null;
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLDataException>) null, (Object) null);
      IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException((String) null, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("", "");
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 2504, 2504);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, 0L, 0L);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[8];
      DataTruncation dataTruncation0 = new DataTruncation(769, false, false, 3, 769);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      dataTruncation0.getNextWarning();
      sQLWarningArray0[1] = null;
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "", dataTruncation0);
      sQLWarningArray0[2] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning((String) null, (String) null);
      sQLWarningArray0[3] = sQLWarning1;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, false, (-172), 3, sQLWarning0);
      sQLWarningArray0[4] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning2 = new SQLWarning((String) null, "", 0);
      sQLWarningArray0[5] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning((String) null, (String) null, 1, sQLWarningArray0[4]);
      sQLWarningArray0[6] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning("", dataTruncation0);
      sQLWarningArray0[7] = sQLWarning4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLWarningArray0, 3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.PrototypeFactory");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = AllPredicate.allPredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("", clientInfoStatus0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      sQLTransactionRollbackException0.getLocalizedMessage();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, DataTruncation> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, DataTruncation>(orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) abstractMapIteratorDecorator0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (-1448));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<TreeSet<SQLTransientException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = AllPredicate.allPredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) null, (Class<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        AndPredicate.andPredicate((Predicate<? super Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 2311;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("0Zcg_1y@Aeh&Z>\"_", "Node must not be null", 2311, hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = null;
      ConstantFactory<SQLTransientException> constantFactory0 = new ConstantFactory<SQLTransientException>((SQLTransientException) null);
      Transformer<Object, SQLException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLException>) constantFactory0);
      IteratorUtils.objectGraphIterator((Object) null, (Transformer<? super Object, ?>) transformer0);
      SQLWarning sQLWarning0 = new SQLWarning("V)}Z{g<", "]P,<hf]C#-", (Throwable) null);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      sQLWarning0.spliterator();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) singletonListIterator0, class0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.PrototypeFactory", "org.apache.commons.collections4.functors.PrototypeFactory");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("", "org.apache.commons.collections4.functors.PrototypeFactory");
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLWarning sQLWarning1 = new SQLWarning("", "X", sQLDataException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "Closure must not be null");
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      ListIterator<PriorityQueue<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator(priorityQueue0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<PriorityQueue<StringTokenizer>>) listIterator0, (Predicate<? super PriorityQueue<StringTokenizer>>) predicate1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "", "");
      int int0 = (-1301);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Integer integer0 = new Integer((-1301));
      ListIterator<Integer> listIterator1 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) listIterator1);
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "iterator");
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) list0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, 10);
      ListIterator<SQLTimeoutException> listIterator2 = null;
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>(10);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      // Undeclared exception!
      try { 
        OrPredicate.orPredicate((Predicate<? super Object>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.InstantiateFactory", "org.apache.commons.collections4.functors.InstantiateFactory");
      sQLDataException0.fillInStackTrace();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.functors.InstantiateFactory", "\"yh", mockThrowable0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "org.apache.commons.collections4.functors.InstantiateFactory");
      IteratorUtils.find((Iterator<PriorityQueue<StringTokenizer>>) null, (Predicate<? super PriorityQueue<StringTokenizer>>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Transformer must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "Transformer must not be null", "Transformer must not be null");
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "InstantiateFactory: The constructor must exist and be public ", 0, intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0, 0);
      IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) objectArrayListIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = null;
      String string1 = "H.+_UVHjvt5`p";
      String string2 = "r!DPD9td-p";
      iIOMetadataNode0.getAttributeNodeNS("H.+_UVHjvt5`p", "r!DPD9td-p");
      iIOMetadataNode0.getAttributeNode((String) null);
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0, defaultEquator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      String string3 = "";
      SQLDataException sQLDataException0 = new SQLDataException("r!DPD9td-p", "", (-2073));
      IteratorUtils.getIterator(sQLDataException0);
      IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<Properties, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) mapIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<Properties> class0 = Properties.class;
      ServiceLoader<Properties> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ResettableIterator<ServiceLoader<Properties>> resettableIterator0 = IteratorUtils.singletonIterator(serviceLoader0);
      IteratorUtils.skippingIterator((Iterator<ServiceLoader<Properties>>) resettableIterator0, 0L);
      PriorityQueue<StringTokenizer>[] priorityQueueArray0 = (PriorityQueue<StringTokenizer>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      PriorityQueue<StringTokenizer> priorityQueue1 = new PriorityQueue<StringTokenizer>((Collection<? extends StringTokenizer>) priorityQueue0);
      priorityQueueArray0[0] = priorityQueue1;
      PriorityQueue<StringTokenizer> priorityQueue2 = new PriorityQueue<StringTokenizer>();
      priorityQueueArray0[1] = priorityQueue2;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<StringTokenizer> priorityQueue3 = new PriorityQueue<StringTokenizer>(comparator0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      priorityQueue3.add(stringTokenizer0);
      priorityQueueArray0[2] = priorityQueue3;
      ResettableListIterator<PriorityQueue<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) priorityQueue1);
      IteratorUtils.find((Iterator<PriorityQueue<StringTokenizer>>) resettableListIterator0, (Predicate<? super PriorityQueue<StringTokenizer>>) predicate0);
      OrderedIterator<Vector<SQLFeatureNotSupportedException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Vector<SQLFeatureNotSupportedException>>) orderedIterator0, 376);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 376
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SQLException sQLException0 = new SQLException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "suffix may not be null", batchUpdateException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedIterator0);
      PriorityQueue<StringTokenizer>[] priorityQueueArray0 = (PriorityQueue<StringTokenizer>[]) Array.newInstance(PriorityQueue.class, 2);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<StringTokenizer> priorityQueue1 = new PriorityQueue<StringTokenizer>();
      priorityQueueArray0[1] = priorityQueue1;
      ObjectArrayIterator<PriorityQueue<StringTokenizer>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<StringTokenizer>>(priorityQueueArray0);
      IteratorUtils.find((Iterator<PriorityQueue<StringTokenizer>>) objectArrayIterator0, (Predicate<? super PriorityQueue<StringTokenizer>>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(10);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      IteratorUtils.arrayListIterator(propertiesArray0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) vector0);
      int[] intArray0 = new int[0];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "\"92em/T", 4);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("|", "|", 4, intArray0, sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("LKS.M[pBpS+W1aX", "Ns>:;q3r9#q4V[^ih", 4, batchUpdateException0);
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      IteratorUtils.size(iterator1);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      stack0.setSize(0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+ef]", "+ef]", (-1));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("+ef]", "+ef]", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTransientConnectionException0);
      stack0.add(0, sQLInvalidAuthorizationSpecException0);
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0);
      IteratorUtils.size(iterator1);
      OrderedMapIterator<Properties, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, Locale.FilteringMode>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<DataTruncation, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<DataTruncation>) orderedMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      IteratorUtils.arrayIterator(propertiesArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OrderedMapIterator<Object, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLException sQLException0 = new SQLException("\") in this Map", "", 0, sQLDataException0);
      sQLExceptionArray0[0] = sQLException0;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      batchUpdateException0.getNextException();
      sQLExceptionArray0[1] = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 0);
      sQLExceptionArray0[2] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0, sQLException0);
      sQLExceptionArray0[3] = (SQLException) sQLSyntaxErrorException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("sf~({KIK", "add() not supported for empty Iterator");
      sQLExceptionArray0[4] = (SQLException) sQLTransientException0;
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, (-4524));
      sQLExceptionArray0[5] = (SQLException) dataTruncation0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLTransientException0);
      sQLExceptionArray0[6] = (SQLException) sQLClientInfoException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      sQLExceptionArray0[7] = (SQLException) batchUpdateException1;
      SQLException sQLException1 = new SQLException("add() not supported for empty Iterator", "`gkWr3PCD,2pee :B", 1, sQLExceptionArray0[2]);
      sQLExceptionArray0[8] = sQLException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 415, (-4524));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      IteratorUtils.size((Iterator<?>) null);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLSyntaxErrorException0);
      arrayList0.add(sQLRecoverableException0);
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 0, (-2397));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = AllPredicate.allPredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) orderedIterator0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) listIterator0, class0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>((EnumSet<Locale.FilteringMode>) null, false);
      IteratorUtils.unmodifiableIterator((Iterator<EnumSet<Locale.FilteringMode>>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ResettableIterator<Transformer<Object, String>> resettableIterator0 = IteratorUtils.singletonIterator(transformer0);
      OrderedMapIterator<Transformer<Object, String>, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Transformer<Object, String>>) resettableIterator0, (Iterator<? extends Transformer<Object, String>>) orderedMapIterator0);
      Stack<ArrayDeque<DataTruncation>> stack0 = new Stack<ArrayDeque<DataTruncation>>();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      arrayDeque0.clear();
      stack0.add(arrayDeque0);
      IteratorUtils.loopingListIterator((List<ArrayDeque<DataTruncation>>) stack0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("$},Qt#k0`GDF</IR", "b~,f");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("b~,f", sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("$},Qt#k0`GDF</IR", "$},Qt#k0`GDF</IR");
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Factory<StringTokenizer> factory0 = new ConstantFactory<StringTokenizer>(stringTokenizer0);
      Factory<StringTokenizer> factory1 = ExceptionFactory.exceptionFactory();
      Transformer<Object, StringTokenizer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends StringTokenizer>) factory1);
      IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-720), (-720));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      ConstantTransformer<Object, BatchUpdateException> constantTransformer0 = new ConstantTransformer<Object, BatchUpdateException>(batchUpdateException0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer1);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) constantTransformer0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iterator0);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) zippingIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLTransientException0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      int int0 = (-2205);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientException1, (-2205), (-2205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = null;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator((SQLClientInfoException) null);
      IteratorUtils.singletonIterator((SQLException) null);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLInvalidAuthorizationSpecException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "@'nL\\~";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@'nL~");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 759);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("a(&G%vI^+-5uEe0Y|X<");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      String string0 = "WUb!,MHy&^!E9Y";
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("WUb!,MHy&^!E9Y", "&kl>E");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("&kl>E", "WUb!,MHy&^!E9Y", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      int int0 = 10;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<SQLClientInfoException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLClientInfoException>) predicate0, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate1);
      IteratorUtils.emptyMapIterator();
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.singletonIterator((Predicate<Object>) uniquePredicate0);
      assertNotNull(resettableIterator0);
      
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Predicate<Object>>) resettableIterator0);
      assertNotNull(iterator0);
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLTransientException sQLTransientException0 = new SQLTransientException(", ", ", ");
      assertNotNull(sQLTransientException0);
      assertEquals(", ", sQLTransientException0.getSQLState());
      assertEquals(", ", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: , ", sQLTransientException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException(", ", ", ", sQLTransientException0);
      assertNotNull(sQLDataException0);
      assertEquals(", ", sQLTransientException0.getSQLState());
      assertEquals(", ", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: , ", sQLTransientException0.toString());
      assertEquals(", ", sQLDataException0.getSQLState());
      assertEquals(", ", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: , ", sQLDataException0.toString());
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLTransientException0);
      assertNotNull(sQLDataException1);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertEquals(", ", sQLTransientException0.getSQLState());
      assertEquals(", ", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: , ", sQLTransientException0.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: , ", sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransientException: , ", sQLDataException1.toString());
      
      sQLTransientException0.getLocalizedMessage();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(", ", ", ", sQLDataException1);
      SQLDataException sQLDataException2 = new SQLDataException(", ", "]:YF7Q", 0, sQLNonTransientConnectionException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0, (-1655), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResettableIterator<PriorityQueue<Integer>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 6);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      
      enumSetArray0[0] = enumSet0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        EnumSet.range(locale_FilteringMode1, locale_FilteringMode2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // REJECT_EXTENDED_RANGES > MAP_EXTENDED_RANGES
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 9);
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      int[] intArray0 = new int[4];
      intArray0[0] = (-796);
      intArray0[1] = (-796);
      intArray0[2] = (-796);
      intArray0[3] = (-796);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("m>9|v!O>}u", "m>9|v!O>}u", (-796), intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-796), (-796), (-796), (-796)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-796), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: m>9|v!O>}u", batchUpdateException0.toString());
      assertEquals("m>9|v!O>}u", batchUpdateException0.getMessage());
      assertEquals("m>9|v!O>}u", batchUpdateException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertArrayEquals(new int[] {(-796), (-796), (-796), (-796)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-796), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: m>9|v!O>}u", batchUpdateException0.toString());
      assertEquals("m>9|v!O>}u", batchUpdateException0.getMessage());
      assertEquals("m>9|v!O>}u", batchUpdateException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException: m>9|v!O>}u", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.BatchUpdateException: m>9|v!O>}u", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@9oUI?K", "org.apache.commons.collections4.iterators.ListIteratorWrapper", sQLTransactionRollbackException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertArrayEquals(new int[] {(-796), (-796), (-796), (-796)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-796), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: m>9|v!O>}u", batchUpdateException0.toString());
      assertEquals("m>9|v!O>}u", batchUpdateException0.getMessage());
      assertEquals("m>9|v!O>}u", batchUpdateException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException: m>9|v!O>}u", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.BatchUpdateException: m>9|v!O>}u", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.ListIteratorWrapper", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("@9oUI?K", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: @9oUI?K", sQLFeatureNotSupportedException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLFeatureNotSupportedException0);
      assertNotNull(sQLWarning0);
      assertArrayEquals(new int[] {(-796), (-796), (-796), (-796)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-796), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: m>9|v!O>}u", batchUpdateException0.toString());
      assertEquals("m>9|v!O>}u", batchUpdateException0.getMessage());
      assertEquals("m>9|v!O>}u", batchUpdateException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException: m>9|v!O>}u", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.BatchUpdateException: m>9|v!O>}u", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.ListIteratorWrapper", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("@9oUI?K", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: @9oUI?K", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: @9oUI?K", sQLWarning0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: @9oUI?K", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation((-796), false, true, (-796), (-1));
      assertNotNull(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      SQLWarning sQLWarning1 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning1);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      sQLWarningArray0[1] = null;
      SQLWarning sQLWarning2 = new SQLWarning("org.apache.commons.collections4.iterators.ListIteratorWrapper");
      assertNotNull(sQLWarning2);
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      assertEquals(0, sQLWarning2.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.ListIteratorWrapper", sQLWarning2.getMessage());
      assertEquals("java.sql.SQLWarning: org.apache.commons.collections4.iterators.ListIteratorWrapper", sQLWarning2.toString());
      assertNull(sQLWarning2.getSQLState());
      
      sQLWarningArray0[2] = sQLWarning2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, (-796));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
