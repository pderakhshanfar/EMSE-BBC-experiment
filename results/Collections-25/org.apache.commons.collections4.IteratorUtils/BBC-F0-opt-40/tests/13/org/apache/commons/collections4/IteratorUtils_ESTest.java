/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 05:34:58 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      UniquePredicate<DataTruncation> uniquePredicate0 = new UniquePredicate<DataTruncation>();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>((BatchUpdateException) null);
      int int0 = 1073741824;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) singletonListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "null values not allowed");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, sQLTransientConnectionException0);
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.singletonListIterator((HashSet<LinkedHashSet>) hashSet0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) singletonListIterator0;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PrototypeCloneFactory: Clone method must be public");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(allPredicate0, allPredicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Factory<SQLClientInfoException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLClientInfoException> factoryTransformer0 = new FactoryTransformer<Object, SQLClientInfoException>(factory0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) factoryTransformer0, (Predicate<? super Object>) predicateArray0[0]);
      predicateArray0[1] = predicate0;
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate3, (Predicate<? super Object>) predicate2);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) iteratorArray0[0], (Iterator<?>) iteratorArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) orPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put(";%Ev<m", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(";%Ev<m", (String) null, (-1208), map0, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(";%Ev<m", hashMap0, sQLClientInfoException1);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException2);
      DataTruncation dataTruncation0 = new DataTruncation(1967, false, false, (-1208), 1967);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.contains((Iterator<DataTruncation>) singletonIterator0, (Object) dataTruncation0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator(iterator0, iterator0, iterator0);
      IteratorUtils.unmodifiableIterator((Iterator<Object>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) orderedIterator0, (Class<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Closure must not be null", "Iterator must not be null", (-1587));
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "org.apache.commons.collections4.map.AbstractHashedMap");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLDataException0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.map.AbstractHashedMap", sQLSyntaxErrorException1);
      sQLNonTransientExceptionArray0[4] = sQLNonTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("Closure must not be null", sQLNonTransientException0);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Closure must not be null", "", 2708);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException(sQLNonTransientExceptionArray0[5]);
      sQLNonTransientExceptionArray0[7] = sQLNonTransientException1;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException2, defaultEquator0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>(predicate0, 1348, 2708);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 3);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 3);
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "[uQ0>w-\"YDi@e");
      sQLExceptionArray0[0] = (SQLException) sQLWarning0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("[uQ0>w-\"YDi@e", "", 2972, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("[uQ0>w-\"YDi@e", (Map<String, ClientInfoStatus>) null);
      sQLExceptionArray0[1] = (SQLException) sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((String) null, "-#$W]U8x8q", 6, (Map<String, ClientInfoStatus>) null, sQLWarning0);
      sQLExceptionArray0[2] = (SQLException) sQLClientInfoException3;
      SQLWarning sQLWarning1 = new SQLWarning("3taA(=H7[h`0(", "noy9aBGF~!6", sQLExceptionArray0[2]);
      sQLExceptionArray0[3] = (SQLException) sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("@P\"Bzer", (String) null, sQLExceptionArray0[0]);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "3taA(=H7[h`0(", 2972, sQLWarning2);
      sQLExceptionArray0[4] = (SQLException) sQLSyntaxErrorException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2NoK>3yh", "2NoK>3yh", 0, sQLClientInfoException2);
      sQLExceptionArray0[5] = (SQLException) sQLTransactionRollbackException0;
      IteratorUtils.arrayListIterator(sQLExceptionArray0, 0, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", (String) null, 502, sQLExceptionArray0[1]);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableIterator1, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "8C&mw]<>zYR*TLF6P", "u.0{$ROb,c`iJ", "Index '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLSyntaxErrorException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector<HashSet<SQLNonTransientConnectionException>> vector0 = new Vector<HashSet<SQLNonTransientConnectionException>>();
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      linkedHashSet0.add(sQLNonTransientConnectionException0);
      vector0.add((HashSet<SQLNonTransientConnectionException>) linkedHashSet0);
      IteratorUtils.loopingListIterator((List<HashSet<SQLNonTransientConnectionException>>) vector0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("^?JniWV[uU", "S=Ak69", 1160, mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("S=Ak69", "S=Ak69", sQLNonTransientException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", ":nAw;-4&V", 2351);
      Factory<SQLNonTransientConnectionException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLNonTransientConnectionException>(factory0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) factoryTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 0);
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator1, (Iterator<? extends SQLTimeoutException>) resettableIterator1);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) zippingIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator(orderedIterator0);
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLExceptionArray0[0] = (SQLException) sQLFeatureNotSupportedException0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-897);
      intArray0[1] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("AT,fT\u0005`0!cyada");
      sQLExceptionArray0[2] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLExceptionArray0[1]);
      sQLExceptionArray0[3] = (SQLException) sQLIntegrityConstraintViolationException1;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "delimiter may not be null");
      sQLExceptionArray0[4] = (SQLException) sQLDataException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("AT,fT\u0005`0!cyada");
      sQLExceptionArray0[5] = (SQLException) sQLTimeoutException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLExceptionArray0[6] = (SQLException) sQLDataException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 1, (-897));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      OrderedMapIterator<SQLTimeoutException, Iterator<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) objectArrayIterator0;
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) iteratorArray0[0], (Iterator<? extends InstanceofPredicate>) objectArrayIterator0, (Iterator<? extends InstanceofPredicate>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) zippingIterator0;
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super InstanceofPredicate, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      Stack<SQLTimeoutException> stack1 = new Stack<SQLTimeoutException>();
      int int0 = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">Rmt<>#", "", 10, (int[]) null);
      Iterator<Object> iterator1 = IteratorUtils.peekingIterator(iterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, (Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator1, (Predicate<? super Object>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string0 = "";
      iIOMetadataNode0.getAttributeNS("", "B");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = arrayList0.iterator();
      arrayList0.stream();
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0);
      IteratorUtils.toArray(iterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 6);
      MapIterator<InstanceofPredicate, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) mapIterator0;
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) iteratorArray0[0]);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) stack0);
      iteratorArray0[1] = iterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OrderedMapIterator<StringTokenizer, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) null, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) arrayDeque0);
      IteratorUtils.getIterator(predicate0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 2588);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("0f`>SdvVZb-hXfo}Ta", sQLNonTransientConnectionException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("0f`>SdvVZb-hXfo}Ta");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("0f`>SdvVZb-hXfo}Ta", sQLNonTransientConnectionException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("0f`>SdvVZb-hXfo}Ta", (String) null, 2588);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("OHxUKYip", "OHxUKYip", 100, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException((String) null);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("OHxUKYip");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      IteratorUtils.arrayIterator(instanceofPredicateArray0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.toArray(iterator0);
      Iterator<SQLDataException> iterator1 = EmptyIterator.emptyIterator();
      Predicate<SQLException> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator1, (Predicate<? super SQLNonTransientException>) predicate1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Collection must not be null", (int[]) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iterator");
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("@,A", "/vPYv85v8[w", 2, (long[]) null, sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      StringTokenizer stringTokenizer0 = new StringTokenizer("@,A", "Jo$%~d3]m/", false);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) linkedList0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ForClosure.forClosure(1644, (Closure<? super SQLException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) orderedIterator0, (Closure<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.singletonIterator((BatchUpdateException) null);
      ExceptionClosure.exceptionClosure();
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      IteratorUtils.arrayIterator(instanceofPredicateArray0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.add(instanceofPredicate0);
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.toArray(iterator0);
      EmptyIterator.emptyIterator();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      ExceptionClosure.exceptionClosure();
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      OrderedMapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLInvalidAuthorizationSpecException>(orderedMapIterator1);
      MapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator1);
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator1, class1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.singletonIterator(batchUpdateException0);
      ExceptionClosure.exceptionClosure();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException0;
      batchUpdateExceptionArray0[3] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(resettableListIterator0);
      listIteratorWrapper0.next();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) listIteratorWrapper0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator");
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) constantTransformer0, " ]r1)?OT>rl9u(", " ]r1)?OT>rl9u(", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      PriorityQueue<SQLRecoverableException>[] priorityQueueArray0 = (PriorityQueue<SQLRecoverableException>[]) Array.newInstance(PriorityQueue.class, 16);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLRecoverableException> priorityQueue1 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLRecoverableException> priorityQueue2 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLRecoverableException> priorityQueue3 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLRecoverableException> priorityQueue4 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<SQLRecoverableException> priorityQueue5 = new PriorityQueue<SQLRecoverableException>(priorityQueue3);
      priorityQueueArray0[5] = priorityQueue5;
      ObjectArrayListIterator<PriorityQueue<SQLRecoverableException>> objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<SQLRecoverableException>>(priorityQueueArray0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("[", classArray0, classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate1, transformer0, transformer0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) ifTransformer0, (Transformer<? super Object, ? extends String>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) objectArrayListIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer1, "[", "[", "[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[' on 'class java.util.PriorityQueue' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((InstanceofPredicate[]) null, 0, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0);
      singletonIterator0.next();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(".o@$2A7u}r(=\"/8cS8");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer0, "Entry does not exist: ", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      Stack<SQLTimeoutException> stack1 = new Stack<SQLTimeoutException>();
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      singletonIterator0.next();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.functors.ComparatorPredicate");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer0, "", "org.apache.commons.collections4.functors.ComparatorPredicate", "Entry does not exist: ");
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable0 = new Hashtable<SQLTransientException, InstanceofPredicate>();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "org.apace.commons.collectons4map.Abstra4tLinkedMap");
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      IteratorUtils.getIterator(predicate0);
      Stack<SQLTimeoutException> stack1 = new Stack<SQLTimeoutException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("5lu0CcDK");
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1610);
      longArray0[1] = (long) (-1610);
      longArray0[2] = (long) (-1610);
      longArray0[3] = (long) (-1610);
      longArray0[4] = (long) (-1610);
      longArray0[5] = (long) (-1610);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("iterator", "5lu0CcDK", (-1610), longArray0, sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException2;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1610);
      intArray0[1] = (-1610);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("iterator", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException();
      batchUpdateExceptionArray0[3] = batchUpdateException4;
      batchUpdateExceptionArray0[4] = batchUpdateException1;
      batchUpdateExceptionArray0[5] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.getIterator(resettableIterator1);
      IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator0, (long) 0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) skippingIterator0, (Iterator<? extends String>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, false);
      singletonIterator0.next();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer0, (String) null, "", "'bp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "org.apace.commons.collectons4map.Abstra4tLinkedMap");
      Stack<InstanceofPredicate> stack1 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      ExceptionClosure.exceptionClosure();
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 1);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<Object, SQLInvalidAuthorizationSpecException>((String) null, classArray0, classArray0);
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) resettableIterator0, (Closure<? super BatchUpdateException>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>(33);
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      singletonIterator0.next();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("%c9Fl$c Y(/V/v1bA ");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer0, "r7 ,*YUHJ", "", "");
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable0 = new Hashtable<SQLTransientException, InstanceofPredicate>();
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashMap0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) uniquePredicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("r7 ,*YUHJ", "8!Bdg1%eBnsu&h6p|", 1878);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "org.apache.commons.collections4.IteratorUtils", 0, (int[]) null, (Throwable) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SingletonIterator<BatchUpdateException> singletonIterator1 = new SingletonIterator<BatchUpdateException>(batchUpdateException1, false);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) singletonIterator1);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      singletonIterator0.next();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("%4nFLuaaWt");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer0, "%4nFLuaaWt", "%4nFLuaaWt", "org.apache.commons.collections4.IteratorUtils");
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable0 = new Hashtable<SQLTransientException, InstanceofPredicate>();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      hashMap0.put(sQLTransactionRollbackException0, (InstanceofPredicate) null);
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      SQLTransientException sQLTransientException0 = new SQLTransientException("iterator", "iterator");
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable0 = new Hashtable<SQLTransientException, InstanceofPredicate>();
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus1, clientInfoStatus0, clientInfoStatus1);
      ListIterator<EnumSet<ClientInfoStatus>> listIterator0 = IteratorUtils.singletonListIterator(enumSet0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      IteratorUtils.arrayIterator(instanceofPredicateArray0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.toArray(iterator0);
      Iterator<SQLDataException> iterator1 = EmptyIterator.emptyIterator();
      Predicate<SQLException> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator1, (Predicate<? super SQLNonTransientException>) predicate1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Collection must not be null", (int[]) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      SQLException sQLException0 = new SQLException("/vPYv85v8[w", "iterator", 2);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("@,A", "/vPYv85v8[w", 2, (long[]) null, sQLException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Iterator<BatchUpdateException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator2, class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      IteratorUtils.getIterator(predicate0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) stack0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedIterator0, 0L, 0L);
      int[] intArray0 = new int[3];
      intArray0[0] = (-534);
      PriorityQueue<SQLRecoverableException>[] priorityQueueArray0 = (PriorityQueue<SQLRecoverableException>[]) Array.newInstance(PriorityQueue.class, 6);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLRecoverableException> priorityQueue1 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLRecoverableException> priorityQueue2 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLRecoverableException> priorityQueue3 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLRecoverableException> priorityQueue4 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<SQLRecoverableException> priorityQueue5 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[5] = priorityQueue5;
      ObjectArrayListIterator<PriorityQueue<SQLRecoverableException>> objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<SQLRecoverableException>>(priorityQueueArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) objectArrayListIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) null, "Array class must not be null", "", "Array class must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "%4nFLuaaWt";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Transformer<SQLTransactionRollbackException, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      PriorityQueue<SQLRecoverableException>[] priorityQueueArray0 = (PriorityQueue<SQLRecoverableException>[]) Array.newInstance(PriorityQueue.class, 3);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>((SortedSet<? extends SQLRecoverableException>) treeSet0);
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLRecoverableException> priorityQueue1 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLRecoverableException> priorityQueue2 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[2] = priorityQueue2;
      ObjectArrayIterator<PriorityQueue<SQLRecoverableException>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<SQLRecoverableException>>(priorityQueueArray0, 0, 0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) objectArrayIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer0, "org.apache.commons.collections4.IteratorUtils", (String) null, "org.apache.commons.collections4.IteratorUtils");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Class<Iterator<StringTokenizer>>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", classArray0, objectArray0);
      Transformer<Object, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) invokerTransformer0, (Transformer<? super Object, ? extends String>) invokerTransformer0);
      IteratorUtils.toString((Iterator<Class<Iterator<StringTokenizer>>>) orderedIterator0, (Transformer<? super Class<Iterator<StringTokenizer>>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator0, 61);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer may not be null");
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "x,omh7]iE:");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!YikqCg{[W@E", "w0qWxrx", sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("transformer may not be null", "transformer may not be null", (-1095), sQLNonTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator1, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("w0qWxrx", "!YikqCg{[W@E", 61, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("The collection must not be null");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((Throwable) null);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-3384));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("%4nFLuaaWt");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) constantTransformer0, "%4nFLuaaWt", "%4nFLuaaWt", "org.apache.commons.collections4.IteratorUtils");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("transformer may nt be null");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("transformer may nt be null", "Y1*+I~iV");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils");
      sQLSyntaxErrorException1.setNextException(sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("transformer may nt be null", "Y1*+I~iV", 1009, sQLSyntaxErrorException0);
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      HashMap<SQLTimeoutException, String> hashMap0 = new HashMap<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashtable0);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException2);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) treeSet0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      MapIterator<SQLTransactionRollbackException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Transformer<SQLTransactionRollbackException, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashMap0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      List<Object> list0 = IteratorUtils.toList(iterator0, 1650);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) list0;
      objectArray0[2] = (Object) list0;
      objectArray0[3] = (Object) list0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray0[6] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray0[7] = (Object) list0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, 734, 1650);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("dJo}9PDO");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Oea:kSQ6'G");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "dJo}9PDO");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      sQLSyntaxErrorException1.setNextException(sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTimeoutException1);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("{BDpFc", (String) null, 10, sQLSyntaxErrorException2);
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      HashMap<SQLTimeoutException, String> hashMap0 = new HashMap<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashMap0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayDeque0);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) treeSet0);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<EnumSet<Locale.Category>, LinkedList<SQLWarning>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<EnumSet<Locale.Category>>) mapIterator0;
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) mapIterator0);
      iteratorArray0[2] = (Iterator<EnumSet<Locale.Category>>) listIterator0;
      Iterator<EnumSet<Locale.Category>> iterator1 = IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.Category>>) comparator0, (Iterator<? extends EnumSet<Locale.Category>>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) iterator1, (-3235));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      linkedList0.iterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      EmptyIterator.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "o<Y_PHx+NNx;P<<tv$");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Transformer must not be null", sQLInvalidAuthorizationSpecException0);
      EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap1 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2737, 1353);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>(1463);
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) linkedHashSet0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      singletonIterator0.next();
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("%4nFLuaaWt");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer1, "%4nFLuaaWt", "%4nFLuaaWt", "org.apache.commons.collections4.IteratorUtils");
      PriorityQueue<Integer> priorityQueue1 = new PriorityQueue<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) priorityQueue1);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 1644;
      intArray0[1] = 1654;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("yhD1tvpaH))r%`FJMY", "", 1898, batchUpdateException0);
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("<oQiQpK]zw~b", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", 1654, hashtable0, batchUpdateException0);
      sQLClientInfoException0.getFailedProperties();
      sQLClientInfoException0.getLocalizedMessage();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0);
      Iterator<EnumSet<Locale.Category>> iterator1 = EmptyIterator.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("yhD1tvpaH))r%`FJMY", sQLClientInfoException0);
      IteratorUtils.contains(iterator1, (Object) "");
      MapIterator<SQLTransactionRollbackException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("%4nFLuaaWt");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer1, "%4nFLuaaWt", "%4nFLuaaWt", "org.apache.commons.collections4.IteratorUtils");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "transformer may not be null", (-1661));
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Y1*+I~iV");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer1, "S>lG!+3:", "%4nFLuaaWt", "");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "It\";", (-1661));
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer(31);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U");
      priorityQueue0.add(integer0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) priorityQueue0);
      int[] intArray0 = new int[4];
      intArray0[0] = 31;
      intArray0[1] = (-1042);
      intArray0[2] = 31;
      intArray0[3] = 31;
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) linkedList0);
      IteratorUtils.getIterator("U");
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer(31);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U");
      priorityQueue0.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) priorityQueue0);
      int[] intArray0 = new int[4];
      intArray0[0] = 31;
      intArray0[1] = (-1042);
      intArray0[2] = 31;
      intArray0[3] = 31;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("U", "U", (-1042), batchUpdateException0);
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 194, hashtable0, batchUpdateException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("U", map0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("U", "U", hashtable0);
      Iterator<EnumSet<Locale.Category>> iterator1 = EmptyIterator.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLClientInfoException1);
      IteratorUtils.contains(iterator1, (Object) sQLTransientConnectionException0);
      MapIterator<SQLTransactionRollbackException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable1 = new Hashtable<SQLTransientException, InstanceofPredicate>();
      Transformer<SQLTransactionRollbackException, InstanceofPredicate> transformer1 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashMap0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) transformer1);
      SQLDataException sQLDataException1 = new SQLDataException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 31, 194);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) orderedMapIterator0);
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashtable0);
      MapIterator<SQLTimeoutException, ArrayDeque<SQLWarning>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) mapIterator0);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayDeque0);
      IteratorUtils.emptyOrderedIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) vector0);
      OrderedMapIterator<IIOMetadataNode, InstanceofPredicate> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) orderedMapIterator1, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 1644;
      intArray0[1] = 1654;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("yhD1tvpaH))r%`FJMY", "", 1898, batchUpdateException0);
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("<oQiQpK]zw~b", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", 1654, hashtable0, batchUpdateException0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", "", hashtable0);
      Iterator<EnumSet<Locale.Category>> iterator1 = EmptyIterator.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("yhD1tvpaH))r%`FJMY", sQLClientInfoException0);
      IteratorUtils.contains(iterator1, (Object) "");
      MapIterator<SQLTransactionRollbackException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable1 = new Hashtable<SQLTransientException, InstanceofPredicate>();
      Transformer<SQLTransactionRollbackException, InstanceofPredicate> transformer1 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashMap0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1502, (-1951));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer(1649);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("G#_7T2?Z)bg'wf", "", (-2868), sQLNonTransientException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      int[] intArray0 = new int[9];
      intArray0[0] = 1644;
      intArray0[1] = 279;
      intArray0[2] = 1644;
      intArray0[3] = 32;
      intArray0[4] = 1311;
      intArray0[5] = (-87);
      intArray0[6] = 31;
      intArray0[7] = 3061;
      intArray0[8] = 1658;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("'C Dk[^P}=Vf2)U `h9", "'C Dk[^P}=Vf2)U `h9", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("'C Dk[^P}=Vf2)U `h9", "'C Dk[^P}=Vf2)U `h9", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-87);
      longArray0[1] = (long) 1658;
      longArray0[2] = (long) 1644;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("lTbo2}/6s6RqS", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", (-3790), longArray0, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(batchUpdateException1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("lTbo2}/6s6RqS", intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("Collection must not be null", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException(intArray0, batchUpdateException3);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      BatchUpdateException batchUpdateException8 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[8] = batchUpdateException8;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Stack<Closure<Object>> stack0 = new Stack<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) stack0);
      IteratorUtils.apply((Iterator<BatchUpdateException>) objectArrayIterator0, (Closure<? super BatchUpdateException>) closure0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLNonTransientException> list0 = new Vector<SQLNonTransientException>(38, 38);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, 0L, 0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 38;
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = 38;
      intArray0[5] = (-1203);
      intArray0[6] = 38;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("iterator", intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.singletonIterator(batchUpdateException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) uniquePredicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = ForClosure.forClosure((-784), (Closure<? super Object>) closure0);
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure1);
      IteratorUtils.apply((Iterator<BatchUpdateException>) resettableIterator1, (Closure<? super BatchUpdateException>) closure2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Closure<BatchUpdateException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<BatchUpdateException>) null, (Closure<? super BatchUpdateException>) closure0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("%4nFLuaaWt");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer1, "%4nFLuaaWt", "%4nFLuaaWt", "org.apache.commons.collections4.IteratorUtils");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "transformer may not be null", (-1661));
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("transformer may not be null", "Y1*+I~iV");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils");
      sQLSyntaxErrorException1.setNextException(sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("%4nFLuaaWt", "tlx^sDam4/19@Q+Q", 10, sQLSyntaxErrorException0);
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      HashMap<SQLTimeoutException, String> hashMap0 = new HashMap<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashMap0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayDeque0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) treeSet0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedIterator0, 0L, 0L);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1661);
      intArray0[1] = 10;
      intArray0[2] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("tlx^sDam4/19@Q+Q", intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) uniquePredicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>(predicate1, closure0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) resettableIterator0, (Closure<? super BatchUpdateException>) whileClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer(31);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U");
      priorityQueue0.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) priorityQueue0);
      int[] intArray0 = new int[4];
      intArray0[0] = 31;
      intArray0[1] = (-1042);
      intArray0[2] = 31;
      intArray0[3] = 31;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("U", "U", (-1042), batchUpdateException0);
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 194, hashtable0, batchUpdateException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("U", map0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("U", "U", hashtable0);
      Iterator<EnumSet<Locale.Category>> iterator1 = EmptyIterator.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLClientInfoException1);
      IteratorUtils.contains(iterator1, (Object) sQLTransientConnectionException0);
      MapIterator<SQLTransactionRollbackException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable1 = new Hashtable<SQLTransientException, InstanceofPredicate>();
      Transformer<SQLTransactionRollbackException, InstanceofPredicate> transformer1 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashMap0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) transformer1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 1);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 1);
      Object object0 = new Object();
      objectArray0[1] = object0;
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 1);
      objectArray0[4] = null;
      ResettableIterator<SQLDataException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator1, 1);
      IteratorUtils.loopingListIterator(list0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      Iterator<SQLTransactionRollbackException> iterator0 = linkedList0.iterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      Transformer<SQLTransactionRollbackException, InstanceofPredicate> transformer0 = ConstantTransformer.constantTransformer(instanceofPredicate1);
      linkedList0.iterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer may not be null");
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("%4nFLuaaWt");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer1, "%4nFLuaaWt", "%4nFLuaaWt", "org.apache.commons.collections4.IteratorUtils");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "transformer may not be null", (-1661));
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("transformer may not be null", "Y1*+I~iV");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils");
      sQLSyntaxErrorException1.setNextException(sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("%4nFLuaaWt", "tlx^sDam4/19@Q+Q", 10, sQLSyntaxErrorException0);
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      HashMap<SQLTimeoutException, String> hashMap0 = new HashMap<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashMap0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayDeque0);
      IteratorUtils.emptyOrderedIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) treeSet0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) list0);
      IteratorUtils.getIterator(predicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLNonTransientException> list1 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator(list1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 91, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("iterator", "iterator");
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) orderedIterator0, (Object) sQLTransientException0);
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable0 = new Hashtable<SQLTransientException, InstanceofPredicate>();
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashtable0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("iterator", "iterator", hashMap1, sQLTransientException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("org.apache.commons.collections4.iterators.ObjectArrayIterator", "org.apache.commons.collections4.iterators.ObjectArrayIterator", hashMap1, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      OrderedMapIterator<Object, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Object, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.matchesAll((Iterator<Object>) mapIterator0, (Predicate<? super Object>) predicate0);
      OrderedMapIterator<IIOMetadataNode, Iterator<StringTokenizer>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator1, (Iterator<? extends IIOMetadataNode>) orderedMapIterator1, (Iterator<? extends IIOMetadataNode>) iterator0);
      Integer integer0 = new Integer(1628);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 10, 1628);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[4] = object1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLDataException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[4] = object1;
      ResettableIterator<SQLDataException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      objectArray0[1] = object0;
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.loopingListIterator(list0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1652, 1652);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("iterator", "iterator");
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) orderedIterator0, (Object) sQLTransientException0);
      MapIterator<SQLTransactionRollbackException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable0 = new Hashtable<SQLTransientException, InstanceofPredicate>();
      Transformer<SQLTransactionRollbackException, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) transformer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = 0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[1] = null;
      Object object0 = new Object();
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) identityPredicate0, (Predicate<? super Object>) identityPredicate0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("bumG%T*5h`,-{fM?]", "", intArray0, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("bumG%T*5h`,-{fM?]", batchUpdateException0);
      sQLTransientConnectionException0.setNextException(batchUpdateException0);
      Transformer<Object, SQLTransientException> transformer0 = ConstantTransformer.constantTransformer((SQLTransientException) sQLTransientConnectionException0);
      IteratorUtils.objectGraphIterator((Object) resettableIterator0, (Transformer<? super Object, ?>) transformer0);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate0);
      Object object1 = new Object();
      IteratorUtils.arrayIterator(objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("%4nFLuaaWt");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer1, "%4nFLuaaWt", "%4nFLuaaWt", "org.apache.commons.collections4.IteratorUtils");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "transformer may not be null", (-1661));
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("%4nFLuaaWt%4nFLuaaWtorg.apache.commons.collections4.IteratorUtils", "%4nFLuaaWt%4nFLuaaWtorg.apache.commons.collections4.IteratorUtils", sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "%4nFLuaaWt");
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      sQLRecoverableException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("", "", 1316, sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("=I/O1}g;o", "%4nFLuaaWt%4nFLuaaWtorg.apache.commons.collections4.IteratorUtils", (-1661), sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      int int0 = (-33);
      int int1 = 91;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("%4nFLuaaWt");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer1, "%4nFLuaaWt", "%4nFLuaaWt", "org.apache.commons.collections4.IteratorUtils");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "transformer may not be null", (-1661));
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("%4nFLuaaWt%4nFLuaaWtorg.apache.commons.collections4.IteratorUtils", "%4nFLuaaWt%4nFLuaaWtorg.apache.commons.collections4.IteratorUtils", sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "%4nFLuaaWt");
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("", "", 1316, sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("=I/O1}g;o", "%4nFLuaaWt%4nFLuaaWtorg.apache.commons.collections4.IteratorUtils", (-1661), sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-33), 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("N1eur75vd1{^E?k#", "N1eur75vd1{^E?k#", hashtable0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      IteratorUtils.getIterator(listIterator0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 1073741824, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[1] = null;
      Object object0 = new Object();
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      AndPredicate.andPredicate((Predicate<? super Object>) identityPredicate0, (Predicate<? super Object>) identityPredicate0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("bumG%T*5h`,-{fM?]", "", intArray0, (Throwable) null);
      batchUpdateException0.getLocalizedMessage();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("bumG%T*5h`,-{fM?]", batchUpdateException0);
      Transformer<Object, SQLTransientException> transformer0 = ConstantTransformer.constantTransformer((SQLTransientException) sQLTransientConnectionException0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLTransientConnectionException0, (Transformer<? super Object, ?>) transformer0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) identityPredicate0);
      Object object1 = new Object();
      IteratorUtils.arrayIterator(objectArray0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "bumG%T*5h`,-{fM?]", "bumG%T*5h`,-{fM?]", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      IteratorUtils.toArray(iterator0);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      IteratorUtils.arrayListIterator(integerArray0, 0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      EmptyMapIterator.emptyMapIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Array class must not be null", "<8?wazlEC<q|glr");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("org.apache.commons.collections4.functors.NullIsTruePredicate");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException(sQLRecoverableException3);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "delimiter may not be null", (-2794), sQLRecoverableException1);
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException((String) null, (String) null, sQLTransientConnectionException0);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) resettableIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IteratorUtils.singletonListIterator((HashSet<LinkedHashSet>) linkedHashSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      OrderedMapIterator<SQLDataException, PriorityQueue<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, allPredicate0);
      TruePredicate.truePredicate();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<SQLTransactionRollbackException, HashMap<SQLNonTransientException, SQLWarning>> hashMap0 = new HashMap<SQLTransactionRollbackException, HashMap<SQLNonTransientException, SQLWarning>>();
      EntrySetMapIterator<SQLTransactionRollbackException, HashMap<SQLNonTransientException, SQLWarning>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, HashMap<SQLNonTransientException, SQLWarning>>(hashMap0);
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(entrySetMapIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 4);
      // Undeclared exception!
      try { 
        OnePredicate.onePredicate((Predicate<? super SQLException>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonIterator<PriorityQueue<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLRecoverableException>>(priorityQueue0, true);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("%4nFLuaaWt");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) constantTransformer0, "%4nFLuaaWt", "%4nFLuaaWt", "org.apache.commons.collections4.IteratorUtils");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("transformer may nt be null");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("transformer may nt be null", "Y1*+I~iV");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils");
      sQLSyntaxErrorException1.setNextException(sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      OrderedMapIterator<IIOMetadataNode, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (long) (-1661));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]MF[LxKUa");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) resettableIterator0;
      iteratorArray0[2] = (Iterator<SQLRecoverableException>) resettableIterator0;
      iteratorArray0[3] = (Iterator<SQLRecoverableException>) resettableIterator0;
      iteratorArray0[4] = (Iterator<SQLRecoverableException>) resettableIterator0;
      iteratorArray0[5] = (Iterator<SQLRecoverableException>) resettableIterator0;
      iteratorArray0[6] = (Iterator<SQLRecoverableException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iteratorArray0[2], (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      NullPredicate.nullPredicate();
      OrderedMapIterator<SQLDataException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, 0L);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) boundedIterator0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.singletonListIterator((HashSet<LinkedHashSet>) hashSet0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) singletonListIterator0;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PrototypeCloneFactory: Clone method must be public");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(allPredicate0, allPredicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Factory<SQLClientInfoException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLClientInfoException> factoryTransformer0 = new FactoryTransformer<Object, SQLClientInfoException>(factory0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) factoryTransformer0, (Predicate<? super Object>) predicateArray0[0]);
      predicateArray0[1] = predicate0;
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate3, (Predicate<? super Object>) predicate2);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) iteratorArray0[0], (Iterator<?>) iteratorArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) orPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.singletonListIterator((HashSet<LinkedHashSet>) hashSet0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PrototypeCloneFactory: Clone method must be public");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.singletonListIterator((HashSet<LinkedHashSet>) hashSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$l[z$Fmk/Y");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      MapIterator<SQLTransactionRollbackException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Transformer<SQLTransactionRollbackException, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashMap0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) transformer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      arrayDeque0.add(sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(">FMDA.", "YLso", 1190);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("YLso", "Estimated size must be greater than 0", (-710), sQLSyntaxErrorException1);
      IteratorUtils.singletonIterator((ArrayDeque<LinkedHashSet>) arrayDeque0);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Array class must not be null");
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator1);
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<SQLDataException, PriorityQueue<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(allPredicate0, allPredicate0);
      TruePredicate.truePredicate();
      FalsePredicate.falsePredicate();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null);
      SQLDataException sQLDataException1 = new SQLDataException("Estimated size must be greater than 0");
      SQLDataException sQLDataException2 = new SQLDataException(sQLSyntaxErrorException1);
      IteratorUtils.arrayIterator((Object[]) iteratorArray0);
      OrderedMapIterator<StringTokenizer, StringTokenizer> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<StringTokenizer, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<StringTokenizer, StringTokenizer>(orderedMapIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) abstractMapIteratorDecorator0, (long) 1647, (long) 1647);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[1] = null;
      Object object0 = new Object();
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      AndPredicate.andPredicate((Predicate<? super Object>) identityPredicate0, (Predicate<? super Object>) identityPredicate0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("bumG%T*5h`,-{fM?]", "", intArray0, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("bumG%T*5h`,-{fM?]", batchUpdateException0);
      Transformer<Object, SQLTransientException> transformer0 = ConstantTransformer.constantTransformer((SQLTransientException) sQLTransientConnectionException0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLTransientConnectionException0, (Transformer<? super Object, ?>) transformer0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) identityPredicate0);
      Object object1 = new Object();
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.size(resettableIterator1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cursor closed", batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Consumer<BatchUpdateException> consumer0 = (Consumer<BatchUpdateException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) singletonIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]MF[LxKUa", "]MF[LxKUa", 0, hashMap0, batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterable0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) arrayDeque0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) arrayDeque0;
      objectArray0[5] = (Object) iterable0;
      objectArray0[6] = (Object) integer0;
      IteratorUtils.arrayIterator(objectArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.singletonListIterator((HashSet<LinkedHashSet>) hashSet0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) singletonListIterator0;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 0, int0);
      IteratorUtils.arrayIterator((Object[]) iteratorArray0);
      IteratorUtils.isEmpty(resettableListIterator0);
      String string0 = "%$";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("%$");
      Comparator<Object> comparator0 = null;
      int int1 = 16;
      int int2 = (-1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("iterator", "iterator");
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) orderedIterator0, (Object) sQLTransientException0);
      EmptyMapIterator.emptyMapIterator();
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      Hashtable<SQLTransientException, InstanceofPredicate> hashtable0 = new Hashtable<SQLTransientException, InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      Object object2 = IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[3] = object2;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) resettableListIterator0, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "]MF[LxKUa";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]MF[LxKUa");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 9);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableIterator0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.size(iterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) notPredicate0);
      Integer integer0 = new Integer(771);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (int) integerArray0[1], 1646);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "]MF[LxKUa";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]MF[LxKUa");
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, hashtable0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      OrderedMapIterator<SQLDataException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(orderedMapIterator0);
      MapIterator<SQLDataException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLNonTransientConnectionException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) abstractMapIteratorDecorator0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Y1*+I~iV", "");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException1);
      sQLSyntaxErrorException0.setNextException(sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("org.apache.commons.collections4.iterators.IteratorEnumeration", "org.apache.commons.collections4.iterators.IteratorEnumeration", (-2489), sQLTimeoutException0);
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      HashMap<SQLTimeoutException, String> hashMap0 = new HashMap<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashMap0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null, (Collection<? super SQLTimeoutException>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("R1u)$Za!");
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, (String) null);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException(sQLTimeoutException2);
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("tlx^sDam4/19@Q+Q", "", 61, sQLTimeoutException1);
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashtable0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayDeque0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]MF[LxKUa");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 9);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableIterator0;
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.emptyIterator();
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) resettableIterator1;
      ResettableIterator<SQLTimeoutException> resettableIterator2 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) resettableIterator2;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      int[] intArray0 = new int[7];
      intArray0[0] = 1656;
      int int0 = (-91);
      intArray0[1] = (-91);
      intArray0[2] = 1657;
      intArray0[3] = 902;
      intArray0[4] = 10;
      intArray0[5] = (-487);
      intArray0[6] = 61;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("%+&?2%}(DA51@=g1PT", intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%+&?2%}(DA51@=g1PT", batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("R1u)$Za!");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "|LMSO^v");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("R1u)$Za!", "T1t", (-242), sQLTransactionRollbackException0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("Entry does not exist: ", "Entry does not exist: ", 10, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException(sQLTimeoutException3);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("tlx^sDam4/19@Q+Q", "NrLJNk|Sh6Fo,", 755, sQLTransactionRollbackException0);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException(sQLTimeoutException2);
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) resettableListIterator0;
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashtable0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) linkedHashSet0);
      iteratorArray0[4] = iterator0;
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[5] = (Iterator<SQLTimeoutException>) orderedIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("*#f8.y", "vK#;", 10, sQLTimeoutException6);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(sQLNonTransientConnectionException0, 4074);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "", 0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientException0, (-1), (-2211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      IteratorUtils.emptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      String string0 = "Closure must not be null";
      SQLDataException sQLDataException0 = new SQLDataException("", "", (Throwable) null);
      SQLDataException sQLDataException1 = new SQLDataException((Throwable) null);
      Object[] objectArray0 = new Object[8];
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate2);
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 1505);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getOwnerDocument();
      iIOMetadataNode0.getAttributeNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      AndPredicate.andPredicate((Predicate<? super Object>) nullIsTruePredicate0, (Predicate<? super Object>) nullIsTruePredicate0);
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) predicate0);
      iIOMetadataNode0.normalize();
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.isEmpty(nodeListIterator0);
      Boolean[] booleanArray0 = new Boolean[7];
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(nullIsTruePredicate0);
      SQLException sQLException0 = new SQLException();
      Boolean boolean0 = predicateTransformer0.transform(sQLException0);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(sQLException0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(sQLException0);
      booleanArray0[2] = boolean2;
      PredicateTransformer<SQLException> predicateTransformer1 = new PredicateTransformer<SQLException>(predicate1);
      Boolean boolean3 = predicateTransformer1.transform(sQLException0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(sQLException0);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer1.transform(sQLException0);
      booleanArray0[5] = boolean5;
      Boolean boolean6 = predicateTransformer1.transform(sQLException0);
      booleanArray0[6] = boolean6;
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      IteratorUtils.isEmpty(objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      IteratorUtils.emptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) null, (-1L), 399L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      IteratorUtils.emptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, LinkedHashSet<SQLDataException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      IteratorUtils.emptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) mapIterator0;
      IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.isEmpty(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) list0);
      IteratorUtils.getIterator(predicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLNonTransientException> list1 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.loopingListIterator(list1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 5, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) list0);
      IteratorUtils.getIterator(batchUpdateException0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLNonTransientException> list1 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.loopingListIterator(list1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1514, batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("!)g0Da')H0'?", sQLTransactionRollbackException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException("P7^0hD.", sQLTimeoutException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTimeoutException0);
      SQLDataException sQLDataException2 = new SQLDataException(sQLClientInfoException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("!)g0Da')H0'?");
      sQLDataExceptionArray0[4] = sQLDataException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1514, 1514);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterable<SQLFeatureNotSupportedException> iterable0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer(31);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U");
      priorityQueue0.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) priorityQueue0);
      int[] intArray0 = new int[4];
      intArray0[0] = 31;
      intArray0[1] = (-1042);
      intArray0[2] = 31;
      intArray0[3] = 31;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("U", "U", (-1042), batchUpdateException0);
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 194, hashtable0, batchUpdateException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("U", map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("U", "U", map1);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "U", map1, batchUpdateException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("The prototype must be cloneable via a public clone method", "1EXeYS_BA,`sGV*B", map1, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("org.apache.commons.collections4.functors.ExceptionTransformer", (String) null, map1);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException(hashtable0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException8;
      SQLClientInfoException sQLClientInfoException9 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException9;
      SQLClientInfoException sQLClientInfoException10 = new SQLClientInfoException("U", "", 10, map0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 1715);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      IteratorUtils.arrayIterator(instanceofPredicateArray0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) stack0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.toArray(iterator0);
      Iterator<SQLDataException> iterator1 = EmptyIterator.emptyIterator();
      Predicate<SQLException> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) iterator1, (Predicate<? super SQLNonTransientException>) predicate1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Collection must not be null", (int[]) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      SQLException sQLException0 = new SQLException("/vPYv85v8[w", "iterator", 2);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("@,A", "/vPYv85v8[w", 2, (long[]) null, sQLException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[3] = object2;
      Object object3 = IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[4] = object3;
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate(object0, comparator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2552;
      longArray0[1] = (long) 2552;
      longArray0[2] = (long) 2552;
      longArray0[3] = (long) 2552;
      longArray0[4] = (long) 2552;
      longArray0[5] = (long) 2552;
      longArray0[6] = (long) 2552;
      longArray0[7] = (long) 2552;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("r,2kV>hdO~4ZCW)", "(this Map)", 2552, longArray0, (Throwable) null);
      hashSet0.add(batchUpdateException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) hashSet0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, LinkedHashSet<SQLDataException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, LinkedHashSet<SQLDataException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      IteratorUtils.emptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) mapIterator1;
      IteratorUtils.arrayIterator(objectArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) list0);
      IteratorUtils.getIterator(predicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLNonTransientException> list1 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.loopingListIterator(list1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1, (-906));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, LinkedHashSet<SQLDataException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) singletonIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = new SQLDataException("[", (String) null, (-602), batchUpdateException0);
      SQLDataException sQLDataException2 = new SQLDataException("f", "f", sQLDataException0);
      SQLDataException sQLDataException3 = new SQLDataException((String) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      sQLDataExceptionArray0[0] = sQLDataException1;
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException3);
      sQLDataExceptionArray0[1] = sQLDataException4;
      sQLDataExceptionArray0[2] = sQLDataException3;
      sQLDataExceptionArray0[3] = sQLDataException0;
      sQLDataExceptionArray0[4] = sQLDataException0;
      sQLDataExceptionArray0[5] = sQLDataException1;
      sQLDataExceptionArray0[6] = sQLDataException0;
      sQLDataExceptionArray0[7] = sQLDataException3;
      ResettableListIterator<SQLDataException> resettableListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException2);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("AAe-OV)[7v,IkGv");
      int int0 = 1;
      SQLDataException sQLDataException1 = new SQLDataException("Itk(pTe_qxKPl9*AD`+", "List must not be null", 1);
      SQLDataException sQLDataException2 = new SQLDataException("", "", batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("CkB-W}l7%7xk0", sQLDataException0);
      SQLDataException sQLDataException3 = new SQLDataException(sQLNonTransientConnectionException0);
      SQLDataException sQLDataException4 = new SQLDataException("}|(l{:Q8a ", "List must not be null");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException5 = new SQLDataException("");
      sQLDataExceptionArray0[0] = sQLDataException5;
      sQLDataExceptionArray0[1] = sQLDataException2;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 1212);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      String string0 = null;
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("URxYK'C?y", "List must not be null", 705);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Closure must not be null", "rray clas must not be null", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 705, (Map<String, ClientInfoStatus>) null, sQLDataException1);
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[5] = iterator0;
      iteratorArray0[6] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "", 0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("", (String) null, sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException2);
      SQLDataException sQLDataException3 = new SQLDataException("", batchUpdateException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException3);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "", (-602), sQLDataException1);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("", "", sQLDataException4);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException((String) null);
      sQLDataExceptionArray0[7] = sQLDataException7;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.singletonListIterator((HashSet<LinkedHashSet>) hashSet0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) singletonListIterator0;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) resettableIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<SQLClientInfoException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.singletonListIterator((SQLNonTransientConnectionException) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableIterator<LinkedHashSet<SQLDataException>> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = 12;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      IteratorUtils.asIterable((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) singletonListIterator0);
      IteratorUtils.unmodifiableIterator(iterator0);
      ArrayList<SQLRecoverableException>[] arrayListArray0 = (ArrayList<SQLRecoverableException>[]) Array.newInstance(ArrayList.class, 1);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      arrayListArray0[0] = arrayList0;
      IteratorUtils.arrayListIterator(arrayListArray0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[9];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1148);
      intArray0[1] = 100;
      intArray0[2] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("!x\"?LJ_/O|Yne3lPW", "NodeList must not be null", intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("!x\"?LJ_/O|Yne3lPW", intArray0, batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("!x\"?LJ_/O|Yne3lPW", batchUpdateException1);
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation((-3181), false, false, 1657, (-1148));
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1148), false, true, (-3181), (-448));
      sQLWarningArray0[2] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning1 = new SQLWarning(batchUpdateException1);
      sQLWarningArray0[3] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("!x\"?LJ_/O|Yne3lPW", "NodeList must not be null", batchUpdateException1);
      sQLWarningArray0[4] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning(dataTruncation1);
      sQLWarningArray0[5] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning("!x\"?LJ_/O|Yne3lPW", "!x\"?LJ_/O|Yne3lPW", (-1148), sQLWarning3);
      sQLWarningArray0[6] = sQLWarning4;
      SQLException sQLException0 = new SQLException("start", "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", 1428);
      DataTruncation dataTruncation2 = new DataTruncation(100, true, true, (-1148), (-3181), sQLException0);
      sQLWarningArray0[7] = (SQLWarning) dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(9, true, true, (-1148), (-1682));
      sQLWarningArray0[8] = (SQLWarning) dataTruncation3;
      IteratorUtils.arrayIterator(sQLWarningArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MapIterator<SQLException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLException>) mapIterator0);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) resettableListIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ReverseListIterator<InstanceofPredicate> reverseListIterator0 = new ReverseListIterator<InstanceofPredicate>(stack0);
      reverseListIterator0.reset();
      IteratorUtils.collatedIterator((Comparator<? super Predicate<Object>>) null, (Iterator<? extends Predicate<Object>>) reverseListIterator0, (Iterator<? extends Predicate<Object>>) reverseListIterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(locale_CategoryArray0, 401);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, (-63), sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals((-63), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, "", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, (String) null, (-63));
      assertNotNull(sQLNonTransientConnectionException2);
      assertEquals((-63), sQLNonTransientConnectionException2.getErrorCode());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      assertNotNull(sQLNonTransientConnectionException3);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.toString());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("", "", sQLNonTransientConnectionException3);
      assertNotNull(sQLNonTransientConnectionException4);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.toString());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException4.toString());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException4.getMessage());
      assertEquals("", sQLNonTransientConnectionException4.getSQLState());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLException sQLException0 = new SQLException("9?t`Xr+izD,6", "", (-448), sQLNonTransientConnectionException2);
      assertNotNull(sQLException0);
      assertEquals((-63), sQLNonTransientConnectionException2.getErrorCode());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertEquals("9?t`Xr+izD,6", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: 9?t`Xr+izD,6", sQLException0.toString());
      assertEquals("", sQLException0.getSQLState());
      assertEquals((-448), sQLException0.getErrorCode());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException4));
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals((-63), sQLNonTransientConnectionException2.getErrorCode());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertEquals("9?t`Xr+izD,6", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: 9?t`Xr+izD,6", sQLException0.toString());
      assertEquals("", sQLException0.getSQLState());
      assertEquals((-448), sQLException0.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLException: 9?t`Xr+izD,6", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLException: 9?t`Xr+izD,6", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException4));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(",-S0wZa(s9%Wwf4&cL", "", (-63), sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException5);
      assertEquals((-63), sQLNonTransientConnectionException2.getErrorCode());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertEquals("9?t`Xr+izD,6", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: 9?t`Xr+izD,6", sQLException0.toString());
      assertEquals("", sQLException0.getSQLState());
      assertEquals((-448), sQLException0.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLException: 9?t`Xr+izD,6", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLException: 9?t`Xr+izD,6", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,-S0wZa(s9%Wwf4&cL", sQLNonTransientConnectionException5.toString());
      assertEquals((-63), sQLNonTransientConnectionException5.getErrorCode());
      assertEquals(",-S0wZa(s9%Wwf4&cL", sQLNonTransientConnectionException5.getMessage());
      assertEquals("", sQLNonTransientConnectionException5.getSQLState());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("3?", "=$rG6XrEcU\"\"TYl@?y", (-448), sQLNonTransientConnectionException4);
      assertNotNull(sQLNonTransientConnectionException6);
      assertEquals("java.sql.SQLNonTransientConnectionException: 3?", sQLNonTransientConnectionException6.toString());
      assertEquals((-448), sQLNonTransientConnectionException6.getErrorCode());
      assertEquals("=$rG6XrEcU\"\"TYl@?y", sQLNonTransientConnectionException6.getSQLState());
      assertEquals("3?", sQLNonTransientConnectionException6.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.toString());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException4.toString());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException4.getMessage());
      assertEquals("", sQLNonTransientConnectionException4.getSQLState());
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("", "{BE&Q", (-1652), sQLNonTransientConnectionException4);
      assertNotNull(sQLNonTransientConnectionException7);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException7.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException7.toString());
      assertEquals("{BE&Q", sQLNonTransientConnectionException7.getSQLState());
      assertEquals((-1652), sQLNonTransientConnectionException7.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.toString());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException4.toString());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException4.getMessage());
      assertEquals("", sQLNonTransientConnectionException4.getSQLState());
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException6));
      
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("");
      assertNotNull(sQLNonTransientConnectionException8);
      assertEquals(0, sQLNonTransientConnectionException8.getErrorCode());
      assertNull(sQLNonTransientConnectionException8.getSQLState());
      assertEquals("", sQLNonTransientConnectionException8.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException8.toString());
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException7));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-448), (-63));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = 0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(8, objectArray0.length);
      
      int int1 = 1659;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableIterator0, 1659);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1651
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = 0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(8, objectArray0.length);
      
      Object object0 = IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      assertNotNull(object3);
      assertEquals(8, objectArray0.length);
      assertFalse(object3.equals((Object)object2));
      assertNotSame(object3, object2);
      assertSame(object3, object1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      objectArray0[3] = object3;
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Vector<Properties> vector0 = new Vector<Properties>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(vector0);
      assertNotNull(loopingListIterator0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) loopingListIterator0);
      assertNotNull(iterator1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(iterator1.equals((Object)iterator0));
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator1);
      assertNotNull(enumeration0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(iterator1.equals((Object)iterator0));
      
      OrderedMapIterator<SQLDataException, PriorityQueue<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLDataException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(mapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLWarning sQLWarning0 = new SQLWarning("oF5An@P.y_GN0Y;4e", "The transformer to call must not be null");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("The transformer to call must not be null", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: oF5An@P.y_GN0Y;4e", sQLWarning0.toString());
      assertEquals("oF5An@P.y_GN0Y;4e", sQLWarning0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("oF5An@P.y_GN0Y;4e", hashMap0, sQLWarning0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("The transformer to call must not be null", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: oF5An@P.y_GN0Y;4e", sQLWarning0.toString());
      assertEquals("oF5An@P.y_GN0Y;4e", sQLWarning0.getMessage());
      assertEquals("oF5An@P.y_GN0Y;4e", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: oF5An@P.y_GN0Y;4e", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("The transformer to call must not be null", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: oF5An@P.y_GN0Y;4e", sQLWarning0.toString());
      assertEquals("oF5An@P.y_GN0Y;4e", sQLWarning0.getMessage());
      assertEquals("oF5An@P.y_GN0Y;4e", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: oF5An@P.y_GN0Y;4e", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(">FMDA.", "YLso", 1190);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("YLso", sQLSyntaxErrorException0.getSQLState());
      assertEquals(">FMDA.", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: >FMDA.", sQLSyntaxErrorException0.toString());
      assertEquals(1190, sQLSyntaxErrorException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("YLso", "Estimated size must be greater than 0", (-710), sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("YLso", sQLSyntaxErrorException0.getSQLState());
      assertEquals(">FMDA.", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: >FMDA.", sQLSyntaxErrorException0.toString());
      assertEquals(1190, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("YLso", sQLSyntaxErrorException1.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: YLso", sQLSyntaxErrorException1.toString());
      assertEquals((-710), sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      boolean boolean0 = arrayDeque0.add(sQLSyntaxErrorException1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("YLso", sQLSyntaxErrorException0.getSQLState());
      assertEquals(">FMDA.", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: >FMDA.", sQLSyntaxErrorException0.toString());
      assertEquals(1190, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("YLso", sQLSyntaxErrorException1.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: YLso", sQLSyntaxErrorException1.toString());
      assertEquals((-710), sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains(sQLSyntaxErrorException1));
      assertFalse(arrayDeque0.contains(sQLSyntaxErrorException0));
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      ResettableIterator<ArrayDeque<LinkedHashSet>> resettableIterator0 = IteratorUtils.singletonIterator((ArrayDeque<LinkedHashSet>) arrayDeque0);
      assertNotNull(resettableIterator0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(sQLSyntaxErrorException1));
      assertFalse(arrayDeque0.contains(sQLSyntaxErrorException0));
      
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator1);
      assertNotNull(enumeration0);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<SQLDataException, PriorityQueue<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<SQLDataException>) zippingIterator0;
      MapIterator<SQLDataException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(mapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      
      iteratorArray0[1] = (Iterator<SQLDataException>) abstractMapIteratorDecorator0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("YLso", hashMap0, sQLSyntaxErrorException1);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: YLso", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("YLso", sQLClientInfoException0.getMessage());
      assertEquals("YLso", sQLSyntaxErrorException0.getSQLState());
      assertEquals(">FMDA.", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: >FMDA.", sQLSyntaxErrorException0.toString());
      assertEquals(1190, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("YLso", sQLSyntaxErrorException1.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: YLso", sQLSyntaxErrorException1.toString());
      assertEquals((-710), sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: YLso", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("YLso", sQLClientInfoException0.getMessage());
      assertEquals("YLso", sQLSyntaxErrorException0.getSQLState());
      assertEquals(">FMDA.", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: >FMDA.", sQLSyntaxErrorException0.toString());
      assertEquals(1190, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("YLso", sQLSyntaxErrorException1.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: YLso", sQLSyntaxErrorException1.toString());
      assertEquals((-710), sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Estimated size must be greater than 0", "", (-710), map0, sQLSyntaxErrorException0);
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: YLso", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("YLso", sQLClientInfoException0.getMessage());
      assertEquals("YLso", sQLSyntaxErrorException0.getSQLState());
      assertEquals(">FMDA.", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: >FMDA.", sQLSyntaxErrorException0.toString());
      assertEquals(1190, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("YLso", sQLSyntaxErrorException1.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: YLso", sQLSyntaxErrorException1.toString());
      assertEquals((-710), sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: Estimated size must be greater than 0", sQLClientInfoException1.toString());
      assertEquals((-710), sQLClientInfoException1.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLClientInfoException1.getMessage());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(sQLClientInfoException1, 44, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Document document0 = iIOMetadataNode0.getOwnerDocument();
      assertNull(document0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNode("");
      assertNull(attr0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertTrue(properties1.equals((Object)properties0));
      
      Properties properties2 = new Properties();
      assertNotNull(properties2);
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) null, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "}]8Qy!'',wob= ";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("}]8Qy!'',wob= ");
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNode("}]8Qy!'',wob= ");
      assertNull(attr0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("}]8Qy!'',wob= ");
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNode("}]8Qy!'',wob= ");
      assertNull(attr0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      assertNotNull(arrayDeque1);
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLTransientConnectionException> arrayDeque2 = new ArrayDeque<SQLTransientConnectionException>();
      assertNotNull(arrayDeque2);
      assertEquals(0, arrayDeque2.size());
      assertTrue(arrayDeque2.isEmpty());
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLTransientConnectionException> arrayDeque3 = new ArrayDeque<SQLTransientConnectionException>();
      assertNotNull(arrayDeque3);
      assertTrue(arrayDeque3.isEmpty());
      assertEquals(0, arrayDeque3.size());
      assertFalse(arrayDeque3.equals((Object)arrayDeque1));
      assertFalse(arrayDeque3.equals((Object)arrayDeque2));
      assertFalse(arrayDeque3.equals((Object)arrayDeque0));
      
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLTransientConnectionException> arrayDeque4 = new ArrayDeque<SQLTransientConnectionException>();
      assertNotNull(arrayDeque4);
      assertEquals(0, arrayDeque4.size());
      assertTrue(arrayDeque4.isEmpty());
      assertFalse(arrayDeque4.equals((Object)arrayDeque2));
      assertFalse(arrayDeque4.equals((Object)arrayDeque1));
      assertFalse(arrayDeque4.equals((Object)arrayDeque3));
      assertFalse(arrayDeque4.equals((Object)arrayDeque0));
      
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLTransientConnectionException> arrayDeque5 = new ArrayDeque<SQLTransientConnectionException>();
      assertNotNull(arrayDeque5);
      assertEquals(0, arrayDeque5.size());
      assertTrue(arrayDeque5.isEmpty());
      assertFalse(arrayDeque5.equals((Object)arrayDeque1));
      assertFalse(arrayDeque5.equals((Object)arrayDeque3));
      assertFalse(arrayDeque5.equals((Object)arrayDeque2));
      assertFalse(arrayDeque5.equals((Object)arrayDeque4));
      assertFalse(arrayDeque5.equals((Object)arrayDeque0));
      
      arrayDequeArray0[5] = arrayDeque5;
      ResettableIterator<ArrayDeque<SQLTransientConnectionException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(6, arrayDequeArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedMapIterator<SQLWarning, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, LinkedHashSet<SQLDataException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTransientConnectionException, LinkedHashSet<SQLDataException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      boolean boolean0 = IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      assertFalse(boolean0);
      
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      
      OrderedIterator<ServiceLoader<SQLDataException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<ServiceLoader<SQLDataException>>) orderedIterator0, (Predicate<? super ServiceLoader<SQLDataException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<Vector<SQLNonTransientConnectionException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, 31, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ResettableIterator<HashSet<SQLException>> resettableIterator0 = IteratorUtils.singletonIterator((HashSet<SQLException>) linkedHashSet0);
      assertNotNull(resettableIterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      int int0 = 61;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) linkedHashSet0, 61, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLException sQLException0 = new SQLException("=o2", (String) null);
      assertNotNull(sQLException0);
      assertEquals("=o2", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: =o2", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("=o2", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: =o2", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: =o2", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException: =o2", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.WhileClosure", (String) null, sQLClientInfoException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("=o2", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: =o2", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: =o2", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException: =o2", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.WhileClosure", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.WhileClosure", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("=o2", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: =o2", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: =o2", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException: =o2", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.WhileClosure", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.WhileClosure", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Entry does not exist: ", "", 31, sQLDataException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("=o2", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: =o2", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: =o2", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException: =o2", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.WhileClosure", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.WhileClosure", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(31, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Entry does not exist: ", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Entry does not exist: ", sQLSyntaxErrorException0.toString());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, (-98), 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) null, (Object) null);
      assertFalse(boolean0);
      
      MapIterator<SQLTransactionRollbackException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      HashMap<SQLTransactionRollbackException, InstanceofPredicate> hashMap0 = new HashMap<SQLTransactionRollbackException, InstanceofPredicate>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = (-255);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "", (-255), sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals((-255), sQLTransactionRollbackException0.getErrorCode());
      
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      InstanceofPredicate instanceofPredicate1 = hashMap0.put(sQLTransactionRollbackException0, instanceofPredicate0);
      assertNull(instanceofPredicate1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals((-255), sQLTransactionRollbackException0.getErrorCode());
      
      Transformer<SQLTransactionRollbackException, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) hashMap0);
      assertNotNull(transformer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Predicate<Object>>) transformer0);
      assertNotNull(iterator0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<SQLTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      int int0 = IteratorUtils.size(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, int0);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLFeatureNotSupportedException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, "ExceptionPredicate invoked", sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException2);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertEquals("ExceptionPredicate invoked", sQLNonTransientConnectionException2.getSQLState());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, "");
      assertNotNull(sQLNonTransientConnectionException3);
      assertEquals("", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.toString());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertNull(sQLNonTransientConnectionException3.getMessage());
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("", "");
      assertNotNull(sQLNonTransientConnectionException4);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException4.toString());
      assertEquals("", sQLNonTransientConnectionException4.getSQLState());
      assertEquals("", sQLNonTransientConnectionException4.getMessage());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", "org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", 32, sQLNonTransientConnectionException4);
      assertNotNull(sQLNonTransientConnectionException5);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException4.toString());
      assertEquals("", sQLNonTransientConnectionException4.getSQLState());
      assertEquals("", sQLNonTransientConnectionException4.getMessage());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals(32, sQLNonTransientConnectionException5.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException5.getMessage());
      assertEquals("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", sQLNonTransientConnectionException5.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException5.toString());
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("", "ExceptionPredicate invoked", sQLNonTransientConnectionException5);
      assertNotNull(sQLNonTransientConnectionException6);
      assertEquals(0, sQLNonTransientConnectionException6.getErrorCode());
      assertEquals("ExceptionPredicate invoked", sQLNonTransientConnectionException6.getSQLState());
      assertEquals("", sQLNonTransientConnectionException6.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException6.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException4.toString());
      assertEquals("", sQLNonTransientConnectionException4.getSQLState());
      assertEquals("", sQLNonTransientConnectionException4.getMessage());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals(32, sQLNonTransientConnectionException5.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException5.getMessage());
      assertEquals("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", sQLNonTransientConnectionException5.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException5.toString());
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException((String) null);
      assertNotNull(sQLNonTransientConnectionException7);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException7.toString());
      assertNull(sQLNonTransientConnectionException7.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException7.getErrorCode());
      assertNull(sQLNonTransientConnectionException7.getMessage());
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException6));
      
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      assertNotNull(singletonListIterator0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(boolean0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%4nFLuaaWt");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(transformer0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        singletonListIterator0.add(iIOMetadataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported by this iterator
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}3.U_YQ'U}w6dp", "");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "@,kS\"2MFV8<0X4P9{", 1515, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "{", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("{", "{", 1515);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", "x[Dc*R*)v`U7pVT%", 1515, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 1515);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<TreeSet<SQLTransientConnectionException>>) null, (Predicate<? super TreeSet<SQLTransientConnectionException>>) nonePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      OrderedMapIterator<SQLException, Object> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) orderedMapIterator1, (Predicate<? super SQLException>) nonePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer(31);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U");
      priorityQueue0.add(integer0);
      OrderedMapIterator<SQLDataException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(orderedMapIterator1);
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("N1eur75vd1{^E?k#", "N1eur75vd1{^E?k#", hashtable0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      IteratorUtils.isEmpty(listIterator0);
      OrderedMapIterator<SQLDataException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(orderedMapIterator0);
      MapIterator<SQLDataException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientConnectionException>(mapIterator0);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) abstractMapIteratorDecorator0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) listIterator1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot store a duplicate key (\"", "Cannot store a duplicate key (\"", 2946);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) singletonIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "[", 0, hashMap0, batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.arrayIterator(iteratorArray0);
      IteratorUtils.arrayIterator(iteratorArray0, 0, 0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      int[] intArray0 = new int[0];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Estimated size must be greater than 0", intArray0, sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Estimated size must be greater than 0", batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 2275, (-201), sQLTransactionRollbackException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2275, true, true, 524, 0, batchUpdateException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(524, true, true, 0, 0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-2715), false, true, (-2715), (-2946));
      dataTruncationArray0[3] = dataTruncation3;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<StringTokenizer, StringTokenizer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends StringTokenizer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer>(orderedMapIterator1);
      MapIterator<StringTokenizer, StringTokenizer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, StringTokenizer>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<StringTokenizer, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<StringTokenizer, StringTokenizer>(mapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) abstractMapIteratorDecorator0, (Iterator<? extends StringTokenizer>) orderedMapIterator0);
      OrderedMapIterator<IIOMetadataNode, Iterator<StringTokenizer>> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator2, (Iterator<? extends IIOMetadataNode>) orderedMapIterator2, (Iterator<? extends IIOMetadataNode>) orderedMapIterator2);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException((String) null, ")Ft");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(")Ft");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("A P.eZb4D+M", (String) null, sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("org.apache.commons.collections4.functors.ExceptionClosure", sQLDataException2);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException((String) null, "org.apache.commons.collections4.functors.ExceptionClosure", (-572));
      sQLDataExceptionArray0[5] = sQLDataException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, (-987), (-987));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MapIterator<PriorityQueue<ClientInfoStatus>, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = 705;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 705, 705);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Predicate<DataTruncation> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super DataTruncation>>) list0);
      IteratorUtils.getIterator(predicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLNonTransientException> list1 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.loopingListIterator(list1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      int int0 = 1;
      int int1 = (-906);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1, (-906));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("qMN{u;8Lqd<d+w4B%");
      sQLExceptionArray0[0] = (SQLException) sQLFeatureNotSupportedException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("k9UENa^S^phYmX", sQLFeatureNotSupportedException0);
      sQLExceptionArray0[1] = (SQLException) sQLTransientException0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>(hashtable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 0, hashtable1, sQLFeatureNotSupportedException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("=|2sH", "", 3824, map0);
      sQLExceptionArray0[2] = (SQLException) sQLClientInfoException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLClientInfoException0);
      sQLExceptionArray0[3] = (SQLException) sQLNonTransientException0;
      MockThrowable mockThrowable0 = new MockThrowable(">JZ3uM os^O<p%fZ3");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("delimiter may not be null", sQLTimeoutException0);
      sQLExceptionArray0[4] = (SQLException) sQLDataException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "s1+#k");
      sQLExceptionArray0[5] = (SQLException) sQLTransactionRollbackException0;
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MapIterator<EnumSet<Locale.Category>, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0);
      EmptyMapIterator.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) anyPredicate0);
      predicateArray0[0] = predicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, anyPredicate0);
      predicateArray0[2] = (Predicate<Object>) transformedPredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicate0);
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 4 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }
}
