/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 09:10:35 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      SingletonIterator<ArrayList<DataTruncation>> singletonIterator0 = new SingletonIterator<ArrayList<DataTruncation>>(arrayList0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator1 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 9);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      Class<SQLClientInfoException> class8 = SQLClientInfoException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<Object, SQLFeatureNotSupportedException>("", classArray0, classArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) singletonIterator1, (Predicate<? super BatchUpdateException>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("oo7Ufz7I.X@", "G0FD@qM:", 1062, longArray0, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      singletonListIterator0.next();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      stack0.iterator();
      ReverseListIterator<SQLTransientException> reverseListIterator0 = new ReverseListIterator<SQLTransientException>(stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) reverseListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<StringTokenizer> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super StringTokenizer>>) stack0);
      String string0 = "(6";
      String string1 = "n]fim";
      StringTokenizer stringTokenizer0 = new StringTokenizer("(6", "X;<l2V^bscFs91w");
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      arrayList0.add(stringTokenizer0);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(arrayList0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) loopingListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      StringTokenizer stringTokenizer0 = new StringTokenizer("GXg", "GXg");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("|O!D.p*\"tO", "|O!D.p*\"tO");
      stringTokenizerArray0[1] = stringTokenizer1;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 2, 2);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableListIterator0, (Class<StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category7;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      Hashtable<Object, ClientInfoStatus> hashtable0 = new Hashtable<Object, ClientInfoStatus>();
      Transformer<Object, ClientInfoStatus> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends ClientInfoStatus>) hashtable0);
      SwitchTransformer<Object, ClientInfoStatus> switchTransformer0 = new SwitchTransformer<Object, ClientInfoStatus>((Predicate<? super Object>[]) null, (Transformer<? super Object, ? extends ClientInfoStatus>[]) null, transformer0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Transformer<? super Locale.Category, ? extends ClientInfoStatus>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("tSa_asY77$HL");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) iterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<StringTokenizer> iterator1 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) linkedList0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'tSa_asY77$HL' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "org.apache.commons.collections4.map.AbstractMapDecorator");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractMapDecorator", "org.apache.commons.collections4.map.AbstractMapDecorator", 3, sQLInvalidAuthorizationSpecException0);
      linkedList0.addLast(sQLNonTransientConnectionException0);
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(linkedList0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) loopingListIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) orderedIterator0, (Predicate<? super SQLTransientConnectionException>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2818, 2818);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.getIterator(class0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (-3471), hashtable0);
      Factory<SQLClientInfoException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLClientInfoException, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLClientInfoException, String>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 891;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 891);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      SingletonIterator<ArrayList<DataTruncation>> singletonIterator0 = new SingletonIterator<ArrayList<DataTruncation>>(arrayList0);
      int int0 = 0;
      IteratorUtils.get((Iterator<ArrayList<DataTruncation>>) singletonIterator0, 0);
      Comparator<Object> comparator0 = null;
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 9);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 6, (-957));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      SingletonIterator<ArrayList<DataTruncation>> singletonIterator0 = new SingletonIterator<ArrayList<DataTruncation>>(arrayList0);
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      LinkedHashSet<SQLTransientException> linkedHashSet1 = new LinkedHashSet<SQLTransientException>();
      LinkedHashSet<SQLTransientException> linkedHashSet2 = new LinkedHashSet<SQLTransientException>();
      LinkedHashSet<SQLTransientException> linkedHashSet3 = new LinkedHashSet<SQLTransientException>();
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<StringTokenizer> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super StringTokenizer>>) stack0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "tD_;G@v<4?^?,v");
      arrayList0.add(stringTokenizer0);
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) reverseListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) reverseListIterator0, class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-440));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", sQLNonTransientConnectionException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 99, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      SingletonIterator<ArrayList<DataTruncation>> singletonIterator0 = new SingletonIterator<ArrayList<DataTruncation>>(arrayList0);
      int int0 = 0;
      IteratorUtils.get((Iterator<ArrayList<DataTruncation>>) singletonIterator0, 0);
      Factory<Locale.Category> factory0 = ExceptionFactory.exceptionFactory();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator(factory0);
      LinkedHashSet<SQLTransientException>[] linkedHashSetArray0 = (LinkedHashSet<SQLTransientException>[]) Array.newInstance(LinkedHashSet.class, 7);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLTransientException> linkedHashSet1 = new LinkedHashSet<SQLTransientException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLTransientException> linkedHashSet2 = new LinkedHashSet<SQLTransientException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<SQLTransientException> linkedHashSet3 = new LinkedHashSet<SQLTransientException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      ArrayList<StringTokenizer> arrayList1 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIterator must not be null");
      arrayList1.add(stringTokenizer0);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList1);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<StringTokenizer> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super StringTokenizer>>) stack0);
      String string0 = "(6";
      String string1 = "Can extract singleton only when collection size == 1";
      StringTokenizer stringTokenizer1 = new StringTokenizer("(6", "Can extract singleton only when collection size == 1");
      arrayList1.add(stringTokenizer1);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) reverseListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) listIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0, defaultEquator0);
      AndPredicate<SQLInvalidAuthorizationSpecException> andPredicate0 = new AndPredicate<SQLInvalidAuthorizationSpecException>(equalPredicate0, predicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) andPredicate0);
      StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        Locale.Category.valueOf("6)2~hVJ-xJw/O=nj8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.Category.6)2~hVJ-xJw/O=nj8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SingletonIterator<ArrayList<DataTruncation>> singletonIterator0 = new SingletonIterator<ArrayList<DataTruncation>>((ArrayList<DataTruncation>) null);
      IteratorUtils.get((Iterator<ArrayList<DataTruncation>>) singletonIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("J=~O\t<Re$", "J=~O\t<Re$", (-1800), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException1, true);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) resettableIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, "", "", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1800));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("] ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("] ", "O?!^<37PX:P&j]wQqp", 2286, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException1.fillInStackTrace();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-37);
      byte byte1 = (byte)1;
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("O?!^<37PX:P&j]wQqp");
      sQLInvalidAuthorizationSpecException2.getStackTrace();
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException1, false);
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("J=~O\t<Re$", "J=~O\t<Re$", (-1800), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException1, true);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      IteratorUtils.emptyIterator();
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) mapIterator0, 1L);
      IteratorUtils.size(boundedIterator0);
      Integer integer0 = new Integer(0);
      IteratorUtils.getIterator("$m");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      Integer integer0 = new Integer(0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<Object, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<Object>) orderedMapIterator0, (Predicate<? super Object>) predicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException>(orderedMapIterator1);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Vector<SQLTransientConnectionException>>) null, (Predicate<? super Vector<SQLTransientConnectionException>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) objectArrayListIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, "", "Array class must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyIterator();
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      IteratorUtils.singletonIterator((HashSet<SQLTransactionRollbackException>) null);
      IteratorUtils.skippingIterator((Iterator<PriorityQueue<HashSet>>) iterator0, (long) 1);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 120, 4020);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      SingletonIterator<ArrayList<DataTruncation>> singletonIterator0 = new SingletonIterator<ArrayList<DataTruncation>>(arrayList0);
      IteratorUtils.get((Iterator<ArrayList<DataTruncation>>) singletonIterator0, 0);
      EmptyMapIterator.emptyMapIterator();
      ExceptionFactory.exceptionFactory();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      EntrySetMapIterator<SQLTimeoutException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLDataException>(hashMap0);
      MapIterator<SQLTimeoutException, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, SQLDataException>) entrySetMapIterator0);
      SingletonIterator<Iterator<SQLTimeoutException>> singletonIterator0 = new SingletonIterator<Iterator<SQLTimeoutException>>(mapIterator0);
      String string0 = IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) singletonIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, "j,;L>L%A", "org.apache.commons.collections4.IteratorUtils", "F OKHfX})'%i*}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      OrderedMapIterator<Iterator<SQLTimeoutException>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) orderedMapIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, (String) null, "&0h)EC<", "F OKHfX})'%i*}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      OrderedMapIterator<Iterator<SQLTimeoutException>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) orderedMapIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, "&0h)EC<", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableIterator<Predicate<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      SingletonIterator<ArrayList<DataTruncation>> singletonIterator0 = new SingletonIterator<ArrayList<DataTruncation>>(arrayList0);
      IteratorUtils.get((Iterator<ArrayList<DataTruncation>>) singletonIterator0, 0);
      EmptyMapIterator.emptyMapIterator();
      ExceptionFactory.exceptionFactory();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException>(orderedMapIterator0);
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<Predicate<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("jELOD\"~XB~Ixu;|?", "2IU1jt{;(@e)A]u{ZKT", 10);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2IU1jt{;(@e)A]u{ZKT", "jELOD\"~XB~Ixu;|?", sQLNonTransientException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("2IU1jt{;(@e)A]u{ZKT", hashtable0, sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      Stack<Object> stack0 = new Stack<Object>();
      DataTruncation dataTruncation0 = new DataTruncation((-3359), true, true, (-705), 100);
      stack0.add((Object) dataTruncation0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(stack0);
      IteratorUtils.find((Iterator<Object>) loopingListIterator0, (Predicate<? super Object>) predicate0);
      Stack<Object> stack1 = new Stack<Object>();
      EmptyMapIterator.emptyMapIterator();
      ExceptionFactory.exceptionFactory();
      MapIterator<Iterator<SQLTimeoutException>, ArrayDeque<Properties>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) mapIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, "{]i[?d2N", "{]i[?d2N", "{]i[?d2N");
      assertEquals("{]i[?d2N{]i[?d2N", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      OrderedMapIterator<Object, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<Object>) orderedMapIterator0, (Predicate<? super Object>) predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException>(orderedMapIterator1);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      int int0 = (-690);
      DataTruncation dataTruncation0 = new DataTruncation((-690), false, true, (-690), 559);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      int int1 = 512;
      SQLWarning sQLWarning0 = new SQLWarning("GPINT.J'q]3{mM-]8Y", "GPINT.J'q]3{mM-]8Y", 512, dataTruncation0);
      sQLWarningArray0[1] = sQLWarning0;
      int int2 = 8;
      DataTruncation dataTruncation1 = new DataTruncation(512, true, true, 8, 2);
      sQLWarningArray0[2] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning1 = new SQLWarning("MJ!}\u0001%,CjQ?;L#W", "{pu~]]k p{4}$W:G", sQLWarningArray0[0]);
      sQLWarningArray0[3] = sQLWarning1;
      String string0 = "";
      SQLWarning sQLWarning2 = new SQLWarning("", "", 2, sQLWarning1);
      sQLWarningArray0[4] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning();
      sQLWarningArray0[5] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning(sQLWarning1);
      sQLWarningArray0[6] = sQLWarning4;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) resettableListIterator0, (Transformer<? super SQLWarning, String>) transformer0, "y2ubA'<[KV", "GPINT.J'q]3{mM-]8Y", "{pu~]]k p{4}$W:G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, (-955));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("1!E", "1!E", (-1484), hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("L{aE", "", sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0, sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) sQLClientInfoException0);
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(stack0);
      Stack<Object> stack1 = new Stack<Object>();
      MapIterator<SQLTimeoutException, Hashtable<Locale.Category, Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Transformer<? super SQLTimeoutException, ? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<Predicate<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableListIterator0);
      Integer integer0 = new Integer((-2291));
      IteratorUtils.getIterator(resettableIterator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableListIterator0, class0);
      assertEquals(0, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ht'l}.pAPucdRk3X ");
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Iterator<SQLTimeoutException>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<Iterator<SQLTimeoutException>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLTimeoutException>>) orderedMapIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) boundedIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) null, ".", "org.apache.commons.collections4.iterators.PeekingIterator", ".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      IteratorUtils.emptyIterator();
      String string0 = ".";
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      ExceptionTransformer.exceptionTransformer();
      ExceptionPredicate.exceptionPredicate();
      MapIterator<SQLTimeoutException, Hashtable<Locale.Category, Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Factory<Locale.Category> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLTransientException, Locale.Category> factoryTransformer0 = new FactoryTransformer<SQLTransientException, Locale.Category>(factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Transformer<? super SQLTimeoutException, ? extends Locale.Category>) factoryTransformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("xJh''<]DV\"");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("Ubyg1ubR12pk:PU+B", "Ubyg1ubR12pk:PU+B");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ubyg1ubR12pk:PU+B", "$t^Yf;f'=iU-cGq2_)<", (-1));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("xJh''<]DV\"", sQLTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) null);
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[java.sql.SQLNonTransientConnectionException: xJh''<]DV\"]", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Transformer<Object, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      EmptyMapIterator.emptyMapIterator();
      ExceptionFactory.exceptionFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("lM_$?|sGh.,VSd~|}X");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.singletonIterator(arrayList0);
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      EmptyMapIterator.emptyMapIterator();
      ExceptionFactory.exceptionFactory();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) resettableIterator0);
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) listIterator0, 5114L);
      OrderedMapIterator<BatchUpdateException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = (-239);
      try { 
        iIOMetadataNode0.getSchemaTypeInfo();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      String string0 = "1!E";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("1!E", "1!E", (-1484), hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("L{aE", "", sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0, sQLNonTransientConnectionException0);
      Stack<Object> stack0 = new Stack<Object>();
      Stack<Object> stack1 = new Stack<Object>();
      stack1.parallelStream();
      EmptyIterator.resettableEmptyIterator();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<Object, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      IteratorUtils.size(mapIterator0);
      Integer integer0 = new Integer(0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("C4224l");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.emptyIterator();
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("The comparator must not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      String string0 = "1!E";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("1!E", "1!E", (-1484), hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("L{aE", "", sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0, sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) sQLClientInfoException0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(stack0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<Object>) loopingListIterator0, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ht'l}.pAPucdRk3X ");
      OrderedMapIterator<Object, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<Object>) orderedMapIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.size(orderedMapIterator0);
      Integer integer0 = new Integer((-128));
      IteratorUtils.find((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableIterator<ArrayList<DataTruncation>> resettableIterator0 = IteratorUtils.singletonIterator(arrayList0);
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLDataException0);
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.singletonIterator((Object) sQLTransientConnectionException0);
      IteratorUtils.contains((Iterator<Object>) resettableIterator1, (Object) null);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0, 100);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<Predicate<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.size(listIterator1);
      Integer integer0 = new Integer(0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<Predicate<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      Integer integer0 = new Integer(0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Factory<Locale.Category> factory0 = new ConstantFactory<Locale.Category>(locale_Category0);
      FactoryTransformer<SQLTransientException, Locale.Category> factoryTransformer0 = new FactoryTransformer<SQLTransientException, Locale.Category>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, ? extends Locale.Category>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<Predicate<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-128));
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, 0L);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ArrayDeque<SQLException>[] arrayDequeArray0 = (ArrayDeque<SQLException>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      arrayDequeArray0[0] = arrayDeque0;
      arrayList0.toArray(arrayDequeArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ht'l}.pAPucdRk3X ");
      arrayList0.add(sQLTimeoutException0);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      ConstantTransformer<Properties, BatchUpdateException> constantTransformer0 = new ConstantTransformer<Properties, BatchUpdateException>(batchUpdateException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(constantTransformer0);
      Closure<Object> closure0 = null;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(equalPredicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      Hashtable<String, Class<Properties>> hashtable0 = new Hashtable<String, Class<Properties>>();
      hashtable0.keys();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      TreeSet<String> treeSet1 = new TreeSet<String>();
      Iterator<String> iterator0 = treeSet1.descendingIterator();
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Transformer<SQLException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("MLG");
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, instanceofPredicate0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) instanceofPredicate0);
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.getIterator(class0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLException>) listIterator1, (Closure<? super SQLException>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1221);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      IteratorUtils.loopingListIterator((List<Locale.Category>) vector0);
      ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("transformer may not be null", "H|?PZfm", (-940), batchUpdateException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLNonTransientConnectionException0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(379, (Closure<? super Object>) null);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null, forClosure0);
      Hashtable<String, Class<Properties>> hashtable0 = new Hashtable<String, Class<Properties>>();
      hashtable0.keys();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "transformer may not be null");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) forClosure0);
      assertEquals(379, forClosure0.getCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>((Transformer<? super SQLException, ? extends SQLException>) null, predicate0);
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) null, (Predicate<? super SQLException>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Transformer<SQLException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("MLG");
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, instanceofPredicate0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) instanceofPredicate0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.getIterator(class0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) priorityQueue0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("?~AJvHcCw_");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 203, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<Object, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      AndPredicate<Locale.Category> andPredicate0 = new AndPredicate<Locale.Category>(transformedPredicate0, transformedPredicate0);
      Iterator<Object> iterator0 = IteratorUtils.peekingIterator((Iterator<?>) mapIterator0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      MockThrowable mockThrowable0 = new MockThrowable("org.apache.commons.collections4.collection.AbstractCollectionDecorator");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", mockThrowable0);
      arrayList0.add(sQLTimeoutException0);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      EmptyOrderedIterator.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.isEmpty(loopingListIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(iterator0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) uniquePredicate0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Transformer<Object, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      AndPredicate<Locale.Category> andPredicate0 = new AndPredicate<Locale.Category>(transformedPredicate0, transformedPredicate0);
      MapIterator<SQLTimeoutException, Hashtable<Locale.Category, Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Factory<Locale.Category> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLTransientException, Locale.Category> factoryTransformer0 = new FactoryTransformer<SQLTransientException, Locale.Category>(factory0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Transformer<? super SQLTimeoutException, ? extends Locale.Category>) factoryTransformer0);
      IteratorUtils.getIterator(iterator0);
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("9w%O(_z[rdOVOkn");
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "List must not be null", (-44), sQLRecoverableException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) sQLRecoverableException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 12, batchUpdateException0);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation((-509), false, false, (-509), 128, batchUpdateException0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) loopingListIterator0, 1059);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) list0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InvokerTransformer.invokerTransformer("MLG");
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=sz02(zOs]{", "", 19);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<Iterator<SQLTimeoutException>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("c&R$N.l56_<*");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) orderedMapIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, "IrE'*BMI#l`<mvC8", "3 _Qk7'I1*o", "MLG");
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      IteratorUtils.loopingListIterator((List<Locale.Category>) vector0);
      ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) predicate0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      vector0.add(locale_Category0);
      IteratorUtils.loopingListIterator((List<Locale.Category>) vector0);
      ConstantTransformer.nullTransformer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f0X";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Properties[] propertiesArray0 = new Properties[0];
      int int0 = (-232);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 3175, (-232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<SQLWarning> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) listIteratorWrapper0);
      MapIterator<Closure<Object>, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Closure<Object>, SQLInvalidAuthorizationSpecException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Closure<Object>, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      MapIterator<SQLTimeoutException, Hashtable<Locale.Category, Object>> mapIterator2 = EmptyMapIterator.emptyMapIterator();
      Factory<Locale.Category> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLTransientException, Locale.Category> factoryTransformer0 = new FactoryTransformer<SQLTransientException, Locale.Category>(factory0);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) mapIterator2, 0L, 0L);
      Iterator<Locale.Category> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) boundedIterator0, (Transformer<? super SQLTimeoutException, ? extends Locale.Category>) factoryTransformer0);
      Iterator<Locale.Category> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) iterator0, (Predicate<? super Locale.Category>) predicate0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.size(mapIterator0);
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "Transformer must not be null";
      StringTokenizer stringTokenizer0 = new StringTokenizer("o\"?\"ax8d", "Transformer must not be null", true);
      IteratorUtils.getIterator(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.LanguageRange>) null, 1397);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1S@Ee#X=Kfun\"hP^C");
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLNonTransientConnectionException0);
      singletonListIterator0.reset();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("1S@Ee#X=Kfun\"hP^C", sQLNonTransientConnectionException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTimeoutException0);
      EqualPredicate.equalPredicate((SQLFeatureNotSupportedException) null);
      IteratorUtils.matchesAll((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) instanceofPredicate0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) singletonListIterator0, (Iterator<? extends SQLException>) singletonListIterator0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Transformer<Object, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      AndPredicate<Locale.Category> andPredicate0 = new AndPredicate<Locale.Category>(transformedPredicate0, transformedPredicate0);
      MapIterator<SQLTimeoutException, Hashtable<Locale.Category, Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Factory<Locale.Category> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLTransientException, Locale.Category> factoryTransformer0 = new FactoryTransformer<SQLTransientException, Locale.Category>(factory0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Transformer<? super SQLTimeoutException, ? extends Locale.Category>) factoryTransformer0);
      Iterator<Locale.Category> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) iterator0, (Predicate<? super Locale.Category>) predicate0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Transformer<SQLException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("MLG");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, instanceofPredicate0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Transformer<SQLException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("MLG");
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, instanceofPredicate0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) instanceofPredicate0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableIterator<ArrayList<DataTruncation>> resettableIterator0 = IteratorUtils.singletonIterator(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<DataTruncation>>) resettableIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 99
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableListIterator<ComparatorPredicate.Criterion> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<ComparatorPredicate.Criterion>) resettableListIterator0, (Transformer<? super ComparatorPredicate.Criterion, String>) transformer0, ".1,Y{S:Z", ".1,Y{S:Z", ".1,Y{S:Z");
      ConstantTransformer.nullTransformer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".1,Y{S:Z.1,Y{S:Z";
      stringArray0[1] = ".1,Y{S:Z";
      stringArray0[2] = "";
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Iterator<SQLTimeoutException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      int int0 = 0;
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 1366, sQLNonTransientConnectionException0);
      sQLSyntaxErrorException0.spliterator();
      sQLSyntaxErrorException0.fillInStackTrace();
      sQLSyntaxErrorException0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, ArrayDeque<EnumSet>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("/EqD[O", "", 0, intArray0, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Yw", "", 0, batchUpdateException1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>((SQLException) null);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) loopingIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.Category>) vector0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      AndPredicate<Locale.Category> andPredicate0 = new AndPredicate<Locale.Category>(transformedPredicate0, predicate0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Predicate<? super Locale.Category>) andPredicate0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) iterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<SQLWarning> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) listIteratorWrapper0);
      MapIterator<Closure<Object>, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Closure<Object>, SQLInvalidAuthorizationSpecException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Closure<Object>, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLRecoverableException> listIteratorWrapper1 = new ListIteratorWrapper<SQLRecoverableException>(resettableListIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) listIteratorWrapper1, (Predicate<? super SQLRecoverableException>) predicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Iterator<Object> iterator0 = IteratorUtils.peekingIterator((Iterator<?>) objectArrayListIterator0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      IteratorUtils.loopingListIterator((List<Locale.Category>) vector0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      AndPredicate<Locale.Category> andPredicate0 = new AndPredicate<Locale.Category>(transformedPredicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = 100;
      intArray0[2] = 100;
      intArray0[3] = 100;
      intArray0[4] = 100;
      intArray0[5] = 100;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) "i;=-@87rZ,Q");
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) resettableIterator0);
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      intArray0[1] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, (-1849), (-685), batchUpdateException0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedIterator0, 725);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) list0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(dataTruncation0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) null);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      List<Object> list1 = IteratorUtils.toList((Iterator<?>) iterator0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = 100;
      intArray0[2] = 100;
      intArray0[3] = 100;
      intArray0[4] = 100;
      intArray0[5] = 100;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("i;=-@87rZ,Q", "i;=-@87rZ,Q", 100, intArray0, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The predicate and closure arrays must be the same size", "The predicate and closure arrays must be the same size", 100, batchUpdateException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLSyntaxErrorException0);
      Throwable[] throwableArray0 = sQLSyntaxErrorException0.getSuppressed();
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i;=-@87rZ,Q");
      SingletonListIterator<SQLException> singletonListIterator1 = new SingletonListIterator<SQLException>(sQLTimeoutException0);
      singletonListIterator1.reset();
      PrintWriter printWriter0 = mockPrintWriter0.format("The predicate and closure arrays must be the same size", (Object[]) throwableArray0);
      sQLTimeoutException0.printStackTrace(printWriter0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<SQLException>) singletonListIterator1, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) singletonListIterator1, (Iterator<? extends SQLException>) singletonListIterator0);
      assertEquals(1, singletonListIterator1.nextIndex());
      assertTrue(singletonListIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = 100;
      intArray0[2] = 100;
      intArray0[3] = 100;
      intArray0[4] = 100;
      intArray0[5] = 100;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The predicate and closure arrays must be the same size", "The predicate and closure arrays must be the same size", 100, intArray0, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The predicate and closure arrays must be the same size", "The predicate and closure arrays must be the same size", 100, batchUpdateException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.getSuppressed();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The predicate and closure arrays must be the same size");
      sQLTimeoutException0.getSuppressed();
      Object[] objectArray0 = new Object[3];
      singletonListIterator0.reset();
      objectArray0[0] = (Object) batchUpdateException0;
      objectArray0[1] = (Object) consumer0;
      PrintWriter printWriter0 = mockPrintWriter0.format("The predicate and closure arrays must be the same size", objectArray0);
      sQLTimeoutException0.printStackTrace(printWriter0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IteratorUtils.singletonIterator((EnumSet<ComparatorPredicate.Criterion>) null);
      InvokerTransformer.invokerTransformer(",LEm");
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 2);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[0] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[1] = class2;
      InvokerTransformer<Object, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<Object, SQLFeatureNotSupportedException>(",LEm", classArray0, classArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate0);
      AndPredicate<Locale.Category> andPredicate0 = new AndPredicate<Locale.Category>(predicate0, transformedPredicate0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Locale.Category> comparatorPredicate0 = new ComparatorPredicate<Locale.Category>(locale_Category0, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) null, (Predicate<? super Locale.Category>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Transformer<SQLException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("MLG");
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, instanceofPredicate0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) instanceofPredicate0);
      InstanceofPredicate.instanceOfPredicate(class0);
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) null, (Predicate<? super Locale.Category>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.addSuppressed(batchUpdateException0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(loopingListIterator0);
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) loopingListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<Predicate<Object>> listIterator0 = EmptyListIterator.emptyListIterator();
      String string0 = IteratorUtils.toString((Iterator<Predicate<Object>>) listIterator0);
      assertEquals("[]", string0);
      
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator0 = IteratorUtils.emptyIterator();
      ConstantTransformer<Iterator<SQLTimeoutException>, String> constantTransformer0 = new ConstantTransformer<Iterator<SQLTimeoutException>, String>("tt=E]md:~tNu5P$");
      String string1 = IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) resettableIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) constantTransformer0, "", "rg6nWjLrgJ@EyF/~;", "");
      assertEquals("rg6nWjLrgJ@EyF/~;", string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) null, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, "S]F?F('AOl3Pm1O!b_", "[", "[");
      assertEquals("[[", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.printStackTrace();
      SQLException sQLException0 = new SQLException("", "", sQLTransientException0);
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      stringWriter0.write(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) sQLException0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "", objectArray0);
      sQLTransientException0.printStackTrace(printWriter0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", sQLException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eTen";
      stringArray0[1] = "K~";
      stringArray0[2] = "";
      stringArray0[3] = "YiFe=odk(,`r_cs";
      stringArray0[4] = "|R^xHj!t'T1ep?d";
      stringArray0[5] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("eTen");
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(equalPredicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      Enumeration<SQLSyntaxErrorException> enumeration0 = (Enumeration<SQLSyntaxErrorException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      Enumeration<SQLSyntaxErrorException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration1, (Collection<? super SQLSyntaxErrorException>) arrayDeque0);
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(iterator1);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIteratorWrapper0, (Iterator<? extends SQLException>) iterator1, (Iterator<? extends SQLException>) listIteratorWrapper0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=R{K*b9}M\"");
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) instanceofPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("YfEO");
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, 128, sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionException0.addSuppressed(sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation0 = new DataTruncation(128, false, true, 128, 128);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = null;
      try {
        loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>((List<SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The list must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.IteratorIterable$1", "org.apache.commons.collections4.iterators.IteratorIterable$1", 0, (Throwable) null);
      sQLSyntaxErrorException0.spliterator();
      sQLSyntaxErrorException0.fillInStackTrace();
      sQLSyntaxErrorException0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.singletonIterator((EnumSet<ComparatorPredicate.Criterion>) null);
      Transformer<SQLException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("MLG");
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, instanceofPredicate0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) instanceofPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("MLG");
      iIOMetadataNode0.getLastChild();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int int0 = 3348;
      OrderedMapIterator<Integer, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) orderedMapIterator0, (Predicate<? super Integer>) predicate0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) null, 3348);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      PriorityQueue<BatchUpdateException> priorityQueue1 = new PriorityQueue<BatchUpdateException>(priorityQueue0);
      priorityQueue1.clear();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) priorityQueue1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) priorityQueue1;
      objectArray0[1] = (Object) priorityQueue0;
      objectArray0[2] = (Object) resettableIterator0;
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 6);
      OrderedMapIterator<StringTokenizer, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, Predicate<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, Predicate<Object>>(orderedMapIterator0);
      MapIterator<StringTokenizer, Predicate<Object>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Predicate<Object>>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) mapIterator0;
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) iteratorArray0[0]);
      StringTokenizer stringTokenizer0 = new StringTokenizer("JW+k3;h:-&gNM2+-k", "JW+k3;h:-&gNM2+-k");
      DefaultEquator<StringTokenizer> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<StringTokenizer> equalPredicate0 = new EqualPredicate<StringTokenizer>(stringTokenizer0, defaultEquator0);
      Predicate<StringTokenizer> predicate0 = AndPredicate.andPredicate((Predicate<? super StringTokenizer>) equalPredicate0, (Predicate<? super StringTokenizer>) equalPredicate0);
      ListIterator<StringTokenizer> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) predicate0);
      iteratorArray0[1] = (Iterator<StringTokenizer>) listIterator1;
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      stringTokenizerArray0[0] = stringTokenizer0;
      stringTokenizerArray0[1] = stringTokenizer0;
      stringTokenizerArray0[2] = stringTokenizer0;
      stringTokenizerArray0[3] = stringTokenizer0;
      stringTokenizerArray0[4] = stringTokenizer0;
      stringTokenizerArray0[5] = stringTokenizer0;
      stringTokenizerArray0[6] = stringTokenizer0;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      iteratorArray0[2] = (Iterator<StringTokenizer>) objectArrayIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<Properties, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, String>(orderedMapIterator0);
      MapIterator<Properties, String> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, String>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<Properties, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, String>(mapIterator0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Comparator<SQLTransientConnectionException> comparator0 = null;
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = 100;
      intArray0[2] = 100;
      intArray0[3] = 100;
      intArray0[4] = 100;
      intArray0[5] = 100;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("i;=-@87rZ,Q", "i;=-@87rZ,Q", 100, intArray0, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The predicate and closure arrays must be the same size", "The predicate and closure arrays must be the same size", 100, batchUpdateException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.getSuppressed();
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i;=-@87rZ,Q");
      Object[] objectArray0 = new Object[3];
      singletonListIterator0.reset();
      objectArray0[0] = (Object) batchUpdateException0;
      objectArray0[1] = (Object) consumer0;
      objectArray0[2] = (Object) singletonListIterator0;
      PrintWriter printWriter0 = mockPrintWriter0.format("i;=-@87rZ,Q", objectArray0);
      sQLTimeoutException0.printStackTrace(printWriter0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) orPredicate0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) zippingIterator0, (Predicate<? super Locale.Category>) andPredicate0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) priorityQueue0);
      ZippingIterator<DataTruncation> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("{", "i;=-@87rZ,Q", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException1);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) singletonIterator0);
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray1 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray1[0] = (Iterator<DataTruncation>) zippingIterator1;
      iteratorArray1[1] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray1[2] = (Iterator<DataTruncation>) zippingIterator1;
      iteratorArray1[3] = (Iterator<DataTruncation>) zippingIterator1;
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>[]) iteratorArray1);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) iterator0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) list0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("@~2FAj");
      sQLSyntaxErrorException0.spliterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException0;
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 100, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null, (-2409));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableIterator<EnumSet<ComparatorPredicate.Criterion>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<ComparatorPredicate.Criterion>) null);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      iteratorArray0[0] = iterator0;
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) resettableListIterator0);
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) listIterator0;
      MapIterator<SQLClientInfoException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) mapIterator0;
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) abstractOrderedMapIteratorDecorator0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 62;
      longArray0[1] = (long) 62;
      longArray0[2] = (long) 62;
      longArray0[3] = (long) 62;
      longArray0[4] = (long) 62;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(VJ", "C .C:.w2,zoqY(+YrJF", 62, longArray0, sQLClientInfoException0);
      ArrayIterator<SQLClientInfoException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLClientInfoException>(batchUpdateException0, 62);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<ArrayList<DataTruncation>, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<DataTruncation>>) mapIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 100
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eTen";
      stringArray0[1] = "K~";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("eTen");
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
      EqualPredicate.equalPredicate((SQLException) sQLWarning0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null, closure0);
      IteratorUtils.apply((Iterator<String>) objectArrayListIterator0, (Closure<? super String>) closure0);
      assertFalse(objectArrayListIterator0.hasNext());
      
      LinkedList<SQLInvalidAuthorizationSpecException>[] linkedListArray0 = (LinkedList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(LinkedList.class, 0);
      ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>>(linkedListArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[3] = predicate1;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 8);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[0] = class1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      classArray0[1] = class2;
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      classArray0[2] = class3;
      Class<SQLRecoverableException> class4 = SQLRecoverableException.class;
      classArray0[3] = class4;
      Class<SQLRecoverableException> class5 = SQLRecoverableException.class;
      classArray0[4] = class5;
      Class<SQLRecoverableException> class6 = SQLRecoverableException.class;
      classArray0[5] = class6;
      Class<SQLRecoverableException> class7 = SQLRecoverableException.class;
      classArray0[6] = class7;
      Class<SQLRecoverableException> class8 = SQLRecoverableException.class;
      classArray0[7] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("eTen", classArray0, predicateArray0);
      transformerArray0[0] = (Transformer<Object, String>) invokerTransformer0;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformerArray0[0]);
      String string0 = IteratorUtils.toString((Iterator<LinkedList<SQLInvalidAuthorizationSpecException>>) objectArrayIterator0, (Transformer<? super LinkedList<SQLInvalidAuthorizationSpecException>, String>) switchTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.singletonIterator((Object) batchUpdateException0);
      sQLNonTransientConnectionException0.addSuppressed(batchUpdateException0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Transformer<Locale.Category, Locale.Category> transformer0 = NOPTransformer.nopTransformer();
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) iterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLNonTransientConnectionException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(identityPredicate0, equalPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) orPredicate0);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(batchUpdateException0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Locale.Category> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(orderedIterator0);
      IteratorUtils.singletonIterator((EnumSet<ComparatorPredicate.Criterion>) null);
      IteratorUtils.toArray((Iterator<?>) listIteratorWrapper0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(orderedIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eTen";
      stringArray0[1] = "K~";
      IteratorUtils.arrayListIterator((Object[]) stringArray0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      int int0 = 1;
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) reverseListIterator0, 1);
      IteratorUtils.loopingListIterator(list0);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) reverseListIterator0);
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableIterator<EnumSet<ComparatorPredicate.Criterion>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<ComparatorPredicate.Criterion>) null);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dj";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("dj");
      Closure<Object> closure0 = null;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(equalPredicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      OrderedMapIterator<Object, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<Object>) orderedMapIterator0, (Predicate<? super Object>) predicate0);
      ResettableIterator<Predicate<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLException>(orderedMapIterator1);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry");
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) listIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Vector<BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 3013;
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eTen";
      stringArray0[1] = "K~";
      stringArray0[2] = "";
      stringArray0[3] = "YiFe=odk(,`r_cs";
      stringArray0[4] = "|R^xHj!t'T1ep?d";
      stringArray0[5] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("eTen");
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLTimeoutException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, StringTokenizer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends StringTokenizer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, StringTokenizer>(orderedMapIterator1);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eTen";
      stringArray0[1] = "K~";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("");
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      Closure<Object> closure0 = null;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(equalPredicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<Properties, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) mapIterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%l=:&\"2s?aD,U";
      stringArray0[1] = "OrderedMapIterator must not be null";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 2, 2);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf("%l=:&\"2s?aD,U", (Object[]) stringArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'l'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.Category>) vector0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      AndPredicate<Locale.Category> andPredicate0 = new AndPredicate<Locale.Category>(transformedPredicate0, predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Predicate<? super Locale.Category>) andPredicate0);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-2823));
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (-1594));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int int0 = 2379;
      DataTruncation dataTruncation0 = new DataTruncation(3348, false, false, 2379, 2379);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, dataTruncation0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("nIEG!I", "nIEG!I", sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLIntegrityConstraintViolationException0);
      Throwable[] throwableArray0 = sQLIntegrityConstraintViolationException0.getSuppressed();
      sQLClientInfoException1.printStackTrace();
      IteratorUtils.singletonIterator(sQLClientInfoException1);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(throwableArray0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.find((Iterator<Object>) objectArrayIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.arrayListIterator((Object[]) throwableArray0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableIterator<EnumSet<ComparatorPredicate.Criterion>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<ComparatorPredicate.Criterion>) null);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Locale.Category> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableIterator<EnumSet<ComparatorPredicate.Criterion>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<ComparatorPredicate.Criterion>) null);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      Vector<BatchUpdateException>[] vectorArray0 = (Vector<BatchUpdateException>[]) Array.newInstance(Vector.class, 0);
      IteratorUtils.arrayListIterator(vectorArray0);
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Locale.Category> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) orderedIterator0);
      MapIterator<SQLFeatureNotSupportedException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[0] = predicate0;
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(onePredicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      OrPredicate.orPredicate((Predicate<? super Object>) anyPredicate0, (Predicate<? super Object>) notPredicate0);
      anyPredicate0.getPredicates();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(onePredicate0, predicate2);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) zippingIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>(3013);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) batchUpdateException0);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) batchUpdateException0);
      sQLNonTransientConnectionException0.addSuppressed(batchUpdateException0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, ArrayList<SQLSyntaxErrorException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, ArrayList<SQLSyntaxErrorException>>) orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", (String) null, false);
      IteratorUtils.singletonIterator(stringTokenizer0);
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLDataException, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends DataTruncation>) orderedMapIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0, closure0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("|R^xHj!t'T1ep?d", classArray0, stringArray0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends SQLTransientConnectionException>) invokerTransformer0, (Transformer<? super Object, ? extends SQLTransientConnectionException>) invokerTransformer0);
      Closure<Object> closure1 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<String>) objectArrayListIterator0, (Closure<? super String>) closure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '|R^xHj!t'T1ep?d' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, ArrayList<SQLSyntaxErrorException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, ArrayList<SQLSyntaxErrorException>>) orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", (String) null, false);
      IteratorUtils.singletonIterator(stringTokenizer0);
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLDataException, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends DataTruncation>) orderedMapIterator1);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      int[] intArray0 = new int[3];
      intArray0[2] = 1327;
      intArray0[1] = 5;
      intArray0[2] = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      Transformer<BatchUpdateException, String> transformer0 = MapTransformer.mapTransformer((Map<? super BatchUpdateException, ? extends String>) hashMap0);
      TransformerClosure<BatchUpdateException> transformerClosure0 = new TransformerClosure<BatchUpdateException>(transformer0);
      IteratorUtils.apply((Iterator<BatchUpdateException>) resettableIterator0, (Closure<? super BatchUpdateException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Vector<Object> vector0 = new Vector<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) vector0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning("L#S*Z+V/");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("L#S*Z+V/", hashMap0, sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      vector0.add((Object) sQLFeatureNotSupportedException0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 61, sQLInvalidAuthorizationSpecException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.peekingIterator((Iterator<?>) listIterator0);
      OrderedIterator<EnumSet<ComparatorPredicate.Criterion>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLInvalidAuthorizationSpecException0);
      NullIsExceptionPredicate<StringTokenizer> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<StringTokenizer>(predicate0);
      Predicate<StringTokenizer> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super StringTokenizer>) nullIsExceptionPredicate0);
      PredicateTransformer<StringTokenizer> predicateTransformer0 = new PredicateTransformer<StringTokenizer>(predicate1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "PGcv*^*");
      Boolean boolean0 = predicateTransformer0.transform(stringTokenizer0);
      boolean boolean1 = IteratorUtils.contains((Iterator<EnumSet<ComparatorPredicate.Criterion>>) orderedIterator0, (Object) boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector<BatchUpdateException>[] vectorArray0 = (Vector<BatchUpdateException>[]) Array.newInstance(Vector.class, 1);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      vectorArray0[0] = (Vector<BatchUpdateException>) stack0;
      IteratorUtils.arrayListIterator(vectorArray0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) loopingListIterator0, (Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) batchUpdateException0);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) batchUpdateException0);
      sQLNonTransientConnectionException0.addSuppressed(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(128, true, true, 128, 128, batchUpdateException0);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) loopingListIterator0, (Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning(" _,-qPLJ6^=$@", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("T];URNJ[1gjWa", " ;81=UG/W}", sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" _,-qPLJ6^=$@", " _,-qPLJ6^=$@", sQLRecoverableException0);
      sQLRecoverableException0.setNextException(sQLNonTransientConnectionException0);
      sQLRecoverableException0.fillInStackTrace();
      sQLNonTransientConnectionException0.getSuppressed();
      IteratorUtils.contains((Iterator<LinkedHashSet<Predicate<Object>>>) null, (Object) sQLNonTransientConnectionException0);
      Hashtable<Boolean, Properties> hashtable0 = new Hashtable<Boolean, Properties>();
      Predicate<Object> predicate0 = null;
      PredicateTransformer<StringTokenizer> predicateTransformer0 = new PredicateTransformer<StringTokenizer>((Predicate<? super StringTokenizer>) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(stringTokenizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableIterator<EnumSet<ComparatorPredicate.Criterion>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<ComparatorPredicate.Criterion>) null);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Locale.Category> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) listIteratorWrapper0);
      MapIterator<SQLFeatureNotSupportedException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("%9igE", (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%9igE", "%9igE", sQLClientInfoException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("%9igE", "%9igE", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("8%_,jq:vV?xL", "\"6=@9-$9v", 93, sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("\"6=@9-$9v", (String) null);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 1, 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, false, 0, (-2169), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, true, 681, (-2169));
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, false, 1, 1583);
      dataTruncationArray0[3] = dataTruncation3;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2169);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, dataTruncation0);
      DataTruncation dataTruncation4 = new DataTruncation(681, false, true, 1078, 0, batchUpdateException0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-1734), false, true, 681, (-1734), dataTruncation0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, true, false, 10, 1, dataTruncation4);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation((-2169), false, true, 0, 0);
      dataTruncationArray0[7] = dataTruncation7;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "S$4";
      int int0 = 787;
      SQLWarning sQLWarning0 = new SQLWarning("S$4", "S$4", 787);
      sQLWarning0.getStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      int int1 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 512, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "[sn_H<W%IjN49", 3299);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("qI", "fromIndex = ", 3299, sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("|&jQmpUCysoQ>Y{x", "qI", sQLNonTransientException1);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("|&jQmpUCysoQ>Y{x", "fromIndex = ", sQLNonTransientException1);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("qI", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, ArrayList<SQLSyntaxErrorException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, ArrayList<SQLSyntaxErrorException>>) orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", (String) null, false);
      IteratorUtils.singletonIterator(stringTokenizer0);
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLDataException, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends DataTruncation>) orderedMapIterator1);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1327;
      intArray0[1] = 5;
      intArray0[2] = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) resettableIterator0, (Closure<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      sQLDataException0.initCause(sQLTransactionRollbackException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) resettableIterator0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) iterator0, 2448L);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLDataException>) boundedIterator0, (-1309L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "9T", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = 100;
      intArray0[2] = 100;
      intArray0[3] = 100;
      intArray0[4] = 100;
      intArray0[5] = 100;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("i;=-@87rZ,Q", "i;=-@87rZ,Q", 100, intArray0, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The predicate and closure arrays must be the same size", "The predicate and closure arrays must be the same size", 100, batchUpdateException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.getSuppressed();
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i;=-@87rZ,Q");
      Object[] objectArray0 = new Object[3];
      singletonListIterator0.reset();
      objectArray0[0] = (Object) batchUpdateException0;
      objectArray0[1] = (Object) consumer0;
      objectArray0[2] = (Object) singletonListIterator0;
      PrintWriter printWriter0 = mockPrintWriter0.format("i;=-@87rZ,Q", objectArray0);
      sQLTimeoutException0.printStackTrace(printWriter0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) orPredicate0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) singletonListIterator0, (Iterator<? extends SQLException>) singletonListIterator0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      IteratorUtils.loopingListIterator((List<Locale.Category>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) batchUpdateException0);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) batchUpdateException0);
      sQLNonTransientConnectionException0.addSuppressed(batchUpdateException0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SY)`OUi");
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(batchUpdateException0);
      singletonListIterator0.reset();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) resettableIterator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) sQLNonTransientConnectionException0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) singletonListIterator0;
      objectArray0[5] = (Object) "(";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) batchUpdateException0;
      objectArray0[8] = (Object) "(";
      mockPrintWriter0.format("(", objectArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("SY)`OUi", "");
      Locale locale0 = Locale.FRENCH;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "(", objectArray0);
      sQLTimeoutException0.printStackTrace(printWriter0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("LNR3Yt");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("LNR3Yt", sQLTransactionRollbackException1);
      stack0.add(sQLInvalidAuthorizationSpecException0);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(stack0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0);
      String[] stringArray0 = new String[2];
      String string0 = "List must not be null";
      stringArray0[0] = "List must not be null";
      stringArray0[1] = "!$sH=";
      int int0 = (-2575);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-2575), (-2575));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "OrderedMapIterator must not be null";
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 0, (-606));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      int[] intArray0 = new int[3];
      intArray0[0] = 2421;
      intArray0[1] = 0;
      intArray0[2] = 2421;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 2421, intArray0);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLExceptionArray0[2] = (SQLException) sQLFeatureNotSupportedException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLExceptionArray0[3] = (SQLException) sQLSyntaxErrorException0;
      sQLSyntaxErrorException0.addSuppressed(sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedException0.initCause(sQLExceptionArray0[0]);
      SQLWarning sQLWarning0 = new SQLWarning("'kl)");
      sQLExceptionArray0[4] = (SQLException) sQLWarning0;
      IteratorUtils.arrayIterator(sQLExceptionArray0);
      ArrayList<BatchUpdateException>[] arrayListArray0 = (ArrayList<BatchUpdateException>[]) Array.newInstance(ArrayList.class, 0);
      ObjectArrayListIterator<ArrayList<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<ArrayList<BatchUpdateException>>(arrayListArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) locale_Category0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<ArrayList<BatchUpdateException>>) objectArrayListIterator0, (Predicate<? super ArrayList<BatchUpdateException>>) predicate1);
      ArrayIterator<String> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<String>(sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) batchUpdateException0);
      IteratorUtils.contains((Iterator<Object>) resettableIterator0, (Object) batchUpdateException0);
      sQLNonTransientConnectionException0.addSuppressed(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(128, true, true, 128, 128, batchUpdateException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Stack<SQLNonTransientException>[] stackArray0 = (Stack<SQLNonTransientException>[]) Array.newInstance(Stack.class, 1);
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("m.", "YT;", 1);
      SQLDataException sQLDataException0 = new SQLDataException(sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException1 = new SQLDataException("", "", (-382), sQLDataException0);
      stack0.add((SQLNonTransientException) sQLDataException1);
      stack0.iterator();
      stackArray0[0] = stack0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stackArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      String string0 = "'";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("'");
      String string1 = "org.apache.commons.collections4.functors.ExceptionPredicate";
      iIOMetadataNode0.getParentNode();
      iIOMetadataNode0.getAttributeNodeNS("'", "org.apache.commons.collections4.functors.ExceptionPredicate");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      DataTruncation dataTruncation0 = new DataTruncation(3348, false, false, 2379, 2379);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, dataTruncation0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("nIEG!I", "nIEG!I", sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      sQLClientInfoException1.printStackTrace();
      IteratorUtils.singletonIterator(sQLClientInfoException1);
      OrderedMapIterator<Integer, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) orderedMapIterator0, (Predicate<? super Integer>) predicate0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) priorityQueue0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 5);
      int int0 = 0;
      ArrayIterator<Properties> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Properties>((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      IteratorUtils.asIterable((Iterator<? extends String>) resettableIterator0);
      // Undeclared exception!
      try { 
        UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eTen";
      stringArray0[1] = "K~";
      stringArray0[2] = "";
      stringArray0[3] = "YiFe=odk(,`r_cs";
      stringArray0[4] = "|R^xHj!t'T1ep?d";
      stringArray0[5] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("eTen");
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<String>) objectArrayListIterator0, (Closure<? super String>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "Pf^;`l|vhm''B", 0, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("Pf^;`l|vhm''B");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) priorityQueue0);
      OrderedMapIterator<Integer, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("");
      IfTransformer<Object, BatchUpdateException> ifTransformer0 = new IfTransformer<Object, BatchUpdateException>(uniquePredicate0, transformer0, transformer0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) ifTransformer0);
      IteratorUtils.apply((Iterator<Integer>) orderedMapIterator0, (Closure<? super Integer>) closure0);
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<Object>) orderedIterator0, (Object) sQLRecoverableException2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends ComparatorPredicate.Criterion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) null, (-198L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      Integer integer0 = new Integer(91);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      // Undeclared exception!
      try { 
        singletonIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonIterator", e);
      }
  }
}
