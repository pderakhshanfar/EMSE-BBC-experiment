/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 12:45:55 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(")$", "A>#`h", 2560, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("|4_2BtOU*,r", "", (-1148));
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "_Y1", 2560, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", "_Y1");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("equator may not be null", "");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "knBwX<&^sbP(eT%,+S", "knBwX<&^sbP(eT%,+S", "Transformer must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      priorityQueue0.add(sQLInvalidAuthorizationSpecException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLRecoverableException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLRecoverableException0);
      int int0 = 0;
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, 0);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLRecoverableException0);
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedIterator0, class0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(".via%c/<AG1Cx)");
      Transformer<StringTokenizer, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("_v(n_f");
      IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      // Undeclared exception!
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DataTruncation dataTruncation0 = new DataTruncation(397, false, true, 1, 397);
      DataTruncation dataTruncation1 = new DataTruncation(1, false, false, 1, (-1300), dataTruncation0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 5);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      InvokerTransformer<DataTruncation, DataTruncation> invokerTransformer0 = new InvokerTransformer<DataTruncation, DataTruncation>("!\"/lVa&'pivw~,k", classArray0, classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation1, (Transformer<? super DataTruncation, ? extends DataTruncation>) invokerTransformer0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator1, (long) 397);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '!\"/lVa&'pivw~,k' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer(1790);
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 2);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Class<Boolean> class1 = Boolean.class;
      classArray0[1] = class1;
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("0P.uyDr", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1790);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '0P.uyDr' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.getIterator(closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("ckqB'lNsh[?_]|");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'ckqB'lNsh[?_]|' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      int[] intArray0 = new int[5];
      intArray0[0] = 1615;
      intArray0[1] = 1840;
      intArray0[2] = (-1617);
      intArray0[3] = 100;
      intArray0[4] = 2081;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("List must not be null", "List must not be null", intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("List must not be null", "List must not be null", batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", sQLRecoverableException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("9Hp7??lCo:rl%8p", "List must not be null");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      predicateArray0[1] = predicate2;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException1);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("9Hp7??lCo:rl%8p", "List must not be null", (-1));
      ConstantFactory<SQLFeatureNotSupportedException> constantFactory0 = new ConstantFactory<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      FactoryTransformer<Object, SQLFeatureNotSupportedException> factoryTransformer0 = new FactoryTransformer<Object, SQLFeatureNotSupportedException>(constantFactory0);
      Predicate<Object> predicate3 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) factoryTransformer0, (Predicate<? super Object>) predicateArray0[2]);
      predicateArray0[3] = predicate3;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) onePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, (Predicate<? super SQLTransactionRollbackException>) nonePredicate0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) nonePredicate0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayList0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(".Uy;cu184RG");
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer(".Uy;cu184RG");
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '.Uy;cu184RG' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[", "[");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      priorityQueue0.add(sQLInvalidAuthorizationSpecException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[", "[", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLSyntaxErrorException0);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, 0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(closure0);
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedIterator0, class0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[");
      Transformer<StringTokenizer, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("[");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ExceptionClosure.exceptionClosure();
      StringTokenizer stringTokenizer0 = new StringTokenizer("IteratorChain cannot be changed after the first use of a method from the Iterator interface", "", true);
      Factory<StringTokenizer> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<StringTokenizer, StringTokenizer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends StringTokenizer>) factory0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OrderedMapIterator<Integer, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.emptyListIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(andPredicate0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer<Object, Locale.FilteringMode> constantTransformer0 = new ConstantTransformer<Object, Locale.FilteringMode>(locale_FilteringMode1);
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Locale.FilteringMode>) nullIsFalsePredicate0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) constantTransformer0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) constantTransformer0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) iterator1, (int) 124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ExceptionClosure.exceptionClosure();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/7@/-", "/7@/-");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLRecoverableException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      Predicate<SQLNonTransientException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedMapIterator0, class0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("QQ]ahh;Y`r15wK9F.s", "_|", 1, sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      TransformerPredicate.transformerPredicate((Transformer<? super String, Boolean>) transformer0);
      IteratorUtils.find((Iterator<SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLFeatureNotSupportedException>[]) null, 2299, 2299);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EmptyIterator.emptyIterator();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer("wy8&", "DSavT2dm}+fs", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("DSavT2dm}+fs", "", true);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("DSavT2dm}+fs");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("wy8&", "", true);
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("No value has been returned yet");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("g[rxb)mJem~9", "wy8&", false);
      stringTokenizerArray0[1] = stringTokenizer5;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) resettableIterator0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>(arrayDeque0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) vector0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) iterator0, 100);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(list0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) loopingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Stack<Predicate<IIOMetadataNode>> stack0 = new Stack<Predicate<IIOMetadataNode>>();
      ResettableListIterator<Predicate<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Predicate<IIOMetadataNode>>) stack0);
      IteratorUtils.toListIterator((Iterator<?>) resettableListIterator0);
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLDataException, HashMap<SQLDataException, HashSet>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, HashMap<SQLDataException, HashSet>>) mapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) mapIterator1, (Iterator<? extends SQLDataException>) mapIterator1);
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLExceptionArray0[0] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLException sQLException0 = new SQLException((String) null, (String) null);
      sQLExceptionArray0[1] = sQLException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", sQLExceptionArray0[0]);
      sQLExceptionArray0[2] = (SQLException) sQLFeatureNotSupportedException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientException0);
      sQLExceptionArray0[3] = (SQLException) batchUpdateException0;
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", 5, sQLFeatureNotSupportedException0);
      sQLExceptionArray0[4] = (SQLException) sQLWarning0;
      IteratorUtils.arrayListIterator(sQLExceptionArray0, 5);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer(10);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ConstantTransformer<Object, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Object, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Integer>) singletonListIterator0, (Transformer<? super Integer, ? extends SQLTransactionRollbackException>) constantTransformer0);
      TransformerClosure<SQLTransientException> transformerClosure0 = new TransformerClosure<SQLTransientException>(constantTransformer0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLTransactionRollbackException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      InvokerTransformer.invokerTransformer("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Integer integer0 = new Integer(891);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Array class must not be null");
      ConstantTransformer<Object, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Object, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Integer>) singletonListIterator0, (Transformer<? super Integer, ? extends SQLTransactionRollbackException>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransactionRollbackException>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 1);
      closureArray0[0] = closure0;
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("Array class must not be null");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      Integer integer0 = new Integer(891);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("TU");
      ConstantTransformer<Object, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Object, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Integer>) singletonListIterator0, (Transformer<? super Integer, ? extends SQLTransactionRollbackException>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) orderedMapIterator0, (Transformer<? super StringTokenizer, String>) null, "Evb(nI8xKr\"!'W", "Evb(nI8xKr\"!'W", "Evb(nI8xKr\"!'W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("org.apache.commons.collections4.iterators.ZippingIterator");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y~;/F ");
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("y~;/F ");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) null, (Closure<? super SQLTransactionRollbackException>) transformerClosure0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "y~;/F ";
      stringArray0[1] = "y~;/F ";
      stringArray0[2] = "y~;/F ";
      stringArray0[3] = "y~;/F ";
      stringArray0[4] = "y~;/F ";
      stringArray0[5] = "y~;/F ";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, SQLWarning> mapIterator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning>(orderedMapIterator0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, 0);
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, (Throwable) null);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("?AH*hM~", "?AH*hM~", 0, map0, (Throwable) null);
      IteratorUtils.getIterator(sQLClientInfoException1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedMapIterator<Closure<Object>, Locale.LanguageRange> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Closure<Object>>) orderedMapIterator0, (Predicate<? super Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("U");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      IteratorUtils.toString(iterator0, (Transformer<? super StringTokenizer, String>) transformer0, "U", "", "");
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue1 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, SQLWarning> mapIterator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning>(orderedMapIterator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedMapIterator0, class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicateArray0[0]);
      predicateArray0[2] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate2 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) onePredicate0);
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = FalsePredicate.falsePredicate();
      predicateArray0[5] = predicate3;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nonePredicate0);
      Predicate<Object> predicate4 = AndPredicate.andPredicate((Predicate<? super Object>) nullIsFalsePredicate0, (Predicate<? super Object>) transformerPredicate0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate4);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Properties, String> invokerTransformer0 = new InvokerTransformer<Properties, String>("", classArray0, predicateArray0);
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Class<SQLTransientException> class0 = SQLTransientException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) nullIsExceptionPredicate0);
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTimeoutException0, (Equator<SQLException>) null);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "$>4{}p,rob;|lqA>uv";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y~;/F ", "y~;/F ");
      priorityQueue0.add(sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, 0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("$>4{}p,rob;|lqA>uv");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Closure<Object>[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("$>4{}p,rob;|lqA>uv");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLDataException sQLDataException0 = new SQLDataException("$>4{}p,rob;|lqA>uv", "$>4{}p,rob;|lqA>uv", 1);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLDataException0, defaultEquator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException1;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>((EnumSet<Locale.FilteringMode>) null);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonListIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      IteratorUtils.isEmpty(singletonListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ListIterator must not be null", "o0:[Ma");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("o0:[Ma", "ListIterator must not be null");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      Class<StringTokenizer> class0 = StringTokenizer.class;
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedIterator0, class0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>(priorityQueue0);
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) iterator1, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      Predicate<SQLRecoverableException> predicate0 = EqualPredicate.equalPredicate(sQLRecoverableException0, (Equator<SQLRecoverableException>) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLDataException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException1);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException1);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, 0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(vector0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0, (Predicate<? super SQLFeatureNotSupportedException>) instanceofPredicate0);
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Estimated size must be greater than 0", "Estimated size must be greater than 0");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Estimated size must be greater than 0", sQLRecoverableException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLInvalidAuthorizationSpecException>>) arrayDeque0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 3);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("suffix may not be null", "hcM");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLWarning0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLWarning0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.hasAttribute("");
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("H");
      hashMap0.put(sQLTransientConnectionException0, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "V/>Ku/:zg@JP", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d*;exNur10VaQcxk");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" %Ly'%W7bu>XL%");
      hashMap0.put(" %Ly'%W7bu>XL%", " %Ly'%W7bu>XL%");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, (String) null, "", "d*;exNur10VaQcxk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", "", true);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<StringTokenizer>) mapIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "", "", "");
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      SQLWarning sQLWarning0 = new SQLWarning();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1825);
      longArray0[1] = (long) (-1825);
      longArray0[2] = (long) (-1825);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1825), longArray0, sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      Predicate<SQLRecoverableException> predicate0 = EqualPredicate.equalPredicate(sQLRecoverableException0, (Equator<SQLRecoverableException>) null);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("lSr)J*+})+&q^!$Zr", "lSr)J*+})+&q^!$Zr");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) null, 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      OnePredicate.onePredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("&-`@''lIc,&@h@?_", "/7@/-");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(Ads|AO\"", sQLRecoverableException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning>(orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.emptyOrderedMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("PUtL#(D9i_=f");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("LFGd_r)q1BVy", "&-`@''lIc,&@h@?_", sQLTimeoutException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException1;
      SQLTransientException sQLTransientException0 = new SQLTransientException("LFGd_r)q1BVy", sQLRecoverableException0);
      sQLTransientExceptionArray0[2] = sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException("org.apache.commons.collections4.map.AbstractHashedMap$Values");
      sQLTransientExceptionArray0[3] = sQLTransientException1;
      SQLTransientException sQLTransientException2 = new SQLTransientException("(Ads|AO\"", "CVn~35Q", sQLTransientExceptionArray0[1]);
      sQLTransientExceptionArray0[4] = sQLTransientException2;
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("LFGd_r)q1BVy", sQLInvalidAuthorizationSpecException1);
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientException sQLTransientException3 = new SQLTransientException("(Ads|AO\"", "Predicate must not be null");
      sQLTransientExceptionArray0[7] = sQLTransientException3;
      SQLTransientException sQLTransientException4 = new SQLTransientException("Predicate must not be null");
      sQLTransientExceptionArray0[8] = sQLTransientException4;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.size(resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "U^CFeDbkZ*Q,x{$3", true);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "U^CFeDbkZ*Q,x{$3", "org.apache.commons.collections4.list.TreeList$TreeListIterator", "");
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<DataTruncation, Predicate<SQLNonTransientException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<String, LinkedList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<String, LinkedList<Properties>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, LinkedList<Properties>>) orderedMapIterator0);
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator1);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray1 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      SQLWarning sQLWarning0 = new SQLWarning();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1825);
      longArray0[1] = (long) (-1825);
      longArray0[2] = (long) (-1825);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1825), longArray0, sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      Predicate<SQLRecoverableException> predicate0 = EqualPredicate.equalPredicate(sQLRecoverableException0, (Equator<SQLRecoverableException>) null);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyMapIterator.emptyMapIterator();
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      Stack<String> stack1 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator1 = IteratorUtils.loopingListIterator((List<String>) stack1);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator1, (Predicate<? super String>) nullIsExceptionPredicate0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator2 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator2, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator2, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator2);
      PredicateTransformer<BatchUpdateException> predicateTransformer0 = new PredicateTransformer<BatchUpdateException>(predicate1);
      Boolean boolean0 = predicateTransformer0.transform(batchUpdateException0);
      ArrayListIterator<SQLNonTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientConnectionException>(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(arrayDeque0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Predicate<? super ArrayDeque<SQLInvalidAuthorizationSpecException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte) (-72);
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", (-1), longArray0, sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      Predicate<SQLRecoverableException> predicate0 = EqualPredicate.equalPredicate(sQLRecoverableException0, (Equator<SQLRecoverableException>) null);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      byteArray0[0] = (byte) (-72);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyMapIterator.emptyMapIterator();
      int int0 = 0;
      List<SQLWarning> list0 = new LinkedList<SQLWarning>();
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator1 = IteratorUtils.loopingListIterator((List<String>) stack0);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator1, (Predicate<? super String>) nullIsExceptionPredicate0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator2 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator2;
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator2, (Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[0], (Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) zippingIterator0;
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayListIterator<SQLNonTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientConnectionException>(listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      IteratorUtils.isEmpty(iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d*;exNur10VaQcxk", "d*;exNur10VaQcxk");
      Vector<String> vector0 = new Vector<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) vector0);
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) nullIsExceptionPredicate0);
      Vector<SQLNonTransientConnectionException> vector1 = new Vector<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) hashtable0, (-5175));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      IteratorUtils.emptyListIterator();
      Stack<Object> stack0 = new Stack<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTimeoutException0, defaultEquator0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Properties properties0 = new Properties();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IdentityPredicate.identityPredicate(batchUpdateException0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", batchUpdateException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLIntegrityConstraintViolationException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Properties properties0 = new Properties();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Predicate<BatchUpdateException> predicate0 = IdentityPredicate.identityPredicate(batchUpdateException0);
      PredicateTransformer<BatchUpdateException> predicateTransformer0 = new PredicateTransformer<BatchUpdateException>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(batchUpdateException0);
      IteratorUtils.getIterator(boolean0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", batchUpdateException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, false);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3695).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) comparatorPredicate0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Properties properties0 = new Properties();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Predicate<BatchUpdateException> predicate0 = IdentityPredicate.identityPredicate(batchUpdateException0);
      PredicateTransformer<BatchUpdateException> predicateTransformer0 = new PredicateTransformer<BatchUpdateException>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(batchUpdateException0);
      IteratorUtils.getIterator(boolean0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", batchUpdateException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, false);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.size(resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", batchUpdateException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLRecoverableException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, batchUpdateException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException0;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsExceptionPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      OnePredicate.onePredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("&-`@''lIc,&@h@?_", "/7@/-");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(Ads|AO\"", sQLRecoverableException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning>(orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) abstractOrderedMapIteratorDecorator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedMapIterator0, class0);
      OrderedMapIterator<PriorityQueue<SQLFeatureNotSupportedException>, String> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<PriorityQueue<SQLFeatureNotSupportedException>, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<PriorityQueue<SQLFeatureNotSupportedException>, String>(orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<PriorityQueue<SQLFeatureNotSupportedException>, String>) abstractMapIteratorDecorator0);
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator1 = new SingletonIterator<Integer>(integer0, false);
      IteratorUtils.pushbackIterator((Iterator<? extends Integer>) singletonIterator1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsExceptionPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Integer>> hashtable1 = new Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Integer>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, PriorityQueue<Integer>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, PriorityQueue<Integer>>(hashtable1);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Predicate<SQLInvalidAuthorizationSpecException> predicate2 = OnePredicate.onePredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate2);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning>(orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) abstractOrderedMapIteratorDecorator0);
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>(64);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsExceptionPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" was null", sQLTransientException0);
      boolean boolean0 = true;
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      IteratorUtils.emptyListIterator();
      Stack<Object> stack0 = new Stack<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsExceptionPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", " was null", (-2079), sQLNonTransientConnectionException0);
      SQLException sQLException0 = new SQLException(" was null", " was null", sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ro`la,h1=m%J*P", sQLException0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      OnePredicate<SQLException> onePredicate1 = new OnePredicate<SQLException>(predicateArray0);
      EqualPredicate.equalPredicate(sQLException0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLException, Boolean> invokerTransformer0 = new InvokerTransformer<SQLException, Boolean>(" was null", classArray0, predicateArray0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicateArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsExceptionPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", " was null", (-2079), sQLNonTransientConnectionException0);
      SQLException sQLException0 = new SQLException(" was null", " was null", sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ro`la,h1=m%J*P", sQLException0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      OnePredicate<SQLException> onePredicate1 = new OnePredicate<SQLException>(predicateArray0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate(sQLException0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLException, Boolean> invokerTransformer0 = new InvokerTransformer<SQLException, Boolean>(" was null", classArray0, predicateArray0);
      OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      MapIterator<SQLDataException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      DataTruncation dataTruncation0 = new DataTruncation((-2079), true, true, 72, 72, sQLException0);
      IteratorUtils.singletonIterator((SQLWarning) dataTruncation0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(".)j88LHn2*>");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 1, (-2079));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedException0.spliterator();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(equalPredicate0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) nullIsExceptionPredicate0);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning>(orderedMapIterator1);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedMapIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",3vP=Z5m{X>/Lp1");
      iIOMetadataNode0.getLastChild();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator("");
      IteratorUtils.getIterator(",3vP=Z5m{X>/Lp1");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.size(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.ExceptionTransformer", "org.apache.commons.collections4.functors.ExceptionTransformer");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTransactionRollbackException0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray1[0] = (Predicate<Object>) identityPredicate0;
      predicateArray1[1] = (Predicate<Object>) identityPredicate0;
      predicateArray1[2] = (Predicate<Object>) identityPredicate0;
      predicateArray1[3] = (Predicate<Object>) identityPredicate0;
      predicateArray1[4] = (Predicate<Object>) identityPredicate0;
      predicateArray1[5] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[1] = predicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicateArray1[1]);
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray1);
      predicateArray0[3] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      predicateArray0[4] = predicate1;
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[5] = predicate2;
      OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.functors.ExceptionTransformer");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("4{]0uNT.abrACgnbijV");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<StringTokenizer>) orderedMapIterator0, (Transformer<? super StringTokenizer, String>) transformer0, " T&JFiH<ueMT(n", ", ", "Z#9P?:Y7iv5z$oRl");
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" %6Q9l:&9", ", Z#9P?:Y7iv5z$oRl", 4251, hashMap1);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(" T&JFiH<ueMT(n", " %6Q9l:&9", map0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Z#9P?:Y7iv5z$oRl", "", sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map0, sQLInvalidAuthorizationSpecException1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 26, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(")");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(stack0, "");
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) resettableIterator0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) zippingIterator0);
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 3);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      classArray0[0] = class0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      classArray0[1] = class1;
      Class<SQLTransientException> class2 = SQLTransientException.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) listIterator0, (Transformer<? super StringTokenizer, String>) invokerTransformer0, "org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsExceptionPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", " was null", (-2079), sQLNonTransientConnectionException0);
      SQLException sQLException0 = new SQLException(" was null", " was null", sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ro`la,h1=m%J*P", sQLException0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      OnePredicate<SQLException> onePredicate1 = new OnePredicate<SQLException>(predicateArray0);
      EqualPredicate.equalPredicate(sQLException0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLException, Boolean> invokerTransformer0 = new InvokerTransformer<SQLException, Boolean>(" was null", classArray0, predicateArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      Transformer<Object, String> transformer1 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer1, "", "Ro`la,h1=m%J*P", "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DataTruncation dataTruncation0 = new DataTruncation(1319, true, true, 1319, 1319, sQLInvalidAuthorizationSpecException0);
      dataTruncation0.getNextWarning();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>((SQLException) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<SQLException>) comparatorPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(notPredicate0, predicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) orPredicate0);
      predicateArray1[0] = predicate1;
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      predicateArray1[1] = predicate2;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray1[2] = (Predicate<Object>) nullIsFalsePredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray1);
      predicateArray0[1] = (Predicate<SQLException>) onePredicate0;
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLInvalidAuthorizationSpecException0);
      predicateArray0[2] = (Predicate<SQLException>) identityPredicate0;
      OnePredicate<SQLException> onePredicate1 = new OnePredicate<SQLException>(predicateArray0);
      predicateArray0[3] = (Predicate<SQLException>) onePredicate1;
      Predicate<SQLException> predicate3 = EqualPredicate.equalPredicate((SQLException) dataTruncation0);
      predicateArray0[4] = predicate3;
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 1);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      InvokerTransformer<SQLException, Boolean> invokerTransformer0 = new InvokerTransformer<SQLException, Boolean>("org.apache.commons.collections4.set.AbstractSerializableSetDecorator", classArray0, predicateArray1);
      predicateArray0[5] = predicateArray0[1];
      OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.set.AbstractSerializableSetDecorator", "org.apache.commons.collections4.set.AbstractSerializableSetDecorator");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.set.AbstractSerializableSetDecorator");
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) constantTransformer0, " T&JFiH<ueMT(n", " T&JFiH<ueMT(n", "");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedException0.spliterator();
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      String string0 = "";
      String string1 = null;
      String string2 = "";
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "", sQLWarning0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string3 = "";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLSyntaxErrorException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("`gR]G", "", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.functors.MapTransformer");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`gR]G", "");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Object) iterator0);
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 5);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure0;
      ChainedClosure.chainedClosure((Closure<? super SQLTransientException>[]) closureArray0);
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) listIterator0, 619L);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) skippingIterator0, 0L);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) listIterator0, (Closure<? super SQLTimeoutException>) closure0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      OrderedMapIterator<SQLClientInfoException, Iterator<Integer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(orderedMapIterator0);
      MapIterator<EnumSet<Locale.FilteringMode>, SQLClientInfoException> mapIterator1 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) mapIterator1, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Predicate<SQLInvalidAuthorizationSpecException> predicate2 = OnePredicate.onePredicate((Predicate<? super SQLInvalidAuthorizationSpecException>[]) predicateArray0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate2);
      // Undeclared exception!
      try { 
        UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("x)`qI8", "l|n&5wJ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ql.``a)o$kqb?4/", "d*;exNur10VaQcxk");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("d*;exNur10VaQcxk", "Ql.``a)o$kqb?4/");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d*;exNur10VaQcxk", "d*;exNur10VaQcxk");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("d*;exNur10VaQcxk", "d*;exNur10VaQcxk");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DataTruncation dataTruncation0 = new DataTruncation(1319, true, true, 1319, 1319, sQLInvalidAuthorizationSpecException0);
      dataTruncation0.getNextWarning();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>((SQLException) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<SQLException>) comparatorPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(notPredicate0, predicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) orPredicate0);
      predicateArray1[0] = predicate1;
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      predicateArray1[1] = predicate2;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "");
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.getIterator(closure0);
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DataTruncation dataTruncation0 = new DataTruncation(1319, true, true, 1319, 1319, sQLInvalidAuthorizationSpecException0);
      dataTruncation0.getNextWarning();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>((SQLException) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<SQLException>) comparatorPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(notPredicate0, predicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) orPredicate0);
      predicateArray1[0] = predicate1;
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      predicateArray1[1] = predicate2;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray1[2] = (Predicate<Object>) nullIsFalsePredicate0;
      nullIsFalsePredicate0.evaluate(orPredicate0);
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray1);
      predicateArray0[1] = (Predicate<SQLException>) onePredicate0;
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLInvalidAuthorizationSpecException0);
      predicateArray0[2] = (Predicate<SQLException>) identityPredicate0;
      OnePredicate<SQLException> onePredicate1 = new OnePredicate<SQLException>(predicateArray0);
      predicateArray0[3] = (Predicate<SQLException>) onePredicate1;
      Predicate<SQLException> predicate3 = EqualPredicate.equalPredicate((SQLException) dataTruncation0);
      predicateArray0[4] = predicate3;
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 1);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      InvokerTransformer<SQLException, Boolean> invokerTransformer0 = new InvokerTransformer<SQLException, Boolean>("org.apache.commons.collections4.set.AbstractSerializableSetDecorator", classArray0, predicateArray1);
      Predicate<SQLException> predicate4 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) invokerTransformer0);
      predicateArray0[5] = predicate4;
      Predicate<SQLNonTransientException> predicate5 = OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate5);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      priorityQueue0.isEmpty();
      IteratorUtils.singletonListIterator(priorityQueue0);
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<SQLNonTransientException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayDeque0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) mapIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-1013), sQLTransientConnectionException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicateArray0[1]);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsExceptionPredicate0);
      predicateArray0[2] = predicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicateArray0[1]);
      predicateArray0[3] = predicate1;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(onePredicate0, defaultEquator0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate4 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      Predicate<Object> predicate5 = AndPredicate.andPredicate((Predicate<? super Object>) predicate3, (Predicate<? super Object>) predicate4);
      ListIterator<Predicate<Object>> listIterator0 = IteratorUtils.singletonListIterator(predicate5);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) listIterator0, 158);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) list0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate3);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("28$pZ!|VnxxU^'e", (String) null);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.constantTransformer(sQLTransactionRollbackException0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      WhileClosure.whileClosure((Predicate<? super Object>) predicateArray0[0], (Closure<? super Object>) transformerClosure0, true);
      Transformer<Object, SQLTimeoutException> transformer1 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure1 = new TransformerClosure<Object>(transformer1);
      IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLClientInfoException, Iterator<Integer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(orderedMapIterator0);
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) listIteratorWrapper0, 4595L, 4595L);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) boundedIterator0;
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      Enumeration<SQLClientInfoException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration1, (Collection<? super SQLClientInfoException>) stack0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.size(iterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.size(iteratorArray0[0]);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-367), 319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      IteratorUtils.isEmpty(iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d*;exNur10VaQcxk", "d*;exNur10VaQcxk");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("d*;exNur10VaQcxk", "d*;exNur10VaQcxk");
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Object) sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "|>aAPy.5/", (-496), sQLTransactionRollbackException0);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 2305, sQLSyntaxErrorException0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator1 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator1, 2305);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2304
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",3vP=Z5m{X>/Lp1");
      iIOMetadataNode0.getLastChild();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator("");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      IteratorUtils.size(mapIterator1);
      OrderedMapIterator<SQLTimeoutException, String> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String>(orderedMapIterator1);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator1);
      IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) zippingIterator0, 1L);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTimeoutException>) zippingIterator0, (Closure<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Dmk|sqw>xh?`");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      EmptyMapIterator.emptyMapIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException("]");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!TcS#c!h");
      iIOMetadataNode0.getLastChild();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation(2558, false, false, 2558, 2558, sQLTransientConnectionException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(dataTruncation0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) null, (Predicate<? super ArrayDeque<SQLInvalidAuthorizationSpecException>>) identityPredicate0);
      Integer integer0 = new Integer(123);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "]|!G~{T;lG!ez*", 100);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 692, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(notPredicate0, (Predicate<? super Object>) null);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) orPredicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) orPredicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLFeatureNotSupportedException0);
      OnePredicate<SQLException> onePredicate1 = new OnePredicate<SQLException>(predicateArray0);
      EqualPredicate.equalPredicate((SQLException) sQLFeatureNotSupportedException0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 6);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLException, Boolean> invokerTransformer0 = new InvokerTransformer<SQLException, Boolean>("", classArray0, classArray0);
      OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(arrayList0);
      arrayList0.trimToSize();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) loopingListIterator0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class4, 1885, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DataTruncation dataTruncation0 = new DataTruncation(1319, true, true, 1319, 1319, sQLInvalidAuthorizationSpecException0);
      dataTruncation0.getNextWarning();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>((SQLException) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<SQLException>) comparatorPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(notPredicate0, predicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) orPredicate0);
      predicateArray1[0] = predicate1;
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      predicateArray1[1] = predicate2;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray1[2] = (Predicate<Object>) nullIsFalsePredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray1);
      predicateArray0[1] = (Predicate<SQLException>) onePredicate0;
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLInvalidAuthorizationSpecException0);
      predicateArray0[2] = (Predicate<SQLException>) identityPredicate0;
      OnePredicate<SQLException> onePredicate1 = new OnePredicate<SQLException>(predicateArray0);
      predicateArray0[3] = (Predicate<SQLException>) onePredicate1;
      Predicate<SQLException> predicate3 = EqualPredicate.equalPredicate((SQLException) dataTruncation0);
      predicateArray0[4] = predicate3;
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 1);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      InvokerTransformer<SQLException, Boolean> invokerTransformer0 = new InvokerTransformer<SQLException, Boolean>("org.apache.commons.collections4.set.AbstractSerializableSetDecorator", classArray0, predicateArray1);
      Predicate<SQLException> predicate4 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) invokerTransformer0);
      predicateArray0[5] = predicate4;
      Predicate<SQLNonTransientException> predicate5 = OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate5);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Object) sQLTransactionRollbackException0);
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 1);
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      Closure<SQLTransientException> closure1 = ChainedClosure.chainedClosure((Closure<? super SQLTransientException>[]) closureArray0);
      ListIterator<SQLTimeoutException> listIterator1 = EmptyListIterator.emptyListIterator();
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) listIterator1, 619L);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) skippingIterator0, 0L);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) boundedIterator0, (Closure<? super SQLTimeoutException>) closure1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      int int0 = 10;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Dmk|sqw>xh?`");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", "HmYdh7\"$edTj`8", 10, sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("HmYdh7\"$edTj`8");
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "", sQLSyntaxErrorException1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException("[null]");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getLastChild();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "+#JMPN>V/?vG{dp";
      int int0 = (-959);
      int int1 = (-3646);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "+#JMPN>V/?vG{dp", (-959), (-3646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      vector0.add((SQLNonTransientConnectionException) null);
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Object) sQLTransactionRollbackException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) resettableIterator0);
      MapIterator<IIOMetadataNode, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      IteratorUtils.size(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) orderedMapIterator0, (Iterator<? extends StringTokenizer>) mapIterator1);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GJ]NV/}fI^E>PJ ");
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedMapIterator0, class0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",)7RRfGQDU", ",)7RRfGQDU");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",)7RRfGQDU");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0);
      MapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      FactoryTransformer<Object, BatchUpdateException> factoryTransformer0 = new FactoryTransformer<Object, BatchUpdateException>((Factory<? extends BatchUpdateException>) null);
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(linkedList0);
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) reverseListIterator0, (Iterator<? extends SQLNonTransientException>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("UO9r_");
      iIOMetadataNode0.getNodeType();
      iIOMetadataNode0.setAttributeNS("UO9r_", "", "UO9r_");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator1, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.peekingIterator((Iterator<?>) orderedMapIterator0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 3112;
      intArray0[2] = 3112;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)1;
      intArray0[5] = 3112;
      intArray0[6] = 3112;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("GJRe#hts,~s0E", "GJRe#hts,~s0E", (short)1, intArray0, (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "0V*t", 3112, sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("@Kr'jEq78`nNI5kvN", "GJRe#hts,~s0E", (short)1, sQLFeatureNotSupportedException0);
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 128);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("-25A(.r,)FHn$#Y~Y~K", sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("'tZ1&Obq%$q>?", "lzHp", 128, sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("]R,2Nzypf:", "mk/nY=Id#_v[X )$-$", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "'tZ1&Obq%$q>?", 128, sQLSyntaxErrorException1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("]R,2Nzypf:", "cgf", 283, sQLSyntaxErrorException1);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 283, (-1758));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLTransientException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Object) iterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 820);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("-25A(.r,)FHn$#Y~Y~K", sQLTransientException0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[5] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[7] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "-25A(.r,)FHn$#Y~Y~K", sQLTransientConnectionException0);
      IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Properties> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      String string0 = "org.apache.commons.collections4.IteratorUtils";
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",)7RRfGQDU", ",)7RRfGQDU");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0);
      MapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) listIterator0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException(",)7RRfGQDU");
      SQLDataException sQLDataException1 = new SQLDataException("4", "add() not supported for empty Iterator", 1330, sQLNonTransientExceptionArray0[1]);
      SQLDataException sQLDataException2 = new SQLDataException("u^yb1");
      SQLDataException sQLDataException3 = new SQLDataException("0Wx=Y{=K", sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException4 = new SQLDataException();
      SQLDataException sQLDataException5 = new SQLDataException(",)7RRfGQDU", "4", sQLNonTransientExceptionArray0[2]);
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getLastChild();
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Object) sQLTransactionRollbackException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Closure must not be null", ", ");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, 0L, 0L);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) singletonListIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLDataException>) orderedMapIterator0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Object) sQLTransactionRollbackException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 128);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("-25A(.r,)FHn$#Y~Y~K", sQLTransientConnectionException0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      MapIterator<SQLDataException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLTransientConnectionException>) entrySetMapIterator0);
      MapIterator<SQLDataException, SQLTransientConnectionException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLTransientConnectionException>) mapIterator0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer(" is less than zero");
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) mapIterator1, (Transformer<? super SQLDataException, ? extends SQLSyntaxErrorException>) transformer0);
      IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) resettableListIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",)7RRfGQDU", ",)7RRfGQDU");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(",)7RRfGQDU", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(",)7RRfGQDU", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,)7RRfGQDU", sQLFeatureNotSupportedException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertNotNull(string0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals("[java.sql.SQLIntegrityConstraintViolationException]", string0);
      
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertNotNull(resettableIterator1);
      
      MapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0);
      assertNotNull(iterator0);
      
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      ResettableIterator<SQLTimeoutException> resettableIterator2 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      assertNotNull(resettableIterator2);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      FactoryTransformer<Object, BatchUpdateException> factoryTransformer0 = new FactoryTransformer<Object, BatchUpdateException>((Factory<? extends BatchUpdateException>) null);
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      Transformer<Object, SQLSyntaxErrorException> transformer1 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) null, (Transformer<? super SQLDataException, ? extends SQLSyntaxErrorException>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      assertNotNull(transformer0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(boolean0);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException0);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, (-367), sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals((-367), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.StringValueTransformer", sQLTransientConnectionException0);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException2);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.toString());
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException((String) null, "", sQLSyntaxErrorException2);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException3);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.toString());
      assertNull(sQLSyntaxErrorException3.getMessage());
      assertEquals("", sQLSyntaxErrorException3.getSQLState());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException3.toString());
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, "", 0, sQLSyntaxErrorException2);
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException4);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException4.toString());
      assertNull(sQLSyntaxErrorException4.getMessage());
      assertEquals("", sQLSyntaxErrorException4.getSQLState());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("cgf", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", (-367), sQLSyntaxErrorException3);
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException5);
      assertEquals("cgf", sQLSyntaxErrorException5.getMessage());
      assertEquals((-367), sQLSyntaxErrorException5.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", sQLSyntaxErrorException5.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: cgf", sQLSyntaxErrorException5.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.toString());
      assertNull(sQLSyntaxErrorException3.getMessage());
      assertEquals("", sQLSyntaxErrorException3.getSQLState());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException3.toString());
      
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException4;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      assertEquals(7, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      assertEquals(7, sQLSyntaxErrorExceptionArray0.length);
      assertEquals(7, sQLNonTransientExceptionArray0.length);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      assertNotNull(enumeration0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-4227));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4227), (int)integer1);
      
      Integer integer2 = new Integer((-652));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-652), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertEquals(0, integerArray0.length);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getLastChild();
      assertNull(node0);
      
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      assertNotNull(enumeration0);
      
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      assertNotNull(iterator0);
      
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) listIterator0);
      assertNotNull(iterator1);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super BatchUpdateException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1865;
      intArray0[1] = 1865;
      intArray0[2] = 1865;
      intArray0[3] = (-336);
      OrderedMapIterator<SQLNonTransientConnectionException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (long) 1865, (-2456L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)1, (byte)12, (byte)1, (byte)23, (byte)100, (byte)0, (byte)1}, byteArray0);
      assertFalse(boolean2);
      
      OrderedMapIterator<DataTruncation, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<DataTruncation, Predicate<Object>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Predicate<Object>>) orderedMapIterator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) mapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-793));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableIterator0, class0);
      assertEquals(0, stringTokenizerArray0.length);
      assertNotNull(stringTokenizerArray0);
      
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      iteratorArray0[0] = (Iterator<DataTruncation>) listIterator0;
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 2540, 2540);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      boolean boolean0 = linkedHashSet0.add(dataTruncation0);
      assertTrue(linkedHashSet0.contains(dataTruncation0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertTrue(boolean0);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedHashSet0);
      assertNotNull(resettableIterator0);
      assertTrue(linkedHashSet0.contains(dataTruncation0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertEquals(2, iteratorArray0.length);
      assertNotNull(iterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray(iteratorArray0[0]);
      assertEquals(2, iteratorArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-230));
      assertNotNull(integer0);
      assertEquals((-230), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertEquals(4, integerArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "Entry does not exist: ", 1474);
      assertNotNull(sQLRecoverableException0);
      assertEquals(1474, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("Entry does not exist: ", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("null values not allowed", (String) null, (int) integerArray0[0], sQLRecoverableException0);
      assertEquals(4, integerArray0.length);
      assertNotNull(sQLDataException0);
      assertEquals(1474, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("Entry does not exist: ", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals("null values not allowed", sQLDataException0.getMessage());
      assertEquals((-230), sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: null values not allowed", sQLDataException0.toString());
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      sQLDataExceptionArray0[0] = sQLDataException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 100, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      assertNotNull(transformer0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(boolean0);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException0);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, (-367), sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals((-367), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.StringValueTransformer", sQLTransientConnectionException0);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException2);
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.toString());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException((String) null, "", 0, sQLSyntaxErrorException2);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException3);
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.toString());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertNull(sQLSyntaxErrorException3.getMessage());
      assertEquals("", sQLSyntaxErrorException3.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException3.toString());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("cgf", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", (-367), sQLSyntaxErrorException2);
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException4);
      assertEquals("java.sql.SQLSyntaxErrorException: cgf", sQLSyntaxErrorException4.toString());
      assertEquals((-367), sQLSyntaxErrorException4.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", sQLSyntaxErrorException4.getSQLState());
      assertEquals("cgf", sQLSyntaxErrorException4.getMessage());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.StringValueTransformer", sQLSyntaxErrorException2.toString());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException4;
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("", "org.apache.commons.collections4.functors.StringValueTransformer");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("org.apache.commons.collections4.functors.StringValueTransformer", sQLDataException0.getSQLState());
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      assertEquals(1, sQLDataExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) objectArrayListIterator0);
      assertEquals(1, sQLDataExceptionArray0.length);
      assertNotNull(listIterator0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      assertNotNull(enumeration0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-4227));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4227), (int)integer1);
      
      Integer integer2 = new Integer((-652));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-652), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertEquals(0, integerArray0.length);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getLastChild();
      assertNull(node0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer((-230));
      assertNotNull(integer0);
      assertEquals((-230), (int)integer0);
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("", "z$jHnE!", batchUpdateException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("z$jHnE!", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "4tmvt", sQLDataException0);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(sQLDataException1);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("z$jHnE!", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException1.getMessage());
      assertEquals("4tmvt", sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, (-230), 338);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1386);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1386, (int)integer1);
      
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer2;
      integerArray0[6] = integer0;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertEquals(7, integerArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(7, integerArray0.length);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(7, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getLastChild();
      assertNull(node0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(iterator0);
      
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = hashSet0.retainAll(list0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1831));
      assertNotNull(integer0);
      assertEquals((-1831), (int)integer0);
      
      boolean boolean1 = hashSet0.add(integer0);
      assertFalse(boolean1 == boolean0);
      assertTrue(hashSet0.contains((-1831)));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean1);
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      assertNotNull(resettableIterator0);
      assertTrue(hashSet0.contains((-1831)));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iterator0, (Equator<Object>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(predicate1);
      
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = TruePredicate.truePredicate();
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      predicateArray0[2] = predicate3;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate4 = TruePredicate.truePredicate();
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      assertSame(predicate4, predicate3);
      
      predicateArray0[4] = predicate4;
      Transformer<Object, StringTokenizer>[] transformerArray0 = (Transformer<Object, StringTokenizer>[]) Array.newInstance(Transformer.class, 8);
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 9);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      classArray0[1] = class1;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      classArray0[2] = class2;
      Class<SQLSyntaxErrorException> class3 = SQLSyntaxErrorException.class;
      classArray0[3] = class3;
      Class<SQLSyntaxErrorException> class4 = SQLSyntaxErrorException.class;
      classArray0[4] = class4;
      Class<SQLSyntaxErrorException> class5 = SQLSyntaxErrorException.class;
      classArray0[5] = class5;
      Class<SQLSyntaxErrorException> class6 = SQLSyntaxErrorException.class;
      classArray0[6] = class6;
      Class<SQLSyntaxErrorException> class7 = SQLSyntaxErrorException.class;
      classArray0[7] = class7;
      Class<SQLSyntaxErrorException> class8 = SQLSyntaxErrorException.class;
      classArray0[8] = class8;
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertEquals(9, classArray0.length);
      assertNotNull(transformer0);
      
      transformerArray0[0] = transformer0;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends StringTokenizer>[]) transformerArray0, (Transformer<? super Object, ? extends StringTokenizer>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer array must not contain a null transformer, index 1 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Hashtable<SQLDataException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLDataException, SQLTransientConnectionException>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      EntrySetMapIterator<SQLDataException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTransientConnectionException>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      assertNotNull(resettableListIterator0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-230));
      assertNotNull(integer0);
      assertEquals((-230), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      assertEquals(4, locale_FilteringModeArray0.length);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(enumSet0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(enumSet0);
      assertEquals(4, locale_FilteringModeArray0.length);
      assertTrue(linkedList0.contains(enumSet0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, enumSet0.size());
      assertTrue(boolean0);
      
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.FilteringMode>>) linkedList0);
      assertNotNull(resettableIterator0);
      assertTrue(linkedList0.contains(enumSet0));
      assertEquals(1, linkedList0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ysY+KFuf3?>0J<5");
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      ResettableListIterator<SQLWarning> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ResettableListIterator<SQLWarning> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertSame(resettableListIterator1, resettableListIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLWarning>) resettableListIterator1, (-504L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      assertNotNull(enumeration0);
      
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      assertNotNull(iterator0);
      
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<StringTokenizer, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(iterator1);
      
      int int0 = IteratorUtils.size(iterator1);
      assertEquals(0, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getLastChild();
      assertNull(node0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Properties properties1 = new Properties(properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object0 = properties0.compute(sQLInvalidAuthorizationSpecException0, biFunction0);
      assertTrue(properties0.equals((Object)properties1));
      assertNull(object0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotSame(properties0, properties1);
      
      propertiesArray0[0] = properties1;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      assertEquals(1, propertiesArray0.length);
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) objectArrayListIterator0);
      assertEquals(1, propertiesArray0.length);
      assertNotNull(iterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-807), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<DataTruncation, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)12;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-1), (byte)12}, byteArray0);
      assertFalse(boolean0);
      
      Iterable<SQLWarning> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) orderedMapIterator0);
      assertNotNull(iterable0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      locale_FilteringModeArray0[7] = locale_FilteringMode0;
      locale_FilteringModeArray0[8] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      assertEquals(9, locale_FilteringModeArray0.length);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      ResettableListIterator<SQLWarning> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      SkippingIterator<SQLWarning> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLWarning>) resettableListIterator0, (long) 0);
      assertNotNull(skippingIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ArrayListIterator<BatchUpdateException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<BatchUpdateException>(resettableListIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",)7RRfGQDU", ",)7RRfGQDU");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(",)7RRfGQDU", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(",)7RRfGQDU", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ,)7RRfGQDU", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertNotNull(string0);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertEquals("[java.sql.SQLIntegrityConstraintViolationException]", string0);
      
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertNotNull(resettableIterator1);
      
      MapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0);
      assertNotNull(iterator0);
      
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      ResettableIterator<SQLTimeoutException> resettableIterator2 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      assertNotNull(resettableIterator2);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      FactoryTransformer<Object, BatchUpdateException> factoryTransformer0 = new FactoryTransformer<Object, BatchUpdateException>((Factory<? extends BatchUpdateException>) null);
      assertNotNull(factoryTransformer0);
      
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      assertNotNull(transformerClosure0);
      
      ForClosure<Object> forClosure0 = new ForClosure<Object>(283, transformerClosure0);
      assertNotNull(forClosure0);
      assertEquals(283, forClosure0.getCount());
      
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ReverseListIterator<Closure<Object>> reverseListIterator0 = new ReverseListIterator<Closure<Object>>(linkedList0);
      assertNotNull(reverseListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      
      List<Closure<Object>> list0 = IteratorUtils.toList((Iterator<? extends Closure<Object>>) reverseListIterator0, 2558);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) list0);
      assertNotNull(closure0);
      assertFalse(linkedList0.contains(closure0));
      assertFalse(list0.contains(closure0));
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      assertNotNull(predicate0);
      assertFalse(arrayDeque0.contains(predicate0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      assertNotNull(nullIsFalsePredicate0);
      assertFalse(arrayDeque0.contains(predicate0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) nullIsFalsePredicate0, (Closure<? super Object>) forClosure0, true);
      assertFalse(closure1.equals((Object)closure0));
      assertNotNull(closure1);
      assertFalse(arrayDeque0.contains(predicate0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(283, forClosure0.getCount());
      
      boolean boolean0 = nullIsFalsePredicate0.evaluate(linkedList0);
      assertFalse(linkedList0.contains(closure0));
      assertFalse(arrayDeque0.contains(predicate0));
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(boolean0);
      
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(nullIsFalsePredicate0, transformerClosure0);
      assertNotNull(ifClosure0);
      assertFalse(arrayDeque0.contains(predicate0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Closure<Object> closure2 = WhileClosure.whileClosure((Predicate<? super Object>) nullIsFalsePredicate0, (Closure<? super Object>) transformerClosure0, true);
      assertFalse(closure2.equals((Object)closure0));
      assertFalse(closure2.equals((Object)closure1));
      assertNotNull(closure2);
      assertFalse(arrayDeque0.contains(predicate0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotSame(closure2, closure1);
      
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      closureArray0[0] = (Closure<Object>) forClosure0;
      Closure<SQLTransientException> closure3 = ChainedClosure.chainedClosure((Closure<? super SQLTransientException>[]) closureArray0);
      assertEquals(1, closureArray0.length);
      assertNotNull(closure3);
      
      IteratorUtils.apply((Iterator<SQLTimeoutException>) resettableIterator2, (Closure<? super SQLTimeoutException>) closure2);
      assertFalse(closure2.equals((Object)closure0));
      assertFalse(closure2.equals((Object)closure1));
      assertFalse(arrayDeque0.contains(predicate0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotSame(closure2, closure1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      int int0 = 0;
      int int1 = (-1795);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, (-1795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<DataTruncation, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterable<SQLWarning> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) orderedMapIterator0);
      assertNotNull(iterable0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        linkedList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2621;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "", 2);
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(2, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", intArray0, sQLNonTransientException0);
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(2, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {2, 2, 2, 2, 2621, 2, 2, 2}, intArray0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 2, batchUpdateException0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(2, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(2, sQLTransientException0.getErrorCode());
      assertArrayEquals(new int[] {2, 2, 2, 2, 2621, 2, 2, 2}, intArray0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientException0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(2, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(2, sQLTransientException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientException", sQLNonTransientConnectionException0.toString());
      assertArrayEquals(new int[] {2, 2, 2, 2, 2621, 2, 2, 2}, intArray0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertEquals(8, intArray0.length);
      assertNotNull(iterator0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(2, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(2, sQLTransientException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientException", sQLNonTransientConnectionException0.toString());
      assertArrayEquals(new int[] {2, 2, 2, 2, 2621, 2, 2, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      PredicateTransformer<SQLTransactionRollbackException> predicateTransformer0 = new PredicateTransformer<SQLTransactionRollbackException>(predicate0);
      assertNotNull(predicateTransformer0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      Boolean boolean0 = predicateTransformer0.transform(sQLTransactionRollbackException0);
      assertNotNull(boolean0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(sQLTransactionRollbackException0);
      assertNotNull(boolean1);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      PredicateTransformer<SQLTransactionRollbackException> predicateTransformer1 = new PredicateTransformer<SQLTransactionRollbackException>(predicate0);
      assertFalse(predicateTransformer1.equals((Object)predicateTransformer0));
      assertNotNull(predicateTransformer1);
      
      Boolean boolean2 = predicateTransformer1.transform(sQLTransactionRollbackException0);
      assertFalse(predicateTransformer1.equals((Object)predicateTransformer0));
      assertNotNull(boolean2);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotSame(predicateTransformer1, predicateTransformer0);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer1.transform(sQLTransactionRollbackException0);
      assertFalse(predicateTransformer1.equals((Object)predicateTransformer0));
      assertNotNull(boolean3);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotSame(predicateTransformer1, predicateTransformer0);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(booleanArray0, (-809));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PriorityQueue<String>[] priorityQueueArray0 = (PriorityQueue<String>[]) Array.newInstance(PriorityQueue.class, 2);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      priorityQueueArray0[0] = priorityQueue0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>(comparator0);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertEquals(0, priorityQueue1.size());
      
      priorityQueueArray0[1] = priorityQueue1;
      ResettableListIterator<PriorityQueue<String>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0, 0);
      assertEquals(2, priorityQueueArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      assertNotNull(resettableIterator0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (-4273L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, HashSet<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(iterable0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      int int0 = 1331;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<SQLNonTransientConnectionException, LinkedList>>) orderedMapIterator0, 1331);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1331
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      MapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0);
      assertNotNull(iterator0);
      
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      assertNotNull(resettableIterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      FactoryTransformer<Object, BatchUpdateException> factoryTransformer0 = new FactoryTransformer<Object, BatchUpdateException>((Factory<? extends BatchUpdateException>) null);
      assertNotNull(factoryTransformer0);
      
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Transformer<Object, Integer> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) null);
      assertNotNull(transformer1);
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer1);
      assertNotNull(transformerClosure0);
      
      ForClosure<Object> forClosure0 = new ForClosure<Object>(283, transformerClosure0);
      assertNotNull(forClosure0);
      assertEquals(283, forClosure0.getCount());
      
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ReverseListIterator<Closure<Object>> reverseListIterator0 = new ReverseListIterator<Closure<Object>>(linkedList0);
      assertNotNull(reverseListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      
      boolean boolean0 = stack0.removeElement(iterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(boolean0);
      
      List<Closure<Object>> list0 = IteratorUtils.toList((Iterator<? extends Closure<Object>>) reverseListIterator0, 692);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) list0);
      assertNotNull(closure0);
      assertFalse(linkedList0.contains(closure0));
      assertFalse(list0.contains(closure0));
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      assertNotNull(predicate0);
      assertFalse(arrayDeque0.contains(predicate0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      assertNotNull(nullIsFalsePredicate0);
      assertFalse(arrayDeque0.contains(predicate0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) forClosure0, true);
      assertFalse(closure1.equals((Object)closure0));
      assertNotNull(closure1);
      assertFalse(arrayDeque0.contains(predicate0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(283, forClosure0.getCount());
      
      Predicate<Stack<SQLClientInfoException>> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Stack<SQLClientInfoException>>) predicate0);
      assertNotNull(predicate1);
      assertFalse(arrayDeque0.contains(predicate0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      boolean boolean1 = nullIsFalsePredicate0.evaluate(predicate1);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayDeque0.contains(predicate0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(boolean1);
      
      Closure<Object> closure2 = WhileClosure.whileClosure((Predicate<? super Object>) nullIsFalsePredicate0, (Closure<? super Object>) transformerClosure0, true);
      assertFalse(closure2.equals((Object)closure1));
      assertFalse(closure2.equals((Object)closure0));
      assertNotNull(closure2);
      assertFalse(arrayDeque0.contains(predicate0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotSame(closure2, closure1);
      
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      closureArray0[0] = closure1;
      closureArray0[1] = closure1;
      closureArray0[2] = closure1;
      closureArray0[3] = closure0;
      closureArray0[4] = (Closure<Object>) transformerClosure0;
      Closure<SQLTransientException> closure3 = ChainedClosure.chainedClosure((Closure<? super SQLTransientException>[]) closureArray0);
      assertEquals(5, closureArray0.length);
      assertNotNull(closure3);
      
      IteratorUtils.apply((Iterator<SQLTimeoutException>) resettableIterator0, (Closure<? super SQLTimeoutException>) closure1);
      assertFalse(closure1.equals((Object)closure2));
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(arrayDeque0.contains(predicate0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(283, forClosure0.getCount());
      assertNotSame(closure1, closure2);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null, 692);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("j_q^DGuaL5@[42K77E", "j_q^DGuaL5@[42K77E", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.UniquePredicate", sQLRecoverableException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLDataException sQLDataException1 = new SQLDataException("");
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((Throwable) null);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLDataException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("'", (String) null);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0);
      MapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      FactoryTransformer<Object, BatchUpdateException> factoryTransformer0 = new FactoryTransformer<Object, BatchUpdateException>((Factory<? extends BatchUpdateException>) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(factoryTransformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1, transformerClosure0);
      closureArray0[0] = (Closure<Object>) forClosure0;
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      ReverseListIterator<Closure<Object>> reverseListIterator0 = new ReverseListIterator<Closure<Object>>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Closure<Object>>) reverseListIterator0, (-670));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) mapIterator1, class0);
      assertEquals(0, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MapIterator<SQLWarning, ArrayList<SQLInvalidAuthorizationSpecException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 8);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<Object, SQLClientInfoException>("", classArray0, classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      closureArray0[0] = (Closure<Object>) transformerClosure0;
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[1] = closure0;
      Closure<Object> closure1 = NOPClosure.nopClosure();
      closureArray0[2] = closure1;
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1876, closureArray0[0]);
      closureArray0[3] = (Closure<Object>) forClosure0;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, forClosure0, closure1);
      closureArray0[4] = (Closure<Object>) ifClosure0;
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(predicate1, closure1, ifClosure0);
      IfClosure<Object> ifClosure2 = new IfClosure<Object>(predicate0, ifClosure1);
      closureArray0[5] = (Closure<Object>) ifClosure2;
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      TransformerClosure<Object> transformerClosure1 = new TransformerClosure<Object>(constantTransformer0);
      closureArray0[6] = (Closure<Object>) transformerClosure1;
      Stack<Closure<Object>> stack0 = new Stack<Closure<Object>>();
      Closure<Object> closure2 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) stack0);
      closureArray0[7] = closure2;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      Closure<Object> closure3 = WhileClosure.whileClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) chainedClosure0, true);
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) closure3);
      assertFalse(closure3.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-230));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.size(resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1865;
      intArray0[1] = 1865;
      intArray0[2] = 1865;
      intArray0[3] = (-336);
      intArray0[4] = 1865;
      intArray0[5] = 1865;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "u", 1865, intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (long) 1865, 0L);
      ArrayList<SQLClientInfoException>[] arrayListArray0 = (ArrayList<SQLClientInfoException>[]) Array.newInstance(ArrayList.class, 2);
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLClientInfoException> arrayList1 = new ArrayList<SQLClientInfoException>();
      arrayListArray0[1] = arrayList1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 1865);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, (-943), 1546);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("{`:n yv|\"`+8MV@P%", "{`:n yv|\"`+8MV@P%", "bHo 0qO(aq4M4`)2", (-914));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "A5S=]\"*,M", "", (-914));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("%Z>lU?a`!}^", "{`:n yv|\"`+8MV@P%", "%Z>lU?a`!}^", 1);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("NodeList must not be null", "bHo 0qO(aq4M4`)2", "", 2432);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "A5S=]\"*,M", "%Z>lU?a`!}^", 1609);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("7B.f!{V)ssJtxm", "[$~NDr", "", (-1839));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("bHo 0qO(aq4M4`)2", "A5S=]\"*,M", "", (-914));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("", "pgi", " is invalid for size ", (-624));
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      sQLException0.initCause(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException1, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Object) sQLTransactionRollbackException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = null;
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      int int0 = (-2512);
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 61, (-2512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashtable0.put("M`", clientInfoStatus0);
      int int0 = 727;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M`", "", 727);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("M`", hashtable0, sQLFeatureNotSupportedException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("M`", "", (-1045), hashtable0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException1, (-1045));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.Flat3Map$KeySet", "luKiQP", 1724);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 1724);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 3769);
      dataTruncation0.getDataSize();
      dataTruncation0.spliterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, dataTruncation0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.getSuppressed();
      sQLTransactionRollbackException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Predicate<Object>, Transformer<Object, Properties>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Properties>>) hashtable0);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends Properties>) transformer0);
      IteratorUtils.isEmpty(iterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, (-367), sQLTransientConnectionException1);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.StringValueTransformer", sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException((String) null, "", sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, "", 0, sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("cgf", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", (-367), sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("ennl:E2T@8i", "");
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^9";
      stringArray0[1] = "[";
      stringArray0[2] = "org.apache.commons.collections4.functors.ChainedClosure";
      int int0 = 61;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
