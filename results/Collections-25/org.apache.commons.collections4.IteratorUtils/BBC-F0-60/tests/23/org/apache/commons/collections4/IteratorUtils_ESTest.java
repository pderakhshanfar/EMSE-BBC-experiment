/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 11:51:32 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) arrayList0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) loopingListIterator0, (Iterator<? extends DataTruncation>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) arrayList0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray1 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
      assertNotSame(iIOMetadataNodeArray1, iIOMetadataNodeArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException>();
      Hashtable<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException>(hashMap0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Ne", sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("W\"$4\"+,%YN", "Ne", (-4094), sQLTransactionRollbackException0);
      hashtable0.put(sQLInvalidAuthorizationSpecException0, sQLNonTransientConnectionException0);
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException>(hashtable0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      int int0 = IteratorUtils.size(objectArrayListIterator0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(list0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) loopingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("pGteator must not be null", "Qq%");
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("p]y|UwE;A!lFn|MCZ", (Throwable) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      SQLDataException sQLDataException1 = IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 0);
      assertEquals("java.sql.SQLDataException: p]y|UwE;A!lFn|MCZ", sQLDataException1.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      SQLDataException sQLDataException0 = new SQLDataException("MapIterator must not be null", "Qy%");
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      iteratorArray0[0] = (Iterator<SQLDataException>) singletonIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<InstanceofPredicate, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<InstanceofPredicate, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<InstanceofPredicate, SQLNonTransientException>(mapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>) abstractMapIteratorDecorator0, (Iterator<? extends InstanceofPredicate>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[", "suffix may not be null", hashMap0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("[");
      Iterator<Boolean> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) singletonListIterator0, (Transformer<? super SQLClientInfoException, ? extends Boolean>) transformer0);
      Transformer<Object, String> transformer1 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Boolean, String>) transformer1, "<;sl'Jzi/I@UZ", "", "suffix may not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator1, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator1, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KOpEQ/4avy");
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("KOpEQ/4avy", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'KOpEQ/4avy' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) null, 1977);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) null, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLTransientException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransientException>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0, (-644L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashSet<SQLRecoverableException>[] hashSetArray0 = (HashSet<SQLRecoverableException>[]) Array.newInstance(HashSet.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 2116, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, (-50));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Predicate<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 486, (-2186));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayDeque<Integer>[]) null, 1, (-2674));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 0, (-997));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1043);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 547, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Uu@Me}P?hz<E5_Sa");
      String string0 = IteratorUtils.toString((Iterator<ComparatorPredicate.Criterion>) null, (Transformer<? super ComparatorPredicate.Criterion, String>) transformer0, "=n2rl9", "V%uRa)M", "()5CSwP_");
      assertEquals("V%uRa)M()5CSwP_", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<SQLDataException, TreeSet<SQLTransientConnectionException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLDataException>) mapIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) nullIsFalsePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector<SQLFeatureNotSupportedException>[] vectorArray0 = (Vector<SQLFeatureNotSupportedException>[]) Array.newInstance(Vector.class, 3);
      ResettableIterator<Vector<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(vectorArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Vector<SQLFeatureNotSupportedException>>) resettableIterator0, (Predicate<? super Vector<SQLFeatureNotSupportedException>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 6);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("o0Hiv;k);2", "o0Hiv;k);2", 1043);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/*\"Z", "/*\"Z", sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) singletonIterator0;
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iteratorArray0[1], 1);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0, 61);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) arrayList0);
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, 0L, (long) 10);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Estimated size must be greater than 0", "Estimated size must be greater than 0", 889);
      arrayList0.add((Object) sQLTransientConnectionException0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(1977, true, true, 31, 1977);
      linkedList0.add(dataTruncation0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 55
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableListIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("pGteator must not be null", "Qq%");
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      SingletonListIterator<LinkedList<SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<LinkedList<SQLTransactionRollbackException>>(linkedList0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<LinkedList<SQLTransactionRollbackException>>) singletonListIterator0, (Predicate<? super LinkedList<SQLTransactionRollbackException>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector<LinkedList<SQLTransactionRollbackException>> vector0 = new Vector<LinkedList<SQLTransactionRollbackException>>();
      ResettableListIterator<LinkedList<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedList<SQLTransactionRollbackException>>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<LinkedList<SQLTransactionRollbackException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      SingletonListIterator<LinkedList<SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<LinkedList<SQLTransactionRollbackException>>(linkedList0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<LinkedList<SQLTransactionRollbackException>>) singletonListIterator0, (Predicate<? super LinkedList<SQLTransactionRollbackException>>) uniquePredicate0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("AO (N", ":=kf/GM", sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (Object) sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      stack0.add(sQLTransientConnectionException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) stack0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Object) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ui<");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLSyntaxErrorException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientConnectionException>) null, (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ListIterator<Class<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      Class<Object> class1 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      IteratorUtils.find((Iterator<Class<SQLFeatureNotSupportedException>>) listIterator0, (Predicate<? super Class<SQLFeatureNotSupportedException>>) instanceofPredicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PriorityQueue<SQLClientInfoException>[] priorityQueueArray0 = (PriorityQueue<SQLClientInfoException>[]) Array.newInstance(PriorityQueue.class, 2);
      ResettableIterator<PriorityQueue<SQLClientInfoException>> resettableIterator0 = IteratorUtils.arrayIterator(priorityQueueArray0, 1);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = IteratorUtils.find((Iterator<PriorityQueue<SQLClientInfoException>>) resettableIterator0, (Predicate<? super PriorityQueue<SQLClientInfoException>>) predicate0);
      assertNull(priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableListIterator<PriorityQueue<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<PriorityQueue<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLClientInfoException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PriorityQueue<SQLClientInfoException> priorityQueue0 = IteratorUtils.find((Iterator<PriorityQueue<SQLClientInfoException>>) null, (Predicate<? super PriorityQueue<SQLClientInfoException>>) predicate0);
      assertNull(priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      Boolean[] booleanArray0 = new Boolean[9];
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0);
      IteratorUtils.apply((Iterator<Boolean>) resettableIterator0, (Closure<? super Boolean>) closure0);
      assertFalse(linkedHashSet0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      IteratorUtils.apply((Iterator<Boolean>) null, (Closure<? super Boolean>) closure0);
      assertFalse(linkedHashSet0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hashtable<IIOMetadataNode, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<IIOMetadataNode, SQLFeatureNotSupportedException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.Flat3Map$KeySet");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null, sQLInvalidAuthorizationSpecException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransactionRollbackException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("GS&9vy", "", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "[]");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(list0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1977);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hashtable<IIOMetadataNode, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<IIOMetadataNode, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException>(hashtable0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0, class0);
      assertEquals(0, iIOMetadataNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException>();
      Hashtable<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException>(hashMap0);
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException>(hashtable0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator((Properties) null);
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(":>rsT3X5G!", intArray0, sQLNonTransientException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, true);
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null, (Collection<? super SQLDataException>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MapIterator<SQLDataException, TreeSet<SQLTransientConnectionException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) null, (Predicate<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<SQLRecoverableException, BatchUpdateException>[] hashMapArray0 = (HashMap<SQLRecoverableException, BatchUpdateException>[]) Array.newInstance(HashMap.class, 1);
      ObjectArrayListIterator<HashMap<SQLRecoverableException, BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<HashMap<SQLRecoverableException, BatchUpdateException>>(hashMapArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends HashMap<SQLRecoverableException, BatchUpdateException>>) objectArrayListIterator0, (Predicate<? super HashMap<SQLRecoverableException, BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends PriorityQueue<SQLClientInfoException>>) null, (Predicate<? super PriorityQueue<SQLClientInfoException>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PriorityQueue<SQLClientInfoException>[] priorityQueueArray0 = (PriorityQueue<SQLClientInfoException>[]) Array.newInstance(PriorityQueue.class, 2);
      ResettableIterator<PriorityQueue<SQLClientInfoException>> resettableIterator0 = IteratorUtils.arrayIterator(priorityQueueArray0, 1);
      Iterator<PriorityQueue<SQLClientInfoException>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends PriorityQueue<SQLClientInfoException>>) resettableIterator0, (Predicate<? super PriorityQueue<SQLClientInfoException>>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) null, (Transformer<? super SQLTransientException, ? extends SQLException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLWarning>(orderedMapIterator0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLClientInfoException, Boolean> factoryTransformer0 = new FactoryTransformer<SQLClientInfoException, Boolean>(factory0);
      Iterator<Boolean> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0, (Transformer<? super SQLClientInfoException, ? extends Boolean>) factoryTransformer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Boolean, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Iterator<SQLTransientException> iterator0 = EmptyIterator.emptyIterator();
      SkippingIterator<SQLTransientException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Hashtable<Object, SQLTimeoutException> hashtable0 = new Hashtable<Object, SQLTimeoutException>();
      EntrySetMapIterator<Object, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLTimeoutException>(hashtable0);
      AbstractMapIteratorDecorator<Object, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, SQLTimeoutException>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) abstractMapIteratorDecorator0, (Transformer<? super Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, (-5037), intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 10, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, (-2023), (-468));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.Flat3Map$KeySet");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$KeySet", "List must not be null", sQLInvalidAuthorizationSpecException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) properties0);
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-101));
      Boolean boolean0 = predicateTransformer0.transform(sQLTransientConnectionException0);
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) null);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Boolean, String>) transformer0, "", "", "");
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack0);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) loopingListIterator0, 2455L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      ListIteratorWrapper<Locale.FilteringMode> listIteratorWrapper0 = new ListIteratorWrapper<Locale.FilteringMode>(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIteratorWrapper0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "_Xn B5A", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, (-297), (-3182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ComparatorPredicate.Criterion[]) null, (-3550));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "F_", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";dK*W|RGw", (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("k>", "prefix m$y not be null", 93, sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLFeatureNotSupportedException0);
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> ifTransformer0 = new IfTransformer<SQLFeatureNotSupportedException, SQLNonTransientConnectionException>(identityPredicate0, transformer0, transformer0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLNonTransientConnectionException>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<SQLTransientException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
