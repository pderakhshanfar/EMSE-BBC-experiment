/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:07:29 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableIterator0, 2825L);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) boundedIterator0, (Iterator<? extends Properties>) boundedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(vector0);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) loopingListIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 100, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(857);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableListIterator0, comparator0);
      IfTransformer<String, String> ifTransformer0 = new IfTransformer<String, String>(predicate0, (Transformer<? super String, ? extends String>) null, (Transformer<? super String, ? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<String>) zippingIterator0, (Transformer<? super String, String>) ifTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0, 125);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransactionRollbackException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("+hf*v{k_'[UdwM", "+hf*v{k_'[UdwM", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("+hf*v{k_'[UdwM", "+hf*v{k_'[UdwM", 2425, sQLRecoverableException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SQLDataException sQLDataException1 = IteratorUtils.find((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertEquals(2425, sQLDataException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<BatchUpdateException, HashMap<Iterator<Properties>, IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) iteratorArray0[0], (Iterator<? extends BatchUpdateException>) iteratorArray0[0], (Iterator<? extends BatchUpdateException>) iteratorArray0[0]);
      iteratorArray0[2] = (Iterator<BatchUpdateException>) zippingIterator0;
      MapIterator<BatchUpdateException, EnumSet<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[3] = (Iterator<BatchUpdateException>) mapIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<TreeSet<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<DataTruncation, Locale.FilteringMode> hashMap0 = new HashMap<DataTruncation, Locale.FilteringMode>();
      SingletonListIterator<HashMap<DataTruncation, Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<HashMap<DataTruncation, Locale.FilteringMode>>(hashMap0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashMap<DataTruncation, Locale.FilteringMode>>) singletonListIterator0, (Transformer<? super HashMap<DataTruncation, Locale.FilteringMode>, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) onePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIterator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      LoopingListIterator<EnumSet<Locale.FilteringMode>> loopingListIterator0 = new LoopingListIterator<EnumSet<Locale.FilteringMode>>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) loopingListIterator0, (-1657L), (-1657L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OrderedMapIterator<DataTruncation, ArrayDeque<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (long) (-5373));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 53, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 2425, 823);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0, 3336, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("xpL;I>fs", "xpL;I>fs", (-1539), sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, (-1539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null, 4748, 4748);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 436);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 1690);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.singletonIterator(clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 1, 1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("^");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, constantTransformer0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayIterator0, (Transformer<? super SQLClientInfoException, String>) ifTransformer0, "transformer may not be null", "Predicate must not be null", "^");
      assertEquals("Predicate must not be null^", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(resettableListIterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) listIteratorWrapper0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("qEgoeQ.");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, constantTransformer0, constantTransformer0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) ifTransformer0, "Predicate must not be null", "p7m0P3z", "p7m0P3z");
      assertEquals("p7m0P3zqEgoeQ.p7m0P3z", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) orderedIterator0, (Transformer<? super DataTruncation, String>) transformer0, "[]", (String) null, "org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, (String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ct8N`iq", "PrototypeCloneFactory: Clone method must be public");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Input Object must not be null", 10, sQLTransientException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIteratorWrapper<SQLTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientException>(resettableListIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)IteratorUtils.get((Iterator<SQLTransientException>) listIteratorWrapper0, 7);
      assertEquals("", sQLTransactionRollbackException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("InstantiateFactory: Constructor threw an exception", "InstantiateFactory: Constructor threw an exception", 2296);
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) singletonListIterator0, 2296);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2295
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      boolean boolean0 = IteratorUtils.isEmpty(objectArrayListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1699), (-1699), 0, 1852).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, (Predicate<? super SQLSyntaxErrorException>) comparatorPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) comparatorPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = stack0.listIterator();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(listIterator0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(comparatorPredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) nullIsExceptionPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(759, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableListIterator0, comparator0);
      IteratorUtils.find((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) predicate0);
      boolean boolean0 = IteratorUtils.isEmpty(objectArrayListIterator0);
      assertFalse(objectArrayListIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      ServiceLoader<SQLRecoverableException> serviceLoader0 = IteratorUtils.find((Iterator<ServiceLoader<SQLRecoverableException>>) null, (Predicate<? super ServiceLoader<SQLRecoverableException>>) predicateArray0[3]);
      assertNull(serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MapIterator<SQLException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(mockThrowable0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLNonTransientException0);
      SQLException sQLException0 = IteratorUtils.find((Iterator<SQLException>) mapIterator0, (Predicate<? super SQLException>) identityPredicate0);
      assertNull(sQLException0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(857);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) resettableListIterator0, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransactionRollbackException0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLRecoverableException0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure<SQLException> forClosure0 = new ForClosure<SQLException>(146, closure0);
      IteratorUtils.apply((Iterator<SQLException>) listIterator0, (Closure<? super SQLException>) forClosure0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("transformer may not be null", (Throwable) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MapIterator<StringTokenizer, LinkedList<String>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (-1177));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MapIterator<StringTokenizer, LinkedList<String>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterable<StringTokenizer> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = (Enumeration<SQLFeatureNotSupportedException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      Enumeration<SQLFeatureNotSupportedException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration1, (Collection<? super SQLNonTransientException>) vector0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableListIterator<ComparatorPredicate.Criterion> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Iterator<ComparatorPredicate.Criterion> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends ComparatorPredicate.Criterion>) resettableListIterator0, (Predicate<? super ComparatorPredicate.Criterion>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Transformer<Object, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Boolean>) null, (Transformer<? super Boolean, ? extends SQLDataException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedHashSet<ClientInfoStatus> linkedHashSet0 = new LinkedHashSet<ClientInfoStatus>();
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends ClientInfoStatus>) linkedHashSet0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstantiateFactory<SQLFeatureNotSupportedException> instantiateFactory0 = new InstantiateFactory<SQLFeatureNotSupportedException>(class0);
      FactoryTransformer<Object, SQLFeatureNotSupportedException> factoryTransformer0 = new FactoryTransformer<Object, SQLFeatureNotSupportedException>(instantiateFactory0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends ClientInfoStatus>) resettableIterator0, (Transformer<? super ClientInfoStatus, ? extends SQLFeatureNotSupportedException>) factoryTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) null, (Iterator<? extends StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<String>) null, (-349L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) zippingIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedHashSet<Class<SQLFeatureNotSupportedException>>[] linkedHashSetArray0 = (LinkedHashSet<Class<SQLFeatureNotSupportedException>>[]) Array.newInstance(LinkedHashSet.class, 0);
      ResettableIterator<LinkedHashSet<Class<SQLFeatureNotSupportedException>>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException>(mapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 10);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 1299, (-456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0);
      assertNotSame(zippingIterator0, zippingIterator1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 2295, hashMap0);
      Factory<SQLClientInfoException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLClientInfoException> factoryTransformer0 = new FactoryTransformer<Object, SQLClientInfoException>(factory0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) zippingIterator0, 0L);
      ZippingIterator<Properties> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) boundedIterator0, (Iterator<? extends Properties>) resettableIterator0);
      assertFalse(zippingIterator1.equals((Object)zippingIterator0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Predicate<HashSet<IIOMetadataNode>> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super HashSet<IIOMetadataNode>>) nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MapIterator<StringTokenizer, LinkedList<String>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 42, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("![d3:w2V0_LFDxC", (String) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<EnumSet<Locale.FilteringMode>>) singletonIterator0, (Object) sQLTransactionRollbackException0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2328));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransientException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, SQLSyntaxErrorException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2436));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, 2698L, 2698L);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) boundedIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<SQLTimeoutException>[] stackArray0 = (Stack<SQLTimeoutException>[]) Array.newInstance(Stack.class, 7);
      ResettableListIterator<Stack<SQLTimeoutException>> resettableListIterator0 = IteratorUtils.arrayListIterator(stackArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Stack<SQLTimeoutException>>) resettableListIterator0, (Predicate<? super Stack<SQLTimeoutException>>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(resettableListIterator0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) listIteratorWrapper0);
      assertFalse(listIterator0.hasPrevious());
  }
}
