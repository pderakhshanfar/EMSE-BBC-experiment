/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:06:37 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.TreeSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLClientInfoException>(mapIterator0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLSyntaxErrorException>) mapIterator0, (Iterator<? extends SQLSyntaxErrorException>) abstractMapIteratorDecorator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) singletonListIterator0, (Iterator<? extends InstanceofPredicate>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<Locale.FilteringMode>) resettableIterator0;
      iteratorArray0[1] = (Iterator<Locale.FilteringMode>) resettableIterator0;
      iteratorArray0[2] = (Iterator<Locale.FilteringMode>) resettableIterator0;
      iteratorArray0[3] = (Iterator<Locale.FilteringMode>) resettableIterator0;
      iteratorArray0[4] = (Iterator<Locale.FilteringMode>) resettableIterator0;
      iteratorArray0[5] = (Iterator<Locale.FilteringMode>) resettableIterator0;
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Iterator<? extends Locale.FilteringMode>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<InstanceofPredicate>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) linkedList0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1861), true, false, (-1861), (-1756));
      Transformer<SQLWarning, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray0 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
      assertEquals(1, dataTruncationArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(resettableIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIteratorWrapper0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<IIOMetadataNode, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) mapIterator0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) iteratorArray0[0], 467L, 467L);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) boundedIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<InstanceofPredicate> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0, 0L, 489L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<InstanceofPredicate, BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) linkedList0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("gQwa`B", sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation(886, false, false, 3325, 886, sQLInvalidAuthorizationSpecException0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>("' threw an exception", classArray0, classArray0);
      IfTransformer<Object, DataTruncation> ifTransformer0 = new IfTransformer<Object, DataTruncation>((Predicate<? super Object>) null, invokerTransformer0, invokerTransformer0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Wr@kxMlao_^oB1=$)");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      linkedList0.add((Object) sQLInvalidAuthorizationSpecException0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) null, 4324L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, 3877);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((PriorityQueue<StringTokenizer>[]) null, 0, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 2199, 1995);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-1587));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-531), 907);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, (-1058));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PriorityQueue<Integer>[] priorityQueueArray0 = (PriorityQueue<Integer>[]) Array.newInstance(PriorityQueue.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(priorityQueueArray0, (-495), 1733);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-5657));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Iterator<Iterator<SQLTimeoutException>> iterator0 = EmptyIterator.emptyIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("e>E@i|D\"7\"_pwy");
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, "e>E@i|D\"7\"_pwy", "e>E@i|D\"7\"_pwy", "(K<v[[|~");
      assertEquals("e>E@i|D\"7\"_pwy(K<v[[|~", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0, "D1|h[i=\"?gT9*", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("[]", "`#Z9vs {2?EQ='Xi", 2200);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientException0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) objectArrayListIterator0, 14);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) orderedMapIterator0, 639);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0, (-2317L), (-3858L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Q%-l7 +");
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "", "Predicate must not be null", ", Size: ");
      assertEquals("Predicate must not be nullQ%-l7 +Q%-l7 +Q%-l7 +Q%-l7 +, Size: ", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, ",_|jGnSB", (String) null, "GREATER");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.constantTransformer("6<wkjh>T`WZP6v~");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, (String) null, "zM {$[Wh.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 54;
      Integer[] integerArray0 = new Integer[13];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) objectArrayIterator0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 41
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      Integer integer0 = IteratorUtils.get((Iterator<Integer>) objectArrayIterator0, 0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ArrayDeque<Locale.FilteringMode>[] arrayDequeArray0 = (ArrayDeque<Locale.FilteringMode>[]) Array.newInstance(ArrayDeque.class, 9);
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      ArrayDeque<Locale.FilteringMode> arrayDeque1 = arrayDeque0.clone();
      arrayDequeArray0[0] = arrayDeque1;
      arrayDequeArray0[1] = arrayDeque0;
      ArrayDeque<Locale.FilteringMode> arrayDeque2 = new ArrayDeque<Locale.FilteringMode>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<Locale.FilteringMode> arrayDeque3 = new ArrayDeque<Locale.FilteringMode>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<Locale.FilteringMode> arrayDeque4 = new ArrayDeque<Locale.FilteringMode>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<Locale.FilteringMode> arrayDeque5 = new ArrayDeque<Locale.FilteringMode>();
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<Locale.FilteringMode> arrayDeque6 = new ArrayDeque<Locale.FilteringMode>();
      arrayDequeArray0[6] = arrayDeque6;
      ArrayDeque<Locale.FilteringMode> arrayDeque7 = new ArrayDeque<Locale.FilteringMode>();
      arrayDequeArray0[7] = arrayDeque7;
      ObjectArrayIterator<ArrayDeque<Locale.FilteringMode>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<Locale.FilteringMode>>(arrayDequeArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<Locale.FilteringMode>>) objectArrayIterator0, (Predicate<? super ArrayDeque<Locale.FilteringMode>>) predicate0);
      assertFalse(objectArrayIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ArrayDeque<Locale.FilteringMode>[] arrayDequeArray0 = (ArrayDeque<Locale.FilteringMode>[]) Array.newInstance(ArrayDeque.class, 9);
      ObjectArrayIterator<ArrayDeque<Locale.FilteringMode>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<Locale.FilteringMode>>(arrayDequeArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<Locale.FilteringMode>>) objectArrayIterator0, (Predicate<? super ArrayDeque<Locale.FilteringMode>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<Locale.FilteringMode>>) null, (Predicate<? super ArrayDeque<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<Locale.FilteringMode>>) null, (Predicate<? super ArrayDeque<Locale.FilteringMode>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedIterator<Iterator<Integer>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<Integer> iterator0 = IteratorUtils.find((Iterator<Iterator<Integer>>) orderedIterator0, (Predicate<? super Iterator<Integer>>) predicate0);
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<Integer> iterator0 = IteratorUtils.find((Iterator<Iterator<Integer>>) null, (Predicate<? super Iterator<Integer>>) predicate0);
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("CbfGamem*D0q[_;P:|", "CbfGamem*D0q[_;P:|", 2189, intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertSame(batchUpdateException1, batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<String>[] linkedListArray0 = (LinkedList<String>[]) Array.newInstance(LinkedList.class, 0);
      ObjectArrayListIterator<LinkedList<String>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedList<String>>(linkedListArray0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 8);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) singletonIterator0, comparator0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      closureArray0[3] = (Closure<Object>) whileClosure0;
      IteratorUtils.apply((Iterator<LinkedList<String>>) objectArrayListIterator0, (Closure<? super LinkedList<String>>) closureArray0[3]);
      assertEquals(0, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MapIterator<Properties, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableListIterator0, (-495));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, (-482));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray0 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableIterator0, class0);
      assertEquals(0, dataTruncationArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) priorityQueue0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) hashSet0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      Iterable<SQLWarning> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) priorityQueue0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(resettableIterator0);
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) listIteratorWrapper0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("WUOCJo*", (String) null, (Throwable) null);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null, (Collection<? super BatchUpdateException>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableListIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("prefix may not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) priorityQueue0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) priorityQueue0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      AndPredicate<SQLTransientException> andPredicate0 = new AndPredicate<SQLTransientException>(predicate0, predicate0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) andPredicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) loopingListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) objectArrayListIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      SingletonIterator<Iterator<Integer>> singletonIterator0 = new SingletonIterator<Iterator<Integer>>(objectArrayListIterator0, true);
      SkippingIterator<Iterator<Integer>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Iterator<Integer>>) singletonIterator0, (long) integerArray0[1]);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Iterator<Integer>>) skippingIterator0, (Predicate<? super Iterator<Integer>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      Transformer<SQLTransientException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString(iteratorArray0[0], (Transformer<? super SQLTimeoutException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, (-2855), (-2855));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null, 763);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(instanceofPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<SQLException, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, ? extends SQLSyntaxErrorException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MapIterator<Properties, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, EnumSet<Locale.FilteringMode>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1, (-4417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 2117, (-1104));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLWarning, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) orderedMapIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ListIterator<Iterator<SQLTimeoutException>> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<Iterator<SQLTimeoutException>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLTimeoutException>>) listIterator0, (Iterator<? extends Iterator<SQLTimeoutException>>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) singletonIterator0, 1155L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boundedIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer((-1786));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("CbfGamem*D0q[_;P:|", "CbfGamem*D0q[_;P:|", 2189, intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 2189, (-41));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((TreeSet<DataTruncation>[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) resettableListIterator0, (Transformer<? super Locale.FilteringMode, String>) null, "72V", "", "72V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      MapIterator<PriorityQueue<SQLNonTransientConnectionException>, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<PriorityQueue<SQLNonTransientConnectionException>>) mapIterator0, (Object) arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1368));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("V", "The transformer array must not contain a null transformer, index ");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) listIterator0, (-1007L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ListIterator<Iterator<SQLTimeoutException>> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<Iterator<SQLTimeoutException>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Iterator<SQLTimeoutException>>) listIterator0);
      ZippingIterator<Iterator<SQLTimeoutException>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLTimeoutException>>) iterator0, (Iterator<? extends Iterator<SQLTimeoutException>>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) class0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<String>[] linkedListArray0 = (LinkedList<String>[]) Array.newInstance(LinkedList.class, 0);
      ObjectArrayListIterator<LinkedList<String>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedList<String>>(linkedListArray0);
      ListIterator<LinkedList<String>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<String>>) objectArrayListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
