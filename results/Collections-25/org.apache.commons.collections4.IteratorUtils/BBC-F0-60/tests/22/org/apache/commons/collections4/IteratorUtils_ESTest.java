/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:05:29 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Iterator<String> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(linkedList0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) loopingListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(mapIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIteratorWrapper0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Transformer<Object, SQLDataException>[]) null, 3426, 194);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-359), 1316);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      Factory<EnumSet<Locale.Category>> factory0 = ConstantFactory.constantFactory(enumSet0);
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends EnumSet<Locale.Category>>) factory0);
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<SQLException>) objectArrayIterator0, (Closure<? super SQLException>) transformerClosure0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(3426);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) resettableIterator0, (long) 3426);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<Integer>) resettableIterator0;
      iteratorArray0[1] = (Iterator<Integer>) skippingIterator0;
      iteratorArray0[2] = (Iterator<Integer>) resettableIterator0;
      iteratorArray0[3] = (Iterator<Integer>) resettableIterator0;
      iteratorArray0[4] = (Iterator<Integer>) skippingIterator0;
      iteratorArray0[5] = (Iterator<Integer>) singletonListIterator0;
      iteratorArray0[6] = (Iterator<Integer>) skippingIterator0;
      iteratorArray0[7] = (Iterator<Integer>) skippingIterator0;
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      EntrySetMapIterator<SQLSyntaxErrorException, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, SQLException>(hashtable0);
      MapIterator<SQLSyntaxErrorException, SQLException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, SQLException>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      Iterator<Object> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Object>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) transformer0, "ur+6fC&B@4", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(linkedList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Already at start of list.");
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) loopingListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.ClosureTransformer", "");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, (Iterator<? extends SQLClientInfoException>) orderedIterator0, (Iterator<? extends SQLClientInfoException>) orderedIterator0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(zippingIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIteratorWrapper0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("E");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0);
      Boolean boolean0 = IteratorUtils.get((Iterator<Boolean>) resettableIterator0, 0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableIterator0;
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) resettableIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(list0);
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0, 2634L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Stack<Boolean> stack0 = new Stack<Boolean>();
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Boolean>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableIterator0, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<ArrayList<SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OrderedMapIterator<String, LinkedHashSet<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) orderedMapIterator0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>(").", classArray0, objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) invokerTransformer0, "iterator", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", ").");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ').' on 'class org.apache.commons.collections4.iterators.EmptyOrderedMapIterator' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("LmKEd:d I?U", (Class<?>[]) null, (Object[]) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      String[] stringArray0 = new String[2];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 1);
      Predicate<String> predicate1 = OrPredicate.orPredicate((Predicate<? super String>) predicate0, (Predicate<? super String>) predicate0);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) listIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      stack0.addElement("Node must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Hashtable<SQLIntegrityConstraintViolationException, StringTokenizer>>) null, (-1652L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null, true);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) null);
      Predicate<SQLNonTransientConnectionException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLNonTransientConnectionException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7@tU$J@j#Qg*V6G]>");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("LmKEd:d I?U", sQLSyntaxErrorException0);
      FactoryTransformer<SQLException, SQLFeatureNotSupportedException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLFeatureNotSupportedException>((Factory<? extends SQLFeatureNotSupportedException>) null);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) null, (long) 3426, (long) 3426);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-256));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1), (-1867));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2120));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 3744);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", (-1));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("(L.");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(L.", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(L.", "", sQLFeatureNotSupportedException0);
      SQLException[] sQLExceptionArray0 = new SQLException[4];
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException0;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) objectArrayIterator0, (Closure<? super SQLException>) transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '(L.' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>(").", classArray0, objectArray0);
      String string0 = IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) invokerTransformer0, "iterator", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", ").");
      assertFalse(resettableListIterator0.hasNext());
      assertEquals("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactorynulliteratornulliteratornulliteratornulliteratornulliteratornulliteratornulliteratornull).", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) null, "", "8;5flE*Xky33.II", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null, true);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null, true);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UniquePredicate<SQLInvalidAuthorizationSpecException> uniquePredicate0 = new UniquePredicate<SQLInvalidAuthorizationSpecException>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0, 93);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) resettableListIterator0, 832);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0, "AwFPSewV*V1]93FA", "AwFPSewV*V1]93FA", "\t9,/L\"I*3!k");
      assertEquals("AwFPSewV*V1]93FA\t9,/L\"I*3!k", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) transformer0, "The collection must not be null", "The collection must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("LmKEd:d I?U", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) invokerTransformer0, "List must not be null", (String) null, "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) invokerTransformer0, (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = IteratorUtils.get((Iterator<IIOMetadataNode>) listIterator0, 0);
      assertSame(iIOMetadataNode1, iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) listIterator0, 1144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1143
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<Properties, EnumSet<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[5];
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, dataTruncation0);
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) objectArrayIterator0, (Object) batchUpdateException0);
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0[0], true);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>("remove() is not supported");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "remove() is not supported");
      IteratorUtils.find((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      Integer integer0 = IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) loopingIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("");
      IfTransformer<Object, DataTruncation> ifTransformer0 = new IfTransformer<Object, DataTruncation>((Predicate<? super Object>) null, transformer0, transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(ifTransformer0);
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) objectArrayIterator0, (Closure<? super SQLException>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("LmKEd:d I?U", (Class<?>[]) null, (Object[]) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("(L.");
      IfTransformer<Object, DataTruncation> ifTransformer0 = new IfTransformer<Object, DataTruncation>(predicate0, transformer0, transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(ifTransformer0);
      IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "remove() is not supported");
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("nnR}~", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("b_acq;I=T [.Hl<s(K", sQLNonTransientConnectionException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransientException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) singletonIterator0, class0);
      assertEquals(1, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      LoopingListIterator<Locale.Category> loopingListIterator0 = new LoopingListIterator<Locale.Category>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) loopingListIterator0, (-1330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, (-1028));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<SQLRecoverableException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) mapIterator0, (Class<SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MapIterator<SQLRecoverableException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) mapIterator0, class0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<SQLRecoverableException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterable<SQLRecoverableException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      Iterable<Locale.Category> iterable0 = IteratorUtils.asIterable((Iterator<? extends Locale.Category>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null, (Collection<? super SQLClientInfoException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) listIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.ForClosure");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("remove() is not supported");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      Factory<EnumSet<Locale.Category>> factory0 = ConstantFactory.constantFactory(enumSet0);
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends EnumSet<Locale.Category>>) factory0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Transformer<? super SQLNonTransientConnectionException, ? extends EnumSet<Locale.Category>>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedMapIterator<ClientInfoStatus, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ClientInfoStatus, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ClientInfoStatus, SQLRecoverableException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) abstractOrderedMapIteratorDecorator0, (Transformer<? super ClientInfoStatus, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<SQLException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate1, (-1196), (-1196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, EnumSet<ClientInfoStatus>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-1012), (-1012));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 0, 1282);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) resettableIterator0);
      assertEquals("[1]", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLTransactionRollbackException0);
      Transformer<SQLTransientException, SQLTimeoutException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) iterator0, 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTimeoutException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "ExceptionClosure invoked");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class0, 1567, 841);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 219);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) objectArrayIterator0, (Object) batchUpdateExceptionArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<TreeSet<DataTruncation>> predicateTransformer0 = new PredicateTransformer<TreeSet<DataTruncation>>(predicate0);
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      Boolean boolean0 = predicateTransformer0.transform(treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, (-573));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("gb6fF*!+*q3C8", "gb6fF*!+*q3C8", (-2977), hashtable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, false);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2938));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
