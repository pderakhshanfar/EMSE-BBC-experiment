/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 11:21:39 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate3 = AndPredicate.andPredicate((Predicate<? super Object>) predicate2, (Predicate<? super Object>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("B6D|1En\"mEpn&DNCe", "", 0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransactionRollbackException0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.size(resettableIterator0);
      TreeSet<SQLTransientConnectionException> treeSet0 = null;
      try {
        treeSet0 = new TreeSet<SQLTransientConnectionException>((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2973);
      intArray0[1] = 7;
      intArray0[2] = (-3536);
      intArray0[3] = 32;
      SQLTransientException sQLTransientException0 = new SQLTransientException("*{HY>SZP", "", 715, (Throwable) null);
      SQLException sQLException0 = new SQLException("NodeList must not be null", "", 10, sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "R=8;>G$", intArray0, sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("", batchUpdateException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<SQLSyntaxErrorException> enumeration0 = (Enumeration<SQLSyntaxErrorException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.size((Iterator<?>) null);
      Collection<SQLTransientConnectionException> collection0 = null;
      TreeSet<SQLTransientConnectionException> treeSet0 = null;
      try {
        treeSet0 = new TreeSet<SQLTransientConnectionException>((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      EmptyListIterator.resettableEmptyListIterator();
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<Object>) orderedIterator0, (Predicate<? super Object>) predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("OJ<.T&`\"m'N-1^}i");
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(47);
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>(linkedList1);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedList1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<SQLSyntaxErrorException> enumeration0 = (Enumeration<SQLSyntaxErrorException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      OrderedMapIterator<IIOMetadataNode, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) abstractOrderedMapIteratorDecorator0, 1329);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1329
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("Closure must not be null");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) resettableIterator0, (Equator<Object>) defaultEquator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Closure must not be null", sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Closure must not be null' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResettableIterator<LinkedHashSet<Boolean>> resettableIterator0 = IteratorUtils.singletonIterator((LinkedHashSet<Boolean>) null);
      OrderedMapIterator<String, LinkedList<SQLFeatureNotSupportedException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException("delimiter may not be null", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLException0);
      sQLExceptionArray0[0] = (SQLException) sQLFeatureNotSupportedException0;
      IteratorUtils.arrayIterator(sQLExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("delimiter may not be null", "delimiter may not be null", 468, hashMap0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      int int0 = IteratorUtils.size(orderedMapIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) null);
      IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, String>) transformer0, "!OJjzpud?Wz\"", "The object and transformer map must not be null", "!OJjzpud?Wz\"");
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedHashSet0);
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(hashSet0);
      IteratorUtils.skippingIterator((Iterator<Properties>) loopingIterator0, 0L);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The object and transformer map must not be null!OJjzpud?Wz\"");
      Object object0 = new Object();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.OrPredicate", "The object and transformer map must not be null!OJjzpud?Wz\"", sQLNonTransientConnectionException0);
      OrderedMapIterator<IIOMetadataNode, SQLRecoverableException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) abstractOrderedMapIteratorDecorator0, (-1471));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1471
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      StringTokenizer stringTokenizer0 = null;
      try {
        stringTokenizer0 = new StringTokenizer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<SQLSyntaxErrorException> enumeration0 = (Enumeration<SQLSyntaxErrorException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) linkedList0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) resettableListIterator0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      IteratorUtils.size(zippingIterator0);
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      String string0 = "4S(/5e#o~uJ4-x}";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("4S(/5e#o~uJ4-x}");
      DataTruncation dataTruncation0 = new DataTruncation(4, false, false, 25, 0);
      IteratorUtils.getIterator(dataTruncation0);
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<Locale.FilteringMode> predicateTransformer0 = new PredicateTransformer<Locale.FilteringMode>(predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      predicateTransformer0.transform(locale_FilteringMode0);
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      linkedList0.removeFirstOccurrence(integer0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.FilteringMode>>) linkedList0);
      IteratorUtils.isEmpty(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 0L, 0L);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("x9r,y.d)5SG7+ <mOe");
      boolean boolean0 = IteratorUtils.contains((Iterator<Closure<LinkedHashSet>>) null, (Object) integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z(@K5-mL:");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(hashSet0);
      IteratorUtils.skippingIterator((Iterator<Properties>) loopingIterator0, 0L);
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Integer>) listIterator0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      TreeSet<SQLTransientConnectionException> treeSet0 = null;
      try {
        treeSet0 = new TreeSet<SQLTransientConnectionException>((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLTransientException sQLTransientException0 = new SQLTransientException("_riN;`^kmk7,!=*)@", "", int0, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "H[P*a$SV;d^oW", batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("H[P*a$SV;d^oW", "H[P*a$SV;d^oW", 0, sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("H[P*a$SV;d^oW", sQLWarning0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLTimeoutException0.addSuppressed(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      sQLSyntaxErrorException0.getStackTrace();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      OrderedMapIterator<Boolean, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("_riN;`^kmk7,!=*)@");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 100, 100, (Throwable) null);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      OrderedMapIterator<Boolean, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5-");
      assertEquals("5-", sQLNonTransientConnectionException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>>(orderedMapIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PriorityQueue<EnumSet<Locale.FilteringMode>> priorityQueue0 = new PriorityQueue<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) resettableListIterator0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Closure<Object>>) null, 1511L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " 9A-sQ 1Z1)C0]cA'\"r");
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      linkedList0.add(enumSet0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.InstanceofPredicate", " 9A-sQ 1Z1)C0]cA'\"r", hashtable0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(arrayDeque0);
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) loopingIterator0);
      IteratorUtils.skippingIterator(iterator0, 0L);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.InstanceofPredicate");
      iIOMetadataNode0.getAttributeNodeNS("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Enumeration<SQLSyntaxErrorException> enumeration0 = (Enumeration<SQLSyntaxErrorException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Integer integer1 = new Integer((-284));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) singletonListIterator0);
      IteratorUtils.toString(iterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[-284]");
      assertNull(sQLNonTransientConnectionException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-4825), 100, (Throwable) null);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) singletonIterator0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<Locale.FilteringMode> predicateTransformer0 = new PredicateTransformer<Locale.FilteringMode>(predicate1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      predicateTransformer0.transform(locale_FilteringMode0);
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.FilteringMode>>) linkedList0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(stack0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      AndPredicate.andPredicate((Predicate<? super SQLException>) predicate1, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) loopingListIterator0, (Predicate<? super SQLTransientException>) predicate1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0);
      Integer integer0 = new Integer(32);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " 9A-sQ 1Z1)C0]cA'\"r");
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      linkedList0.add(enumSet0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.InstanceofPredicate", " 9A-sQ 1Z1)C0]cA'\"r", hashtable0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<Locale.FilteringMode> predicateTransformer0 = new PredicateTransformer<Locale.FilteringMode>(predicate1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Boolean boolean0 = predicateTransformer0.transform(locale_FilteringMode0);
      linkedList0.removeFirstOccurrence(boolean0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.FilteringMode>>) linkedList0);
      boolean boolean1 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(stack0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLException> predicate2 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate1, (Predicate<? super SQLException>) predicate1);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) loopingListIterator0, (Predicate<? super SQLTransientException>) predicate2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Properties>(orderedMapIterator0);
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(orderedMapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",&`5D`(Ya\"|");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      Predicate<SQLTransactionRollbackException> predicate0 = EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator((BatchUpdateException) null);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) listIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("VL|@TH'+&", "AY", (Throwable) null);
      assertEquals(0, sQLWarning0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 0L, 0L);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0, (Closure<? super SQLNonTransientConnectionException>) closure0);
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends Boolean>) orderedMapIterator1);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 0L, 0L);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) boundedIterator0, (Iterator<? extends Integer>) resettableIterator0);
      IteratorUtils.toString(iterator0);
      ResettableIterator<Transformer<SQLTransientException, SQLWarning>> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      OrderedMapIterator<SQLTransactionRollbackException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Properties>(orderedMapIterator1);
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(abstractOrderedMapIteratorDecorator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",&`5D`(Ya\"|");
      SQLDataException sQLDataException0 = new SQLDataException(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      Predicate<SQLTransactionRollbackException> predicate0 = EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) listIteratorWrapper0);
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      IteratorUtils.singletonIterator((Object) locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 1, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      int int0 = 52;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, (long) int0, 683L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      linkedList0.add(enumSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Entry does not exist: ", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 2114, (-550));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1653), false, true, (-1653), (-1653), (Throwable) null);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      assertNotNull(resettableIterator0);
      
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1660), false, false, (-1660), (-1660), (Throwable) null);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1660));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(12);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(12);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(123);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 6L, 0L);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(stack0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLException> predicate2 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate1, (Predicate<? super SQLException>) predicate1);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) loopingListIterator0, (Predicate<? super SQLTransientException>) predicate2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends EnumSet<Locale.FilteringMode>>) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) null, (Transformer<? super EnumSet<Locale.FilteringMode>, String>) null, "-FMbO/qMSC57CVcto", "Closure must not be null", "Closure must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "+k&5pd{&8V+%VEPhoO3";
      stringArray0[2] = "3U_..)>UNiyG>A5zte";
      stringArray0[3] = "";
      stringArray0[4] = ")$";
      stringArray0[5] = "";
      stringArray0[6] = "7Wk-]/4/7m}/";
      stringArray0[7] = "}:cM8AR>yn~7zuv";
      stringArray0[8] = "Vk^";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0, class0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      int int0 = 52;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) linkedList0, (-925), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " 9A-sQ 1Z1)C0]cA'\"r");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends Vector<SQLInvalidAuthorizationSpecException>>) orderedMapIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1, class0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("wm3B}x~/NS", intArray0, (Throwable) null);
      IteratorUtils.getIterator(batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("wm3B}x~/NS");
      IteratorUtils.getIterator(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 205, 205);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 9);
      int int0 = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("null keys not allowed", "null keys not allowed", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      SQLWarning sQLWarning0 = new SQLWarning("Predicate must not be null");
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("");
      sQLWarningArray0[1] = sQLWarning1;
      DataTruncation dataTruncation0 = new DataTruncation(1652, true, true, 1652, 0);
      sQLWarningArray0[2] = (SQLWarning) dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1652, true, true, 1652, 1652);
      sQLWarningArray0[3] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning2 = new SQLWarning("ARfa", sQLWarning1);
      sQLWarningArray0[4] = sQLWarning2;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1660), false, true, (-1660), (-1660), (Throwable) null);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "", (-1829));
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLTransientConnectionException1);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "", (-1829), sQLTransientException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", "", 1204, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("", ",4NYm:3pSxoh|", 1204);
      sQLTransientConnectionException3.spliterator();
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.IteratorUtils", "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(",4NYm:3pSxoh|", sQLTransientException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, (-3875), (-3875));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, SQLNonTransientException>) orderedMapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("");
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedMapIterator1, 31L, 31L);
      Iterator<Iterator<StringTokenizer>>[] iteratorArray0 = (Iterator<Iterator<StringTokenizer>>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<StringTokenizer, Integer> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, Integer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Integer>) orderedMapIterator2);
      MapIterator<StringTokenizer, Integer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends Integer>) mapIterator0);
      SingletonIterator<Iterator<StringTokenizer>> singletonIterator0 = new SingletonIterator<Iterator<StringTokenizer>>(mapIterator1);
      iteratorArray0[0] = (Iterator<Iterator<StringTokenizer>>) singletonIterator0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("eO\"L6)Q {+~", "eO\"L6)Q {+~", 541, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 10);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "", (-2001));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "", "setValue() is not supported", 10);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", "i<_", "remove() method is not supported", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "", "setValue() is not supported", 3088);
      stackTraceElementArray0[4] = stackTraceElement4;
      batchUpdateException0.setStackTrace(stackTraceElementArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>>(orderedMapIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0, class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" 9A-sQ 1Z1)C0]cA'\"r");
      IteratorUtils.getIterator(orderedMapIterator0);
      LinkedList<IIOMetadataNode>[] linkedListArray0 = (LinkedList<IIOMetadataNode>[]) Array.newInstance(LinkedList.class, 6);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[0] = linkedList0;
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[1] = linkedList1;
      LinkedList<IIOMetadataNode> linkedList2 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[2] = linkedList2;
      LinkedList<IIOMetadataNode> linkedList3 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[3] = linkedList3;
      LinkedList<IIOMetadataNode> linkedList4 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[4] = linkedList4;
      LinkedList<IIOMetadataNode> linkedList5 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[5] = linkedList5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(linkedListArray0, 2300);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashSet<SQLTransientException>[] hashSetArray0 = null;
      int int0 = 777;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<SQLTransientException>[]) null, 777);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      linkedList0.add(enumSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "delimiter may not be null", 0);
      linkedList0.removeFirstOccurrence(sQLSyntaxErrorException0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.FilteringMode>>) linkedList0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.FilteringMode>>) linkedList0);
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = null;
      int int0 = 44;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 2);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[1] = priorityQueue1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(priorityQueueArray0, 1840);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonListIterator((Object) instanceofPredicate0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 12);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Input Object must not be null", "", 3);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException(" px}6?qdZR{PjLkU5Qn", "", 10, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("", "Input Object must not be null", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("#<11s<fw$m", "", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("g+fVfeL`G@gjk:", "", 10);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Hashtable<Object, String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = 0;
      intArray0[2] = (-149);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 16;
      intArray1[3] = 1905;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-149);
      intArray1[7] = 0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("prefix may not be null", "", 1905, intArray1);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("prefix may not be null", "GREATER", (-1630), intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("prefix may not be null", "", 0, intArray1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", "", intArray1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("prefix may not be null", "prefix may not be null", intArray1);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = 36L;
      longArray0[2] = (long) (-149);
      longArray0[3] = (long) (-149);
      longArray0[4] = (long) 1905;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 16;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("[8MmZpT@p b2Z&/5q ", "prefix may not be null", 10, longArray0, batchUpdateException1);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException();
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TreeSet<SQLNonTransientConnectionException> treeSet0 = new TreeSet<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(treeSet0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) loopingIterator0, (Iterator<? extends SQLNonTransientConnectionException>) loopingIterator0, (Iterator<? extends SQLNonTransientConnectionException>) loopingIterator0);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0);
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(list0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Hashtable<Predicate<Object>, Closure<Object>> hashtable0 = new Hashtable<Predicate<Object>, Closure<Object>>();
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(listIterator0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) listIteratorWrapper0;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<Vector<IIOMetadataNode>> linkedList0 = new LinkedList<Vector<IIOMetadataNode>>();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      stack0.clone();
      linkedList0.add((Vector<IIOMetadataNode>) stack0);
      IteratorUtils.loopingListIterator((List<Vector<IIOMetadataNode>>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MapIterator<Locale.FilteringMode, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Locale.FilteringMode, IIOMetadataNode> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends IIOMetadataNode>) mapIterator0);
      AbstractMapIteratorDecorator<Locale.FilteringMode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, IIOMetadataNode>(mapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, IIOMetadataNode>) abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 44, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.clear();
      linkedHashSet0.add((Integer) null);
      linkedHashSet0.add((Integer) null);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o`$oN_B");
      linkedHashSet0.add(integer0);
      linkedHashSet0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Vector<SQLInvalidAuthorizationSpecException>>(orderedMapIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0, class0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Enumeration<SQLSyntaxErrorException> enumeration0 = (Enumeration<SQLSyntaxErrorException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      Enumeration<SQLSyntaxErrorException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration1, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      assertNotSame(iterator1, iterator0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 0L, 0L);
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 5);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode1);
      enumSetArray0[0] = enumSet0;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode3, locale_FilteringMode2, locale_FilteringMode2, locale_FilteringMode4);
      enumSetArray0[1] = enumSet1;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode5, locale_FilteringMode6);
      enumSetArray0[2] = enumSet2;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet3 = EnumSet.of(locale_FilteringMode3, locale_FilteringMode7);
      enumSetArray0[3] = enumSet3;
      Locale.FilteringMode locale_FilteringMode8 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode9 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet4 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode8, locale_FilteringMode9, locale_FilteringMode0);
      enumSetArray0[4] = enumSet4;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 0, 856);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "A?", sQLExceptionArray0[0]);
      sQLExceptionArray0[1] = (SQLException) sQLRecoverableException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 1833);
      sQLExceptionArray0[2] = (SQLException) sQLInvalidAuthorizationSpecException0;
      String string0 = "Array class must not be null";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "Array class must not be null", sQLInvalidAuthorizationSpecException0);
      sQLExceptionArray0[3] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      sQLExceptionArray0[4] = (SQLException) sQLSyntaxErrorException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      sQLExceptionArray0[5] = (SQLException) sQLIntegrityConstraintViolationException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "?r Y~fhms\"<$^ V", 1833);
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientConnectionException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("L", "8", 1833, sQLExceptionArray0[6]);
      sQLExceptionArray0[7] = (SQLException) sQLRecoverableException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Entry does not exist: ", (String) null, 1833, sQLSyntaxErrorException0);
      sQLExceptionArray0[8] = (SQLException) sQLIntegrityConstraintViolationException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 1833, (-1113));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>((SQLClientInfoException) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) singletonListIterator0, (Iterator<? extends SQLClientInfoException>) singletonListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 1421, 1421);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator("");
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(hashSet0);
      IteratorUtils.skippingIterator((Iterator<Properties>) loopingIterator0, 0L);
      iIOMetadataNode0.getAttributeNodeNS("", (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 0L, 0L);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) boundedIterator0, (Iterator<? extends Integer>) resettableIterator0);
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<Locale.FilteringMode> predicateTransformer0 = new PredicateTransformer<Locale.FilteringMode>(predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      predicateTransformer0.transform(locale_FilteringMode0);
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<Properties>) orderedIterator0, 1L);
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      // Undeclared exception!
      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 1 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MapIterator<Boolean, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Boolean, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Boolean, Properties>(mapIterator0);
      MapIterator<Boolean, Properties> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Boolean, ? extends Properties>) abstractMapIteratorDecorator0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Boolean>) mapIterator1);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("{|2tFH@RGZ\"8F");
      SQLDataException sQLDataException0 = new SQLDataException("{|2tFH@RGZ\"8F", "{|2tFH@RGZ\"8F", mockThrowable0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, 93, 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z(@K5-mL:");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(hashSet0);
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Integer>) listIterator0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0, 6);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 1);
      Properties properties0 = new Properties();
      hashSet0.add(properties0);
      iteratorArray0[0] = (Iterator<Properties>) loopingIterator0;
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HashSet<IIOMetadataNode>[] hashSetArray0 = (HashSet<IIOMetadataNode>[]) Array.newInstance(HashSet.class, 9);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>(1, 1);
      hashSetArray0[0] = (HashSet<IIOMetadataNode>) linkedHashSet0;
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      hashSetArray0[1] = hashSet0;
      LinkedHashSet<IIOMetadataNode> linkedHashSet1 = new LinkedHashSet<IIOMetadataNode>();
      hashSetArray0[2] = (HashSet<IIOMetadataNode>) linkedHashSet1;
      LinkedHashSet<IIOMetadataNode> linkedHashSet2 = new LinkedHashSet<IIOMetadataNode>();
      hashSetArray0[3] = (HashSet<IIOMetadataNode>) linkedHashSet2;
      LinkedHashSet<IIOMetadataNode> linkedHashSet3 = new LinkedHashSet<IIOMetadataNode>(1);
      hashSetArray0[4] = (HashSet<IIOMetadataNode>) linkedHashSet3;
      LinkedHashSet<IIOMetadataNode> linkedHashSet4 = new LinkedHashSet<IIOMetadataNode>();
      hashSetArray0[5] = (HashSet<IIOMetadataNode>) linkedHashSet4;
      HashSet<IIOMetadataNode> hashSet1 = new HashSet<IIOMetadataNode>();
      hashSetArray0[6] = hashSet1;
      HashSet<IIOMetadataNode> hashSet2 = new HashSet<IIOMetadataNode>();
      hashSetArray0[7] = hashSet2;
      LinkedHashSet<IIOMetadataNode> linkedHashSet5 = new LinkedHashSet<IIOMetadataNode>();
      hashSetArray0[8] = (HashSet<IIOMetadataNode>) linkedHashSet5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, (-3287), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
