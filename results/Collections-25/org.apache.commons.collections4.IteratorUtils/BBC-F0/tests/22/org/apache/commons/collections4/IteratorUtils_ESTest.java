/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:29:03 GMT 2020
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.BoundedIterator", (String) null, 166, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-1000), 1432);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      linkedList0.push(sQLTimeoutException0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientExceptionArray0[0]);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate0);
      ObjectArrayListIterator<SQLTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientException>(sQLTransientExceptionArray0);
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) nullIsFalsePredicate0);
      assertNotNull(sQLTransientException0);
      assertTrue(objectArrayListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, EnumSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[5] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[7] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[8] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      ResettableIterator<Class<Integer>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) null, 2504L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashSet<String>[] hashSetArray0 = (HashSet<String>[]) Array.newInstance(HashSet.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 2161, (-5290));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException>[] arrayListArray0 = (ArrayList<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayList.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(arrayListArray0, 328);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null, 1284, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, (-56));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int[] intArray0 = new int[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "4c;pIw,&");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("nd+F", "(]'^|Y(", intArray0, sQLFeatureNotSupportedException0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<BatchUpdateException> predicate0 = ComparatorPredicate.comparatorPredicate(batchUpdateException0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MapIterator<Properties, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) mapIterator0, 630);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0, true);
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) singletonIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "Iterator must not be null");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "", "Iterator must not be null", "VYl");
      assertEquals("Iterator must not be nullnullVYl", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) listIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "InstantiateTransformer: The constructor must exist and be public ", "Iterator must not be null", "VYl");
      assertEquals("Iterator must not be nullVYl", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      DataTruncation dataTruncation0 = new DataTruncation(1661, true, false, 1, 1, batchUpdateException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OrderedMapIterator<Object, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) orderedMapIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]w=J,:eibO35P", "nd+F");
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Iterator must not be null", "9S@ee", intArray0, sQLFeatureNotSupportedException0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<BatchUpdateException> predicate0 = ComparatorPredicate.comparatorPredicate(batchUpdateException0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[9];
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) predicateArray0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(predicate0);
      IteratorUtils.find((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) nullIsTruePredicate0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(14);
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OrderedMapIterator<ServiceLoader<SQLNonTransientException>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 5);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "q#^9j9N7|4s5d;f'P", 100, intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) singletonListIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, class0);
      assertEquals(0, sQLTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, 0L, (-1678L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(vector0);
      Iterable<SQLRecoverableException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) reverseListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(100);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) singletonListIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      Iterator<Integer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) singletonListIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>(stack0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) treeSet0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iIOMetadataNode0);
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      predicateArray0[2] = predicateArray0[1];
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLException>[]) predicateArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<DataTruncation, EnumSet<Locale.Category>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Transformer<? super DataTruncation, ? extends EnumSet<Locale.Category>>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) resettableIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<StringTokenizer>) skippingIterator0, (-1281L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      FactoryTransformer<Integer, String> factoryTransformer0 = new FactoryTransformer<Integer, String>(factory0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) factoryTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) vector0, 29, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 665);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MapIterator<StringTokenizer, LinkedHashSet<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MapIterator<SQLException, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 4, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1284, 1284);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MapIterator<SQLException, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) mapIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "c Njw/C:v*./*`", 1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("A)C\"_['$cZs9&5ug}", sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("A)C\"_['$cZs9&5ug}", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<Locale.Category> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 2037);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      OrderedMapIterator<Properties, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Properties, String> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, String>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "Index cannot be negative: ", 1064, intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(1064, true, false, 10, (-91), batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) orderedIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
