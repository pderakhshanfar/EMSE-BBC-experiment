/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:22:23 GMT 2020
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      String[] stringArray0 = IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLNonTransientConnectionException, ArrayList<SQLNonTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, ArrayList<SQLNonTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, ArrayList<SQLNonTransientException>>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServiceLoader<ClientInfoStatus>[] serviceLoaderArray0 = (ServiceLoader<ClientInfoStatus>[]) Array.newInstance(ServiceLoader.class, 4);
      ResettableListIterator<ServiceLoader<ClientInfoStatus>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) singletonIterator0);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) loopingIterator0, (-178L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Iterator<BatchUpdateException>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServiceLoader<SQLInvalidAuthorizationSpecException>[] serviceLoaderArray0 = (ServiceLoader<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ServiceLoader.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(serviceLoaderArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null, 3703);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, (-1154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.Category[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.list.TreeList", "org.apache.commons.collections4.list.TreeList", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Transformer<StringTokenizer, Object>[]) null, 1, (-2549));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 1957, (-1449));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) orderedIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, "r<__JVWhH\"$\"CP", "org.apache.commons.collections4.map.Flat3Map$KeySet", "r<__JVWhH\"$\"CP");
      assertEquals("org.apache.commons.collections4.map.Flat3Map$KeySetr<__JVWhH\"$\"CP", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MapIterator<SQLDataException, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2989).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("EB{E51,96_A", (String) null);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = vector0.listIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "org.apache.commons.collections4.functors.SwitchTransformer", sQLClientInfoException0);
      vector0.add(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 100);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = vector0.listIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 100);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, 1536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "suffix may not be null", "suffix may not be null", "suffix may not be null");
      assertEquals("suffix may not be nullsuffix may not be null", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) orderedIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0, "r<__JVWhH\"$\"CP", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      SingletonIterator<Vector<SQLTransientException>> singletonIterator0 = new SingletonIterator<Vector<SQLTransientException>>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<SQLTransientException>>) singletonIterator0, (Transformer<? super Vector<SQLTransientException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.TransformerClosure", "org.apache.commons.collections4.functors.TransformerClosure", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator(iterator0, iterator0);
      stringTokenizer0.nextToken("aB X!YE");
      int int0 = IteratorUtils.size(iterator1);
      assertEquals(0, stringTokenizer0.countTokens());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MapIterator<PriorityQueue<SQLIntegrityConstraintViolationException>, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<PriorityQueue<SQLIntegrityConstraintViolationException>>) mapIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      boolean boolean0 = IteratorUtils.isEmpty(objectArrayListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<Predicate<Object>>>) null, (Predicate<? super ArrayDeque<Predicate<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MapIterator<SQLDataException, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("EB{E51,96_A", (String) null);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("[]");
      boolean boolean0 = IteratorUtils.contains((Iterator<String>) singletonIterator0, (Object) orderedIterator0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) mapIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("Input Object must not be null", (Equator<Object>) null);
      ArrayDeque<SQLNonTransientException> arrayDeque0 = IteratorUtils.find((Iterator<ArrayDeque<SQLNonTransientException>>) null, (Predicate<? super ArrayDeque<SQLNonTransientException>>) equalPredicate0);
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hashtable<SQLDataException, Locale.Category> hashtable0 = new Hashtable<SQLDataException, Locale.Category>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = vector0.listIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableListIterator0, (-2641));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Iterable<Integer> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) objectArrayListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 9);
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 1, 1);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) iteratorArray0[0]);
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ArrayList<SQLException>>) null, (Object) nodeListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("fK$rA");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedList0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("6~XY", "6~XY");
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLTransientException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLTransientException) sQLTransactionRollbackException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SQLTransientConnectionException sQLTransientConnectionException0 = IteratorUtils.find((Iterator<SQLTransientConnectionException>) listIteratorWrapper0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MapIterator<SQLDataException, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      Iterator<SQLDataException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) mapIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, ArrayDeque<Properties>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) mapIterator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ConstantTransformer<Object, ClientInfoStatus> constantTransformer0 = new ConstantTransformer<Object, ClientInfoStatus>(clientInfoStatus0);
      IfTransformer<Object, ClientInfoStatus> ifTransformer0 = new IfTransformer<Object, ClientInfoStatus>(orPredicate0, constantTransformer0, constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) null, (Transformer<? super StringTokenizer, ? extends ClientInfoStatus>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ConstantTransformer<Object, ClientInfoStatus> constantTransformer0 = new ConstantTransformer<Object, ClientInfoStatus>(clientInfoStatus0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Transformer<? super StringTokenizer, ? extends ClientInfoStatus>) constantTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MapIterator<String, HashSet<ArrayList>> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) mapIterator0, 0L, 1L);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<String>) boundedIterator0, (Transformer<? super String, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 668, 668);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 3576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ListIteratorWrapper does not support optional operations of ListIterator.", "ListIteratorWrapper does not support optional operations of ListIterator.", (-1622));
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLFeatureNotSupportedException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLFeatureNotSupportedException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Closure<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 0, (-406));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ArrayList<SQLWarning>[] arrayListArray0 = (ArrayList<SQLWarning>[]) Array.newInstance(ArrayList.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      String string0 = IteratorUtils.toString((Iterator<Object>) resettableListIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) zippingIterator0);
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>) zippingIterator0, (Iterator<?>) iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) null);
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MapIterator<String, HashSet<ArrayList>> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) mapIterator0, 0L, 1L);
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) boundedIterator0, 0L);
      BoundedIterator<String> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends String>) skippingIterator0, 1L);
      assertNotSame(boundedIterator0, boundedIterator1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Integer integer0 = new Integer(328);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 0, sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("f", "f", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1622), (-231));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, (-2565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) orderedMapIterator0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.TransformerClosure", "org.apache.commons.collections4.functors.TransformerClosure", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 213);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) orderedIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ListIterator<SQLSyntaxErrorException> listIterator0 = stack0.listIterator();
      ListIterator<SQLSyntaxErrorException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }
}
