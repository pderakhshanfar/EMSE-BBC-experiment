/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:30:11 GMT 2020
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("J'ggx!Zw3Su*Dl", "");
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("J'ggx!Zw3Su*Dl", intArray0, sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 2085, (-352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderedMapIterator<SQLDataException, HashSet<SQLDataException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, HashSet<SQLDataException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, HashSet<SQLDataException>>(orderedMapIterator0);
      MapIterator<SQLDataException, HashSet<SQLDataException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, HashSet<SQLDataException>>) abstractMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(arrayList0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0", "[]");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      loopingListIterator0.add(sQLNonTransientConnectionException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) loopingListIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<SQLRecoverableException, Object> hashMap0 = new HashMap<SQLRecoverableException, Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "h&a{QAHtJ%$g2u");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      hashMap0.put(sQLRecoverableException0, sQLFeatureNotSupportedException0);
      EntrySetMapIterator<SQLRecoverableException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, Object>(hashMap0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) entrySetMapIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<IIOMetadataNode, DataTruncation> hashMap0 = new HashMap<IIOMetadataNode, DataTruncation>();
      EntrySetMapIterator<IIOMetadataNode, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, DataTruncation>(hashMap0);
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) entrySetMapIterator0, (Iterator<?>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) hashSet0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<String, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) iterator0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, SQLClientInfoException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLClientInfoException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLClientInfoException>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2104));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrderedIterator<Iterator<ArrayList<Locale.LanguageRange>>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BoundedIterator<Iterator<ArrayList<Locale.LanguageRange>>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Iterator<ArrayList<Locale.LanguageRange>>>) orderedIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) reverseListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedHashSet0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("[]");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) treeSet0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) arrayList0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      EqualPredicate<String> equalPredicate0 = new EqualPredicate<String>("Gf6gF=_6");
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) objectArrayListIterator0, (Predicate<? super String>) equalPredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      Predicate<BatchUpdateException> predicate0 = NonePredicate.nonePredicate((Predicate<? super BatchUpdateException>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transformer<SQLClientInfoException, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends DataTruncation>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("[Q?4{?+MoSq*]QK\"P");
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends String>) objectArrayListIterator0, (Transformer<? super String, ? extends DataTruncation>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 273);
      ConstantTransformer<SQLException, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLException, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) listIterator0, 0L);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLDataException>) skippingIterator0;
      iteratorArray0[1] = (Iterator<SQLDataException>) listIterator0;
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) zippingIterator0, (-100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResettableIterator<LinkedHashSet<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) priorityQueue0);
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 0, 753);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<HashSet<Integer>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) constantTransformer0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) iterator0, 928);
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, (-120), (-417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 1485);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableListIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<SQLRecoverableException, Object> hashMap0 = new HashMap<SQLRecoverableException, Object>();
      EntrySetMapIterator<SQLRecoverableException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, Object>(hashMap0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) list0, (-2104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OrderedMapIterator<Locale.LanguageRange, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(".DIK");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) nodeListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(arrayList0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) loopingListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
