/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:07:23 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      ExceptionPredicate.exceptionPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      predicateArray0[1] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate1);
      ListIterator<SQLDataException> listIterator0 = null;
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) predicate2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      propertiesArray0[2] = properties1;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("$[s*XJY 745#ZjI>GH");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("(this Map)");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "$[s*XJY 745#ZjI>GH", 0, sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("$[s*XJY 745#ZjI>GH");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", "", 0, sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("", "", 0, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("$[s*XJY 745#ZjI>GH", "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLInvalidAuthorizationSpecException6, comparator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Stack<SQLNonTransientConnectionException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      IteratorUtils.loopingListIterator((List<Locale.Category>) linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("l&(<VDJ#WkRR");
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      SQLDataException sQLDataException0 = new SQLDataException("", "+ep~I:ooE9", 0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate2;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<SQLException> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) onePredicate0);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate3);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      IteratorUtils.arrayIterator(propertiesArray0, 0, 2);
      InvokerTransformer.invokerTransformer("XB");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      ObjectArrayListIterator<Locale.Category> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.Category>(locale_CategoryArray0);
      SkippingIterator<Locale.Category> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.Category>) objectArrayListIterator0, (long) 2);
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) skippingIterator0, (Iterator<? extends Locale.Category>) skippingIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator0, (long) 0);
      IteratorUtils.get((Iterator<Locale.Category>) objectArrayListIterator0, 2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("suffix may not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "suffix may not be null", 1073741824, (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Array class must not be null", "_OH/EYi}:Y", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("suffix may not be null", "suffix may not be null", 10, (Map<String, ClientInfoStatus>) null);
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Array class must not be null", "");
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      int int0 = 0;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends DataTruncation>) orderedMapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("?fBlxe$(YA%v=q");
      Throwable[] throwableArray0 = sQLNonTransientException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.AbstractHashedMap$Values", intArray0, sQLNonTransientException0);
      sQLNonTransientException0.getLocalizedMessage();
      InvokerTransformer<SQLTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLTransientException, String>((String) null, (Class<?>[]) null, throwableArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("?fBlxe$(YA%v=q");
      sQLNonTransientException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.AbstractHashedMap$Values", intArray0, sQLNonTransientException0);
      sQLNonTransientException0.getLocalizedMessage();
      MockFile mockFile0 = new MockFile("KtkU~D&:F");
      MockFile.createTempFile("3K\tJ", "?fBlxe$(YA%v=q", (File) mockFile0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<SQLTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLTransientException, String>("?fBlxe$(YA%v=q", classArray0, classArray0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "KtkU~D&:F");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("KtkU~D&:F");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("?fBlxe$(YA%v=q");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((Throwable) null);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) objectArrayIterator0, (Transformer<? super SQLTimeoutException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '?fBlxe$(YA%v=q' on 'class java.sql.SQLTimeoutException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Integer>[] arrayListArray0 = (ArrayList<Integer>[]) Array.newInstance(ArrayList.class, 3);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayListArray0[0] = arrayList0;
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayListArray0[1] = arrayList1;
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayListArray0[2] = arrayList2;
      IteratorUtils.arrayListIterator(arrayListArray0);
      Class<Locale.Category>[] classArray0 = (Class<Locale.Category>[]) Array.newInstance(Class.class, 7);
      Class<Locale.Category> class0 = Locale.Category.class;
      classArray0[0] = class0;
      Class<Locale.Category> class1 = Locale.Category.class;
      classArray0[1] = class1;
      Class<Locale.Category> class2 = Locale.Category.class;
      classArray0[2] = class2;
      Class<Locale.Category> class3 = Locale.Category.class;
      classArray0[3] = class3;
      Class<Locale.Category> class4 = Locale.Category.class;
      classArray0[4] = class4;
      Class<Locale.Category> class5 = Locale.Category.class;
      classArray0[5] = class5;
      Class<Locale.Category> class6 = Locale.Category.class;
      classArray0[6] = class6;
      InvokerTransformer<SQLTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLTransientException, String>("}--M", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("?fBlxe$(YA%v=q");
      sQLNonTransientException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.AbstractHashedMap$Values", intArray0, sQLNonTransientException0);
      sQLNonTransientException0.getLocalizedMessage();
      MockFile mockFile0 = new MockFile("KtkU~D&:F");
      MockFile.createTempFile("3K\tJ", "?fBlxe$(YA%v=q", (File) mockFile0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      IteratorUtils.arrayListIterator(stringTokenizerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5b* C");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) iIOMetadataNode0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      locale_CategoryArray0[0] = locale_Category0;
      ObjectArrayListIterator<Locale.Category> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.Category>(locale_CategoryArray0);
      SkippingIterator<Locale.Category> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.Category>) objectArrayListIterator0, 1L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) objectArrayListIterator0, (Iterator<? extends Locale.Category>) skippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      IteratorUtils.loopingListIterator((List<Locale.Category>) linkedList0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>) orderedMapIterator0);
      ConstantTransformer.nullTransformer();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.Category>) linkedList0);
      SkippingIterator<Locale.Category> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.Category>) resettableListIterator0, 1969L);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) skippingIterator0, (Iterator<? extends Locale.Category>) skippingIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("5b* C", "5b* C");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<StringTokenizer>) singletonListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedMapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      SQLException sQLException0 = new SQLException("83a3", "83a3");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLExceptionArray0[0]);
      sQLExceptionArray0[1] = (SQLException) sQLTransactionRollbackException0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("83a3");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      AnyPredicate.anyPredicate((Predicate<? super Properties>[]) predicateArray0);
      OrPredicate.orPredicate((Predicate<? super Properties>) predicate0, (Predicate<? super Properties>) predicate0);
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList1);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.find((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      IteratorUtils.loopingListIterator((List<Locale.Category>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Locale.Category>) null, 1969L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U@}.Y!x\"");
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      InvokerTransformer.invokerTransformer("U@}.Y!x\"", (Class<?>[]) classArray0, (Object[]) classArray0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) singletonIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getTagName();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("suffix may not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "suffix may not be null", 1073741824, (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Array class must not be null", "_OH/EYi}:Y", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("suffix may not be null", "suffix may not be null", 10, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Array class must not be null", "");
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends DataTruncation>) orderedMapIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[17];
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0, 10);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.Category>) linkedList0);
      SkippingIterator<Locale.Category> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.Category>) resettableListIterator0, 1969L);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) skippingIterator0, (Iterator<? extends Locale.Category>) skippingIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator0, 0L);
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 425);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      properties3.put("Collection must not be null", properties2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Collection must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[", "[", sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 1546, 100);
      properties3.put(sQLFeatureNotSupportedException0, dataTruncation0);
      properties3.put("Collection must not be null", sQLInvalidAuthorizationSpecException0);
      properties0.remove((Object) properties2);
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableListIterator0);
      IteratorUtils.size(iterator0);
      IteratorUtils.isEmpty(resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLFeatureNotSupportedException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends DataTruncation>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator1;
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iteratorArray0[0]);
      iteratorArray0[1] = iterator1;
      Iterator<SQLNonTransientException> iterator2 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator2, (Closure<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLInvalidAuthorizationSpecException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator1;
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      iteratorArray0[4] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-4954));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2281));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2354);
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(100);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      integerArray0[6] = integer6;
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.toListIterator((Iterator<?>) resettableListIterator1);
      MapIterator<Object, Hashtable<SQLClientInfoException, Object>> mapIterator2 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Object>) mapIterator2);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<SQLException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[9];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties0;
      propertiesArray0[6] = properties0;
      propertiesArray0[7] = properties0;
      propertiesArray0[8] = properties0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      PriorityQueue<SQLClientInfoException>[] priorityQueueArray0 = (PriorityQueue<SQLClientInfoException>[]) Array.newInstance(PriorityQueue.class, 5);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLClientInfoException> priorityQueue1 = new PriorityQueue<SQLClientInfoException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLClientInfoException> priorityQueue2 = new PriorityQueue<SQLClientInfoException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLClientInfoException> priorityQueue3 = new PriorityQueue<SQLClientInfoException>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLClientInfoException> priorityQueue4 = new PriorityQueue<SQLClientInfoException>((Collection<? extends SQLClientInfoException>) priorityQueue0);
      priorityQueueArray0[4] = priorityQueue4;
      IteratorUtils.arrayIterator(priorityQueueArray0, 0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("5b* C", "5b* C");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<StringTokenizer>) singletonListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("5b* C", "prefix may not be null", 0, sQLException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("5b* C", "f-B2DA/q%$[", sQLDataException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_FO07tB+5!");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5b* C", "5b* C", 0, sQLNonTransientException0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-6216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 2213, sQLTimeoutException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getTagName();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("suffix may not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "suffix may not be null", 1073741824, (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Array class must not be null", "_OH/EYi}:Y", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("suffix may not be null", "suffix may not be null", 10, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Array class must not be null", "");
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends DataTruncation>) orderedMapIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      IteratorUtils.arrayIterator(propertiesArray0, 0, 2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("XB");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "XB", (-1980), sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 2);
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0, 10);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hashtable<SQLInvalidAuthorizationSpecException, Properties> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Properties>();
      hashtable0.keySet();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.skippingIterator((Iterator<Locale.Category>) listIterator0, 1969L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) listIterator0, (Iterator<? extends Locale.Category>) listIterator0);
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) listIterator0, 4042L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.Category>) boundedIterator0, 2945);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2945
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      SkippingIterator<Locale.Category> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.Category>) resettableIterator0, 377L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) skippingIterator0, (Iterator<? extends Locale.Category>) skippingIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) resettableIterator0, 377L);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = null;
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Collection must not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<SQLDataException, LinkedHashSet<BatchUpdateException>> hashMap0 = new HashMap<SQLDataException, LinkedHashSet<BatchUpdateException>>();
      EntrySetMapIterator<SQLDataException, LinkedHashSet<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, LinkedHashSet<BatchUpdateException>>(hashMap0);
      AbstractMapIteratorDecorator<SQLDataException, LinkedHashSet<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, LinkedHashSet<BatchUpdateException>>(entrySetMapIterator0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) abstractMapIteratorDecorator0);
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      HashMap<Object, StringTokenizer> hashMap1 = new HashMap<Object, StringTokenizer>();
      Transformer<Object, StringTokenizer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends StringTokenizer>) hashMap1);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply(iterator0, (Closure<? super Object>) closure0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Entry does not exist: ");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U@}.Y!x\"");
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      classArray0[3] = class0;
      IteratorUtils.emptyMapIterator();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) constantTransformer0);
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      int int0 = (-1850);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (-1850));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.Category>) linkedList0);
      SkippingIterator<Locale.Category> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.Category>) resettableListIterator0, 1969L);
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) skippingIterator0, (Iterator<? extends Locale.Category>) skippingIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 665, (int[]) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Transformer must not be null", "Transformer must not be null", 665, longArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(") > toIndex(", (int[]) null);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) objectArrayIterator0, 100);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{Yym]uwV", "G_AL", (-150), batchUpdateException1);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 1, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("XB");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[2] = predicate2;
      Predicate<Properties> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Properties>[]) predicateArray0);
      Predicate<Properties> predicate4 = OrPredicate.orPredicate((Predicate<? super Properties>) predicate3, (Predicate<? super Properties>) predicate0);
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) predicate4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'XB' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>) orderedMapIterator0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) iterator0);
      IteratorUtils.unmodifiableIterator((Iterator<Object>) listIterator0);
      ConstantTransformer.nullTransformer();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      int int0 = (-106);
      int int1 = (-2069);
      DataTruncation dataTruncation0 = new DataTruncation((-106), false, true, (-106), (-2069));
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<SQLWarning> comparatorPredicate0 = new ComparatorPredicate<SQLWarning>(dataTruncation0, comparator0, comparatorPredicate_Criterion0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 16, (-42));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Predicate<SQLException> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) equalPredicate0);
      IteratorUtils.find((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hashtable<SQLInvalidAuthorizationSpecException, Properties> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Properties>();
      hashtable0.keySet();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Properties> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Properties>(hashtable0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      OrderedMapIterator<SQLTransientConnectionException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends Integer>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, Integer>) orderedMapIterator1);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("YoJ8zSf h8#");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, "YoJ8zSf h8#", (-3471), sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, (-3471));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.LoopingIterator");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@DdS**@|qjj>=j}", "@DdS**@|qjj>=j}", 13, sQLTimeoutException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableListIterator0);
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hashtable<SQLInvalidAuthorizationSpecException, Properties> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Properties>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("@DdS**@|qjj>=j}");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.LoopingIterator", "w|kJZ@D>M_r?.2#gi", 32, sQLTimeoutException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("@DdS**@|qjj>=j}", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException2;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, (-3471), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      int int0 = (-2673);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "&34w\"V_7n?Ud5!U", (-2673));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException("", "", (-2673), sQLRecoverableException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("6PyUCDn?", "", "", (-2673));
      stackTraceElementArray0[0] = stackTraceElement0;
      int int1 = (-267);
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "s-~$\"vP;!T!", (-267));
      stackTraceElementArray0[1] = stackTraceElement1;
      int int2 = 46;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "", "", 46);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLException0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLException0);
      int int3 = 3128;
      int int4 = (-1490);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 3128, (-1490));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.Category>) linkedList0);
      SkippingIterator<Locale.Category> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.Category>) resettableListIterator0, 1969L);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) skippingIterator0, (Iterator<? extends Locale.Category>) skippingIterator0);
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator0, 0L);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<SQLNonTransientException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) linkedHashSet0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boundedIterator0, (-4768), 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 8);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>) orderedMapIterator0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("XB");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[2] = predicate2;
      Predicate<Properties> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Properties>[]) predicateArray0);
      Predicate<Properties> predicate4 = OrPredicate.orPredicate((Predicate<? super Properties>) predicate3, (Predicate<? super Properties>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) predicate4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'XB' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getTagName();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("suffix may not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      int int0 = 1073741824;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "suffix may not be null", 1073741824, (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLClientInfoException3.addSuppressed(sQLDataException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Array class must not be null", "", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("suffix may not be null", "suffix may not be null", 10, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Array class must not be null", "");
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U@}.Y!x\"");
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("tErW.~hi2", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'tErW.~hi2' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U@}.Y!x\"");
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("tErW.~hi2", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'tErW.~hi2' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comparator<SQLIntegrityConstraintViolationException> comparator0 = (Comparator<SQLIntegrityConstraintViolationException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Enumeration<Boolean> enumeration0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-490), (-490));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("?fBlxe$(YA%v=q");
      sQLNonTransientException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.AbstractHashedMap$Values", intArray0, sQLNonTransientException0);
      String string0 = "3K\\tJ";
      MockFile mockFile0 = new MockFile("K`kUdD&:z&F");
      File file0 = MockFile.createTempFile("3K\tJ", "?fBlxe$(YA%v=q", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append('_');
      batchUpdateException0.printStackTrace(printStream0);
      IteratorUtils.getIterator(batchUpdateException0);
      MapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLInvalidAuthorizationSpecException>(mapIterator1);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator";
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", "y0(#");
      stringTokenizer0.hasMoreElements();
      stringTokenizer0.hasMoreTokens();
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) singletonIterator0, (-957L), (-957L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getTagName();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("suffix may not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "suffix may not be null", 1073741824, (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Array class must not be null", "", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("suffix may not be null", "suffix may not be null", 10, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Array class must not be null", "");
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.LoopingIterator");
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(") is the size of the list.", "@DdS**@|qjj>=j}", 13);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0;
      Hashtable<SQLInvalidAuthorizationSpecException, Properties> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Properties>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Properties> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Properties>(hashtable0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) entrySetMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) iteratorArray0[0]);
      IteratorUtils.unmodifiableIterator((Iterator<Object>) listIterator0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<SQLException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OrderedMapIterator<Class<SQLNonTransientConnectionException>, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.contains((Iterator<Class<SQLNonTransientConnectionException>>) orderedMapIterator0, (Object) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<SQLDataException, LinkedHashSet<BatchUpdateException>> hashMap0 = new HashMap<SQLDataException, LinkedHashSet<BatchUpdateException>>();
      EntrySetMapIterator<SQLDataException, LinkedHashSet<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, LinkedHashSet<BatchUpdateException>>(hashMap0);
      AbstractMapIteratorDecorator<SQLDataException, LinkedHashSet<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, LinkedHashSet<BatchUpdateException>>(entrySetMapIterator0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) abstractMapIteratorDecorator0);
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      HashMap<Object, StringTokenizer> hashMap1 = new HashMap<Object, StringTokenizer>();
      Transformer<Object, StringTokenizer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends StringTokenizer>) hashMap1);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply(iterator0, (Closure<? super Object>) closure0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Entry does not exist: ");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("EJ4 l9", "EJ4 l9", 93);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("EJ4 l9", hashMap0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("c2;hZbw;stL4C=", "c2;hZbw;stL4C=", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Entry does not exist: ", "", sQLClientInfoException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("c2;hZbw;stL4C=", "c2;hZbw;stL4C=", 287);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Entry does not exist: ", "{[");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(".6IsC", sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("Entry does not exist: ", "", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("kz\"5W,K", "kz\"5W,K");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Predicate<SQLDataException> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("B=CS-axX4>d*", "null keys not allowed", (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("I=O5C0GLvKuvxr5;7M", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "null keys not allowed", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      int int0 = (-2140);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException((String) null, "", (-2140));
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", (String) null, sQLFeatureNotSupportedException3);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, (-2140));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.OnePredicate", (String) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("[`GB$uLO9qMHkDqQ:;k", sQLIntegrityConstraintViolationException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, (String) null, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("[`GB$uLO9qMHkDqQ:;k", "[`GB$uLO9qMHkDqQ:;k", 4439);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException((String) null, (String) null, (-210), sQLRecoverableException1);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("Array class must not be null", "Array class must not be null", sQLRecoverableException3);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 4439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, (-1656));
      SQLException sQLException0 = new SQLException(dataTruncation0);
      properties1.put(dataTruncation0, sQLException0);
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      ListIterator<Properties> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) notPredicate0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) listIterator1, (Iterator<? extends Properties>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = null;
      int int0 = (-2785);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, (-2785));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.addSuppressed(sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer1);
      sQLFeatureNotSupportedException0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      IteratorUtils.arrayIterator(propertiesArray0, 0, 2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("XB");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[2] = predicate2;
      Predicate<Properties> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Properties>[]) predicateArray0);
      OrPredicate.orPredicate((Predicate<? super Properties>) predicate3, (Predicate<? super Properties>) predicate0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1405;
      intArray0[3] = 1405;
      intArray0[4] = 1405;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 0;
      SQLWarning sQLWarning0 = new SQLWarning("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Input Object must not be null");
      int int0 = 833;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, (-702), 833);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ListIterator<DataTruncation> listIterator0 = null;
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException>) orderedMapIterator0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) iterator0);
      IteratorUtils.unmodifiableIterator((Iterator<Object>) listIterator0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<SQLException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) null, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.LoopingIterator");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@DdS**@|qjj>=j}", "@DdS**@|qjj>=j}", 32, sQLTimeoutException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, (-3471), (-3471));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedMapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      String string0 = "83a3";
      SQLException sQLException0 = new SQLException("83a3", "83a3");
      sQLExceptionArray0[0] = sQLException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      sQLExceptionArray0[1] = (SQLException) sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("83a3");
      sQLExceptionArray0[2] = (SQLException) sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0, 1407, 1407);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("P|i,Y6Z4{>j");
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U@}.Y!x\"");
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) resettableIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.Category>) resettableIterator0, 2214);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2213
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.skippingIterator((Iterator<Object>) resettableIterator0, 1L);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.FORMAT;
      locale_CategoryArray0[8] = locale_Category8;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 0, 0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.Category>) listIteratorWrapper0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>(hashSet0);
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[8];
      intArray0[0] = 9;
      intArray0[1] = 0;
      intArray0[2] = 100;
      intArray0[3] = 22;
      intArray0[4] = 100;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, 0, intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "", 0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, intArray0, sQLNonTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(",@17)O#o:", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(sQLNonTransientException0);
      batchUpdateExceptionArray0[3] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("", "Ws,Zd2*{XJYE-{gi0", (-1), intArray0, batchUpdateException3);
      batchUpdateExceptionArray0[5] = batchUpdateException6;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashMap<SQLDataException, LinkedHashSet<BatchUpdateException>> hashMap0 = new HashMap<SQLDataException, LinkedHashSet<BatchUpdateException>>();
      EntrySetMapIterator<SQLDataException, LinkedHashSet<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, LinkedHashSet<BatchUpdateException>>(hashMap0);
      AbstractMapIteratorDecorator<SQLDataException, LinkedHashSet<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, LinkedHashSet<BatchUpdateException>>(entrySetMapIterator0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      HashMap<Object, StringTokenizer> hashMap1 = new HashMap<Object, StringTokenizer>();
      Transformer<Object, StringTokenizer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends StringTokenizer>) hashMap1);
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      HashMap<Locale.Category, SQLException> hashMap2 = new HashMap<Locale.Category, SQLException>();
      EntrySetMapIterator<Locale.Category, SQLException> entrySetMapIterator1 = new EntrySetMapIterator<Locale.Category, SQLException>(hashMap2);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>) entrySetMapIterator1, (Iterator<? extends Locale.Category>) entrySetMapIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 425);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 425
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.Category>) linkedList0);
      SkippingIterator<Locale.Category> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.Category>) resettableListIterator0, 1969L);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) skippingIterator0, (Iterator<? extends Locale.Category>) skippingIterator0);
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.Category>) boundedIterator0, 425);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 425
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, (-2618));
      SQLException sQLException0 = new SQLException(dataTruncation0);
      Properties properties0 = new Properties();
      StringTokenizer stringTokenizer0 = new StringTokenizer("PNw`*>5nuwa", "H2LoE0KrF#yj<`;x", false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("PNw`*>5nuwa");
      properties0.put(sQLTimeoutException0, resettableListIterator0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties[] propertiesArray0 = new Properties[5];
      propertiesArray0[0] = properties4;
      propertiesArray0[1] = properties1;
      Properties properties5 = new Properties();
      propertiesArray0[2] = properties5;
      propertiesArray0[3] = properties1;
      propertiesArray0[4] = properties2;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0);
      MapIterator<LinkedHashSet<Hashtable>, LinkedHashSet<String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Hashtable<SQLInvalidAuthorizationSpecException, Properties> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Properties>();
      hashtable0.keySet();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Properties> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Properties>(hashtable0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      OrderedMapIterator<SQLTransientConnectionException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends Integer>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, Integer>) orderedMapIterator1);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }
}
