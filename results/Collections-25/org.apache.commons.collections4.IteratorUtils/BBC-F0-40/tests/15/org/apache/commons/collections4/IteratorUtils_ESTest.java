/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:05:03 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[7];
      intArray0[0] = 604;
      intArray0[1] = 1081;
      intArray0[2] = (-1871);
      intArray0[3] = 4;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = (-2529);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 4);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("' out of bounds for size '");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 604, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ListIterator must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ListIterator must not be null", "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", 100, sQLTimeoutException0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", 100, sQLTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(100, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLTransientConnectionException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Closure<? super SQLTransactionRollbackException>) ifClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Properties properties0 = new Properties();
      vector0.removeElement(properties0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      vector1.add((Object) null);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Properties properties0 = new Properties();
      vector0.removeElement(properties0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      int[] intArray0 = new int[9];
      int int0 = 2088;
      intArray0[0] = 2088;
      int int1 = (-2572);
      intArray0[1] = (-2572);
      intArray0[2] = 2088;
      intArray0[3] = 0;
      intArray0[4] = (-2572);
      int int2 = (-320);
      intArray0[7] = (-320);
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(arrayList0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) loopingListIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      EqualPredicate<StringTokenizer> equalPredicate0 = new EqualPredicate<StringTokenizer>(stringTokenizer0, (Equator<StringTokenizer>) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 100);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      NotNullPredicate.notNullPredicate();
      Transformer<StringTokenizer, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("");
      Transformer<StringTokenizer, StringTokenizer> transformer1 = IfTransformer.ifTransformer((Predicate<? super StringTokenizer>) equalPredicate0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ListIterator must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ListIterator must not be null", "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", 100, sQLTimeoutException0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", 100, sQLTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLTransientConnectionException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Closure<? super SQLTransactionRollbackException>) ifClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      OrderedMapIterator<BatchUpdateException, Class<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("T.{?d?i*m7(/ltAf", "T.{?d?i*m7(/ltAf", 12, sQLFeatureNotSupportedException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      SkippingIterator<SQLTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) singletonIterator0, 1L);
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) skippingIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) iteratorArray0[2], (-1L), (-2405L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Properties properties0 = new Properties();
      vector0.removeElement(properties0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[9];
      intArray0[0] = 2088;
      intArray0[1] = (-2572);
      intArray0[2] = 2088;
      intArray0[3] = 0;
      intArray0[4] = (-2572);
      intArray0[6] = 100;
      intArray0[7] = (-320);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) zippingIterator0, (long) 0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ListIterator must not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ListIterator must not be null", "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", 100, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ListIterator must not be null", "", 100, sQLTimeoutException0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTimeoutException>(orderedMapIterator0);
      MapIterator<SQLNonTransientConnectionException, SQLTimeoutException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLNonTransientConnectionException, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null, (Collection<? super IIOMetadataNode>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<HashSet<SQLTimeoutException>> linkedList0 = new LinkedList<HashSet<SQLTimeoutException>>();
      linkedList0.poll();
      IteratorUtils.loopingListIterator((List<HashSet<SQLTimeoutException>>) linkedList0);
      IteratorUtils.getIterator(linkedList0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      OrderedMapIterator<Integer, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLDataException>(orderedMapIterator0);
      MapIterator<Integer, SQLDataException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList1);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) resettableListIterator0, (-3733L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      OrderedMapIterator<BatchUpdateException, Class<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>();
      Transformer<SQLTimeoutException, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<SQLTimeoutException, DataTruncation>[] transformerArray0 = (Transformer<SQLTimeoutException, DataTruncation>[]) Array.newInstance(Transformer.class, 6);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      transformerArray0[3] = transformerArray0[2];
      transformerArray0[5] = transformer0;
      ObjectArrayIterator<Transformer<SQLTimeoutException, DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<SQLTimeoutException, DataTruncation>>(transformerArray0);
      IteratorUtils.get((Iterator<Transformer<SQLTimeoutException, DataTruncation>>) objectArrayIterator0, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("P0#");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("List must not be null", "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", 7, sQLTimeoutException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "!PZo'", 7, sQLTimeoutException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) singletonIterator0, class0);
      OrderedMapIterator<SQLClientInfoException, Class<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 5, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "m4:9g({2p5", (-1808), sQLTimeoutException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>((String) null);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ConstantTransformer<SQLTransientConnectionException, ArrayList<InstanceofPredicate>> constantTransformer1 = new ConstantTransformer<SQLTransientConnectionException, ArrayList<InstanceofPredicate>>(arrayList0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) reverseListIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "fgNDO4.3}Wc", "", "");
      EmptyIterator.emptyIterator();
      ReverseListIterator<BatchUpdateException> reverseListIterator1 = new ReverseListIterator<BatchUpdateException>(stack0);
      OrderedMapIterator<Properties, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLRecoverableException>(orderedMapIterator0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) abstractOrderedMapIteratorDecorator0, 941L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Class<SQLWarning> class0 = SQLWarning.class;
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      String string0 = "org.apache.commons.collections4.functors.IfClosure";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.IfClosure", "org.apache.commons.collections4.functors.IfClosure", 10);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.size(objectArrayListIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<SQLNonTransientConnectionException, SQLTimeoutException> hashtable0 = new Hashtable<SQLNonTransientConnectionException, SQLTimeoutException>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.IfClosure", "org.apache.commons.collections4.functors.IfClosure", false);
      DefaultEquator<StringTokenizer> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<StringTokenizer> equalPredicate0 = new EqualPredicate<StringTokenizer>(stringTokenizer0, defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      OrderedMapIterator<BatchUpdateException, Class<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) iterator0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator1, 1);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator1, 1);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>();
      Transformer<SQLTimeoutException, DataTruncation> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTimeoutException, ? extends DataTruncation>) hashtable0);
      Transformer<SQLTimeoutException, DataTruncation> transformer1 = ExceptionTransformer.exceptionTransformer();
      Transformer<SQLTimeoutException, DataTruncation>[] transformerArray0 = (Transformer<SQLTimeoutException, DataTruncation>[]) Array.newInstance(Transformer.class, 6);
      transformerArray0[0] = transformer1;
      transformerArray0[1] = transformer1;
      transformerArray0[2] = transformer0;
      transformerArray0[3] = transformer1;
      transformerArray0[4] = transformer0;
      transformerArray0[5] = transformer1;
      ObjectArrayIterator<Transformer<SQLTimeoutException, DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<SQLTimeoutException, DataTruncation>>(transformerArray0);
      IteratorUtils.get((Iterator<Transformer<SQLTimeoutException, DataTruncation>>) objectArrayIterator0, 1);
      ArrayListIterator<String> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<String>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(vector0);
      reverseListIterator0.add(batchUpdateException0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Properties properties0 = new Properties();
      vector0.removeElement(properties0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      vector1.add((Object) resettableIterator0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      int[] intArray0 = new int[9];
      intArray0[0] = 2088;
      intArray0[1] = (-2572);
      intArray0[2] = 2088;
      intArray0[3] = 0;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      ArrayList<ArrayList<ArrayList<ArrayList>>> arrayList0 = new ArrayList<ArrayList<ArrayList<ArrayList>>>();
      Iterator<?> iterator1 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", 1);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(sQLTransientConnectionException0, comparator0);
      Vector<SQLClientInfoException>[] vectorArray0 = (Vector<SQLClientInfoException>[]) Array.newInstance(Vector.class, 1);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      vectorArray0[0] = (Vector<SQLClientInfoException>) stack0;
      ResettableListIterator<Vector<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLTransientConnectionException0, comparator1);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      Transformer<Object, String> transformer1 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<Vector<SQLClientInfoException>>) resettableListIterator0, (Transformer<? super Vector<SQLClientInfoException>, String>) transformer1);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OrderedMapIterator<SQLTransactionRollbackException, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, (-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      linkedList0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      ArrayList<ArrayList<ArrayList<ArrayList>>> arrayList0 = new ArrayList<ArrayList<ArrayList<ArrayList>>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.size((Iterator<?>) null);
      Hashtable<SQLNonTransientConnectionException, SQLTimeoutException> hashtable0 = new Hashtable<SQLNonTransientConnectionException, SQLTimeoutException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTimeoutException>(hashtable0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLTimeoutException>) entrySetMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLTimeoutException>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<Predicate<Object>>, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2807;
      longArray0[1] = (long) 2807;
      longArray0[2] = (long) 2807;
      longArray0[3] = (long) 2807;
      longArray0[4] = (long) 2807;
      longArray0[5] = (long) 2807;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("uym27wj{*2e;\"(?U+", "Node must not be null", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("nCq,Xysk?Fo?", "nCq,Xysk?Fo?", 2807, longArray0, sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "nCq,Xysk?Fo?", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("nCq,Xysk?Fo?", "nCq,Xysk?Fo?", 2807, sQLRecoverableException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
      
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException>(orderedMapIterator1);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      boolean boolean1 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<BatchUpdateException, Class<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 1);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      reverseListIterator0.add(batchUpdateException0);
      Comparator<SQLTransientConnectionException> comparator1 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toArray(iterator0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Predicate<SQLTransientConnectionException> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) zippingIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("(", "iterator", 1699, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, "(", 12);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("iterator", "", 12);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 2);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Predicate<SQLTransientConnectionException> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll(iteratorArray0[0], (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", 1);
      String string0 = "MapIterator must not be null";
      MockPrintStream mockPrintStream0 = new MockPrintStream("MapIterator must not be null");
      Locale locale0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "MapIterator must not be null";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 685, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.isEmpty(resettableListIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLDataException>) orderedMapIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      MapIterator<SQLNonTransientConnectionException, SQLTimeoutException> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) resettableIterator0);
      OrderedMapIterator<SQLTransactionRollbackException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) orderedMapIterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
      IteratorUtils.getIterator((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) listIterator0, (Iterator<?>) listIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, (-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableIterator0);
      OrderedMapIterator<SQLTransactionRollbackException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) orderedMapIterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "]");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientException0, (-2317));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "List must not be null");
      DefaultEquator.defaultEquator();
      DataTruncation dataTruncation0 = new DataTruncation(371, true, false, 2811, 371);
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 1);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Transformer<SQLException, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("List must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'List must not be null' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Properties properties0 = new Properties();
      vector0.removeElement(properties0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      vector1.add((Object) resettableIterator0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("You must invoke setComparator() to set a comparator first.", "You must invoke setComparator() to set a comparator first.");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      sQLTransientConnectionException0.addSuppressed(sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException0);
      DefaultEquator.defaultEquator();
      DataTruncation dataTruncation0 = new DataTruncation((-18), true, false, (-4546), (-1), sQLNonTransientConnectionException0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<DataTruncation> iterator1 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayListIterator(propertiesArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 1 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", 1);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(sQLTransientConnectionException0, comparator0);
      Vector<SQLClientInfoException>[] vectorArray0 = (Vector<SQLClientInfoException>[]) Array.newInstance(Vector.class, 1);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      vectorArray0[0] = (Vector<SQLClientInfoException>) stack0;
      IteratorUtils.arrayListIterator(vectorArray0);
      MapIterator<DataTruncation, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) mapIterator0, (Transformer<? super SQLWarning, ? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", (-2685));
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("InstantiateFactory: The constructor must exist and be public ", "");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException1);
      IteratorUtils.isEmpty(resettableIterator0);
      ForClosure<Integer> forClosure0 = new ForClosure<Integer>((-2685), (Closure<? super Integer>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Integer>) null, (Closure<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "EsDiN[qqRWH2.KA)I9 ", 0, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("List must not be null", "", 0, sQLTransientConnectionException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((int[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException((int[]) null);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("EsDiN[qqRWH2.KA)I9 ", "", (int[]) null, sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException((int[]) null, batchUpdateException4);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      int int0 = 1974;
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("{d+tLC7UL", "", 1974, longArray0, sQLTransientConnectionException0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<Predicate<Object>>, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("nCq,Xysk?Fo?", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Predicate<Object>>>) orderedMapIterator0, (Predicate<? super ArrayDeque<Predicate<Object>>>) predicate0);
      IteratorUtils.size(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedList<SQLTransientConnectionException>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer.invokerTransformer("Transformer must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      OrderedMapIterator<SQLWarning, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation>(orderedMapIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector1 = new Vector<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector2 = new Vector<SQLClientInfoException>();
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector3 = new Vector<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector4 = new Vector<SQLClientInfoException>();
      Stack<SQLClientInfoException> stack1 = new Stack<SQLClientInfoException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Vector<SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Closure collection must not be null", "", 9);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("QHD", "", (-184), sQLTransientConnectionException0);
      sQLTransientConnectionException1.addSuppressed(sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException1);
      DefaultEquator.defaultEquator();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-1515);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<StringTokenizer> closure1 = ForClosure.forClosure((-1515), (Closure<? super StringTokenizer>) closure0);
      IteratorUtils.apply((Iterator<StringTokenizer>) null, (Closure<? super StringTokenizer>) closure1);
      String string0 = "";
      int int1 = (-6858);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-6858));
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "Es\"KMY,g;()oo:", (-1515), sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        sQLTransientConnectionException1.initCause(sQLTransientConnectionException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransientConnectionException: 
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ConstantTransformer.constantTransformer(arrayList0);
      String string0 = "ZYCp:4jp.8";
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 7);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      classArray0[4] = class4;
      classArray0[5] = class4;
      Class<SQLNonTransientException> class5 = SQLNonTransientException.class;
      classArray0[6] = class5;
      InvokerTransformer.invokerTransformer("ZYCp:4jp.8", (Class<?>[]) classArray0, (Object[]) classArray0);
      OrderedMapIterator<BatchUpdateException, Class<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<SQLException, String> transformer0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, String>) null, "Z|,>Hn}Bb", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.iterators.EmptyOrderedMapIterator");
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Iy=uN^[vmN");
      IteratorUtils.zippingIterator((Iterator<? extends String>) iterator0, (Iterator<? extends String>) iteratorArray0[0], (Iterator<? extends String>) resettableIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, 132);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(vector0);
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("Array class must not be null");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ConstantTransformer.constantTransformer(arrayList0);
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      reverseListIterator0.previousIndex();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.isEmpty(reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<BatchUpdateException>[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(vector0);
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("Array class must not be null");
      OrderedMapIterator<BatchUpdateException, Class<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("ListIterator must not be null");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ConstantTransformer.constantTransformer(arrayList0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) reverseListIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "ListIterator must not be null", "ListIterator must not be null", "ListIterator must not be null");
      EmptyIterator.emptyIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ListIterator must not be null");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransactionRollbackException0);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = (-1603);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (-1603));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<StringTokenizer, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException>(mapIterator0);
      ListIteratorWrapper<StringTokenizer> listIteratorWrapper0 = new ListIteratorWrapper<StringTokenizer>(abstractMapIteratorDecorator0);
      IteratorUtils.size(listIteratorWrapper0);
      ConstantFactory.constantFactory("@^?qWD.q");
      Class<String> class0 = String.class;
      Class<Transformer<SQLTimeoutException, DataTruncation>>[] classArray0 = (Class<Transformer<SQLTimeoutException, DataTruncation>>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) instantiateFactory0);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<BatchUpdateException, Class<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 1);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      Comparator<SQLTransientConnectionException> comparator1 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLWarning sQLWarning0 = new SQLWarning("vSKTDW!Me;d9#s2");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 683);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "/ veXkuk2T}}", "", 1458);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("?yF", "", (String) null, 122);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("/ veXkuk2T}}", "?yF", "xav;q\"<cO5Q", 125);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("abMs2{&.?Ih6", "my5`", "", (-2068));
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      reverseListIterator0.add(batchUpdateException0);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      MapIterator<SQLNonTransientConnectionException, HashMap<ArrayList, SQLSyntaxErrorException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(factoryTransformer0);
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) transformerPredicate0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      String string0 = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator";
      int int0 = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", 0);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLTransientConnectionException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLTransientConnectionException0, comparator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<DataTruncation, Properties> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends Properties>) orderedMapIterator0);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "8";
      stringArray0[2] = "JoG";
      stringArray0[3] = "![nu1Ry}T";
      stringArray0[4] = "]";
      stringArray0[5] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 1, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) resettableListIterator0, (-2070L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Entry does not exist: ", "@>?)\"02vF 8n88");
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Properties> abstractOrderedMapIteratorDecorator1 = null;
      try {
        abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Properties>((OrderedMapIterator<SQLRecoverableException, Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Properties properties0 = new Properties();
      vector0.removeElement(properties0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[9];
      intArray0[0] = 2088;
      intArray0[1] = (-2572);
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[6] = 100;
      intArray0[7] = (-320);
      intArray0[8] = 10;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) zippingIterator0, (long) 0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      BatchUpdateException batchUpdateException0 = IteratorUtils.find((Iterator<BatchUpdateException>) skippingIterator0, (Predicate<? super BatchUpdateException>) predicate1);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack0);
      Factory<String> factory0 = ConstantFactory.constantFactory("2HmY)DB$q'd<ah'i+]C");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      String string0 = "org.apache.commons.collections4.iterators.EmptyOrderedIterator";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) loopingListIterator0, (Transformer<? super IIOMetadataNode, String>) factoryTransformer0, (String) null, "2HmY)DB$q'd<ah'i+]C", "org.apache.commons.collections4.iterators.EmptyOrderedIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 10;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[^OSA*");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[^OSA*", intArray0, sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      linkedList0.add((Properties) null);
      IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      EntrySetToMapIteratorAdapter<StringTokenizer, EnumSet<Locale.Category>> entrySetToMapIteratorAdapter0 = null;
      try {
        entrySetToMapIteratorAdapter0 = new EntrySetToMapIteratorAdapter<StringTokenizer, EnumSet<Locale.Category>>((Set<Map.Entry<StringTokenizer, EnumSet<Locale.Category>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<SQLTransactionRollbackException, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("eM|UCj;OB8^*?b]", "eM|UCj;OB8^*?b]", 3736);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("eM|UCj;OB8^*?b]", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 14);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", "", 0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", "eM|UCj;OB8^*?b]");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", "25\bP<;p", 0, sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.ComparatorPredicate", "XK/", 0, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", 1);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", 1);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "Node must not be null", sQLTransientConnectionException0);
      String string1 = "";
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "", intArray0, sQLDataException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[9];
      intArray0[1] = (-2572);
      intArray0[2] = 10;
      intArray0[4] = 0;
      intArray0[6] = 100;
      intArray0[7] = (-320);
      intArray0[8] = 10;
      SQLWarning sQLWarning0 = new SQLWarning("7kc39u x[-n=I_B'", "org.apache.commons.collections4.functor.EqualPredicate", 10);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functor.EqualPredicate", "org.apache.commons.collections4.functor.EqualPredicate", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functor.EqualPredicate", "org.apache.commons.collections4.functor.EqualPredicate", intArray0, sQLDataException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator1, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 10;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[^OSA*", "[^OSA*");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[^OSA*", intArray0, sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[^OSA*");
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLTransientConnectionException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLTransientConnectionException0, comparator0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      BoundedIterator<SQLTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (long) 10, 0L);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator1, (Iterator<? extends SQLTransientConnectionException>) boundedIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator1);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) arrayDeque0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[3] = class2;
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("Entry does not exist: ", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) iterator0, (Transformer<? super SQLWarning, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) iterator1, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 1470, (-715));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[9];
      intArray0[0] = 2088;
      intArray0[1] = (-2572);
      intArray0[2] = 10;
      intArray0[3] = 0;
      int int0 = 0;
      intArray0[4] = 0;
      intArray0[6] = 100;
      intArray0[7] = (-320);
      intArray0[8] = 10;
      String string0 = "7kc39u x[-n=I_B'";
      SQLWarning sQLWarning0 = new SQLWarning("7kc39u x[-n=I_B'", "org.apache.commons.collections4.functors.EqualPredicate", 10);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.EqualPredicate", "org.apache.commons.collections4.functors.EqualPredicate", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.EqualPredicate", "org.apache.commons.collections4.functors.EqualPredicate", intArray0, sQLDataException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) zippingIterator0, (long) 0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) skippingIterator0, (Predicate<? super BatchUpdateException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(vector0);
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("Array class must not be null");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ConstantTransformer.constantTransformer(arrayList0);
      SQLWarning sQLWarning0 = new SQLWarning("Array class must not be null", "InstantiateTransformer: Input object was not an instanceof Class, it was a null object", 10);
      SQLDataException sQLDataException0 = new SQLDataException("Array class must not be null", "7kc39u x[-n=I_B'", sQLWarning0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-2572);
      intArray0[2] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "7kc39u x[-n=I_B'", intArray0, sQLWarning0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException0;
      batchUpdateExceptionArray0[3] = batchUpdateException0;
      batchUpdateExceptionArray0[4] = batchUpdateException0;
      batchUpdateExceptionArray0[5] = batchUpdateException0;
      IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) singletonListIterator0, (Iterator<? extends BatchUpdateException>) singletonListIterator0, (Iterator<? extends BatchUpdateException>) singletonListIterator0);
      IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) reverseListIterator0, 551L);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) zippingIterator0, (Predicate<? super BatchUpdateException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      Class<StringTokenizer> class2 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((InstanceofPredicate[]) null, 2515);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 10;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[^OSA*", "[^OSA*");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[^OSA*", intArray0, sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(objectArrayListIterator0.hasNext());
      
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      assertFalse(resettableListIterator0.hasPrevious());
      
      ConstantTransformer<SQLNonTransientConnectionException, String> constantTransformer0 = new ConstantTransformer<SQLNonTransientConnectionException, String>("]<a|K|)EFKxVke1zY'");
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) constantTransformer0, "]<a|K|)EFKxVke1zY'", "4hOo#oDQ55mfV2", "Iterator must not be null");
      assertEquals("4hOo#oDQ55mfV2Iterator must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 1637;
      Integer integer0 = new Integer(1637);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      Transformer<Object, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) factoryTransformer0, (Transformer<? super Object, ? extends String>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) singletonListIterator0, (Transformer<? super Integer, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(vector0);
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("Array class must not be null");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ConstantTransformer.constantTransformer(arrayList0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) reverseListIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "Array class must not be null", "Array class must not be null", "Array class must not be null");
      Iterator<SQLNonTransientException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) iterator0);
      ArrayList<SQLInvalidAuthorizationSpecException>[] arrayListArray0 = (ArrayList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayList.class, 0);
      IteratorUtils.arrayIterator(arrayListArray0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      Properties properties0 = new Properties();
      Transformer<Properties, Properties> transformer0 = CloneTransformer.cloneTransformer();
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<SQLTransientConnectionException, String> transformer1 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[9];
      intArray0[0] = 2088;
      intArray0[1] = (-2572);
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1073741824;
      intArray0[6] = 100;
      intArray0[7] = (-320);
      intArray0[8] = 10;
      SQLWarning sQLWarning0 = new SQLWarning("7kc39u x[-n=I_B'", "org.apache.commons.collections4.functors.EqualPredicate", 10);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.EqualPredicate", "org.apache.commons.collections4.functors.EqualPredicate", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.EqualPredicate", "org.apache.commons.collections4.functors.EqualPredicate", intArray0, sQLDataException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) zippingIterator0, (long) 1073741824);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      IteratorUtils.find((Iterator<BatchUpdateException>) skippingIterator0, (Predicate<? super BatchUpdateException>) predicate1);
      Vector<SQLClientInfoException>[] vectorArray0 = (Vector<SQLClientInfoException>[]) Array.newInstance(Vector.class, 8);
      Vector<SQLClientInfoException> vector2 = new Vector<SQLClientInfoException>();
      vectorArray0[0] = vector2;
      Vector<SQLClientInfoException> vector3 = new Vector<SQLClientInfoException>();
      vectorArray0[1] = vector3;
      Vector<SQLClientInfoException> vector4 = new Vector<SQLClientInfoException>();
      vectorArray0[2] = vector4;
      Vector<SQLClientInfoException> vector5 = new Vector<SQLClientInfoException>();
      vectorArray0[3] = vector5;
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      vectorArray0[4] = (Vector<SQLClientInfoException>) stack0;
      Vector<SQLClientInfoException> vector6 = new Vector<SQLClientInfoException>();
      vectorArray0[5] = vector6;
      Vector<SQLClientInfoException> vector7 = new Vector<SQLClientInfoException>();
      vectorArray0[6] = vector7;
      Stack<SQLClientInfoException> stack1 = new Stack<SQLClientInfoException>();
      vectorArray0[7] = (Vector<SQLClientInfoException>) stack1;
      ResettableListIterator<Vector<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<SQLClientInfoException>>) resettableListIterator0, (Transformer<? super Vector<SQLClientInfoException>, String>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("S2AgIUdV7BOv");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = 114;
      intArray0[2] = 2555;
      intArray0[3] = (-561);
      intArray0[4] = 104;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "~", "~", "i]\"Ro=ah|0B.KuW*");
      EmptyIterator.emptyIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      assertFalse(reverseListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(vector0);
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("Array class must not be null");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      UnaryOperator<InstanceofPredicate> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      ConstantTransformer.constantTransformer(arrayList0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) reverseListIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "Array class must not be null", "Array class must not be null", "Array class must not be null");
      Iterator<SQLNonTransientException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) iterator1);
      ArrayList<SQLInvalidAuthorizationSpecException>[] arrayListArray0 = (ArrayList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayList.class, 0);
      IteratorUtils.arrayIterator(arrayListArray0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      Properties properties0 = new Properties();
      Transformer<Properties, Properties> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<Properties> iterator2 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends String>) listIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("LV\"^AcGN@");
      sQLDataExceptionArray0[0] = sQLDataException0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 3366);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> hashMap0 = new HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>();
      EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>(hashMap0);
      entrySetMapIterator0.reset();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(allPredicate0);
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashMap0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, constantTransformer0);
      switchTransformer0.getTransformers();
      switchTransformer0.getPredicates();
      String string0 = IteratorUtils.toString((Iterator<Transformer<SQLTimeoutException, DataTruncation>>) entrySetMapIterator0, (Transformer<? super Transformer<SQLTimeoutException, DataTruncation>, String>) switchTransformer0, "", "D%y", "");
      assertEquals("D%y", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackException1.addSuppressed(sQLTransactionRollbackException0);
      stack0.add((SQLTransientException) sQLTransactionRollbackException1);
      ResettableIterator<Stack<SQLTransientException>> resettableIterator0 = IteratorUtils.singletonIterator(stack0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 0;
      intArray0[2] = (-2277);
      intArray0[3] = (-1192);
      intArray0[4] = 10;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("G2%U*o", intArray0, sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransactionRollbackException1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) batchUpdateException0, (Equator<Object>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedMapIterator0);
      int int0 = 176;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("[]", "[]", 176, sQLTransactionRollbackException0);
      sQLTransactionRollbackException1.addSuppressed(sQLTransactionRollbackException0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      stack0.add((SQLTransientException) sQLTransactionRollbackException1);
      IteratorUtils.singletonIterator(stack0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      linkedList0.iterator();
      // Undeclared exception!
      try { 
        UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 10;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[^OSA*", "[^OSA*");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[^OSA*", intArray0, sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> hashMap0 = new HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>();
      EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(allPredicate0);
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashMap0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Transformer<SQLTimeoutException, DataTruncation>>) entrySetMapIterator0, (Transformer<? super Transformer<SQLTimeoutException, DataTruncation>, String>) switchTransformer0, "D%y", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator1);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) arrayDeque0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      classArray0[1] = classArray0[0];
      Class<Object> class0 = Object.class;
      classArray0[2] = class0;
      Class<Object> class1 = Object.class;
      classArray0[3] = class1;
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("Entry does not exist: ", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) iterator0, (Transformer<? super SQLWarning, ? extends BatchUpdateException>) transformer0);
      IteratorUtils.isEmpty(iterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Entry does not exist: ", "LESS", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("Entry does not exist: ", "EEE uVy~c#p@GD}Nm8");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("EEE uVy~c#p@GD}Nm8", "LESS", (-824), (int[]) null);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("Entry does not exist: ", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("", (Throwable) null);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("Entry does not exist: ");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException5;
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException2;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("EEE uVy~c#p@GD}Nm8", "EEE uVy~c#p@GD}Nm8", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator1);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) arrayDeque0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      IteratorUtils.isEmpty(iterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Entry does not exist: ", "LESS", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("Entry does not exist: ", "EEE uVy~c#p@GD}Nm8");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      DefaultEquator.defaultEquator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) class2, (Equator<Object>) defaultEquator0);
      Transformer<SQLTimeoutException, DataTruncation>[] transformerArray0 = (Transformer<SQLTimeoutException, DataTruncation>[]) Array.newInstance(Transformer.class, 4);
      Transformer<SQLTimeoutException, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[0] = transformer0;
      Transformer<SQLTimeoutException, DataTruncation> transformer1 = InvokerTransformer.invokerTransformer("EEE uVy~c#p@GD}Nm8", (Class<?>[]) classArray0, (Object[]) transformerArray0);
      transformerArray0[1] = transformer1;
      Hashtable<SQLException, DataTruncation> hashtable0 = new Hashtable<SQLException, DataTruncation>();
      Transformer<SQLTimeoutException, DataTruncation> transformer2 = MapTransformer.mapTransformer((Map<? super SQLTimeoutException, ? extends DataTruncation>) hashtable0);
      transformerArray0[2] = transformer2;
      Transformer<SQLTimeoutException, DataTruncation> transformer3 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[3] = transformer3;
      ObjectArrayIterator<Transformer<SQLTimeoutException, DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<SQLTimeoutException, DataTruncation>>(transformerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Transformer<SQLTimeoutException, DataTruncation>>) objectArrayIterator0, 123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 119
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.boundedIterator((Iterator<? extends Predicate<Object>>) singletonIterator0, 460L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("u", "");
      linkedList0.add((Object) sQLIntegrityConstraintViolationException0);
      IteratorUtils.loopingIterator((Collection<?>) linkedList0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("x~OI@x(CE");
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>((Predicate<? super Object>[]) null, (Transformer<? super Object, ? extends String>[]) null, constantTransformer0);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = (-258);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableListIterator0, (-258));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -258
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> hashMap0 = new HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(allPredicate0);
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      MapIterator<InstanceofPredicate, ArrayList<Iterator<SQLNonTransientException>>> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) mapIterator1);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 10;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[^OSA*", "[^OSA*");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      enumSet0.contains("[^OSA*");
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSet0.addAll(enumSet1);
      enumSet1.add(locale_Category1);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet1);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(vector0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, 392L);
      IteratorUtils.skippingIterator((Iterator<EnumSet<Locale.Category>>) resettableIterator0, 762L);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<EnumSet<Locale.Category>>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashtable0);
      Predicate<SQLClientInfoException> predicate0 = IdentityPredicate.identityPredicate(sQLClientInfoException0);
      PredicateTransformer<SQLClientInfoException> predicateTransformer0 = new PredicateTransformer<SQLClientInfoException>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLClientInfoException0);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) boolean0, (Equator<Object>) defaultEquator0);
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<Integer>) orderedIterator0, (Object) nodeList0);
      String string0 = "";
      String string1 = "Index ";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Index ", 10);
      String string2 = "org.apache.commons.collections4.iterators.LazyIteratorChain";
      String string3 = "Estimated size must be greater than 0";
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) zippingIterator0, class0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      int[] intArray0 = new int[9];
      intArray0[0] = 2088;
      intArray0[1] = (-2572);
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1073741824;
      intArray0[6] = 100;
      intArray0[7] = 0;
      intArray0[8] = 10;
      SQLWarning sQLWarning0 = new SQLWarning("7kc39u x[-n=I_B'", "org.apache.commons.collections4.functors.EqualPredicate", 10);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.EqualPredicate", "org.apache.commons.collections4.functors.EqualPredicate", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.EqualPredicate", "org.apache.commons.collections4.functors.EqualPredicate", intArray0, sQLDataException0);
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>();
      HashMap<SQLWarning, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLWarning, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLWarning, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLWarning, SQLNonTransientConnectionException>(hashMap0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLWarning>) entrySetMapIterator0, (Object) sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator");
      StackTraceElement stackTraceElement0 = new StackTraceElement("The collection must not be null", "The collection must not be null", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", 1);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      enumSet0.contains(stackTraceElement0);
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSet1.addAll(enumSet0);
      enumSet0.add(locale_Category0);
      IteratorUtils.singletonIterator(enumSet0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (-1221L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null, true);
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, (-750));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      Class<Properties> class2 = Properties.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate((Class<?>) null);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate5;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedMapIterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<DataTruncation, String> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, String>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<DataTruncation>) abstractOrderedMapIteratorDecorator0;
      SQLWarning sQLWarning0 = new SQLWarning("reh8Z[Ya'2%G", "[]", 100);
      int[] intArray0 = new int[7];
      intArray0[0] = 10;
      intArray0[1] = (-320);
      intArray0[2] = (-320);
      intArray0[3] = 1073741824;
      intArray0[4] = (-320);
      intArray0[5] = 100;
      intArray0[6] = 100;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyIterator();
      HashMap<Locale.Category, SQLNonTransientConnectionException> hashMap0 = new HashMap<Locale.Category, SQLNonTransientConnectionException>();
      EntrySetMapIterator<Locale.Category, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<Locale.Category, SQLNonTransientConnectionException>(hashMap0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Locale.Category>) entrySetMapIterator0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) iterator0);
      Iterator<Locale.Category> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 10;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[^OSA*", "[^OSA*");
      sQLFeatureNotSupportedException0.fillInStackTrace();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[^OSA*", intArray0, sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iterator0, (Equator<Object>) defaultEquator0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      ResettableIterator<BatchUpdateException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator1);
      IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) resettableIterator1, 0L);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate1);
      BatchUpdateException batchUpdateException2 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator1, (Predicate<? super BatchUpdateException>) predicate0);
      assertNull(batchUpdateException2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) zippingIterator0, class0);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration0 = (Enumeration<PriorityQueue<IIOMetadataNode>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration0, (Collection<? super PriorityQueue<IIOMetadataNode>>) vector1);
      Enumeration<PriorityQueue<IIOMetadataNode>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends PriorityQueue<IIOMetadataNode>>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends PriorityQueue<IIOMetadataNode>>) enumeration1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[9];
      intArray0[0] = 2088;
      intArray0[1] = (-2572);
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1073741824;
      intArray0[6] = 100;
      intArray0[7] = (-320);
      intArray0[8] = 10;
      SQLWarning sQLWarning0 = new SQLWarning("7kc39u x[-n=I_B'", "org.apache.commons.collections4.functors.EqualPredicate", 10);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.EqualPredicate", "org.apache.commons.collections4.functors.EqualPredicate", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.EqualPredicate", "org.apache.commons.collections4.functors.EqualPredicate", intArray0, sQLDataException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      ZippingIterator<BatchUpdateException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator1, (Iterator<? extends BatchUpdateException>) resettableIterator1, (Iterator<? extends BatchUpdateException>) resettableIterator1);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) zippingIterator1, (long) 1073741824);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) skippingIterator0, (Predicate<? super BatchUpdateException>) predicate1);
      assertNull(batchUpdateException1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) listIterator0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> hashMap0 = new HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>();
      EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      int int0 = (-750);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException0);
      batchUpdateException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-750), (-750));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "EsDiN[qqRWH2.KA)I9 ", 0, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("List must not be null", "", 0, sQLTransientConnectionException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> hashMap0 = new HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>();
      EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("OYG^f%q@Dml88", (String) null, sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      int int0 = (-324);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 2606, (-324));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Iterable<SQLTransientConnectionException> iterable0 = new PriorityQueue<SQLTransientConnectionException>();
      IteratorUtils.isEmpty((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackException1.addSuppressed(sQLTransactionRollbackException0);
      stack0.add((SQLTransientException) sQLTransactionRollbackException1);
      ResettableIterator<Stack<SQLTransientException>> resettableIterator0 = IteratorUtils.singletonIterator(stack0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = linkedList0.iterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      int int0 = 0;
      int int1 = 4319;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("~y: ,QfIFi-", "~y: ,QfIFi-", (-1056), (Throwable) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("~y: ,QfIFi-", defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
      // Undeclared exception!
      try { 
        properties0.put(sQLRecoverableException0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      Transformer<SQLException, SQLNonTransientException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLNonTransientException>) hashMap0);
      IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLSyntaxErrorException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<LinkedHashSet>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 6);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class5;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 726);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Lzr!D");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      iteratorArray0[1] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<BatchUpdateException, Class<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 1);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) list0, (-1), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(vector0);
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("Array class must not be null");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ConstantTransformer.constantTransformer(arrayList0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) reverseListIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "Array class must not be null", "Array class must not be null", "Array class must not be null");
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) reverseListIterator0, 936);
      ReverseListIterator<BatchUpdateException> reverseListIterator1 = new ReverseListIterator<BatchUpdateException>(vector0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator1);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator1);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) arrayDeque0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("Entry does not exist: ", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) iterator0, (Transformer<? super SQLWarning, ? extends BatchUpdateException>) transformer0);
      IteratorUtils.isEmpty(iterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Entry does not exist: ", "LESS", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("Entry does not exist: ", "EEE uVy~c#p@GD}Nm8");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("EEE uVy~c#p@GD}Nm8", "LESS", (-824), (int[]) null);
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("Entry does not exist: ", "Entry does not exist: ", batchUpdateException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("Entry does not exist: ", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("", (Throwable) null);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("Entry does not exist: ");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("V<c8");
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLDataException>(orderedMapIterator0);
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.NOPTransformer");
      IteratorUtils.singletonListIterator(sQLDataException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "OYG^f%q@Dml88", sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      int int0 = 9;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 9, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Iterator<SQLNonTransientException>[] iteratorArray0 = (Iterator<SQLNonTransientException>[]) Array.newInstance(Iterator.class, 9);
      Hashtable<SQLNonTransientException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLNonTransientException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLNonTransientException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientException, SQLTransactionRollbackException>(hashtable0);
      iteratorArray0[0] = (Iterator<SQLNonTransientException>) entrySetMapIterator0;
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      String string0 = null;
      int int0 = 150;
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>((Object) null, 150);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<StringTokenizer, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException>(mapIterator0);
      ListIteratorWrapper<StringTokenizer> listIteratorWrapper0 = new ListIteratorWrapper<StringTokenizer>(abstractMapIteratorDecorator0);
      IteratorUtils.size(listIteratorWrapper0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<SQLNonTransientConnectionException, SQLTimeoutException> hashtable0 = new Hashtable<SQLNonTransientConnectionException, SQLTimeoutException>();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Iterator<? extends SQLTransientConnectionException>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) zippingIterator0, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.boundedIterator((Iterator<? extends Predicate<Object>>) singletonIterator0, 460L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("u", "");
      linkedList0.add((Object) sQLIntegrityConstraintViolationException0);
      IteratorUtils.loopingIterator((Collection<?>) linkedList0);
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) mapIterator1, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResettableIterator<PriorityQueue<SQLTimeoutException>> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<Integer, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLFeatureNotSupportedException>(orderedMapIterator0);
      OrderedMapIterator<Integer, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      Factory<SQLFeatureNotSupportedException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLFeatureNotSupportedException>) factory0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(resettableIterator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.load(class0);
      IdentityPredicate.identityPredicate(serviceLoader0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, identityPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) orderedMapIterator1, (Predicate<? super Integer>) transformedPredicate0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", 1);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", 1);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLTransientConnectionException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLTransientConnectionException0, comparator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) null, (Transformer<? super Locale.Category, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 4159, 14);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 4159, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "EsDiN[qqRWH2.KA)I9 ", 0, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("List must not be null", "", 0, sQLTransientConnectionException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) singletonIterator0, class0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 14;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, 14);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 14, sQLNonTransientConnectionException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      sQLNonTransientConnectionException0.setNextException(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.singletonIterator((SQLException) sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 14, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.singletonIterator((LinkedList<IIOMetadataNode>) null);
      // Undeclared exception!
      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 0, (-749));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> hashMap0 = new HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>();
      EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(allPredicate0);
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashMap0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Transformer<SQLTimeoutException, DataTruncation>>) entrySetMapIterator0, (Transformer<? super Transformer<SQLTimeoutException, DataTruncation>, String>) switchTransformer0, "D%y", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("5Okp", "esIkJ(<2+qc' *");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("m$M,e$?Uvm", "#NH_>aMI", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("m$M,e$?Uvm", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("#NH_>aMI");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("&!'", "9?=p");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("5Okp", "b2dZis", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException("`oqekY2>&>C($vDC/_", "!>j0AAD.u");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException8;
      SQLRecoverableException sQLRecoverableException9 = new SQLRecoverableException("esIkJ(<2+qc' *");
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException9;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 416, 104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 10;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[^OSA*", "[^OSA*");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[^OSA*", intArray0, sQLFeatureNotSupportedException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) batchUpdateException0, (Equator<Object>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> hashMap0 = new HashMap<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>();
      EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<Transformer<SQLTimeoutException, DataTruncation>, SQLTransactionRollbackException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(allPredicate0);
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashMap0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, constantTransformer0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super PriorityQueue<IIOMetadataNode>>>) vector0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) allPredicate0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("jvR", "hF^fsZ", (-1209));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-1209));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-2073));
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("rQvPw]6", "rQvPw]6", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "\") in this Map", 0);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException1;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientExceptionArray0[2] = sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException((String) null);
      sQLTransientExceptionArray0[3] = sQLTransientException1;
      SQLTransientException sQLTransientException2 = new SQLTransientException((String) null);
      sQLTransientExceptionArray0[4] = sQLTransientException2;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", (String) null, (-464), sQLTransientException2);
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "");
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransactionRollbackException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, (-2656));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Q fM~UKH~!B'#uf/", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Q fM~UKH~!B'#uf/", "Q fM~UKH~!B'#uf/", sQLWarning0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Q fM~UKH~!B'#uf/", "3h6rq*~0", 1552);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException(sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("Collection must not be null", sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("Kv`{8)0HDXF ?", sQLTransientConnectionException5);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("*s4Q^", "", (-1), sQLTransientConnectionException5);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException(sQLWarning0);
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      int[] intArray0 = new int[2];
      intArray0[0] = 482;
      intArray0[1] = 482;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("|", "", 482, intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", 482, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 482);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<SQLTransientException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedMapIterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<DataTruncation, String> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, String>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<DataTruncation>) abstractOrderedMapIteratorDecorator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends DataTruncation>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      long long0 = 0L;
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<DataTruncation>) orderedMapIterator1, 0L);
      iteratorArray0[2] = (Iterator<DataTruncation>) skippingIterator0;
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[3] = (Iterator<DataTruncation>) listIterator0;
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      int int0 = 0;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 0, (-2661));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 2817;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) null, 2817);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }
}
