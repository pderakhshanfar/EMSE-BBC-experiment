/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:02:44 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedMapIterator<Locale.Category, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) orderedMapIterator0, (Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedMapIterator<Locale.Category, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Iterator<Object> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>) resettableIterator0, iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) objectArrayListIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0, (Iterator<? extends SQLRecoverableException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) linkedList0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MapIterator<Properties, LinkedHashSet<Stack>> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) mapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransientConnectionException0);
      SkippingIterator<SQLException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLException>) singletonIterator0, 1346L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Hashtable<StringTokenizer, Properties> hashtable0 = new Hashtable<StringTokenizer, Properties>();
      EntrySetMapIterator<StringTokenizer, Properties> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, Properties>(hashtable0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException("fromIndex = ", "fromIndex = ");
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTransientException sQLTransientException1 = IteratorUtils.find((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) uniquePredicate0);
      assertNotNull(sQLTransientException1);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[7];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Properties>) objectArrayIterator0, (Object) propertiesArray0[3]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      MapIterator<SQLSyntaxErrorException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) mapIterator0;
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) mapIterator0;
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(loopingIterator0);
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) listIteratorWrapper0;
      iteratorArray0[4] = (Iterator<SQLSyntaxErrorException>) listIteratorWrapper0;
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) zippingIterator0, 0L);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayDeque<SQLTimeoutException>[] arrayDequeArray0 = (ArrayDeque<SQLTimeoutException>[]) Array.newInstance(ArrayDeque.class, 5);
      ResettableListIterator<ArrayDeque<SQLTimeoutException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.Category>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Predicate<Predicate<Object>>, SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Iterator<SQLClientInfoException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("vls'(gZ/)S");
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>((String) null, classArray0, classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends String>) listIterator0, (Transformer<? super String, ? extends DataTruncation>) invokerTransformer0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("Oi3KQ\"q[");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super DataTruncation, String>) transformer0, "Collection must not be null", "Oi3KQ\"q[", "Collection must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableListIterator0, (Iterator<? extends SQLTransientException>) resettableListIterator0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("dJ:ZT=3M<4D%");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) zippingIterator0, (Transformer<? super SQLTransientException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'dJ:ZT=3M<4D%' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("Iterator must not be null");
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>((String) null, classArray0, classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends String>) listIterator0, (Transformer<? super String, ? extends DataTruncation>) invokerTransformer0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[1];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      Predicate<SQLTransientException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) stack0);
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("must call next() or previous() before a call to set()", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", intArray0, (Throwable) null);
      stack0.add(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<BatchUpdateException>) resettableListIterator0, (Object) resettableListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 0, 1417);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, (-3230));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2436, (-868));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer(4616);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 4616);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Iterator<SQLClientInfoException>[]) null, 0, 669);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 0, (-536));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 1430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 68, 2018);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("M");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<ServiceLoader<Stack>>) null, (Transformer<? super ServiceLoader<Stack>, String>) transformer0, "D^-Q", "]40=y7", "]40=y7");
      assertEquals("]40=y7]40=y7", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.Hpache.commons.collecions4.functors.TruePredicate");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any(javax.imageio.metadata.IIOMetadataNode.class) , any(javax.imageio.metadata.IIOMetadataNode.class));
      ComparatorPredicate<IIOMetadataNode> comparatorPredicate0 = new ComparatorPredicate<IIOMetadataNode>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) comparatorPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<IIOMetadataNode> comparatorPredicate0 = new ComparatorPredicate<IIOMetadataNode>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) comparatorPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException(".s.NUaSZi3Ylf", ".s.NUaSZi3Ylf");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLDataException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0, 324);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, 564);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) null, 2976);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator((String) null);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>("843[[q_rJ5@", classArray0, classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends String>) listIterator0, (Transformer<? super String, ? extends DataTruncation>) invokerTransformer0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("Collection must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) zippingIterator0, (Transformer<? super DataTruncation, String>) transformer0, "843[[q_rJ5@", ">M", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null, false);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MapIterator<DataTruncation, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLWarning> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) mapIterator0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Closure must not be null");
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.get((Iterator<SQLNonTransientException>) resettableListIterator0, 308);
      assertEquals("java.sql.SQLDataException: Closure must not be null", sQLNonTransientException0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) objectArrayIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 8
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7i/\"&'`24/");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) singletonIterator0;
      boolean boolean0 = IteratorUtils.isEmpty(iteratorArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[17];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) uniquePredicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.Hpache.commons.collecions4.functors.TruePredicate");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(javax.imageio.metadata.IIOMetadataNode.class) , any(javax.imageio.metadata.IIOMetadataNode.class));
      ComparatorPredicate<IIOMetadataNode> comparatorPredicate0 = new ComparatorPredicate<IIOMetadataNode>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) comparatorPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<Vector<SQLDataException>>) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) reverseListIterator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[11];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Object object0 = IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) andPredicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) zippingIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector0);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.apply((Iterator<SQLException>) resettableIterator0, (Closure<? super SQLException>) closure0);
      assertFalse(vector0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector0);
      IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) closure0);
      assertFalse(vector0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator((SQLClientInfoException) null);
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0);
      LoopingListIterator<SQLException> loopingListIterator0 = new LoopingListIterator<SQLException>(list0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<SQLException>) loopingListIterator0, (Closure<? super SQLException>) closure0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("*5z7c-QrX?", "*5z7c-QrX?");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("fromIndex = ", "fromIndex = ");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLWarning sQLWarning0 = new SQLWarning(mockThrowable0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      Class<SQLWarning> class0 = SQLWarning.class;
      SQLWarning[] sQLWarningArray0 = IteratorUtils.toArray((Iterator<? extends SQLWarning>) singletonIterator0, class0);
      assertEquals(1, sQLWarningArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      SQLWarning[] sQLWarningArray0 = IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableListIterator0, class0);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>("suffix may not be null", (Class<?>[]) null, sQLWarningArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("suffix may not be null", (Class<?>[]) null, (Object[]) null);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends String>) iterator0, (Transformer<? super String, ? extends DataTruncation>) invokerTransformer0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator1, (Iterator<? extends DataTruncation>) iterator1, (Iterator<? extends DataTruncation>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) zippingIterator0, (Transformer<? super DataTruncation, String>) transformer0, "", "5[faWK_l/]H?~JWB.", "Collection must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'suffix may not be null' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.Category>) treeSet0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) resettableIterator0, (Iterator<? extends Locale.Category>) resettableIterator0);
      Iterable<Locale.Category> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) zippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) iterator0, 4909L, 4909L);
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) boundedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hashtable<SQLTimeoutException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLTimeoutException, SQLInvalidAuthorizationSpecException>();
      Enumeration<SQLTimeoutException> enumeration0 = hashtable0.keys();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) hashSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null, (Collection<? super SQLTransientException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer must not be null.");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.Category>>) null, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLTransientException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) nullIsTruePredicate0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, ArrayDeque<TreeSet>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) mapIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Predicate<? super SQLTransactionRollbackException>) nullIsTruePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) singletonListIterator0, (Transformer<? super String, ? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>("[]{W8ehLyh2H", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) null, (Transformer<? super String, ? extends DataTruncation>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (-536L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, (-1), (-1));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) singletonIterator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayList0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, 1416);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) resettableIterator0, (Closure<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<Locale.Category, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Locale.Category, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, SQLTransactionRollbackException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayDeque<SQLTransientException> arrayDeque0 = new ArrayDeque<SQLTransientException>();
      ResettableIterator<ArrayDeque<SQLTransientException>> resettableIterator0 = IteratorUtils.singletonIterator(arrayDeque0);
      Iterator<ArrayDeque<SQLTransientException>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<ArrayDeque<SQLTransientException>>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 40, 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 101, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<LinkedHashSet>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0, (long) (-898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedHashSet<EnumSet<Locale.Category>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.Category>>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[17];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[4];
      MockThrowable mockThrowable0 = new MockThrowable("g4AP");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (String) null, (-1), batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, (-384));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Closure must not be null");
      DataTruncation dataTruncation0 = new DataTruncation(2081, true, true, 15, 29, sQLDataException0);
      Transformer<SQLException, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Closure must not be null", "Closure must not be null", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1813);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<ArrayList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
