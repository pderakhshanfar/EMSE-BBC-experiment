/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 12:14:40 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) loopingListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      String[] stringArray0 = IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, 288L, 1321L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MapIterator<IIOMetadataNode, Stack<Boolean>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Stack<Locale.Category>[] stackArray0 = (Stack<Locale.Category>[]) Array.newInstance(Stack.class, 2);
      ResettableListIterator<Stack<Locale.Category>> resettableListIterator0 = IteratorUtils.arrayListIterator(stackArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("M&\u00079q}O2 ", (Class<?>[]) null, (Object[]) null);
      SQLWarning sQLWarning0 = new SQLWarning("7Z5qR_L!kpF`X", "~Cz~k'm`>v[}M)G");
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonListIterator0, (Transformer<? super Object, String>) invokerTransformer0, "JC!", "JC!", "~Cz~k'm`>v[}M)G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'M&\u00079q}O2 ' on 'class java.sql.SQLWarning' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      arrayDeque0.add(sQLTransactionRollbackException0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<DataTruncation>) objectArrayIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 1, (-3404));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-3345), (-3345));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 4249);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, (-85), (-85));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, (-1), 1401);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Stack<SQLDataException>[]) null, 650);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(820);
      integerArray0[1] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (int) integerArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 100, (-1218));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2332));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(listIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "", "|(z\"JzG]fQ}:xO", "{iGX-{$");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      List<EnumSet<Locale.Category>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, 1624);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (long) 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", (Class<?>[]) null, sQLClientInfoExceptionArray0);
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(sQLClientInfoExceptionArray0, 0, 0);
      SkippingIterator<Object> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Object>) objectArrayIterator0, (long) 0);
      String string0 = IteratorUtils.toString((Iterator<Object>) skippingIterator0, (Transformer<? super Object, String>) invokerTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 0, sQLClientInfoException0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLTimeoutException0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("#6eAz5T|ku!8b#D", "#6eAz5T|ku!8b#D");
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLTransientException0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "#6eAz5T|ku!8b#D", (String) null, "Y4~3+F-Ws0&`P?EW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) treeSet0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) zippingIterator0, (Transformer<? super SQLTransientException, String>) transformer0, (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Stack<SQLDataException>[] stackArray0 = (Stack<SQLDataException>[]) Array.newInstance(Stack.class, 1);
      ResettableIterator<Stack<SQLDataException>> resettableIterator0 = IteratorUtils.arrayIterator(stackArray0, 0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) null, "7Z5qR_L!kpF`X", "[[]]", "[[]]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      Integer integer1 = IteratorUtils.get((Iterator<Integer>) listIterator0, 0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(13);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) listIterator0, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 12
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      arrayDeque0.add(sQLTransactionRollbackException0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (Throwable) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(notPredicate0, notPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) andPredicate0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<SQLNonTransientConnectionException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLFeatureNotSupportedException>(hashtable0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(notPredicate0, predicate0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Predicate<? super SQLClientInfoException>) andPredicate0);
      assertFalse(objectArrayListIterator0.hasNext());
      
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayListIterator0, 5);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[5] = instanceofPredicateArray0[0];
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ArrayList<Integer>>) null, (Predicate<? super ArrayList<Integer>>) instanceofPredicateArray0[5]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("InvokerTransformer: The method '", "", false);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      StringTokenizer stringTokenizer1 = IteratorUtils.find(iterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertEquals(1, stringTokenizer1.countTokens());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      TransformedPredicate<StringTokenizer> transformedPredicate0 = new TransformedPredicate<StringTokenizer>((Transformer<? super StringTokenizer, ? extends StringTokenizer>) null, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super StringTokenizer>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IIOMetadataNode iIOMetadataNode0 = IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      assertNull(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<SQLWarning> listIteratorWrapper0 = new ListIteratorWrapper<SQLWarning>(orderedIterator0);
      SQLWarning sQLWarning0 = IteratorUtils.find((Iterator<SQLWarning>) listIteratorWrapper0, (Predicate<? super SQLWarning>) uniquePredicate0);
      assertNull(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) treeSet0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Closure<? super SQLClientInfoException>) closure0);
      assertEquals(2, objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MapIterator<InstanceofPredicate, PriorityQueue<ComparatorPredicate.Criterion>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<InstanceofPredicate>) mapIterator0, (Closure<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLSyntaxErrorException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "Z3crZ]g(0HNljlE_{5?");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("B/=,D@B~V+vMsW!G", "B/=,D@B~V+vMsW!G", 10);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLRecoverableException0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) resettableListIterator0, (-334));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<String> class0 = String.class;
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("suffix may not be null");
      String[] stringArray0 = IteratorUtils.toArray((Iterator<? extends String>) singletonListIterator0, class0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterable<SQLException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) zippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (int[]) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null, (Collection<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLException sQLException0 = new SQLException("/0$Om'!L2", "/0$Om'!L2", (-3816));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@RCOVyT2*\"\"wyJ&R", sQLException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) singletonListIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("?V]E<S/,}'*UHKox*O", "", (int[]) null);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) null);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) list0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      boolean boolean0 = IteratorUtils.isEmpty(nodeListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) objectArrayListIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, transformerPredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(transformedPredicate0, transformerPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ListIterator must not be null");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) andPredicate0);
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<SQLClientInfoException> allPredicate0 = new AllPredicate<SQLClientInfoException>(predicateArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, (Predicate<? super SQLClientInfoException>) allPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLException sQLException0 = new SQLException("q)-X:", ",f:24f`H]RtN+", 1904);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",f:24f`H]RtN+", sQLException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Transformer<SQLFeatureNotSupportedException, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ConstantTransformer<Object, SQLClientInfoException> constantTransformer0 = new ConstantTransformer<Object, SQLClientInfoException>(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLClientInfoException>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLException sQLException0 = new SQLException("Collection must not be null", "Collection must not be null", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Collection must not be null", sQLException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<BatchUpdateException, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLNonTransientException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) abstractMapIteratorDecorator0, (Iterator<? extends BatchUpdateException>) abstractMapIteratorDecorator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("[[]]");
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("gZY+:/*{B/t?Ar'%");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, DataTruncation>(orderedMapIterator0);
      MapIterator<SQLRecoverableException, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, DataTruncation>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<Predicate<Object>, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Predicate<Object>>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 2303, (-6842));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<SQLDataException>[] stackArray0 = (Stack<SQLDataException>[]) Array.newInstance(Stack.class, 1);
      ResettableIterator<Stack<SQLDataException>> resettableIterator0 = IteratorUtils.arrayIterator(stackArray0, 0);
      String string0 = IteratorUtils.toString((Iterator<Stack<SQLDataException>>) resettableIterator0);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0, 0, 0);
      ZippingIterator<Predicate<Object>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) resettableIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) objectArrayIterator0, (-40L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "suffix may not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1498), 3577);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientException[]) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("7%Q&7YA/", "7%Q&7YA/");
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MapIterator<Locale.Category, ArrayDeque<SQLNonTransientConnectionException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stack0, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      ListIterator<Properties> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertTrue(listIterator1.hasNext());
  }
}
