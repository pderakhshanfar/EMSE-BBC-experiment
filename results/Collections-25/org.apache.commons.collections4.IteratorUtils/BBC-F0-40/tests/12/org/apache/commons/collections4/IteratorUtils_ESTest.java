/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:06:26 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.size(orderedMapIterator0);
      Properties properties0 = new Properties();
      iIOMetadataNode0.getPreviousSibling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends IIOMetadataNode>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator2);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(abstractOrderedMapIteratorDecorator0);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator2 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(abstractOrderedMapIteratorDecorator0);
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(mapIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("y?^}DA ,X4&2B*4N", "b", 0, hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "b", map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("b", map0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("f4@Q0)wt6h`rZv", hashtable0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("org.apache.commons.collections4.functors.PredicateTransformer", "", 0, hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedMapIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("H", "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransactionRollbackException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<LinkedList<LinkedHashSet>>) orderedMapIterator0, (Predicate<? super LinkedList<LinkedHashSet>>) comparatorPredicate0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Comparator<Class<SQLRecoverableException>> comparator1 = (Comparator<Class<SQLRecoverableException>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(class0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) comparatorPredicate0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) listIteratorWrapper0, (-91));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      StringTokenizer stringTokenizer0 = new StringTokenizer("hp,(U0mql~", "");
      assertNotNull(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "Node must not be null");
      assertNotNull(stringTokenizer1);
      assertEquals(0, stringTokenizer1.countTokens());
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("Node must not be null", "Node must not be null", false);
      assertNotNull(stringTokenizer2);
      assertEquals(0, stringTokenizer2.countTokens());
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("", "u&)n[zs:Y;Q9pHV,iM", false);
      assertNotNull(stringTokenizer3);
      assertEquals(0, stringTokenizer3.countTokens());
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("", "");
      assertNotNull(stringTokenizer4);
      assertEquals(0, stringTokenizer4.countTokens());
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("u&)n[zs:Y;Q9pHV,iM");
      assertNotNull(stringTokenizer5);
      assertEquals(1, stringTokenizer5.countTokens());
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer3));
      
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("!oZfMo<qv!Uo`h", "", false);
      assertNotNull(stringTokenizer6);
      assertEquals(1, stringTokenizer6.countTokens());
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer5));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("c-?qF:e}#", "u&)n[zs:Y;Q9pHV,iM", true);
      assertNotNull(stringTokenizer7);
      assertEquals(3, stringTokenizer7.countTokens());
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer6));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer5));
      
      stringTokenizerArray0[7] = stringTokenizer7;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      assertNotNull(objectArrayIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(8, stringTokenizerArray0.length);
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) objectArrayIterator0);
      assertNotNull(iterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(8, stringTokenizerArray0.length);
      
      objectArrayIterator0.reset();
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(8, stringTokenizerArray0.length);
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) objectArrayIterator0);
      assertNotNull(listIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(8, stringTokenizerArray0.length);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ObjectArrayIterator<SQLDataException> objectArrayIterator1 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      assertNotNull(objectArrayIterator1);
      assertEquals(0, objectArrayIterator1.getStartIndex());
      assertEquals(0, objectArrayIterator1.getEndIndex());
      assertFalse(objectArrayIterator1.hasNext());
      assertEquals(0, sQLDataExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator1, (-2359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(instanceofPredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      assertNotNull(ifTransformer0);
      
      HashMap<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>> hashMap0 = new HashMap<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EntrySetMapIterator<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      assertNotNull(transformer0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<BatchUpdateException>>) entrySetMapIterator0, (Transformer<? super ArrayList<BatchUpdateException>, String>) transformer0, (String) null, "LG3v", "LG3v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      SQLDataException sQLDataException0 = new SQLDataException("InstantiateFactory: The constructor must exist and be public ", "InstantiateFactory: The constructor must exist and be public ", 149);
      assertNotNull(sQLDataException0);
      assertEquals("InstantiateFactory: The constructor must exist and be public ", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: InstantiateFactory: The constructor must exist and be public ", sQLDataException0.toString());
      assertEquals("InstantiateFactory: The constructor must exist and be public ", sQLDataException0.getSQLState());
      assertEquals(149, sQLDataException0.getErrorCode());
      
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
      
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      assertFalse(linkedHashSet0.contains(predicate0));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(linkedList0);
      assertNotNull(loopingListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      
      ListIterator<Properties> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) loopingListIterator0, (Predicate<? super Properties>) predicate0);
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) loopingListIterator0, (Iterator<? extends Properties>) loopingListIterator0);
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(boolean0);
      
      OrderedMapIterator<StringTokenizer, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<StringTokenizer, Object> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ?>) orderedMapIterator0);
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<StringTokenizer, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, Object>(orderedMapIterator2);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<StringTokenizer, Object> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Object>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("*&X,!'=Sz");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getFirstChild();
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      StringTokenizer stringTokenizer0 = new StringTokenizer("hp,(U0mql~", "");
      assertNotNull(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "Node must not be null");
      assertNotNull(stringTokenizer1);
      assertEquals(0, stringTokenizer1.countTokens());
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("Node must not be null", "Node must not be null", false);
      assertNotNull(stringTokenizer2);
      assertEquals(0, stringTokenizer2.countTokens());
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("", "u&)n[zs:Y;Q9pHV,iM", false);
      assertNotNull(stringTokenizer3);
      assertEquals(0, stringTokenizer3.countTokens());
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("", "");
      assertNotNull(stringTokenizer4);
      assertEquals(0, stringTokenizer4.countTokens());
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("u&)n[zs:Y;Q9pHV,iM");
      assertNotNull(stringTokenizer5);
      assertEquals(1, stringTokenizer5.countTokens());
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("!oZfMo<qv!Uo`h", "", false);
      assertNotNull(stringTokenizer6);
      assertEquals(1, stringTokenizer6.countTokens());
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer5));
      
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("c-?qF:e}#", "u&)n[zs:Y;Q9pHV,iM", true);
      assertNotNull(stringTokenizer7);
      assertEquals(3, stringTokenizer7.countTokens());
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer5));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer6));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[7] = stringTokenizer7;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      assertNotNull(objectArrayIterator0);
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, stringTokenizerArray0.length);
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) objectArrayIterator0);
      assertNotNull(iterator0);
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, stringTokenizerArray0.length);
      
      objectArrayIterator0.reset();
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, stringTokenizerArray0.length);
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) objectArrayIterator0);
      assertNotNull(listIterator0);
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(8, stringTokenizerArray0.length);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(stringTokenizer6);
      assertNotNull(iterator1);
      assertEquals(1, stringTokenizer6.countTokens());
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer5));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer7));
      assertNotSame(stringTokenizer6, stringTokenizer4);
      assertNotSame(stringTokenizer6, stringTokenizer2);
      assertNotSame(stringTokenizer6, stringTokenizer1);
      assertNotSame(stringTokenizer6, stringTokenizer3);
      assertNotSame(stringTokenizer6, stringTokenizer0);
      assertNotSame(stringTokenizer6, stringTokenizer5);
      assertNotSame(stringTokenizer6, stringTokenizer7);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>("", comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedList<LinkedHashSet>>) iterator1, (Predicate<? super LinkedList<LinkedHashSet>>) comparatorPredicate0);
      assertEquals(0, stringTokenizer6.countTokens());
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer5));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer7));
      assertTrue(boolean0);
      assertNotSame(stringTokenizer6, stringTokenizer4);
      assertNotSame(stringTokenizer6, stringTokenizer2);
      assertNotSame(stringTokenizer6, stringTokenizer1);
      assertNotSame(stringTokenizer6, stringTokenizer3);
      assertNotSame(stringTokenizer6, stringTokenizer0);
      assertNotSame(stringTokenizer6, stringTokenizer5);
      assertNotSame(stringTokenizer6, stringTokenizer7);
      
      Iterator<StringTokenizer> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) objectArrayIterator0);
      assertNotNull(iterator2);
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, stringTokenizerArray0.length);
      assertFalse(iterator2.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResettableIterator<LinkedList<String>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator((SQLTimeoutException) null);
      assertNotNull(listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator0);
      assertNotNull(enumeration0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<DataTruncation>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) orderedMapIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(2, iteratorArray0.length);
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) iterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(2, iteratorArray0.length);
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iteratorArray0[1]);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(2, iteratorArray0.length);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertEquals(0, objectArray0.length);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, (-134));
      assertNotNull(sQLTransientConnectionException0);
      assertEquals((-134), sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      
      boolean boolean0 = linkedHashSet0.remove(sQLTransientConnectionException0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-134), sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertFalse(boolean0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedHashSet0);
      assertNotNull(resettableIterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(vector0);
      assertNotNull(reverseListIterator0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0);
      assertNotNull(iterator0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, 0L);
      assertNotNull(boundedIterator0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterable<SQLClientInfoException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListIterator<Properties> listIterator0 = null;
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      HashMap<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>> hashMap0 = new HashMap<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EntrySetMapIterator<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashSet<Predicate<Object>>[] hashSetArray0 = (HashSet<Predicate<Object>>[]) Array.newInstance(HashSet.class, 4);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      hashSetArray0[0] = hashSet0;
      HashSet<Predicate<Object>> hashSet1 = new HashSet<Predicate<Object>>();
      assertNotNull(hashSet1);
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.equals((Object)hashSet0));
      
      boolean boolean0 = hashSet1.add(instanceofPredicate0);
      assertEquals(1, hashSet1.size());
      assertFalse(hashSet1.isEmpty());
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertTrue(boolean0);
      assertNotSame(hashSet1, hashSet0);
      
      hashSetArray0[1] = hashSet1;
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator1.equals((Object)abstractOrderedMapIteratorDecorator0));
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(abstractOrderedMapIteratorDecorator0);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.equals((Object)abstractOrderedMapIteratorDecorator1));
      
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0, (Iterator<? extends StringTokenizer>) listIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) orderedMapIterator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) iterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      String string0 = "";
      Iterator<?> iterator1 = IteratorUtils.getIterator("");
      assertNotNull(iterator1);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3L", "3L", 0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      assertEquals("3L", sQLDataException0.getMessage());
      assertEquals("3L", sQLDataException0.getSQLState());
      
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
      
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertNotNull(objectArray0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation(50, false, false, 100, 50, sQLWarning0);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      SQLWarning sQLWarning1 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning1);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 4);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer(".ROkK\"xS_is|hWeunO", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
      assertEquals(4, classArray0.length);
      
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      assertNotNull(iterator0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(4, classArray0.length);
      
      Iterator<SQLTimeoutException> iterator1 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[1] = predicate1;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate1);
      assertNotNull(andPredicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 3 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) orderedMapIterator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) iterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("<Qna~u#a?0");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends IIOMetadataNode>) orderedMapIterator1);
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(abstractOrderedMapIteratorDecorator0);
      assertNotNull(abstractOrderedMapIteratorDecorator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator1.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(abstractOrderedMapIteratorDecorator1.equals((Object)abstractOrderedMapIteratorDecorator0));
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator2);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("A+uHE7bb>t.kge");
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode5);
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertSame(orderedMapIterator2, orderedMapIterator1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode3, comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode4));
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedList<LinkedHashSet>>) orderedMapIterator0, (Predicate<? super LinkedList<LinkedHashSet>>) comparatorPredicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode4));
      assertFalse(boolean0);
      assertNotSame(iIOMetadataNode3, iIOMetadataNode5);
      assertNotSame(iIOMetadataNode3, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode3, iIOMetadataNode0);
      assertNotSame(iIOMetadataNode3, iIOMetadataNode2);
      assertNotSame(iIOMetadataNode3, iIOMetadataNode4);
      
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator3 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator3);
      assertFalse(orderedMapIterator3.hasPrevious());
      
      MapIterator<SQLRecoverableException, SQLClientInfoException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, SQLClientInfoException>) orderedMapIterator3);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator3.hasPrevious());
      
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) mapIterator0);
      assertNotNull(string0);
      assertFalse(orderedMapIterator3.hasPrevious());
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertEquals(0, objectArray0.length);
      
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(locale_Category0, comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedList<LinkedHashSet>>) orderedMapIterator0, (Predicate<? super LinkedList<LinkedHashSet>>) comparatorPredicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(boolean0);
      
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) comparatorPredicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
      
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0, 919);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) orderedMapIterator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) iterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator("");
      assertNotNull(iterator1);
      
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) listIterator0, (Iterator<? extends StringTokenizer>) listIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode4;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      int int0 = 3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Array class must not be null", "x@#@@je[tt", 3);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ConstantFactory<SQLTimeoutException> constantFactory0 = new ConstantFactory<SQLTimeoutException>((SQLTimeoutException) null);
      assertNotNull(constantFactory0);
      
      FactoryTransformer<SQLTimeoutException, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<SQLTimeoutException, SQLTimeoutException>(constantFactory0);
      assertNotNull(factoryTransformer0);
      
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      TransformedPredicate<SQLTimeoutException> transformedPredicate0 = new TransformedPredicate<SQLTimeoutException>(factoryTransformer0, predicate0);
      assertNotNull(transformedPredicate0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResettableIterator<LinkedList<String>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Predicate<Object> predicate0 = null;
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator((SQLTimeoutException) null);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator0);
      assertNotNull(enumeration0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<LinkedList<LinkedHashSet>>) listIterator0, (Predicate<? super LinkedList<LinkedHashSet>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode4;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertSame(orderedMapIterator2, orderedMapIterator1);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator2);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator2.hasPrevious());
      assertEquals(0, objectArray0.length);
      assertSame(orderedMapIterator2, orderedMapIterator1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode2));
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedList<LinkedHashSet>>) zippingIterator0, (Predicate<? super LinkedList<LinkedHashSet>>) comparatorPredicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode2));
      assertFalse(boolean0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode4);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode3);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedList<LinkedHashSet>>) zippingIterator0, (Predicate<? super LinkedList<LinkedHashSet>>) predicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(boolean0);
      
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
      
      List<SQLException> list1 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0, 10);
      assertNotNull(list1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InstanceofPredicate>) linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNotSame(iIOMetadataNode0, iIOMetadataNode2);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode4;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Array class must not be null", "x@#@@je[tt", 3);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("ListIterator must not be null", "Predicate must not be null", sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Predicate must not be null", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException1.toString());
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedException1.printStackTrace();
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Predicate must not be null", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException1.toString());
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("iterator", "equator may not be null");
      assertNotNull(sQLFeatureNotSupportedException2);
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: iterator", sQLFeatureNotSupportedException2.toString());
      assertEquals("iterator", sQLFeatureNotSupportedException2.getMessage());
      assertEquals("equator may not be null", sQLFeatureNotSupportedException2.getSQLState());
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("ListIterator must not be null");
      assertNotNull(sQLFeatureNotSupportedException3);
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException3.toString());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException3);
      assertNotNull(sQLFeatureNotSupportedException4);
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException3.toString());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertNull(sQLFeatureNotSupportedException4.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("The predicate collection must not be null", "iterator", 3, sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException5);
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Predicate must not be null", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException1.toString());
      assertEquals(3, sQLFeatureNotSupportedException5.getErrorCode());
      assertEquals("iterator", sQLFeatureNotSupportedException5.getSQLState());
      assertEquals("The predicate collection must not be null", sQLFeatureNotSupportedException5.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: The predicate collection must not be null", sQLFeatureNotSupportedException5.toString());
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException3));
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("$K?.f", "iterator", sQLFeatureNotSupportedException4);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException3.toString());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertNull(sQLFeatureNotSupportedException4.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("$K?.f", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: $K?.f", sQLSyntaxErrorException0.toString());
      assertEquals("iterator", sQLSyntaxErrorException0.getSQLState());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException5));
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator0);
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException3.toString());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertNull(sQLFeatureNotSupportedException4.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("$K?.f", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: $K?.f", sQLSyntaxErrorException0.toString());
      assertEquals("iterator", sQLSyntaxErrorException0.getSQLState());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException5));
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException4);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException5);
      assertNotSame(sQLFeatureNotSupportedException4, sQLFeatureNotSupportedException3);
      assertNotSame(sQLFeatureNotSupportedException4, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException4, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException4, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException4, sQLFeatureNotSupportedException5);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      assertNotNull(singletonIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertTrue(singletonIterator0.hasNext());
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      assertNotNull(constantTransformer0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      SQLDataException sQLDataException0 = new SQLDataException("prefix may not be null", "prefix may not be null", 0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: prefix may not be null", sQLDataException0.toString());
      assertEquals("prefix may not be null", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("prefix may not be null", sQLDataException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("t:@2!v&_Annt*A#Yl^", "k]nQm#Os);ZV23XZ7", (-1), sQLDataException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLDataException: prefix may not be null", sQLDataException0.toString());
      assertEquals("prefix may not be null", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("prefix may not be null", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: t:@2!v&_Annt*A#Yl^", sQLFeatureNotSupportedException0.toString());
      assertEquals("t:@2!v&_Annt*A#Yl^", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("k]nQm#Os);ZV23XZ7", sQLFeatureNotSupportedException0.getSQLState());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator("prefix may not be null");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(instanceofPredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      assertNotNull(ifTransformer0);
      
      HashMap<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>> hashMap0 = new HashMap<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EntrySetMapIterator<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<ArrayList<BatchUpdateException>, PriorityQueue<SQLClientInfoException>>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = IteratorUtils.toString((Iterator<ArrayList<BatchUpdateException>>) entrySetMapIterator0, (Transformer<? super ArrayList<BatchUpdateException>, String>) ifTransformer0, "LG3v", "LG3v", "LG3v");
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("LG3vLG3v", string0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      assertNotNull(singletonIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertTrue(singletonIterator0.hasNext());
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      assertNotNull(constantTransformer0);
      
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(singletonIterator0.hasNext());
      assertEquals(1, int0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
      
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      assertNotNull(loopingListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      assertNotNull(transformerPredicate0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) loopingListIterator0, (Predicate<? super IIOMetadataNode>) transformerPredicate0);
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("6jBw>dy");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("<[nl ?");
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode5);
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("prefix may not be null");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("prefix may not be null", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: prefix may not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("prefix may not be null", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: prefix may not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: prefix may not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: prefix may not be null", sQLFeatureNotSupportedException1.toString());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException2);
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException2.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertNull(sQLFeatureNotSupportedException2.getMessage());
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException1;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 2);
      assertNotNull(objectArrayListIterator0);
      assertEquals(2, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(9, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(9, sQLFeatureNotSupportedExceptionArray0.length);
      
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLFeatureNotSupportedException0, comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      assertEquals("prefix may not be null", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: prefix may not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode4;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Array class must not be null", "x@#@@je[tt", 3);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("ListIterator must not be null", "Predicate must not be null", sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException1.toString());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Predicate must not be null", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("iterator", "equator may not be null");
      assertNotNull(sQLFeatureNotSupportedException2);
      assertEquals("iterator", sQLFeatureNotSupportedException2.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: iterator", sQLFeatureNotSupportedException2.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("equator may not be null", sQLFeatureNotSupportedException2.getSQLState());
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("ListIterator must not be null");
      assertNotNull(sQLFeatureNotSupportedException3);
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException3.toString());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException3);
      assertNotNull(sQLFeatureNotSupportedException4);
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException3.toString());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertNull(sQLFeatureNotSupportedException4.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException5);
      assertEquals(0, sQLFeatureNotSupportedException5.getErrorCode());
      assertNull(sQLFeatureNotSupportedException5.getSQLState());
      assertNull(sQLFeatureNotSupportedException5.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException5.toString());
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException2));
      
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 3);
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(6, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(10, 0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLFeatureNotSupportedException1, comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException1.toString());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Predicate must not be null", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException4));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) comparatorPredicate0);
      assertNull(sQLFeatureNotSupportedException6);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException1.toString());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Predicate must not be null", sQLFeatureNotSupportedException1.getSQLState());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(6, objectArrayListIterator0.getEndIndex());
      assertEquals(2, objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getStartIndex());
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException4));
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException3);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException4);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException5);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException5);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException3);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException4);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Iterator<Iterator<SQLIntegrityConstraintViolationException>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 3);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableListIterator0;
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) listIterator0;
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[9];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      assertNotNull(instanceofPredicate2);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class3);
      assertNotNull(instanceofPredicate3);
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate2));
      
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class2);
      assertNotNull(instanceofPredicate4);
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<SQLTransientException> class4 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class4);
      assertNotNull(instanceofPredicate5);
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate2));
      
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Class<SQLDataException> class5 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class5);
      assertNotNull(instanceofPredicate6);
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[6] = instanceofPredicate6;
      Class<SQLSyntaxErrorException> class6 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class6);
      assertNotNull(instanceofPredicate7);
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate6));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate0));
      
      instanceofPredicateArray0[7] = instanceofPredicate7;
      InstanceofPredicate instanceofPredicate8 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate8);
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate6));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate7));
      
      instanceofPredicateArray0[8] = instanceofPredicate8;
      ResettableListIterator<InstanceofPredicate> resettableListIterator1 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertEquals(9, instanceofPredicateArray0.length);
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) resettableListIterator1;
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Predicate<Object>>) comparator0, (Iterator<? extends Predicate<Object>>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(3, iteratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, 0L, (long) 118);
      assertNotNull(boundedIterator0);
      
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Object>) orderedIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      assertNotNull(singletonIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertTrue(singletonIterator0.hasNext());
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      assertNotNull(constantTransformer0);
      
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) singletonIterator0, (Transformer<? super StringTokenizer, String>) constantTransformer0);
      assertNotNull(string0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[]", string0);
      
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(singletonIterator0.hasNext());
      assertEquals(0, int0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      String string1 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
      
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 9);
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeSet<SQLNonTransientConnectionException>[] treeSetArray0 = (TreeSet<SQLNonTransientConnectionException>[]) Array.newInstance(TreeSet.class, 0);
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode4;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Array class must not be null", "x@#@@je[tt", 3);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("ListIterator must not be null", "Predicate must not be null", sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Predicate must not be null", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException1.toString());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("iterator", "equator may not be null");
      assertNotNull(sQLFeatureNotSupportedException2);
      assertEquals("iterator", sQLFeatureNotSupportedException2.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: iterator", sQLFeatureNotSupportedException2.toString());
      assertEquals("equator may not be null", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("ListIterator must not be null");
      assertNotNull(sQLFeatureNotSupportedException3);
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException3);
      assertNotNull(sQLFeatureNotSupportedException4);
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException4.toString());
      assertNull(sQLFeatureNotSupportedException4.getSQLState());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException5);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException5.toString());
      assertEquals(0, sQLFeatureNotSupportedException5.getErrorCode());
      assertNull(sQLFeatureNotSupportedException5.getSQLState());
      assertNull(sQLFeatureNotSupportedException5.getMessage());
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException4));
      
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 3);
      assertNotNull(objectArrayListIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.getStartIndex());
      assertEquals(6, objectArrayListIterator0.getEndIndex());
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLFeatureNotSupportedException1, comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Predicate must not be null", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException1.toString());
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) comparatorPredicate0);
      assertNotNull(sQLFeatureNotSupportedException6);
      assertEquals(0, sQLFeatureNotSupportedException6.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException6.toString());
      assertNull(sQLFeatureNotSupportedException6.getSQLState());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException6.getMessage());
      assertEquals(3, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("x@#@@je[tt", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Predicate must not be null", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ListIterator must not be null", sQLFeatureNotSupportedException1.toString());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getStartIndex());
      assertEquals(6, objectArrayListIterator0.getEndIndex());
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertNotSame(sQLFeatureNotSupportedException6, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException6, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException6, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException6, sQLFeatureNotSupportedException4);
      assertSame(sQLFeatureNotSupportedException6, sQLFeatureNotSupportedException3);
      assertNotSame(sQLFeatureNotSupportedException6, sQLFeatureNotSupportedException5);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException4);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException5);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException6);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException3);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException5);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException6);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException4);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException3);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0);
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode4;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":W:OTwt%UI:ru_g", (Throwable) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(":W:OTwt%UI:ru_g", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: :W:OTwt%UI:ru_g", sQLFeatureNotSupportedException0.toString());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("Array class must not be null"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SingletonListIterator<LinkedList<String>> singletonListIterator0 = new SingletonListIterator<LinkedList<String>>(linkedList0);
      assertFalse(linkedList0.contains("Array class must not be null"));
      assertNotNull(singletonListIterator0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, linkedList0.size());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate0);
      assertEquals(0, predicateArray0.length);
      
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      assertNotNull(predicate1);
      assertEquals(0, predicateArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      
      LinkedList<String> linkedList1 = IteratorUtils.find((Iterator<LinkedList<String>>) singletonListIterator0, (Predicate<? super LinkedList<String>>) predicate1);
      assertFalse(linkedList0.contains("Array class must not be null"));
      assertNull(linkedList1);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(0, linkedList0.size());
      assertEquals(0, predicateArray0.length);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode4);
      assertNotNull(node0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(node0.equals((Object)iIOMetadataNode1));
      assertFalse(node0.equals((Object)iIOMetadataNode2));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertNotSame(iIOMetadataNode0, iIOMetadataNode4);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode2);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode3);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(node0, iIOMetadataNode1);
      assertNotSame(node0, iIOMetadataNode2);
      assertNotSame(node0, iIOMetadataNode0);
      assertNotSame(node0, iIOMetadataNode3);
      assertSame(node0, iIOMetadataNode4);
      assertNotSame(iIOMetadataNode4, iIOMetadataNode2);
      assertNotSame(iIOMetadataNode4, iIOMetadataNode0);
      assertSame(iIOMetadataNode4, node0);
      assertNotSame(iIOMetadataNode4, iIOMetadataNode3);
      assertNotSame(iIOMetadataNode4, iIOMetadataNode1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node0);
      assertNotNull(nodeListIterator0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(node0.equals((Object)iIOMetadataNode1));
      assertFalse(node0.equals((Object)iIOMetadataNode2));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertNotSame(iIOMetadataNode0, iIOMetadataNode4);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode2);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode3);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(node0, iIOMetadataNode1);
      assertNotSame(node0, iIOMetadataNode2);
      assertNotSame(node0, iIOMetadataNode0);
      assertNotSame(node0, iIOMetadataNode3);
      assertSame(node0, iIOMetadataNode4);
      assertNotSame(iIOMetadataNode4, iIOMetadataNode2);
      assertNotSame(iIOMetadataNode4, iIOMetadataNode0);
      assertSame(iIOMetadataNode4, node0);
      assertNotSame(iIOMetadataNode4, iIOMetadataNode3);
      assertNotSame(iIOMetadataNode4, iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResettableIterator<LinkedList<String>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Predicate<Object> predicate0 = null;
      int int0 = 118;
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator((SQLTimeoutException) null);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator0);
      assertNotNull(enumeration0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      boolean boolean0 = hashSet0.add(sQLIntegrityConstraintViolationException0);
      assertFalse(hashSet0.contains(""));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(boolean0);
      
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) resettableListIterator0, (long) 118);
      assertNotNull(skippingIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) hashSet0);
      assertFalse(hashSet0.contains(""));
      assertNotNull(iterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      Closure<SQLException> closure0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      SQLDataException sQLDataException0 = new SQLDataException("k]nQm#Os);ZV23XZ7", "k]nQm#Os);ZV23XZ7", 0);
      assertNotNull(sQLDataException0);
      assertEquals("k]nQm#Os);ZV23XZ7", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: k]nQm#Os);ZV23XZ7", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("k]nQm#Os);ZV23XZ7", sQLDataException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "$K?.f", 0, sQLDataException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("k]nQm#Os);ZV23XZ7", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: k]nQm#Os);ZV23XZ7", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("k]nQm#Os);ZV23XZ7", sQLDataException0.getMessage());
      assertEquals("$K?.f", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(nodeListIterator0.equals((Object)iterator0));
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(nodeListIterator0, iterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3L", "3L", 0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      assertEquals("3L", sQLDataException0.getMessage());
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
      
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      HashSet<Predicate<Object>>[] hashSetArray0 = (HashSet<Predicate<Object>>[]) Array.newInstance(HashSet.class, 5);
      hashSetArray0[0] = (HashSet<Predicate<Object>>) linkedHashSet0;
      hashSetArray0[1] = (HashSet<Predicate<Object>>) linkedHashSet0;
      SQLDataException sQLDataException1 = new SQLDataException(", ", (String) null, 2663);
      assertNotNull(sQLDataException1);
      assertEquals(", ", sQLDataException1.getMessage());
      assertEquals(2663, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: , ", sQLDataException1.toString());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException1);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(", ", sQLDataException1.getMessage());
      assertEquals(2663, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: , ", sQLDataException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLDataException: , ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLDataException: , ", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("3L", (String) null, 3524, sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(", ", sQLDataException1.getMessage());
      assertEquals(2663, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: , ", sQLDataException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLDataException: , ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLDataException: , ", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3L", sQLFeatureNotSupportedException1.toString());
      assertEquals("3L", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(3524, sQLFeatureNotSupportedException1.getErrorCode());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2663;
      intArray0[2] = 3524;
      intArray0[3] = 2663;
      intArray0[4] = 2663;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("$K?.f", intArray0);
      assertArrayEquals(new int[] {0, 2663, 3524, 2663, 2663}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException: $K?.f", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("$K?.f", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(5, intArray0.length);
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertArrayEquals(new int[] {0, 2663, 3524, 2663, 2663}, intArray0);
      assertNull(sQLException0);
      assertEquals("java.sql.BatchUpdateException: $K?.f", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("$K?.f", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(5, intArray0.length);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3L", "3L", 0);
      assertNotNull(sQLDataException0);
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3L", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
      
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      HashSet<Predicate<Object>>[] hashSetArray0 = (HashSet<Predicate<Object>>[]) Array.newInstance(HashSet.class, 5);
      hashSetArray0[0] = (HashSet<Predicate<Object>>) linkedHashSet0;
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      assertNotNull(instantiateFactory0);
      
      Iterator<SQLException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      assertNotNull(singletonIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertTrue(singletonIterator0.hasNext());
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      assertNotNull(constantTransformer0);
      
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) singletonIterator0, (Transformer<? super StringTokenizer, String>) constantTransformer0);
      assertNotNull(string0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[]", string0);
      
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(singletonIterator0.hasNext());
      assertEquals(0, int0);
      
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (String) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 2764, sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(2764, sQLTransientConnectionException0.getErrorCode());
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException1);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLFeatureNotSupportedException: ", sQLTransientConnectionException1.toString());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) abstractMapIteratorDecorator0);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
      
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-2707));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      assertNotNull(singletonIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertTrue(singletonIterator0.hasNext());
      
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("");
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) singletonIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      assertNotNull(string0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[]", string0);
      
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(singletonIterator0.hasNext());
      assertEquals(0, int0);
      
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      int int1 = 2764;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (String) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 2764, sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(2764, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException1);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLFeatureNotSupportedException: ", sQLTransientConnectionException1.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "ByYO*_CVsTa");
      assertNotNull(sQLTransientConnectionException2);
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertEquals("ByYO*_CVsTa", sQLTransientConnectionException2.getSQLState());
      assertEquals("", sQLTransientConnectionException2.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException2.toString());
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException1));
      
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, sQLTransientConnectionExceptionArray0.length);
      
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) objectArrayListIterator0);
      assertNotNull(iterator0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, sQLTransientConnectionExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        stringTokenizer0.nextToken("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3L", "3L", 0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3L", sQLDataException0.getMessage());
      
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
      
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      HashSet<Predicate<Object>>[] hashSetArray0 = (HashSet<Predicate<Object>>[]) Array.newInstance(HashSet.class, 5);
      hashSetArray0[0] = (HashSet<Predicate<Object>>) linkedHashSet0;
      hashSetArray0[1] = (HashSet<Predicate<Object>>) linkedHashSet0;
      hashSetArray0[2] = (HashSet<Predicate<Object>>) linkedHashSet0;
      hashSetArray0[3] = (HashSet<Predicate<Object>>) linkedHashSet0;
      hashSetArray0[4] = (HashSet<Predicate<Object>>) linkedHashSet0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(hashSetArray0, (-4069));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3L", "3L", 0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3L", sQLDataException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3L", "3L", 2787, sQLDataException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3L", sQLDataException0.getMessage());
      assertEquals("3L", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("3L", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2787, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3L", sQLFeatureNotSupportedException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = sQLFeatureNotSupportedException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3L", sQLDataException0.getMessage());
      assertEquals("3L", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("3L", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2787, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3L", sQLFeatureNotSupportedException0.toString());
      assertEquals(13, stackTraceElementArray0.length);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      assertNotNull(iterator0);
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3L", sQLDataException0.getMessage());
      assertEquals("3L", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("3L", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2787, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3L", sQLFeatureNotSupportedException0.toString());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Iterator<Iterator<SQLIntegrityConstraintViolationException>> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      HashSet<Iterator<SQLIntegrityConstraintViolationException>> hashSet0 = new HashSet<Iterator<SQLIntegrityConstraintViolationException>>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      iIOMetadataNodeArray0[6] = iIOMetadataNode0;
      iIOMetadataNodeArray0[7] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(8, iIOMetadataNodeArray0.length);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableListIterator1;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) orderedMapIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(3, iteratorArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Iterator must not be null", "Iterator must not be null");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Iterator must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("Iterator must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Iterator must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3L", "3L", 0);
      assertNotNull(sQLDataException0);
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3L", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3L", "3L", 2787, sQLDataException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3L", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      assertEquals("3L", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3L", sQLFeatureNotSupportedException0.toString());
      assertEquals("3L", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2787, sQLFeatureNotSupportedException0.getErrorCode());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      assertNotNull(iterator0);
      assertEquals("3L", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3L", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 3L", sQLDataException0.toString());
      assertEquals("3L", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3L", sQLFeatureNotSupportedException0.toString());
      assertEquals("3L", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(2787, sQLFeatureNotSupportedException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "l/r&N!*ZaJ", 0, hashMap0, sQLTransactionRollbackException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("l/r&N!*ZaJ", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("l/r&N!*ZaJ", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLTransactionRollbackException0);
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("l/r&N!*ZaJ", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: ", sQLClientInfoException1.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException1);
      assertNotNull(sQLTransientConnectionException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("l/r&N!*ZaJ", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: ", sQLClientInfoException1.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: ", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("p!*#>9.y");
      assertNotNull(iIOMetadataNode0);
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      assertNotNull(listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) listIterator0);
      assertNotNull(string0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResettableIterator<LinkedList<String>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Predicate<Object> predicate0 = null;
      int int0 = 118;
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator((SQLTimeoutException) null);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator0);
      assertNotNull(enumeration0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) hashSet0);
      assertNotNull(iterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Iterator<Iterator<SQLIntegrityConstraintViolationException>> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Iterable<Iterator<SQLIntegrityConstraintViolationException>> iterable0 = new HashSet<Iterator<SQLIntegrityConstraintViolationException>>();
      assertNotNull(iterable0);
      
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, IIOMetadataNode>(abstractOrderedMapIteratorDecorator0);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) abstractMapIteratorDecorator0);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("l/r&N!*ZaJ", "");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("l/r&N!*ZaJ", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLTransactionRollbackException0.toString());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "l/r&N!*ZaJ", 10, hashMap0, sQLTransactionRollbackException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("l/r&N!*ZaJ", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLTransactionRollbackException0.toString());
      assertEquals("l/r&N!*ZaJ", sQLClientInfoException0.getSQLState());
      assertEquals(10, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      
      Map<String, ClientInfoStatus> map0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLTransactionRollbackException0);
      assertNotNull(sQLClientInfoException1);
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("l/r&N!*ZaJ", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLTransactionRollbackException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException1);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("l/r&N!*ZaJ", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLTransactionRollbackException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: l/r&N!*ZaJ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-3085), 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, PriorityQueue<ArrayList>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Iterator<Iterator<SQLIntegrityConstraintViolationException>> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Iterable<Iterator<SQLIntegrityConstraintViolationException>> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>) iterator0);
      assertNotNull(iterable0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Nu&t[?,G)k-%;w3>';A", "ListIterator must not be null", 1073741824);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("Nu&t[?,G)k-%;w3>';A", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Nu&t[?,G)k-%;w3>';A", sQLFeatureNotSupportedException0.toString());
      assertEquals(1073741824, sQLFeatureNotSupportedException0.getErrorCode());
      
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      assertNotNull(singletonIterator0);
      assertEquals("Nu&t[?,G)k-%;w3>';A", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Nu&t[?,G)k-%;w3>';A", sQLFeatureNotSupportedException0.toString());
      assertEquals(1073741824, sQLFeatureNotSupportedException0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertNotNull(listIterator1);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator1);
      assertNotNull(iterator0);
      assertEquals("Nu&t[?,G)k-%;w3>';A", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("ListIterator must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Nu&t[?,G)k-%;w3>';A", sQLFeatureNotSupportedException0.toString());
      assertEquals(1073741824, sQLFeatureNotSupportedException0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator0.equals((Object)listIterator1));
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      ArrayIterator<SQLTransactionRollbackException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLTransactionRollbackException>("Nu&t[?,G)k-%;w3>';A", (-120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OrderedIterator<ArrayList<BatchUpdateException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedIterator0);
      assertNotNull(iterator0);
      
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, 267, (-313));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, LinkedList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      String string0 = "IN?_DvCb4P#{`m^,1_u";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null, "IN?_DvCb4P#{`m^,1_u", "IN?_DvCb4P#{`m^,1_u", "IN?_DvCb4P#{`m^,1_u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(") > toIndex(", "{F5x.?,uAiiKfAZo2", (Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(") > toIndex(", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ) > toIndex(", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("{F5x.?,uAiiKfAZo2", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      MockThrowable mockThrowable0 = new MockThrowable("c|=VBU[m", sQLInvalidAuthorizationSpecException0);
      assertNotNull(mockThrowable0);
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("N'", mockThrowable0);
      assertNotNull(sQLNonTransientException0);
      assertEquals(") > toIndex(", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ) > toIndex(", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("{F5x.?,uAiiKfAZo2", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: c|=VBU[m", mockThrowable0.toString());
      assertEquals("c|=VBU[m", mockThrowable0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: N'", sQLNonTransientException0.toString());
      assertEquals("N'", sQLNonTransientException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("c|=VBU[m", "c|=VBU[m", sQLNonTransientException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(") > toIndex(", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ) > toIndex(", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("{F5x.?,uAiiKfAZo2", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: c|=VBU[m", mockThrowable0.toString());
      assertEquals("c|=VBU[m", mockThrowable0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: N'", sQLNonTransientException0.toString());
      assertEquals("N'", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("c|=VBU[m", sQLSyntaxErrorException0.getMessage());
      assertEquals("c|=VBU[m", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: c|=VBU[m", sQLSyntaxErrorException0.toString());
      
      sQLExceptionArray0[0] = (SQLException) sQLSyntaxErrorException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(1, sQLExceptionArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockThrowable0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(") > toIndex(", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ) > toIndex(", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("{F5x.?,uAiiKfAZo2", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: c|=VBU[m", mockThrowable0.toString());
      assertEquals("c|=VBU[m", mockThrowable0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable: c|=VBU[m", sQLFeatureNotSupportedException0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: c|=VBU[m", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      assertNotNull(listIterator0);
      assertEquals(") > toIndex(", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ) > toIndex(", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("{F5x.?,uAiiKfAZo2", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: c|=VBU[m", mockThrowable0.toString());
      assertEquals("c|=VBU[m", mockThrowable0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable: c|=VBU[m", sQLFeatureNotSupportedException0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: c|=VBU[m", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      String string0 = "EUUS1_ZpKe[f";
      int[] intArray0 = new int[2];
      intArray0[0] = 299;
      intArray0[1] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("EUUS1_ZpKe[f", "EUUS1_ZpKe[f", intArray0);
      assertArrayEquals(new int[] {299, (-1)}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals("EUUS1_ZpKe[f", batchUpdateException0.getSQLState());
      assertEquals("EUUS1_ZpKe[f", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: EUUS1_ZpKe[f", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(2, intArray0.length);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("EUUS1_ZpKe[f", intArray0);
      assertArrayEquals(new int[] {299, (-1)}, intArray0);
      assertNotNull(batchUpdateException1);
      assertEquals("java.sql.BatchUpdateException: EUUS1_ZpKe[f", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("EUUS1_ZpKe[f", batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(2, intArray0.length);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0);
      assertArrayEquals(new int[] {299, (-1)}, intArray0);
      assertNotNull(batchUpdateException2);
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException2.toString());
      assertNull(batchUpdateException2.getMessage());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals(2, intArray0.length);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      
      Spliterator<Throwable> spliterator0 = batchUpdateException1.spliterator();
      assertArrayEquals(new int[] {299, (-1)}, intArray0);
      assertNotNull(spliterator0);
      assertEquals("java.sql.BatchUpdateException: EUUS1_ZpKe[f", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("EUUS1_ZpKe[f", batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(2, intArray0.length);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException2));
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertNotSame(batchUpdateException1, batchUpdateException2);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(3, batchUpdateExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      assertNotNull(resettableIterator0);
      
      int int0 = (-4734);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, (-4734));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2399));
      assertNotNull(integer0);
      assertEquals((-2399), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2399));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2399), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(4);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(4, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(4);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(4, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2399));
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-2399), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(44);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(44, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(3);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(3, (int)integer6);
      
      integerArray0[6] = integer6;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      assertNotNull(resettableIterator0);
      assertEquals(7, integerArray0.length);
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) arrayDeque0);
      assertNotNull(resettableIterator1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableIterator1);
      assertNotNull(list0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator2 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) list0);
      assertNotNull(resettableIterator2);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(resettableIterator2.equals((Object)resettableIterator1));
      assertNotSame(resettableIterator1, resettableIterator2);
      assertNotSame(resettableIterator2, resettableIterator1);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator3 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator3);
      
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.equals((Object)properties0));
      
      propertiesArray0[1] = properties1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 3, (-2399));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResettableIterator<LinkedList<String>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<LinkedList<String>>) resettableIterator0, (Predicate<? super LinkedList<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      assertNotNull(resettableIterator1);
      assertEquals(0, sQLTransientConnectionExceptionArray0.length);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) resettableIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, LinkedList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      assertNotNull(list0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ArrayList<BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 6);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      assertNotNull(loopingListIterator0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      assertNotNull(transformerPredicate0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) loopingListIterator0, (Predicate<? super IIOMetadataNode>) transformerPredicate0);
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      
      iteratorArray0[0] = iterator0;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      String string0 = "6jBw>dy";
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("6jBw>dy");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("6jBw>dy");
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode5);
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode6);
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(7, iIOMetadataNodeArray0.length);
      
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) resettableListIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 123;
      intArray0[1] = 123;
      intArray0[2] = 123;
      intArray0[3] = (-1115);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      assertArrayEquals(new int[] {123, 123, 123, (-1115)}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(4, intArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "P_@U_`L04KBS1R3:Iu", batchUpdateException0);
      assertArrayEquals(new int[] {123, 123, 123, (-1115)}, intArray0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("P_@U_`L04KBS1R3:Iu", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(4, intArray0.length);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("P_@U_`L04KBS1R3:Iu", "P_@U_`L04KBS1R3:Iu", 123, (long[]) null, sQLFeatureNotSupportedException0);
      assertArrayEquals(new int[] {123, 123, 123, (-1115)}, intArray0);
      assertNotNull(batchUpdateException1);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("P_@U_`L04KBS1R3:Iu", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(123, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: P_@U_`L04KBS1R3:Iu", batchUpdateException1.toString());
      assertEquals("P_@U_`L04KBS1R3:Iu", batchUpdateException1.getSQLState());
      assertEquals("P_@U_`L04KBS1R3:Iu", batchUpdateException1.getMessage());
      assertEquals(4, intArray0.length);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      assertNotNull(loopingListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) loopingListIterator0;
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) loopingListIterator0);
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) listIterator0;
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iteratorArray0[1], 0L, 1L);
      assertNotNull(boundedIterator0);
      assertEquals(5, iteratorArray0.length);
      
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) boundedIterator0;
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      int int0 = (-1529);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, (-1529), (-1529));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ServiceLoader<SQLClientInfoException>[] serviceLoaderArray0 = (ServiceLoader<SQLClientInfoException>[]) Array.newInstance(ServiceLoader.class, 9);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      ServiceLoader<SQLClientInfoException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.sql.SQLClientInfoException]", serviceLoader0.toString());
      
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<SQLClientInfoException> serviceLoader1 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.sql.SQLClientInfoException]", serviceLoader1.toString());
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertNotSame(serviceLoader1, serviceLoader0);
      
      serviceLoaderArray0[1] = serviceLoader1;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      ServiceLoader<SQLClientInfoException> serviceLoader2 = ServiceLoader.load(class1);
      assertNotNull(serviceLoader2);
      assertEquals("java.util.ServiceLoader[java.sql.SQLClientInfoException]", serviceLoader2.toString());
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertSame(class1, class0);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertNotSame(serviceLoader2, serviceLoader1);
      
      serviceLoaderArray0[2] = serviceLoader2;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<SQLClientInfoException> serviceLoader3 = ServiceLoader.load(class2, classLoader0);
      assertNotNull(serviceLoader3);
      assertEquals("java.util.ServiceLoader[java.sql.SQLClientInfoException]", serviceLoader3.toString());
      assertFalse(serviceLoader3.equals((Object)serviceLoader0));
      assertFalse(serviceLoader3.equals((Object)serviceLoader2));
      assertFalse(serviceLoader3.equals((Object)serviceLoader1));
      assertSame(class2, class1);
      assertSame(class2, class0);
      assertNotSame(serviceLoader3, serviceLoader0);
      assertNotSame(serviceLoader3, serviceLoader2);
      assertNotSame(serviceLoader3, serviceLoader1);
      
      serviceLoaderArray0[3] = serviceLoader3;
      ServiceLoader<SQLClientInfoException> serviceLoader4 = ServiceLoader.loadInstalled(class1);
      assertNotNull(serviceLoader4);
      assertEquals("java.util.ServiceLoader[java.sql.SQLClientInfoException]", serviceLoader4.toString());
      assertFalse(serviceLoader4.equals((Object)serviceLoader1));
      assertFalse(serviceLoader4.equals((Object)serviceLoader0));
      assertFalse(serviceLoader4.equals((Object)serviceLoader2));
      assertFalse(serviceLoader4.equals((Object)serviceLoader3));
      assertSame(class1, class0);
      assertSame(class1, class2);
      assertNotSame(serviceLoader4, serviceLoader1);
      assertNotSame(serviceLoader4, serviceLoader0);
      assertNotSame(serviceLoader4, serviceLoader2);
      assertNotSame(serviceLoader4, serviceLoader3);
      
      serviceLoaderArray0[4] = serviceLoader4;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      ServiceLoader<SQLClientInfoException> serviceLoader5 = ServiceLoader.loadInstalled(class3);
      assertNotNull(serviceLoader5);
      assertEquals("java.util.ServiceLoader[java.sql.SQLClientInfoException]", serviceLoader5.toString());
      assertFalse(serviceLoader5.equals((Object)serviceLoader4));
      assertFalse(serviceLoader5.equals((Object)serviceLoader0));
      assertFalse(serviceLoader5.equals((Object)serviceLoader2));
      assertFalse(serviceLoader5.equals((Object)serviceLoader1));
      assertFalse(serviceLoader5.equals((Object)serviceLoader3));
      assertNotSame(serviceLoader5, serviceLoader4);
      assertNotSame(serviceLoader5, serviceLoader0);
      assertNotSame(serviceLoader5, serviceLoader2);
      assertNotSame(serviceLoader5, serviceLoader1);
      assertNotSame(serviceLoader5, serviceLoader3);
      assertSame(class3, class0);
      assertSame(class3, class2);
      assertSame(class3, class1);
      
      serviceLoaderArray0[5] = serviceLoader5;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ServiceLoader<SQLClientInfoException> serviceLoader6 = ServiceLoader.load(class0, classLoader1);
      assertNotNull(serviceLoader6);
      assertEquals("java.util.ServiceLoader[java.sql.SQLClientInfoException]", serviceLoader6.toString());
      assertFalse(serviceLoader6.equals((Object)serviceLoader3));
      assertFalse(serviceLoader6.equals((Object)serviceLoader2));
      assertFalse(serviceLoader6.equals((Object)serviceLoader5));
      assertFalse(serviceLoader6.equals((Object)serviceLoader4));
      assertFalse(serviceLoader6.equals((Object)serviceLoader1));
      assertFalse(serviceLoader6.equals((Object)serviceLoader0));
      assertSame(class0, class1);
      assertSame(class0, class3);
      assertSame(class0, class2);
      assertSame(classLoader1, classLoader0);
      assertNotSame(serviceLoader6, serviceLoader3);
      assertNotSame(serviceLoader6, serviceLoader2);
      assertNotSame(serviceLoader6, serviceLoader5);
      assertNotSame(serviceLoader6, serviceLoader4);
      assertNotSame(serviceLoader6, serviceLoader1);
      assertNotSame(serviceLoader6, serviceLoader0);
      
      serviceLoaderArray0[6] = serviceLoader6;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      ServiceLoader<SQLClientInfoException> serviceLoader7 = ServiceLoader.load(class4, classLoader0);
      assertNotNull(serviceLoader7);
      assertEquals("java.util.ServiceLoader[java.sql.SQLClientInfoException]", serviceLoader7.toString());
      assertFalse(serviceLoader7.equals((Object)serviceLoader2));
      assertFalse(serviceLoader7.equals((Object)serviceLoader0));
      assertFalse(serviceLoader7.equals((Object)serviceLoader6));
      assertFalse(serviceLoader7.equals((Object)serviceLoader3));
      assertFalse(serviceLoader7.equals((Object)serviceLoader5));
      assertFalse(serviceLoader7.equals((Object)serviceLoader1));
      assertFalse(serviceLoader7.equals((Object)serviceLoader4));
      assertSame(class4, class3);
      assertSame(class4, class0);
      assertSame(class4, class2);
      assertSame(class4, class1);
      assertNotSame(serviceLoader7, serviceLoader2);
      assertNotSame(serviceLoader7, serviceLoader0);
      assertNotSame(serviceLoader7, serviceLoader6);
      assertNotSame(serviceLoader7, serviceLoader3);
      assertNotSame(serviceLoader7, serviceLoader5);
      assertNotSame(serviceLoader7, serviceLoader1);
      assertNotSame(serviceLoader7, serviceLoader4);
      assertSame(classLoader0, classLoader1);
      
      serviceLoaderArray0[7] = serviceLoader7;
      ServiceLoader<SQLClientInfoException> serviceLoader8 = ServiceLoader.load(class3);
      assertNotNull(serviceLoader8);
      assertEquals("java.util.ServiceLoader[java.sql.SQLClientInfoException]", serviceLoader8.toString());
      assertFalse(serviceLoader8.equals((Object)serviceLoader6));
      assertFalse(serviceLoader8.equals((Object)serviceLoader2));
      assertFalse(serviceLoader8.equals((Object)serviceLoader7));
      assertFalse(serviceLoader8.equals((Object)serviceLoader1));
      assertFalse(serviceLoader8.equals((Object)serviceLoader0));
      assertFalse(serviceLoader8.equals((Object)serviceLoader3));
      assertFalse(serviceLoader8.equals((Object)serviceLoader4));
      assertFalse(serviceLoader8.equals((Object)serviceLoader5));
      assertNotSame(serviceLoader8, serviceLoader6);
      assertNotSame(serviceLoader8, serviceLoader2);
      assertNotSame(serviceLoader8, serviceLoader7);
      assertNotSame(serviceLoader8, serviceLoader1);
      assertNotSame(serviceLoader8, serviceLoader0);
      assertNotSame(serviceLoader8, serviceLoader3);
      assertNotSame(serviceLoader8, serviceLoader4);
      assertNotSame(serviceLoader8, serviceLoader5);
      assertSame(class3, class0);
      assertSame(class3, class4);
      assertSame(class3, class2);
      assertSame(class3, class1);
      
      serviceLoaderArray0[8] = serviceLoader8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(serviceLoaderArray0, (-2313), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) listIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("suffix may not be null");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<ArrayList<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(arrayList0);
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ArrayList<SQLFeatureNotSupportedException>>) listIterator0, (-1483L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ServiceLoader<DataTruncation>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<DataTruncation>) orderedIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Stack<BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      OrderedMapIterator<SQLWarning, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      Object object0 = properties0.put(instanceofPredicate0, sQLIntegrityConstraintViolationException0);
      assertNull(object0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      int int0 = 5;
      int int1 = 39;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 5, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("k]nQm#Os);ZV23XZ7");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, (-1995), (-2300));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      String string0 = "'( d`@_JC^eMzgCi! ";
      String string1 = "";
      String string2 = "org.apache.commons.collections4.map.Flat3Map$KeySet";
      int int0 = 151;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'( d`@_JC^eMzgCi! ");
      // Undeclared exception!
      try { 
        treeSet0.tailSet(sQLTransactionRollbackException0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransactionRollbackException cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<TreeSet<Hashtable>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.InstantiateFactory");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(".J#<}MeTo:;=f<fJH[p");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("Enumeration must not be null");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("org.apache.commons.collections4.functors.InstantiateFactory");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode();
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertTrue(list0.contains(iIOMetadataNode0));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("org.apache.commons.collections4.list.CursorableLinkedList", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      String string0 = "";
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TreeSet<SQLNonTransientConnectionException>[] treeSetArray0 = (TreeSet<SQLNonTransientConnectionException>[]) Array.newInstance(TreeSet.class, 0);
      int int0 = 0;
      IteratorUtils.arrayListIterator(treeSetArray0, 0);
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) zippingIterator0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) zippingIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<StringTokenizer, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<StringTokenizer, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, Object>(orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Object>) abstractOrderedMapIteratorDecorator0);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      linkedHashSet0.remove(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedHashSet0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(vector0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (-613L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, PriorityQueue<ArrayList>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) iterator0);
      OrderedMapIterator<Properties, Vector<SQLSyntaxErrorException>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, Vector<SQLSyntaxErrorException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, Vector<SQLSyntaxErrorException>>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = "x)+YMAhxEv=s>";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("x)+YMAhxEv=s>");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = EqualPredicate.equalPredicate((Object) nodeListIterator0);
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = NullPredicate.nullPredicate();
      predicateArray0[3] = predicate3;
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, (Transformer<? super Object, ? extends String>[]) null, transformer0);
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) switchTransformer0);
      Stack<BatchUpdateException>[] stackArray0 = (Stack<BatchUpdateException>[]) Array.newInstance(Stack.class, 1);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      stackArray0[0] = stack0;
      IteratorUtils.arrayIterator(stackArray0);
      int int0 = (-1886);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "x)+YMAhxEv=s>", (-1886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      int int0 = 5872;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 5872);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int int0 = (-101);
      boolean boolean0 = false;
      DataTruncation dataTruncation0 = new DataTruncation((-101), false, false, (-101), (-101));
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      String string0 = "XViR_MyX8sDO";
      Hashtable<String, ClientInfoStatus> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<String, ClientInfoStatus>(3382, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load: 0.0
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "l/r&N!*ZaJ", 0, hashMap0, sQLTransactionRollbackException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      ServiceLoader<SQLIntegrityConstraintViolationException>[] serviceLoaderArray0 = (ServiceLoader<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ServiceLoader.class, 9);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      serviceLoaderArray0[0] = serviceLoader0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader1 = ServiceLoader.load(class1, (ClassLoader) null);
      serviceLoaderArray0[1] = serviceLoader1;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader2 = ServiceLoader.load(class1, (ClassLoader) null);
      serviceLoaderArray0[2] = serviceLoader2;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader3 = ServiceLoader.loadInstalled(class2);
      serviceLoaderArray0[3] = serviceLoader3;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader4 = ServiceLoader.loadInstalled(class3);
      serviceLoaderArray0[4] = serviceLoader4;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader5 = ServiceLoader.load(class4);
      serviceLoaderArray0[5] = serviceLoader5;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader6 = ServiceLoader.load(class5, (ClassLoader) null);
      serviceLoaderArray0[6] = serviceLoader6;
      Class<SQLIntegrityConstraintViolationException> class6 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader7 = ServiceLoader.loadInstalled(class6);
      serviceLoaderArray0[7] = serviceLoader7;
      Class<SQLIntegrityConstraintViolationException> class7 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader8 = ServiceLoader.loadInstalled(class7);
      serviceLoaderArray0[8] = serviceLoader8;
      ResettableIterator<ServiceLoader<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.arrayIterator(serviceLoaderArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }
}
