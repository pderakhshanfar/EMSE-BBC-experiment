/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 13:05:03 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0, 3833);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) list0);
      MapIterator<DataTruncation, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<Locale.Category, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.Category, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(4564, true, true, 0, 405);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      List<Object> list0 = IteratorUtils.toList(iterator0);
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, SQLDataException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLDataException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.AbstractHashedMap$KeySet", sQLFeatureNotSupportedException0);
      hashMap0.put(sQLFeatureNotSupportedException0, sQLDataException0);
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLDataException>(hashMap0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException>(entrySetMapIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) abstractMapIteratorDecorator0, class0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("xJO!#:HQn|AK)O{|bQ", "4AQotX,!h");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("xJO!#:HQn|AK)O{|bQ", sQLTransientException0);
      MockThrowable mockThrowable0 = new MockThrowable("xJO!#:HQn|AK)O{|bQ", sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("xJO!#:HQn|AK)O{|bQ", mockThrowable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("xJO!#:HQn|AK)O{|bQ", sQLDataException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      vector0.add((SQLNonTransientException) null);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) vector0);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.get((Iterator<SQLNonTransientException>) resettableListIterator0, 2266);
      assertNull(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLNonTransientExceptionArray0[2]);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientException0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      iteratorArray0[1] = (Iterator<String>) resettableIterator0;
      String[] stringArray0 = new String[3];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      iteratorArray0[2] = (Iterator<String>) resettableListIterator0;
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>(")~I}-dt ^7`");
      iteratorArray0[3] = (Iterator<String>) singletonListIterator0;
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MapIterator<StringTokenizer, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) mapIterator0, 2382L, 631L);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) mapIterator0, (Iterator<? extends StringTokenizer>) boundedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedHashSet<Iterator<Integer>>[] linkedHashSetArray0 = (LinkedHashSet<Iterator<Integer>>[]) Array.newInstance(LinkedHashSet.class, 6);
      ResettableListIterator<LinkedHashSet<Iterator<Integer>>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedHashSetArray0, 4, 4);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<Transformer<Object, SQLTransactionRollbackException>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<DataTruncation, String> factoryTransformer0 = new FactoryTransformer<DataTruncation, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) factoryTransformer0, "", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.FunctorException", "");
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      stack0.add((SQLNonTransientException) sQLDataException0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Q", "Q", 323);
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      vector0.add((SQLNonTransientException) sQLDataException0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) vector0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) listIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null");
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null");
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) listIterator0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Enumeration must not be null' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      SingletonIterator<ArrayList<SQLException>> singletonIterator0 = new SingletonIterator<ArrayList<SQLException>>(arrayList0, true);
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("?t}4=awN_r", (Class<?>[]) null, (Object[]) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, notPredicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(transformedPredicate0, transformedPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayList<SQLException>>) singletonIterator0, (Predicate<? super ArrayList<SQLException>>) orPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '?t}4=awN_r' on 'class java.util.ArrayList' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLDataException sQLDataException0 = new SQLDataException("3vsl69)O|}", "iterator", 47, (Throwable) null);
      stack0.add((SQLNonTransientException) sQLDataException0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      // Undeclared exception!
      IteratorUtils.get((Iterator<SQLNonTransientException>) resettableListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("'t tM$Ht1M#in");
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      stack0.add((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) resettableListIterator0, 1091);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Nweh$A}fC\"!Xz.", (String) null, 1092, intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("1ADB4$+1?;'J:d#");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) null, (Iterator<? extends SQLException>) singletonListIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1092);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must invoke setComparator() to set a comparator first.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 727, 727);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(enumSetArray0, (-818), (-818));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integerArray0[1], 1454, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("f>cvgBPhO$JWxUaDl%F");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("f>cvgBPhO$JWxUaDl%F", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 550, 453);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, (-241));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 748);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResettableIterator<TreeSet<HashSet>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 100, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 936);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iteratorArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedIterator<Stack<SQLIntegrityConstraintViolationException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<Stack<SQLIntegrityConstraintViolationException>>) orderedIterator0, (Transformer<? super Stack<SQLIntegrityConstraintViolationException>, String>) transformer0, "66h9;", "", "Qhr.]");
      assertEquals("Qhr.]", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<Stack<SQLIntegrityConstraintViolationException>>) null, (Transformer<? super Stack<SQLIntegrityConstraintViolationException>, String>) transformer0, "", "", "/HKH=Q+dQ9");
      assertEquals("/HKH=Q+dQ9", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException>[] stackArray0 = (Stack<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Stack.class, 5);
      ResettableListIterator<Stack<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.arrayListIterator(stackArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<SQLIntegrityConstraintViolationException>>) resettableListIterator0, (Transformer<? super Stack<SQLIntegrityConstraintViolationException>, String>) null, "x5", "x5", "x5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, (String) null);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException1, true);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 3);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLSyntaxErrorException0);
      predicateArray0[0] = (Predicate<SQLException>) equalPredicate0;
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) predicateArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, (-1814));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) null, (-527L), (-527L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      SingletonIterator<Stack<SQLIntegrityConstraintViolationException>> singletonIterator0 = new SingletonIterator<Stack<SQLIntegrityConstraintViolationException>>(stack0);
      String string0 = IteratorUtils.toString((Iterator<Stack<SQLIntegrityConstraintViolationException>>) singletonIterator0, (Transformer<? super Stack<SQLIntegrityConstraintViolationException>, String>) transformer0, "", "", "tUtbnOQ1:d");
      assertEquals("[]tUtbnOQ1:d", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(linkedHashSet0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0, (Throwable) null);
      linkedHashSet0.add(dataTruncation0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      IteratorUtils.toString((Iterator<DataTruncation>) loopingIterator0, (Transformer<? super DataTruncation, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MapIterator<Properties, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<Properties>) mapIterator0, (Transformer<? super Properties, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      ResettableIterator<Class<Properties>> resettableIterator0 = IteratorUtils.singletonIterator(class0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<Properties>>) resettableIterator0, (Transformer<? super Class<Properties>, String>) transformer0, "org.apache.commons.collections4.functors.TransformedPredicate", "U5q8TQ@Wr76)", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLFeatureNotSupportedException>(orderedMapIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("[^rZND[|QHj");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Boolean>) abstractOrderedMapIteratorDecorator0, (Transformer<? super Boolean, String>) factoryTransformer0, "[^rZND[|QHj", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, Class<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedMapIterator0, (Transformer<? super SQLNonTransientException, String>) invokerTransformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("%xTB#b&G#M2");
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(linkedList0);
      // Undeclared exception!
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(a[*B6>z", "", 1072, intArray0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) null, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 36
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(4564, true, true, 0, 405);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(nullIsTruePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Predicate<Object>>) singletonListIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) transformerPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[0] = predicate0;
      Predicate<SQLException> predicate1 = OnePredicate.onePredicate((Predicate<? super SQLException>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      SingletonIterator<HashSet<SQLInvalidAuthorizationSpecException>> singletonIterator0 = new SingletonIterator<HashSet<SQLInvalidAuthorizationSpecException>>(hashSet0, false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonIterator0, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLNonTransientExceptionArray0[2]);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertNull(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, Class<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SkippingIterator<SQLNonTransientException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) orderedMapIterator0, 2963L);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.find((Iterator<SQLNonTransientException>) skippingIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertNull(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0, defaultEquator0);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.find((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertNull(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      IteratorUtils.apply((Iterator<SQLException>) resettableListIterator0, (Closure<? super SQLException>) closure0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) closure0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) objectArrayListIterator0, (Closure<? super BatchUpdateException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("p]rA]CG", "WJ6BtrWqeI4jWe,P");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, Class<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) zippingIterator0, (-1177));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) vector0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[4];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(",m8m\"/@w|A~TX/,", " k ", 2585);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("p]rA]CG", intArray0, sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(",m8m\"/@w|A~TX/,", ",m8m\"/@w|A~TX/,", 562, batchUpdateException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Iterable<SQLDataException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Hashtable<SQLTransactionRollbackException, String> hashtable0 = new Hashtable<SQLTransactionRollbackException, String>();
      Enumeration<SQLTransactionRollbackException> enumeration0 = hashtable0.keys();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) priorityQueue0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<SQLException> stack0 = new Stack<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null, (Collection<? super SQLException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException>();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = hashtable0.keys();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!P-%|s!");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Q");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) objectArrayIterator0, 14);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) resettableIterator0, (Closure<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("d@&yN<20-|c");
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) singletonListIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(linkedList0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(transformerPredicate0, transformerPredicate0);
      Iterator<String> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends String>) loopingIterator0, (Predicate<? super String>) orPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Transformer<Object, Transformer<Object, SQLTransactionRollbackException>> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends Transformer<Object, SQLTransactionRollbackException>>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) listIterator0, (Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OrderedMapIterator<HashMap<SQLNonTransientException, SQLTransientException>, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<HashMap<SQLNonTransientException, SQLTransientException>, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<HashMap<SQLNonTransientException, SQLTransientException>, Properties>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashMap<SQLNonTransientException, SQLTransientException>>) abstractOrderedMapIteratorDecorator0, (Transformer<? super HashMap<SQLNonTransientException, SQLTransientException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2442), 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<SQLDataException, EnumSet<Locale.Category>> hashMap0 = new HashMap<SQLDataException, EnumSet<Locale.Category>>();
      EntrySetMapIterator<SQLDataException, EnumSet<Locale.Category>> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, EnumSet<Locale.Category>>(hashMap0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) entrySetMapIterator0, (Iterator<? extends SQLNonTransientException>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, (Class<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<HashSet<StringTokenizer>, EnumSet<Locale.Category>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) null, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)IteratorUtils.get(iterator0, 0);
      assertNull(batchUpdateException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 1, (-5091));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-106));
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLTransientConnectionException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!P-%|s!", batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("!P-%|s!", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null");
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null");
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) listIterator0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, 1L);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) boundedIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MapIterator<String, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 1746, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2266));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator", "Array class must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 1429);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
